<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>4-20-2023</title>
      <link href="/2023/04/20/4-20-2023/"/>
      <url>/2023/04/20/4-20-2023/</url>
      
        <content type="html"><![CDATA[<p>1.半夜背东西的效果</p><div ><img src="\images\dayliy_image\4.20.jpg" alt="drawing" width="200" /></div>2.一边看田静长难句每日一句，忘记的语法看了英语兔，觉得看懂中高阶难度的文章单词重要语法也重要<div ><img src="\images\dayliy_image\4.20.2.png" alt="drawing" width="200" /></div>3.写的越来越慢了，进展到链表（TAT）<div ><img src="\images\dayliy_image\4.20.3.png" alt="drawing" width="200" /></div>4.数学干掉了第三章和知识框架，进展到张宇30讲第三讲函数极限，<p>正在做7种未定式归纳。</p><p>感觉怪怪的：</p><p>首先把所以定义理了一遍（超级费时间），</p><p>然后把张宇和武忠祥的题归纳在了活页本上，感觉做题方法啥的有点乱，一道题不一定用了一个知识点，不过第三遍看张宇的，思路清晰很多。</p><p>这周希望能写1800那上面的题吧（有思路的写）</p><p>5.半夜报复性的玩代号鸢，单词都咩有背完（投降）（认错）（再也不敢了）</p><p>比起看英语文章，背单词的还是比看文章的轻松太多的。</p><p><em><strong>知道了那个考南邮的是哪个师兄了！！！</strong></em></p><p>acm铜的江苏师兄，专业课110 数学98 政治50英语60多 总分320无缘南邮直接上班去了（掰了掰手指头算了算我考的学校，好像我得数学上百，zz70英语80才可以哦（怎么感觉在梦里可以做到呢）（考不上就进流水线（摆）））</p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> casual_talk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>707.设计链表</title>
      <link href="/2023/04/18/707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8/"/>
      <url>/2023/04/18/707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/design-linked-list/">707. 设计链表</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    LinkedNode* next;</span><br><span class="line">    LinkedNode(<span class="type">int</span> val):val(val),next(<span class="literal">NULL</span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//初始化链表</span></span><br><span class="line">MyLinkedList()&#123;</span><br><span class="line"> dummyHead=new LinkedNode(<span class="number">0</span>);<span class="comment">//虚拟头结点</span></span><br><span class="line">    size=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取第index个结点数值，index是从0开始的，第0个结点就是头结点</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(index&gt;(size<span class="number">-1</span>)||index&lt;<span class="number">0</span>)&#123; <span class="comment">//如果index是非法数值返回-1，</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    LinkedNode* cur=dummyHead-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(index)&#123;  <span class="comment">//当index的值不为0的时候</span></span><br><span class="line">        cur=cur-&gt;next; <span class="comment">//continue 到下一个，因为加了个dummy虚拟头节点所以第一个cur-&gt;next就是头结点</span></span><br><span class="line">        index--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cur-&gt;val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">addAtHead</span><span class="params">(<span class="type">int</span> val)</span>&#123;</span><br><span class="line">    LinkedNode* newNode=new LinkedNode(val);<span class="comment">//创建个的结点</span></span><br><span class="line">    newNode-&gt;next=dummyHead-&gt;next;<span class="comment">//让新节点的地址指向当初的头节点</span></span><br><span class="line">    dummyHead-&gt;next=newNode; <span class="comment">//然后再让虚拟头结点的地址指向新的结点</span></span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在链表最后面添加一个结点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">addAtTail</span><span class="params">(<span class="type">int</span> val)</span>&#123;</span><br><span class="line">    LinkedNode* newNode =new LinkedNode(val);<span class="comment">//创建一个结点</span></span><br><span class="line">    LinkedNode* cur=dummyHead;<span class="comment">//设置一个cur来操作dummy</span></span><br><span class="line">    <span class="keyword">while</span>(cur-&gt;next!=<span class="literal">NULL</span>)&#123;<span class="comment">//当当前结点不为空的时候 ，继续往下找</span></span><br><span class="line">        cur=cur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    cur-&gt;next=newNode; <span class="comment">//把最后一个结点的地址变成newnode</span></span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/3.png" alt="1681829938210"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在index之前的地方插入新结点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">addIndex</span><span class="params">(<span class="type">int</span> index,<span class="type">int</span> val)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(index&gt;size) <span class="keyword">return</span> ;<span class="comment">// ilegal</span></span><br><span class="line">    <span class="keyword">if</span>(index&lt;<span class="number">0</span>) index=<span class="number">0</span>;</span><br><span class="line">    LinkedNode* newNode=new LinkedNode(val); <span class="comment">//set new node</span></span><br><span class="line">    LinkedNode* cur=dummyHead;<span class="comment">// set cur </span></span><br><span class="line">    <span class="keyword">while</span>(index)&#123;  <span class="comment">//index!=NULL</span></span><br><span class="line">        cur=cur-&gt;next; <span class="comment">//point to next address</span></span><br><span class="line">        index--;</span><br><span class="line">    &#125;</span><br><span class="line">    newNode-&gt;next=cur-&gt;next; <span class="comment">//把 newNode的 地址 变成cur地址（后面的值放入） </span></span><br><span class="line">    cur-&gt;next=newNode;<span class="comment">//再把newNode放到cur的地址上（前面的值改变）</span></span><br><span class="line">    size++;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除第index个结点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(index&gt;=size||index&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    LinkedNode* cur = dummyHead;</span><br><span class="line">    <span class="keyword">while</span>(index)&#123;</span><br><span class="line">        cur=cur-&gt;next;</span><br><span class="line">        index--;</span><br><span class="line">    &#125;</span><br><span class="line">    LinkedNode* tmp =cur-&gt;next;</span><br><span class="line">    cur-&gt;next=cur-&gt;next-&gt;next;</span><br><span class="line">    delete tmp;</span><br><span class="line">    size--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印链表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printLinkedList</span><span class="params">()</span>&#123;</span><br><span class="line">    LinkedNode* cur =dummyHead;</span><br><span class="line">    <span class="keyword">while</span>(cur-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;cur-&gt;next-&gt;val&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        cur=cur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>203.移除链表元素</title>
      <link href="/2023/04/17/203.%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/"/>
      <url>/2023/04/17/203.%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/remove-linked-list-elements/">203. 移除链表元素</a></p><p><strong>直接使用原来的链表来进行移除节点操作：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ListNode* <span class="title function_">removeElements</span><span class="params">(ListNode* head,<span class="type">int</span> val)</span>&#123;</span><br><span class="line">    <span class="comment">//删除头结点</span></span><br><span class="line">    <span class="keyword">while</span>(head!=<span class="literal">NULL</span>&amp;&amp;head-&gt;val==val)&#123;</span><br><span class="line">ListNode* tmp=head;</span><br><span class="line">        head=head-&gt;next;<span class="comment">//直接让head等于下一个next</span></span><br><span class="line">        delete tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除非头结点</span></span><br><span class="line">    ListNode* cur =head;  <span class="comment">//设置一个cur的东西来操作链表</span></span><br><span class="line">    <span class="keyword">while</span>(cur!=<span class="literal">NULL</span>&amp;&amp;cur-&gt;next!=<span class="literal">NULL</span>)&#123; <span class="comment">//当前不为空，且下一个结点也不为空</span></span><br><span class="line">        <span class="keyword">if</span>(cur-&gt;next-&gt;val==val)&#123; <span class="comment">// 如果当前的下一个结点为val 当前的next地址为下一个结点</span></span><br><span class="line">            ListNode* tep=cur-&gt;next;</span><br><span class="line">            cur-&gt;next=cur-&gt;next-&gt;next; <span class="comment">//val的next变成 val的下一个下一个的next</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cur=cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line">    ListNode* <span class="title function_">removeElements</span><span class="params">(ListNode* head, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="comment">//删除头结点</span></span><br><span class="line">        <span class="keyword">while</span>(head!=<span class="literal">NULL</span>&amp;&amp;head-&gt;val==val)&#123;</span><br><span class="line">            ListNode* tmp=head;</span><br><span class="line">            head=head-&gt;next;</span><br><span class="line">            delete tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//删除非头结点</span></span><br><span class="line">        ListNode *cur=head;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">NULL</span>&amp;&amp;cur-&gt;next!=<span class="literal">NULL</span>)&#123; <span class="comment">//当前不为空，且下一个也不为空</span></span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;next-&gt;val==val)&#123;</span><br><span class="line">                ListNode *tmp=cur-&gt;next;</span><br><span class="line">                cur-&gt;next=cur-&gt;next-&gt;next;</span><br><span class="line">                delete tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123; </span><br><span class="line">                cur=cur-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>设置一个虚拟头结点在进行移除节点操作：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ListNode* <span class="title function_">removeElements</span><span class="params">(ListNode* head,<span class="type">int</span> val)</span>&#123;</span><br><span class="line">    ListNode* dummyHead=new ListNode(<span class="number">0</span>); <span class="comment">//创建一个虚拟节点</span></span><br><span class="line">    dummyHead-&gt;next=head;<span class="comment">//这个结点的地址指向head</span></span><br><span class="line">    ListNode* cur=dummyHead;<span class="comment">//用来操作的作为 当前的为虚拟结点</span></span><br><span class="line">   <span class="keyword">while</span>(cur-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(cur-&gt;next-&gt;val==val)&#123;<span class="comment">// 当前的下一个结点值 等于 val</span></span><br><span class="line">      ListNode* tmp=cur-&gt;next;<span class="comment">// </span></span><br><span class="line">        cur-&gt;next=cur-&gt;next-&gt;next; <span class="comment">//下一个等于下一个结点</span></span><br><span class="line">         delete tmp;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span>&#123;</span><br><span class="line">            cur=cur-&gt;next; <span class="comment">//cur移向下一个结点</span></span><br><span class="line">    &#125;</span><br><span class="line">    head=dummyHead-&gt;next; <span class="comment">//head为虚拟结点的下一个结点</span></span><br><span class="line">    delete dummyHead;<span class="comment">//</span></span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//单链表</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>&#123;</span></span><br><span class="line"><span class="type">int</span> val;<span class="comment">//节点上存储的元素 </span></span><br><span class="line">ListNode *next;  <span class="comment">//指向下一个结点的指针</span></span><br><span class="line">ListNode(<span class="type">int</span> x): val(x)  ,next(<span class="literal">NULL</span>)&#123;&#125;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">//创建链表</span></span><br><span class="line"><span class="comment">//ListNode* createList()&#123;</span></span><br><span class="line"><span class="comment">//ListNode* head=NULL;</span></span><br><span class="line"><span class="comment">//ListNode* tail=NULL;</span></span><br><span class="line"><span class="comment">//int val;</span></span><br><span class="line"><span class="comment">//while(cin&gt;&gt;val)&#123;</span></span><br><span class="line"><span class="comment">//ListNode* node=new ListNode(val);</span></span><br><span class="line"><span class="comment">//if(tail==NULL)&#123;</span></span><br><span class="line"><span class="comment">//head=node;</span></span><br><span class="line"><span class="comment">//tail==node;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else&#123;</span></span><br><span class="line"><span class="comment">//tail-&gt;next=node;</span></span><br><span class="line"><span class="comment">//tail=node;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125; </span></span><br><span class="line">ListNode* <span class="title function_">removeElements</span><span class="params">(ListNode* head,<span class="type">int</span> val)</span>&#123;</span><br><span class="line"></span><br><span class="line">ListNode *dymmy=new ListNode(<span class="number">0</span>);</span><br><span class="line">dymmy-&gt;next=head;</span><br><span class="line">ListNode *cur=dymmy;</span><br><span class="line"><span class="keyword">while</span>(cur-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(cur-&gt;next-&gt;val==val)&#123;</span><br><span class="line">ListNode *tmp=cur-&gt;next;</span><br><span class="line">cur-&gt;next=cur-&gt;next-&gt;next;</span><br><span class="line">delete tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">cur=cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//head=dymmy-&gt;next</span></span><br><span class="line"><span class="keyword">return</span> head=dymmy-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印链表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printList</span><span class="params">(ListNode* head)</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(head)<span class="comment">//head is not empty</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;head-&gt;val&lt;&lt;<span class="string">&quot; &quot;</span>;<span class="comment">//pirnt the value of the head</span></span><br><span class="line">head=head-&gt;next;  <span class="comment">//turn to the next address</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    ListNode* head = new ListNode(<span class="number">1</span>);</span><br><span class="line">    head-&gt;next = new ListNode(<span class="number">2</span>);</span><br><span class="line">    head-&gt;next-&gt;next = new ListNode(<span class="number">6</span>);</span><br><span class="line">    head-&gt;next-&gt;next-&gt;next = new ListNode(<span class="number">3</span>);</span><br><span class="line">    head-&gt;next-&gt;next-&gt;next-&gt;next = new ListNode(<span class="number">4</span>);</span><br><span class="line">    head-&gt;next-&gt;next-&gt;next-&gt;next-&gt;next = new ListNode(<span class="number">5</span>);</span><br><span class="line">    head-&gt;next-&gt;next-&gt;next-&gt;next-&gt;next-&gt;next = new ListNode(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> val = <span class="number">6</span>;</span><br><span class="line">    </span><br><span class="line">ListNode* newHead= removeElements(head,val);</span><br><span class="line">printList(newHead);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表基础</title>
      <link href="/2023/04/17/%E9%93%BE%E8%A1%A8%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/04/17/%E9%93%BE%E8%A1%A8%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="链表的定义"><a href="#链表的定义" class="headerlink" title="链表的定义"></a>链表的定义</h1><p>链表的定义。</p><p>刷leetcode的链表的节点都默认定义好了，直接用就行了</p><p>没有注意到链表的节点是如何定义的。</p><p>C&#x2F;C++的定义链表节点方式，如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单链表</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;  <span class="comment">// 节点上存储的元素</span></span><br><span class="line">    ListNode *next;  <span class="comment">// 指向下一个节点的指针</span></span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">NULL</span>) &#123;&#125;  <span class="comment">// 节点的构造函数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我不定义构造函数行不行，答案是可以的，C++默认生成一个构造函数。</p><p>但是这个构造函数不会初始化任何成员变量，下面我来举两个例子：</p><p>通过自己定义构造函数初始化节点：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ListNode* head = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>使用默认构造函数初始化节点：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ListNode* head = <span class="keyword">new</span> <span class="built_in">ListNode</span>();</span><br><span class="line">head-&gt;val = <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>果不定义构造函数使用默认构造函数的话，在初始化的时候就不能直接给变量赋值！</p><h1 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h1><p>再把链表的特性和数组的特性进行一个对比，如图所示：</p><p><img src="/mages/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E9%93%BE%E8%A1%A8%E5%9F%BA%E7%A1%80.png"></p>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组总结</title>
      <link href="/2023/04/17/%E6%95%B0%E7%BB%84%E6%80%BB%E7%BB%93/"/>
      <url>/2023/04/17/%E6%95%B0%E7%BB%84%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="数组总结"><a href="#数组总结" class="headerlink" title="数组总结"></a>数组总结</h3><p><img src="/images/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84%E6%80%BB%E7%BB%93.png"></p>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>59.螺旋矩阵II</title>
      <link href="/2023/04/17/59.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5II/"/>
      <url>/2023/04/17/59.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5II/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/spiral-matrix-ii/"> 螺旋矩阵 II</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&gt; res(n,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n,<span class="number">0</span>));<span class="comment">//用vector定义一个二维数组</span></span><br><span class="line"><span class="type">int</span> startx=<span class="number">0</span>,starty=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> loop=n/<span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> mid=n/<span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> count=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> offset=<span class="number">1</span>;<span class="comment">//需要控制每一条边遍历的长度，每次循环右边界收缩一位</span></span><br><span class="line"><span class="type">int</span> i,j;</span><br><span class="line"><span class="keyword">while</span>(loop--)&#123;</span><br><span class="line">i=startx;</span><br><span class="line">j=starty;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一行</span></span><br><span class="line"><span class="keyword">for</span>(j=starty;j&lt;n-offset;j++)&#123;</span><br><span class="line">res[startx][j]=count++; <span class="comment">//行不动，j++</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=startx;i&lt;n-offset;i++)&#123;</span><br><span class="line">res[i][j]=count++; <span class="comment">//保持上面的j的值，i++行++</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(;j&gt;starty;j--)&#123;</span><br><span class="line">res[i][j]=count++;<span class="comment">//保持上面的值，j--左边</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(;i&gt;startx;i--)&#123;</span><br><span class="line">res[i][j]=count++;<span class="comment">//保持上面的j的值,i--回到最上面</span></span><br><span class="line">&#125;</span><br><span class="line">startx++;</span><br><span class="line">starty++;</span><br><span class="line">offset+=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//为奇数 单独思考</span></span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">2</span>)&#123;</span><br><span class="line">res[mid][mid]=count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&gt; generateMatrix(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&gt; res(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>)); <span class="comment">// 使用vector定义一个二维数组</span></span><br><span class="line">        <span class="type">int</span> startx = <span class="number">0</span>, starty = <span class="number">0</span>; <span class="comment">// 定义每循环一个圈的起始位置</span></span><br><span class="line">        <span class="type">int</span> loop = n / <span class="number">2</span>; <span class="comment">// 每个圈循环几次，例如n为奇数3，那么loop = 1 只是循环一圈，矩阵中间的值需要单独处理</span></span><br><span class="line">        <span class="type">int</span> mid = n / <span class="number">2</span>; <span class="comment">// 矩阵中间的位置，例如：n为3， 中间的位置就是(1，1)，n为5，中间位置为(2, 2)</span></span><br><span class="line">        <span class="type">int</span> count = <span class="number">1</span>; <span class="comment">// 用来给矩阵中每一个空格赋值</span></span><br><span class="line">        <span class="type">int</span> offset = <span class="number">1</span>; <span class="comment">// 需要控制每一条边遍历的长度，每次循环右边界收缩一位</span></span><br><span class="line">        <span class="type">int</span> i,j;</span><br><span class="line">        <span class="keyword">while</span> (loop --) &#123;</span><br><span class="line">            i = startx;</span><br><span class="line">            j = starty;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 下面开始的四个for就是模拟转了一圈</span></span><br><span class="line">            <span class="comment">// 模拟填充上行从左到右(左闭右开)</span></span><br><span class="line">            <span class="keyword">for</span> (j = starty; j &lt; n - offset; j++) &#123;</span><br><span class="line">                res[startx][j] = count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 模拟填充右列从上到下(左闭右开)</span></span><br><span class="line">            <span class="keyword">for</span> (i = startx; i &lt; n - offset; i++) &#123;</span><br><span class="line">                res[i][j] = count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 模拟填充下行从右到左(左闭右开)</span></span><br><span class="line">            <span class="keyword">for</span> (; j &gt; starty; j--) &#123;</span><br><span class="line">                res[i][j] = count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 模拟填充左列从下到上(左闭右开)</span></span><br><span class="line">            <span class="keyword">for</span> (; i &gt; startx; i--) &#123;</span><br><span class="line">                res[i][j] = count++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 第二圈开始的时候，起始位置要各自加1， 例如：第一圈起始位置是(0, 0)，第二圈起始位置是(1, 1)</span></span><br><span class="line">            startx++;</span><br><span class="line">            starty++;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// offset 控制每一圈里每一条边遍历的长度</span></span><br><span class="line">            offset += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果n为奇数的话，需要单独给矩阵最中间的位置赋值</span></span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span>) &#123;</span><br><span class="line">            res[mid][mid] = count;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&gt; generateMatrix(<span class="type">int</span> n) &#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&gt; res(n,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n,<span class="number">0</span>));   <span class="comment">//vector&lt;int&gt; a(10,1)  初始化 10个1</span></span><br><span class="line">    <span class="type">int</span> loop=n/<span class="number">2</span>; <span class="comment">//转圈次数</span></span><br><span class="line">    <span class="type">int</span> count=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> mid=n/<span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> startx=<span class="number">0</span>,starty=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="type">int</span> offset=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(loop--)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=starty;j&lt;n-offset;j++)&#123;</span><br><span class="line">            <span class="comment">// res[startx][j]=count++;</span></span><br><span class="line">            <span class="comment">//拆解出来就是,这个不是自增</span></span><br><span class="line">            res[startx][j]=count;</span><br><span class="line">            count++;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i=startx;i&lt;n-offset;i++)&#123;</span><br><span class="line">            res[i][j]=count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(;j&gt;starty;j--)&#123;</span><br><span class="line">            res[i][j]=count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(;i&gt;startx;i--)&#123;</span><br><span class="line">            res[i][j]=count++;</span><br><span class="line">        &#125;</span><br><span class="line">        startx++;</span><br><span class="line">        starty++;</span><br><span class="line">        offset++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">2</span>)&#123;</span><br><span class="line">        res[mid][mid]=count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 螺旋矩阵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何打开ipynb文件</title>
      <link href="/2023/04/17/%E5%A6%82%E4%BD%95%E6%89%93%E5%BC%80ipynb%E6%96%87%E4%BB%B6/"/>
      <url>/2023/04/17/%E5%A6%82%E4%BD%95%E6%89%93%E5%BC%80ipynb%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<ol><li>安装 Jupyter Notebook 或 JupyterLab：您可以使用 pip 命令来安装，如下所示：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install jupyterlab</span><br></pre></td></tr></table></figure><ol><li>启动 Jupyter Notebook 或 JupyterLab：在命令行中输入 <code>jupyter notebook</code> 或 <code>jupyter lab</code> 命令，启动 Jupyter Notebook 或 JupyterLab。</li><li>打开 .ipynb 文件：在 Jupyter Notebook 或 JupyterLab 的主界面中，找到包含 .ipynb 文件的目录，点击文件名即可打开。</li><li>运行和编辑 .ipynb 文件：在打开的 .ipynb 文件中，您可以执行代码、编辑文本、添加图像等内容，并且可以在浏览器中进行交互式的运行和编辑。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据可视化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>滑动窗口904. 水果成篮</title>
      <link href="/2023/04/16/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3904.-%E6%B0%B4%E6%9E%9C%E6%88%90%E7%AF%AE/"/>
      <url>/2023/04/16/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3904.-%E6%B0%B4%E6%9E%9C%E6%88%90%E7%AF%AE/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/fruit-into-baskets/">904. 水果成篮</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line">    <span class="type">int</span> <span class="title function_">totalFruit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&amp; fruits)</span> &#123;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>,right=<span class="number">0</span>; </span><br><span class="line">        <span class="type">int</span> n=fruits.size();    </span><br><span class="line">        <span class="type">int</span> max_fruit=INT_MIN;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="type">int</span>,<span class="type">int</span>&gt; basket; <span class="comment">//这个什么map不懂</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i&lt;n;i++)&#123; <span class="comment">//大循环 从0-n-1</span></span><br><span class="line">            <span class="type">int</span>  fruit_num= fruits[i];  <span class="comment">// 记录fruits[i]的数字，当比如fruits[0]=1,fruits[1]=1,那么，basket[1]=1+1=2</span></span><br><span class="line">            basket[fruit_num]++;</span><br><span class="line">            <span class="keyword">while</span>(basket.size()&gt;<span class="number">2</span>)&#123;<span class="comment">//当篮里种类大于2时</span></span><br><span class="line">                <span class="type">int</span> fruit_num=fruits[left];<span class="comment">//记录从fruits[0]=1即basket[1]=2</span></span><br><span class="line">                basket[fruit_num]--;      <span class="comment">//把前面的减掉</span></span><br><span class="line">                <span class="keyword">if</span>(basket[fruit_num]==<span class="number">0</span>)&#123; </span><br><span class="line">                    basket.erase(fruit_num); <span class="comment">//当这种水果为0的时候，就删除这种水果  //删除key就行了</span></span><br><span class="line">                &#125;</span><br><span class="line">                left++;<span class="comment">//继续从当前的位置往右边移动</span></span><br><span class="line">            &#125;</span><br><span class="line">            max_fruit=max_fruit&gt;i-left+<span class="number">1</span>?max_fruit:i-left+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max_fruit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 滑动窗口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中map和unordered_map的用法</title>
      <link href="/2023/04/16/C++%E4%B8%ADmap%E5%92%8Cunordered_map%E7%9A%84%E7%94%A8%E6%B3%95/"/>
      <url>/2023/04/16/C++%E4%B8%ADmap%E5%92%8Cunordered_map%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>map和unordered_map都是c++中可以充当字典（key-value）来用的数据类型，但是其基本实现是不一样的。</p><h2 id="2-map"><a href="#2-map" class="headerlink" title="2.map"></a>2.map</h2><p>对于map的底层原理，是通过红黑树（一种非严格意义上的平衡二叉树）来实现的，因此map内部所有的数据都是有序的，map的查询、插入、删除操作的时间复杂度都是O(logn)。此外，map的key需要定义operator &lt;，对于一般的数据类型已被系统实现，若是用户自定义的数据类型，则要重新定义该操作符。</p><p>map的基本操作如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line">map&lt;string, <span class="type">int</span>&gt; dict;</span><br><span class="line"><span class="comment">// 插入数据的三种方式</span></span><br><span class="line">dict.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string,<span class="type">int</span>&gt;(<span class="string">&quot;apple&quot;</span>,<span class="number">2</span>));</span><br><span class="line">dict.<span class="built_in">insert</span>(map&lt;string, <span class="type">int</span>&gt;::<span class="built_in">value_type</span>(<span class="string">&quot;orange&quot;</span>,<span class="number">3</span>));</span><br><span class="line">dict[<span class="string">&quot;banana&quot;</span>] = <span class="number">6</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 判断是否有元素</span></span><br><span class="line"><span class="keyword">if</span>(dict.<span class="built_in">empty</span>())</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;该字典无元素&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;该字典共有&quot;</span>&lt;&lt;dict.<span class="built_in">size</span>()&lt;&lt;<span class="string">&quot;个元素&quot;</span>&lt;&lt;endl;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line">map&lt;string, <span class="type">int</span>&gt;::iterator iter;</span><br><span class="line"><span class="keyword">for</span>(iter=dict.<span class="built_in">begin</span>();iter!=dict.<span class="built_in">end</span>();iter++)</span><br><span class="line">cout&lt;&lt;iter-&gt;first&lt;&lt;ends&lt;&lt;iter-&gt;second&lt;&lt;endl;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 查找</span></span><br><span class="line"><span class="keyword">if</span>((iter=dict.<span class="built_in">find</span>(<span class="string">&quot;banana&quot;</span>))!=dict.<span class="built_in">end</span>()) <span class="comment">//  返回一个迭代器指向键值为key的元素，如果没找到就返回end()</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;已找到banana,其value为&quot;</span>&lt;&lt;iter-&gt;second&lt;&lt;<span class="string">&quot;.&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;未找到banana.&quot;</span>&lt;&lt;endl;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(dict.<span class="built_in">count</span>(<span class="string">&quot;watermelon&quot;</span>)==<span class="number">0</span>) <span class="comment">// 返回键值等于key的元素的个数</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;watermelon不存在&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;watermelon存在&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">pair&lt;map&lt;string, <span class="type">int</span>&gt;::iterator, map&lt;string, <span class="type">int</span>&gt;::iterator&gt; ret;</span><br><span class="line">ret = dict.<span class="built_in">equal_range</span>(<span class="string">&quot;banana&quot;</span>); <span class="comment">// 查找键值等于 key 的元素区间为[start,end)，指示范围的两个迭代器以 pair 返回</span></span><br><span class="line">cout&lt;&lt;ret.first-&gt;first&lt;&lt;ends&lt;&lt;ret.first-&gt;second&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;ret.second-&gt;first&lt;&lt;ends&lt;&lt;ret.second-&gt;second&lt;&lt;endl;</span><br><span class="line"> </span><br><span class="line">iter = dict.<span class="built_in">lower_bound</span>(<span class="string">&quot;boluo&quot;</span>); <span class="comment">// 返回一个迭代器，指向键值&gt;=key的第一个元素。</span></span><br><span class="line">cout&lt;&lt;iter-&gt;first&lt;&lt;endl;</span><br><span class="line">iter = dict.<span class="built_in">upper_bound</span>(<span class="string">&quot;boluo&quot;</span>); <span class="comment">// 返回一个迭代器，指向值键值&gt;key的第一个元素。</span></span><br><span class="line">cout&lt;&lt;iter-&gt;first&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意如果定义了<code>map&lt;string,int&gt;</code>这个类型，需要在头文件中包含<code>#include&lt;string&gt;</code>，这是因为默认的string是系统的xstring对象，但是没有定义operator&lt;，从而报错。map用到自定义的类型，一定要定义operator&lt;，具体用法如下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">person</span>  </span></span><br><span class="line"><span class="class">&#123;</span>  </span><br><span class="line">    <span class="built_in">string</span> name;  </span><br><span class="line">    <span class="type">int</span> age;  </span><br><span class="line">person(<span class="built_in">string</span> name, <span class="type">int</span> age)  </span><br><span class="line">&#123;  </span><br><span class="line">    this-&gt;name =  name;  </span><br><span class="line">    this-&gt;age = age;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">bool</span> operator &lt; (<span class="type">const</span> person&amp; p) <span class="type">const</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">return</span> this-&gt;age &lt; p.age;   </span><br><span class="line">&#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="built_in">map</span>&lt;person,<span class="type">int</span>&gt; m; </span><br></pre></td></tr></table></figure><h2 id="3-unordered-map"><a href="#3-unordered-map" class="headerlink" title="3.unordered_map"></a>3.unordered_map</h2><p>unordered_map和map类似，都是存储的key-value的值，可以通过key快速索引到value。不同的是unordered_map不会根据key的大小进行排序，存储时是根据key的hash值判断元素是否相同，即unordered_map内部元素是无序的。unordered_map的底层是一个防冗余的哈希表（开链法避免地址冲突）。unordered_map的key需要定义hash_value函数并且重载operator &#x3D;&#x3D;。</p><p>哈希表最大的优点，就是把数据的存储和查找消耗的时间大大降低，时间复杂度为O(1)；而代价仅仅是消耗比较多的内存。哈希表的查询时间虽然是O(1)，但是并不是unordered_map查询时间一定比map短，因为实际情况中还要考虑到数据量，而且unordered_map的hash函数的构造速度也没那么快，所以不能一概而论，应该具体情况具体分析。</p><p>unordered_map的基本操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">unordered_map&lt;string, <span class="type">int</span>&gt;  dict; <span class="comment">// 声明unordered_map对象</span></span><br><span class="line"><span class="comment">// 插入数据的三种方式</span></span><br><span class="line">dict.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string,<span class="type">int</span>&gt;(<span class="string">&quot;apple&quot;</span>,<span class="number">2</span>));</span><br><span class="line">dict.<span class="built_in">insert</span>(unordered_map&lt;string, <span class="type">int</span>&gt;::<span class="built_in">value_type</span>(<span class="string">&quot;orange&quot;</span>,<span class="number">3</span>));</span><br><span class="line">dict[<span class="string">&quot;banana&quot;</span>] = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否有元素</span></span><br><span class="line"><span class="keyword">if</span>(dict.<span class="built_in">empty</span>())</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;该字典无元素&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;该字典共有&quot;</span>&lt;&lt;dict.<span class="built_in">size</span>()&lt;&lt;<span class="string">&quot;个元素&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line">unordered_map&lt;string, <span class="type">int</span>&gt;::iterator iter;</span><br><span class="line"><span class="keyword">for</span>(iter=dict.<span class="built_in">begin</span>();iter!=dict.<span class="built_in">end</span>();iter++)</span><br><span class="line">cout&lt;&lt;iter-&gt;first&lt;&lt;ends&lt;&lt;iter-&gt;second&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找</span></span><br><span class="line"><span class="keyword">if</span>(dict.<span class="built_in">count</span>(<span class="string">&quot;boluo&quot;</span>)==<span class="number">0</span>)</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;can&#x27;t find boluo!&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;find boluo!&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((iter=dict.<span class="built_in">find</span>(<span class="string">&quot;banana&quot;</span>))!=dict.<span class="built_in">end</span>())</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;banana=&quot;</span>&lt;&lt;iter-&gt;second&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;can&#x27;t find boluo!&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>unordered_map用到自定义的类型，需要对key定义hash_value函数并且重载operator &#x3D;&#x3D;，具体用法请参考文献3（有空再来补个示例）。</p><p>参考文献</p><ol><li><a href="http://www.cnblogs.com/NeilZhang/p/5724996.html">C++11 新特性： unordered_map 与 map 的对比</a></li></ol><p>2.<a href="https://blog.csdn.net/u011475134/article/details/75810085">C++ STL之map与unordered_map</a></p><p>3.<a href="https://blog.csdn.net/happykocola/article/details/74188452">std::unordered_map（提供自己的Hash函数和等价准则）</a></p><p>4.<a href="https://blog.csdn.net/jingyi130705008/article/details/82633778">https://blog.csdn.net/jingyi130705008/article/details/82633778</a></p>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> map和unordered_map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于最大值最小值的定义</title>
      <link href="/2023/04/15/%E5%85%B3%E4%BA%8E%E6%9C%80%E5%A4%A7%E5%80%BC%E6%9C%80%E5%B0%8F%E5%80%BC%E7%9A%84%E5%AE%9A%E4%B9%89/"/>
      <url>/2023/04/15/%E5%85%B3%E4%BA%8E%E6%9C%80%E5%A4%A7%E5%80%BC%E6%9C%80%E5%B0%8F%E5%80%BC%E7%9A%84%E5%AE%9A%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<h4 id="最大值"><a href="#最大值" class="headerlink" title="最大值"></a>最大值</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int result = INT32_MAX;</span><br></pre></td></tr></table></figure><p>最近在刷Leetcode的一些题的时候，发现经常会使用到最大值。<br>Xcode告诉我这个值在limits.h中<br>老版本的limit.h可能还会有NC++</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define INT_MAX   2147483647</span><br></pre></td></tr></table></figure><p>但是现在新的版本已经是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define INT_MAX   __INT_MAX__</span><br></pre></td></tr></table></figure><p>同样的 INT_MIN 、 LONG_MAX 等等数值都会有相应的定义。</p><h4 id="最小值"><a href="#最小值" class="headerlink" title="最小值"></a>最小值</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int result = INT32_MIN </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INT32_MAX</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++最大值 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>209. 长度最小的子数组-滑动窗口</title>
      <link href="/2023/04/14/209.-%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
      <url>/2023/04/14/209.-%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/">209. 长度最小的子数组</a></p><p>暴力o(n^2)超时呵呵呵，不是能做出来就好了吗啊吧啊吧。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line">    <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&amp; nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> sum;</span><br><span class="line">        <span class="type">int</span> min=<span class="number">100000</span>;</span><br><span class="line">        <span class="type">int</span> count;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)&#123;</span><br><span class="line">            sum=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j = i;j&lt;nums.size();j++)&#123;</span><br><span class="line">                    sum+=nums[j];</span><br><span class="line">                    <span class="keyword">if</span>(sum&gt;=target)&#123;</span><br><span class="line">                        count=j-i+<span class="number">1</span>;</span><br><span class="line">                        min=min&lt;count?min:count;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(min&gt;nums.size()) min=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>滑动窗口</p><p>思路是先让</p><p><code>sum+nums[j]</code></p><p>当<code>sum&gt;=target</code>的时候</p><p>算出子数组长度subL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```while```循环```nums[i++]```一直减到它```&lt;target```退出```while```</span><br><span class="line"></span><br><span class="line">用result记录min的subL</span><br><span class="line"></span><br><span class="line">然后再次大循环从nums[j+1]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```c</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int minSubArrayLen(int target, vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">    int i=0;</span><br><span class="line">    int subL=0;</span><br><span class="line">    int sum=0;</span><br><span class="line">    int result=INT_MAX;</span><br><span class="line">    for(int j =0;j&lt;nums.size();j++)&#123;</span><br><span class="line">        sum+=nums[j];</span><br><span class="line">        while(sum&gt;=target)&#123;</span><br><span class="line">            subL=j-i+1;</span><br><span class="line">            sum-=nums[i];</span><br><span class="line">            result=min(result,subL);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return result==INT_MAX ? 0 : result;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如何理解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return result==INT_MAX ? 0 : result;</span><br></pre></td></tr></table></figure><p>当result&#x3D;&#x3D;INT_MAX时候</p><p>是 返回0</p><p>否 返回result </p><p>如何理解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = result &lt; subLength ? result : subLength;</span><br></pre></td></tr></table></figure><p>当result&lt;subL的时候</p><p>是 返回result</p><p>否 返回subL</p>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 滑动窗口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双指针法-977. 有序数组的平方</title>
      <link href="/2023/04/14/%E5%8F%8C%E6%8C%87%E9%92%88-977%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9/"/>
      <url>/2023/04/14/%E5%8F%8C%E6%8C%87%E9%92%88-977%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/">977. 有序数组的平方</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; <span class="title function_">sortedSquares</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&amp; nums)</span> &#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; <span class="title function_">result</span><span class="params">(nums.size(),<span class="number">0</span>)</span>;</span><br><span class="line">    <span class="type">int</span> k=nums.size()<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=nums.size()<span class="number">-1</span>;i&lt;=j;)&#123;  <span class="comment">// 注意i&lt;=j</span></span><br><span class="line">        <span class="keyword">if</span>(nums[i]*nums[i]&lt;nums[j]*nums[j])&#123;</span><br><span class="line">            result[k--]=nums[j]*nums[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(nums[i]*nums[i]&gt;=nums[j]*nums[j])&#123;</span><br><span class="line">            result[k--]=nums[i]*nums[i];</span><br><span class="line">            i++;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双指针法---844.比较含退格的字符串</title>
      <link href="/2023/04/13/%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95---844.%E6%AF%94%E8%BE%83%E5%90%AB%E9%80%80%E6%A0%BC%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2023/04/13/%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95---844.%E6%AF%94%E8%BE%83%E5%90%AB%E9%80%80%E6%A0%BC%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h4 id="844-比较含退格的字符串"><a href="#844-比较含退格的字符串" class="headerlink" title="844. 比较含退格的字符串"></a><a href="https://leetcode.cn/problems/backspace-string-compare/">844. 比较含退格的字符串</a></h4><p>我没看懂怎么用双指针，用栈吧（阿巴阿巴阿巴，傻子流口水）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line">    <span class="type">bool</span> <span class="title function_">backspaceCompare</span><span class="params">(<span class="built_in">string</span> S, <span class="built_in">string</span> T)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> build(S) == build(T);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> <span class="title function_">build</span><span class="params">(<span class="built_in">string</span> str)</span> &#123;</span><br><span class="line">        <span class="built_in">string</span> ret;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> ch : str) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ch != <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">                ret.push_back(ch);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!ret.empty()) &#123;</span><br><span class="line">                ret.pop_back();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双指针法---283. 移动零</title>
      <link href="/2023/04/13/%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95---283.-%E7%A7%BB%E5%8A%A8%E9%9B%B6/"/>
      <url>/2023/04/13/%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95---283.-%E7%A7%BB%E5%8A%A8%E9%9B%B6/</url>
      
        <content type="html"><![CDATA[<h4 id="283-移动零"><a href="#283-移动零" class="headerlink" title="283. 移动零"></a><a href="https://leetcode.cn/problems/move-zeroes/">283. 移动零</a></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">moveZeroes</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize)</span>&#123;</span><br><span class="line">        <span class="type">int</span> target=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> slow=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> fast;</span><br><span class="line">        <span class="keyword">for</span>(fast=<span class="number">0</span>;fast&lt;numsSize;fast++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast]!=target)&#123;</span><br><span class="line">                nums[slow]=nums[fast];</span><br><span class="line">                slow++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>(i=slow;i&lt;numsSize;i++)&#123;</span><br><span class="line">            nums[i]=target;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在后面一个for那边卡了，不敢写（因为用了两个for）时间复杂度大不敢了</p>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双指针法---26. 删除有序数组中的重复项</title>
      <link href="/2023/04/12/%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95---26.-%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/"/>
      <url>/2023/04/12/%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95---26.-%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/">26. 删除有序数组中的重复项</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">removeDuplicates</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize)</span>&#123;</span><br><span class="line">    <span class="type">int</span> slow=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> fast;</span><br><span class="line">    <span class="keyword">for</span>(fast=<span class="number">0</span>;fast&lt;numsSize;fast++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[slow]!=nums[fast])&#123;</span><br><span class="line">            slow++;</span><br><span class="line">            nums[slow]=nums[fast];           </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/1.gif" alt="IMG_0057"></p>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双指针法---27.移除元素</title>
      <link href="/2023/04/12/%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95---%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/"/>
      <url>/2023/04/12/%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95---%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/remove-element/">27. 移除元素</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> val)</span>&#123;</span><br><span class="line">        <span class="type">int</span> slow=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>( <span class="type">int</span> fast=<span class="number">0</span>;fast&lt;numsSize;fast++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast]!=val)&#123;</span><br><span class="line">                nums[slow]=nums[fast];</span><br><span class="line">                slow++;</span><br><span class="line">            &#125;</span><br><span class="line">   </span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反而比暴力慢</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> nums2[<span class="number">100</span>];</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>( i =<span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i]==val)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>;j &lt; numsSize;j++)&#123;</span><br><span class="line">                    nums[j<span class="number">-1</span>]=nums[j];</span><br><span class="line">                &#125; </span><br><span class="line">                         numsSize--;</span><br><span class="line">            i--;</span><br><span class="line">            &#125;</span><br><span class="line">   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> numsSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双指针法</title>
      <link href="/2023/04/12/%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95/"/>
      <url>/2023/04/12/%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/27.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0-%E6%9A%B4%E5%8A%9B%E8%A7%A3%E6%B3%95.gif" alt="IMG_0057"></p><p>双指针法（快慢指针法）： <strong>通过一个快指针和慢指针在一个for循环下完成两个for循环的工作。</strong></p><p>定义快慢指针</p><ul><li>快指针：寻找新数组的元素 ，新数组就是不含有目标元素的数组</li><li>慢指针：指向更新 新数组下标的位置</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">slow=<span class="number">0</span>;</span><br><span class="line">val=<span class="number">3</span></span><br><span class="line">nums[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> fast=<span class="number">0</span>;fast&lt;size;fast++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums[fast]!=val)&#123; <span class="comment">//当【fast】的不等于val的值的时候</span></span><br><span class="line">    nums[slow]=nums[fast];    <span class="comment">// slow是下标  fast是数组元素</span></span><br><span class="line">        slow++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> slow;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 相向双指针方法，基于元素顺序可以改变的题目描述改变了元素相对位置，确保了移动最少元素</span></span><br><span class="line"><span class="comment">* 时间复杂度：O(n)</span></span><br><span class="line"><span class="comment">* 空间复杂度：O(1)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line">    <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">int</span> leftIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> rightIndex = nums.size() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (leftIndex &lt;= rightIndex) &#123;</span><br><span class="line">            <span class="comment">// 找左边等于val的元素</span></span><br><span class="line">            <span class="keyword">while</span> (leftIndex &lt;= rightIndex &amp;&amp; nums[leftIndex] == val)&#123;</span><br><span class="line">                ++leftIndex;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 找右边不等于val的元素</span></span><br><span class="line">            <span class="keyword">while</span> (leftIndex &lt;= rightIndex &amp;&amp; nums[rightIndex] != val) &#123;</span><br><span class="line">                -- rightIndex;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将右边不等于val的元素覆盖左边等于val的元素</span></span><br><span class="line">            <span class="keyword">if</span> (leftIndex &lt; rightIndex) &#123;</span><br><span class="line">                nums[leftIndex++] = nums[rightIndex--];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> leftIndex;   <span class="comment">// leftIndex一定指向了最终数组末尾的下一个元素</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vector容器删除元素的几种简单方法</title>
      <link href="/2023/04/12/vector%E5%AE%B9%E5%99%A8%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0%E7%9A%84%E5%87%A0%E7%A7%8D%E7%AE%80%E5%8D%95%E6%96%B9%E6%B3%95/"/>
      <url>/2023/04/12/vector%E5%AE%B9%E5%99%A8%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0%E7%9A%84%E5%87%A0%E7%A7%8D%E7%AE%80%E5%8D%95%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h4 id="一、直接删除法"><a href="#一、直接删除法" class="headerlink" title="一、直接删除法"></a>一、直接删除法</h4><h5 id="（1）使用-vector库函数“erase”删除，使用erase函数后容器size自动-1"><a href="#（1）使用-vector库函数“erase”删除，使用erase函数后容器size自动-1" class="headerlink" title="（1）使用 vector库函数“erase”删除，使用erase函数后容器size自动-1"></a>（1）使用 vector库函数“erase”删除，使用erase函数后容器size自动-1</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> detarget)</span> &#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(nums[i] == detarget)&#123;</span><br><span class="line">               nums.erase(nums.begin() + i); </span><br><span class="line">               i--; <span class="comment">//由于容器size-1，还按原来的i的话相当于自动右移一位而漏掉一个元素</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> nums.size();      </span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> detarget)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(nums[i] == detarget)&#123;</span><br><span class="line">nums.erase(nums.begin() + i);</span><br><span class="line">i--; <span class="comment">//由于容器size-1，还按原``来的i的话相当于自动右移一位而漏掉一个元素</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> nums.size();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; nums ;</span><br><span class="line">    nums.push_back(<span class="number">3</span>);</span><br><span class="line">nums.push_back(<span class="number">2</span>);</span><br><span class="line">nums.push_back(<span class="number">2</span>);</span><br><span class="line">nums.push_back(<span class="number">3</span>);</span><br><span class="line">    <span class="type">int</span> detarget = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> len = removeElement(nums, detarget);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;After removing &quot;</span> &lt;&lt; detarget &lt;&lt; <span class="string">&quot;, the length of nums is &quot;</span> &lt;&lt; len &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; nums[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="（2）使用-vector库函数“swap和pop-back-”-由于pop-back删除的是最后一个元素，所以先移位再删除"><a href="#（2）使用-vector库函数“swap和pop-back-”-由于pop-back删除的是最后一个元素，所以先移位再删除" class="headerlink" title="（2）使用 vector库函数“swap和pop_back()”,由于pop_back删除的是最后一个元素，所以先移位再删除"></a>（2）使用 vector库函数“swap和pop_back()”,由于pop_back删除的是最后一个元素，所以先移位再删除</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> detarget)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] == detarget)&#123;   </span><br><span class="line">                swap(nums[i], nums[nums.size() - <span class="number">1</span>]); <span class="comment">//将要删除的元素交换到最后</span></span><br><span class="line">                nums.pop_back(); </span><br><span class="line">                i--; <span class="comment">//这里的i--与上面的作用一样</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums.size();      </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="二、遍历覆盖法"><a href="#二、遍历覆盖法" class="headerlink" title="二、遍历覆盖法"></a>二、遍历覆盖法</h4><p>如果从数组的角度理解，因为数组存储的内容在地址上是连续的，要移除目标元素，就没有库函数可以使用，那就需要对其他元素进行处理，进行覆盖和前移，比较暴力的思路是发现目标元素后，将后面的所有元素都前移覆盖原来的元素，这种方法需要两个for循环，时间复杂度为O(n2),这里不详细讲这种写法。<br>从覆盖的角度思考，我们可以通过一次遍历把非目标元素全部前移覆盖到前半部片</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> detarget)</span> &#123;</span><br><span class="line">         <span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> x : nums)  <span class="comment">//遍历全部元素</span></span><br><span class="line">            <span class="keyword">if</span>(x != detarget)  nums[size++] = x;<span class="comment">//如果不是要删除的目标元素，把它前移覆盖到前半部分</span></span><br><span class="line">        <span class="keyword">return</span> size;  <span class="comment">//这里的size即为删除后的容量大小</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//暴力</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> val)</span>&#123;</span><br><span class="line">        <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> nums2[<span class="number">100</span>];</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>( i =<span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i]==val)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>;j &lt; numsSize;j++)&#123;</span><br><span class="line">                    nums[j<span class="number">-1</span>]=nums[j];</span><br><span class="line">                &#125; </span><br><span class="line">            numsSize--;</span><br><span class="line">            i--;</span><br><span class="line">            &#125;</span><br><span class="line">   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> numsSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三、相向双指针法"><a href="#三、相向双指针法" class="headerlink" title="三、相向双指针法"></a>三、相向双指针法</h4><h5 id="1-使用vector库函数swap，通过有两个指针和一个for循环将所有元素分为两个部分"><a href="#1-使用vector库函数swap，通过有两个指针和一个for循环将所有元素分为两个部分" class="headerlink" title="(1)使用vector库函数swap，通过有两个指针和一个for循环将所有元素分为两个部分,"></a>(1)使用vector库函数swap，通过有两个指针和一个for循环将所有元素分为两个部分,</h5><p>左端的指针（快指针）控制前半部分的边界，swap后前半部分全部是要保留的元素<br>右端的指针（慢指针）控制后半部分的边界，swap后后半部分全部是要删除的元素</p><p>&#x2F;&#x2F;时间复杂度：O（n)<br>&#x2F;&#x2F;空间复杂度：O（1）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> detarget)</span> &#123;</span><br><span class="line">       <span class="type">int</span> j = nums.size() - <span class="number">1</span>; </span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= j; i++) &#123;</span><br><span class="line">           <span class="keyword">if</span> (nums[i] == detarget) &#123;  </span><br><span class="line">               swap(nums[i--], nums[j--]); <span class="comment">//注意这里的i--，j--，代表先交换再移动，而不是先移动再交换</span></span><br><span class="line">               <span class="comment">//i--的原因：如果发生交换的两个元素全是要删除的目标元素，这样不会把换过来的漏删</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> j + <span class="number">1</span>; <span class="comment">//j+1就是删除完的size大小</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>ps：上面几种方法只给出了核心算法的代码，具体问题做出相应改动即可</p>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vector容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-12-2023</title>
      <link href="/2023/04/12/4-12-2023/"/>
      <url>/2023/04/12/4-12-2023/</url>
      
        <content type="html"><![CDATA[<ol><li></li></ol><div ><img src="\images\dayliy_image\4.12.jpg" alt="drawing" width="200" /></div><p>2.打卡<img src="/images/dayliy_image/leetcode1.png" alt="1681285904280"></p><p>3.洛谷先mark一下之前的题目数量，vjudge就不去刷了。</p><p><img src="/images/dayliy_image/luogu1.png" alt="1681286036053"></p><p>Conclusion:一天2h打题目太少了</p><p>4.数学放缓(等张宇来了过第三遍一二章（发疯）理出思维导图)</p><p>改良计划:</p><p>①下午没课就看数学，看到5.吃饭，吃完回来继续数学，到7.30。</p><p>②看英语文章1h（尝试了一下，有难度的文章1h够呛）</p><p>③刷题到11.00</p><p>④回去床上背单词（当然课上不困最好课上干掉）</p><p>⑤最近沉迷策门有所懈怠（双手合十）（低头认错）</p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> casual_talk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>memset函数</title>
      <link href="/2023/04/11/memset%E5%87%BD%E6%95%B0/"/>
      <url>/2023/04/11/memset%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>memset简介<br>memset是一个初始化函数，作用是将某一块内存中的全部设置为指定的值。</p><p><code>void *memset(void *s, int c, size_t n); </code></p><p>s指向要填充的内存块。<br>c是要被设置的值。<br>n是要被设置该值的字符数。<br>返回类型是一个指向存储区s的指针。</p><hr><p>需要说明的几个地方</p><h5 id="一、不能任意赋值"><a href="#一、不能任意赋值" class="headerlink" title="一、不能任意赋值"></a>一、不能任意赋值</h5><p>memset函数是按照字节对内存块进行初始化，所以不能用它将int数组出初始化为0和-1之外的其他值（除非该值高字节和低字节相同）。<br>其实c的实际范围应该在0~255，因为memset函数只能取c的后八位给所输入范围的每个字节。也就是说无论c多大只有后八位二进制是有效的。</p><p>对于int a[4];<br>memset(a, -1, sizeof(a)) 与 memset(a, 511, sizeof(a)) 所赋值的结果一样都为-1：<br>因为 -1 的二进制码为（11111111 11111111 11111111 11111111）；511 的二进制码为（00000000 00000000 00000001 11111111）；<br>后八位均为（11111111），所以数组中的每个字节都被赋值为（11111111）。<br>注意int占四个字节，例如a[0]的四个字节都被赋值为（11111111），那么a[0]（11111111 11111111 11111111 11111111），即a[0] &#x3D; -1。</p><h5 id="二、注意所要赋值的数组的元素类型"><a href="#二、注意所要赋值的数组的元素类型" class="headerlink" title="二、注意所要赋值的数组的元素类型"></a>二、注意所要赋值的数组的元素类型</h5><p>先来看两个例子：<br>例一：对char类型的数组a初始化，设置元素全为’1’</p><figure class="highlight plaintext"><figcaption><span>main()&#123;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    char a[4];</span><br><span class="line">    memset(a,&#x27;1&#x27;,4);</span><br><span class="line">    for(int i=0; i&lt;4; i++)&#123;</span><br><span class="line">        cout&lt;&lt;a[i]&lt;&lt;&quot; &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例二：对int类型的数组a初始化，设置元素值全为1</p><figure class="highlight plaintext"><figcaption><span>main()&#123;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    int a[4];</span><br><span class="line">    memset(a,1,sizeof(a));</span><br><span class="line">    for(int i=0; i&lt;4; i++)&#123;</span><br><span class="line">        cout&lt;&lt;a[i]&lt;&lt;&quot; &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="1、首先要说明的第一点"><a href="#1、首先要说明的第一点" class="headerlink" title="1、首先要说明的第一点"></a>1、首先要说明的第一点</h6><p> 对于第二个程序，数组a是整型的，一般int所占内存空间为4个字节，所以在使用memset赋值时，下面的语句是错误的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int a[4];</span><br><span class="line">memset(a,1,4);</span><br></pre></td></tr></table></figure><p>由于memset函数是以字节为单位进行赋值的，所以上述代码是为数组a的前4个字节进行赋值，那么所得到的执行结果就只能是：</p><p>正确的memset语句应为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">memset(a,1,16); //int所占内存为4字节的情况</span><br><span class="line">memset(a,1,sizeof(a));</span><br></pre></td></tr></table></figure><p>至于为什么不是预期得到的1，将在下面的第二点进行说明。</p><p>当然，不同的机器上int的大小可能不同，所以最好用sizeof()函数。</p><h6 id="2、为什么第一个程序可以正确赋值1而第二个不可以？"><a href="#2、为什么第一个程序可以正确赋值1而第二个不可以？" class="headerlink" title="2、为什么第一个程序可以正确赋值1而第二个不可以？"></a>2、为什么第一个程序可以正确赋值1而第二个不可以？</h6><p>这就又回到了刚刚说的第一个问题，memset函数中只能取c的后八位赋给每个字节。</p><p>第一个程序中，数组a是字符型的，字符型占据的内存大小就是1Byte，而memset函数也是以字节为单位进行赋值的，所以输出正确。<br>第二个程序中，数组a是整型的，整型占据的内存大小为4Byte，而memset函数还是按照字节为单位进行赋值，将1（00000001）赋给每一个字节。那么对于a[0]来说，其值为(00000001 00000001 00000001 00000001），即十进制的16843009。</p><p>关于所要赋值的字符数的写法<br>先来看一个示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void fun1(int a[])&#123;</span><br><span class="line">    memset(a,-1,sizeof(a)); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    int a[6];</span><br><span class="line">    fun1(a);</span><br><span class="line">    for(int i=0; i&lt;6; i++)&#123;</span><br><span class="line">        cout&lt;&lt;a[i]&lt;&lt;&quot; &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">当数组作为参数传递时，其传递的实际上是一个指针，这个指针指向数组的首地址，如果用sizeof(a)函数得到的只是指针的长度，而不是数组的长度。</span><br></pre></td></tr></table></figure><p>解决方案：<br>在函数中加入数组长度参数，在传递前先获取数组长度，然后将数组长度作为参数传递进去。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void fun1(int a[], int len)&#123;</span><br><span class="line">    memset(a,-1,len); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    int a[6];</span><br><span class="line">    int len = sizeof(a);</span><br><span class="line">    fun1(a,len);</span><br><span class="line">    for(int i=0; i&lt;6; i++)&#123;</span><br><span class="line">        cout&lt;&lt;a[i]&lt;&lt;&quot; &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体用法实例<br>初始化数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">char str[100];</span><br><span class="line">memset(str,0,100);</span><br><span class="line">清空结构体类型的变量</span><br><span class="line">typedef struct Stu&#123;</span><br><span class="line">char name[20];</span><br><span class="line">int cno;</span><br><span class="line">&#125;Stu;</span><br><span class="line">Stu stu1; </span><br><span class="line">memset(&amp;stu1, 0 ,sizeof(Stu));</span><br><span class="line">Stu stu2[10]; //数组</span><br><span class="line">memset(stu2, 0, sizeof(Stu)*10);</span><br></pre></td></tr></table></figure><p>此外，如果结构体中有数组的话还是需要对数组单独进行初始化处理的。</p>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> memset函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>367. 有效的完全平方数</title>
      <link href="/2023/04/11/367.-%E6%9C%89%E6%95%88%E7%9A%84%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0/"/>
      <url>/2023/04/11/367.-%E6%9C%89%E6%95%88%E7%9A%84%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/valid-perfect-square/">367. 有效的完全平方数</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">isPerfectSquare</span><span class="params">(<span class="type">int</span> num)</span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> left=<span class="number">1</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> right=num;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> middle;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> temp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">        middle=(left+right)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(middle*middle&lt;=num)&#123;</span><br><span class="line">            <span class="keyword">if</span>(middle*middle==num)&#123;</span><br><span class="line">                temp=middle;</span><br><span class="line">            &#125;</span><br><span class="line">            left=middle+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(middle*middle&gt;num)&#123;</span><br><span class="line">            right=middle<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(temp==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>69.x的平方根</title>
      <link href="/2023/04/11/69.x%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9/"/>
      <url>/2023/04/11/69.x%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/sqrtx/">69. x 的平方根 </a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">mySqrt</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> temp;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> left = <span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> right = x;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> middle;</span><br><span class="line">        <span class="keyword">if</span> (x==<span class="number">0</span>)temp=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (x==<span class="number">1</span>) temp=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x!=<span class="number">0</span>&amp;&amp;x!=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            middle=(left+right)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(middle&lt;=x/middle)&#123;</span><br><span class="line">                temp=middle;</span><br><span class="line">                left=middle+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(middle&gt;x/middle)&#123;</span><br><span class="line">                right=middle<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> temp;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="comment">//vector&lt;int&gt; x; </span></span><br><span class="line"><span class="comment">//for(int i=0;i&lt;n;i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//x.push_back(i);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="type">int</span> left=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> right=n;</span><br><span class="line"><span class="type">int</span> middle;</span><br><span class="line"><span class="comment">//int target=2;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">middle=(left+right)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(middle&gt;n/middle)&#123;</span><br><span class="line">right=middle<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(middle&lt;=n/middle)&#123;  <span class="comment">//middle^2&lt;n </span></span><br><span class="line">temp=middle;    <span class="comment">//因为2^2&lt;8&lt;2^3  所以直接取这边的middle </span></span><br><span class="line">left=middle+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    cout&lt;&lt;temp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>35. 搜索插入位置</title>
      <link href="/2023/04/10/35.-%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/"/>
      <url>/2023/04/10/35.-%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/search-insert-position/">35. 搜索插入位置</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line">    <span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">            <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> right=nums.size()<span class="number">-1</span>;</span><br><span class="line">            <span class="type">int</span> middle;</span><br><span class="line">            <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">                middle=(left+right)/<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span> (nums[middle]&gt;target)&#123;</span><br><span class="line">                    right=middle<span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (nums[middle]&lt;target)&#123;</span><br><span class="line">                    left=middle+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> middle;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> right+<span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>binary_search &amp;lower_bound &amp;upper_bound</title>
      <link href="/2023/04/10/binary_search-&amp;lower_bound-&amp;upper_bound/"/>
      <url>/2023/04/10/binary_search-&amp;lower_bound-&amp;upper_bound/</url>
      
        <content type="html"><![CDATA[<p>使用方法：</p><h1 id="1-binary-search-查找某个元素是否出现"><a href="#1-binary-search-查找某个元素是否出现" class="headerlink" title="1.binary_search:查找某个元素是否出现"></a>1.binary_search:查找某个元素是否出现</h1><h5 id="a-函数模板："><a href="#a-函数模板：" class="headerlink" title="a.函数模板："></a>a.函数模板：</h5><p>binary_search(arr[],arr[]+size,indx)</p><h5 id="b-参数说明："><a href="#b-参数说明：" class="headerlink" title="b.参数说明："></a>b.参数说明：</h5><p>arr[]:数组首地址<br>size:数组元素个数<br>indx：需要查找的值</p><h5 id="c-函数功能："><a href="#c-函数功能：" class="headerlink" title="c.函数功能："></a>c.函数功能：</h5><p>在数组中以二分法检索的方式查找，若在数组中查找到indx元素则真，若查找不到则返回值是假</p><h1 id="2-lower-bound-查找第一个大于或等于某个元素的位置"><a href="#2-lower-bound-查找第一个大于或等于某个元素的位置" class="headerlink" title="2.lower_bound:查找第一个大于或等于某个元素的位置"></a>2.lower_bound:查找第一个大于或等于某个元素的位置</h1><h5 id="a-函数模板：-1"><a href="#a-函数模板：-1" class="headerlink" title="a.函数模板："></a>a.函数模板：</h5><p>lower_bound(arr[],arr[]+size,indx)</p><h5 id="b-参数说明：-1"><a href="#b-参数说明：-1" class="headerlink" title="b.参数说明："></a>b.参数说明：</h5><p>arr[] : 数组首地址<br>size : 数组元素的个数<br>indx : 需要查找的值</p><h5 id="c-函数功能：-1"><a href="#c-函数功能：-1" class="headerlink" title="c.函数功能："></a>c.函数功能：</h5><p>函数lower_bound()在first和last的前闭后开区间进行二分查找，返回大于或等于val的第一个元素的位置，如果所有元素都小于val，则返回last的位置。<br>举例：<br>一个数组number序列为：4,10,11,30,69,70,96,100.设要插入数字3,9,111.pos为要插入的位置的下标，则<br>　<em>注意因为返回值是一个指针，所以减去数组的指针就是int变量了</em><br>　　pos &#x3D; lower_bound( number, number + 8, 3) - number，pos &#x3D; 0.即number数组的下标为0的位置。<br>　　pos &#x3D; lower_bound( number, number + 8, 9) - number， pos &#x3D; 1，即number数组的下标为1的位置（即10所在的位置）。<br>　　pos &#x3D; lower_bound( number, number + 8, 111) - number， pos &#x3D; 8，即number数组的下标为8的位置（但下标上限为7，所以返回最后一个元素的下一个元素）。<br>e.注意：函数lower_bound()在first和last中的前闭后开区间进行二分查找，返回大于或等于val的第一个元素位置。如果所有元素都小于val，则返回last的位置，且last的位置是越界的！</p><p>返回查找元素的第一个可安插位置，也就是“元素值&gt;&#x3D;查找值”的第一个元素的位置</p><h1 id="3-upper-bound-查找第一个大于某个元素的位置"><a href="#3-upper-bound-查找第一个大于某个元素的位置" class="headerlink" title="3.upper_bound : 查找第一个大于某个元素的位置"></a>3.upper_bound : 查找第一个大于某个元素的位置</h1><h5 id="a-函数模板-upper-bound-arr-arr-size-indx"><a href="#a-函数模板-upper-bound-arr-arr-size-indx" class="headerlink" title="a. 函数模板 : upper_bound(arr[] , arr[]+size , indx)"></a>a. 函数模板 : upper_bound(arr[] , arr[]+size , indx)</h5><h5 id="b-参数说明：-2"><a href="#b-参数说明：-2" class="headerlink" title="b. 参数说明："></a>b. 参数说明：</h5><p>arr[] : 数组首地址<br>size : 数组元素个数<br>indx : 需要查找的值</p><h5 id="c-函数功能"><a href="#c-函数功能" class="headerlink" title="c. 函数功能 :"></a>c. 函数功能 :</h5><p> 函数upper_bound()返回的在前闭后开区间查找的关键字的上界，返回大于val的第一个元素位置<br>　　例如：一个数组number序列1,2,2,4.upper_bound(2)后，返回的位置是3（下标）也就是4所在的位置,同样，如果插入元素大于数组中全部元素，返回的是last。(注意：数组下标越界)<br>　　返回查找元素的最后一个可安插位置，也就是“元素值&gt;查找值”的第一个元素的位置 。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">int</span> a[<span class="number">100</span>]= &#123;<span class="number">5</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">30</span>,<span class="number">69</span>,<span class="number">70</span>,<span class="number">96</span>,<span class="number">100</span>&#125;;</span><br><span class="line">   <span class="type">int</span> b=binary_search(a,a+<span class="number">9</span>,<span class="number">5</span>);<span class="comment">//查找成功，返回1</span></span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;在数组中查找元素5，结果为：&quot;</span>&lt;&lt;b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   <span class="type">int</span> c=binary_search(a,a+<span class="number">9</span>,<span class="number">99</span>);<span class="comment">//查找失败，返回0</span></span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;在数组中查找元素99，结果为：&quot;</span>&lt;&lt;b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   <span class="type">int</span> d=lower_bound(a,a+<span class="number">9</span>,<span class="number">9</span>)-a;</span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;在数组中查找第一个大于等于9的元素位置，结果为：&quot;</span>&lt;&lt;d&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   <span class="type">int</span> e=lower_bound(a,a+<span class="number">9</span>,<span class="number">101</span>)-a;</span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;在数组中查找第一个大于等于101的元素位置，结果为：&quot;</span>&lt;&lt;e&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   <span class="type">int</span> f=upper_bound(a,a+<span class="number">9</span>,<span class="number">10</span>)-a;</span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;在数组中查找第一个大于10的元素位置，结果为：&quot;</span>&lt;&lt;f&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   <span class="type">int</span> g=upper_bound(a,a+<span class="number">9</span>,<span class="number">101</span>)-a;</span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;在数组中查找第一个大于101的元素位置，结果为：&quot;</span>&lt;&lt;g&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> search方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>704.二分查找</title>
      <link href="/2023/04/10/704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
      <url>/2023/04/10/704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/binary-search/">704. 二分查找</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            <span class="type">int</span> middle=(left+right)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[middle]&gt;target)&#123;</span><br><span class="line">                right=middle<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[middle]&lt;target)&#123;</span><br><span class="line">                left=middle+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> middle;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> target)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=numsSize<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            <span class="type">int</span> middle=(left+right)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[middle]&gt;target)&#123;</span><br><span class="line">                right=middle<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[middle]&lt;target)&#123;</span><br><span class="line">                left=middle+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> middle;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="type">int</span>&gt; nums;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="type">int</span> target;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;target;</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line"><span class="type">int</span> temp;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;temp;</span><br><span class="line">nums.push_back(temp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> right=nums.size()<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line"><span class="type">int</span> middle=(left+right)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(nums[middle]&gt;target)&#123;</span><br><span class="line">right=middle<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(nums[middle]&lt;target)&#123;</span><br><span class="line">left=middle+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;middle;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vector容器</title>
      <link href="/2023/04/10/vector%E5%AE%B9%E5%99%A8/"/>
      <url>/2023/04/10/vector%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1-vector："><a href="#1-vector：" class="headerlink" title="1. vector："></a>1. vector：</h2><h4 id="1-1-vector-说明"><a href="#1-1-vector-说明" class="headerlink" title="1.1 vector 说明"></a>1.1 vector 说明</h4><ul><li>vector是向量类型，可以容纳许多类型的数据，因此也被称为容器</li><li>(可以理解为动态数组，是封装好了的类）</li><li>进行<code>vector</code>操作前应添加头文件<code>#include &lt;vector&gt;</code></li></ul><h4 id="1-2-vector初始化："><a href="#1-2-vector初始化：" class="headerlink" title="1.2 vector初始化："></a>1.2 vector初始化：</h4><p><strong>方式1.</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义具有10个整型元素的向量（尖括号为元素类型名，它可以是任何合法的数据类型），不具有初值，其值不确定</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;a(<span class="number">10</span>);</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><p><strong>方式2.</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义具有10个整型元素的向量，且给出的每个元素初值为1</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;a(<span class="number">10</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><strong>方式3.</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用向量b给向量a赋值，a的值完全等价于b的值</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;a(b);</span><br></pre></td></tr></table></figure><p><strong>方式4</strong>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将向量b中从0-2（共三个）的元素赋值给a，a的类型为int型</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;a(b.begin(),b.begin+<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p><strong>方式5.</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//从数组中获得初值</span></span><br><span class="line"><span class="type">int</span> b[<span class="number">7</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; <span class="title function_">a</span><span class="params">(b,b+<span class="number">7</span>）;</span></span><br></pre></td></tr></table></figure><h4 id="1-3-vector对象的常用内置函数使用（举例说明）"><a href="#1-3-vector对象的常用内置函数使用（举例说明）" class="headerlink" title="1.3 vector对象的常用内置函数使用（举例说明）"></a>1.3 vector对象的常用内置函数使用（举例说明）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; a,b;</span><br><span class="line"><span class="comment">//b为向量，将b的0-2个元素赋值给向量a</span></span><br><span class="line">a.<span class="built_in">assign</span>(b.<span class="built_in">begin</span>(),b.<span class="built_in">begin</span>()+<span class="number">3</span>);</span><br><span class="line"><span class="comment">//a含有4个值为2的元素</span></span><br><span class="line">a.<span class="built_in">assign</span>(<span class="number">4</span>,<span class="number">2</span>);</span><br><span class="line"><span class="comment">//返回a的最后一个元素</span></span><br><span class="line">a.<span class="built_in">back</span>();</span><br><span class="line"><span class="comment">//返回a的第一个元素</span></span><br><span class="line">a.<span class="built_in">front</span>();</span><br><span class="line"><span class="comment">//返回a的第i元素,当且仅当a存在</span></span><br><span class="line">a[i];</span><br><span class="line"><span class="comment">//清空a中的元素</span></span><br><span class="line">a.<span class="built_in">clear</span>();</span><br><span class="line"><span class="comment">//判断a是否为空，空则返回true，非空则返回false</span></span><br><span class="line">a.<span class="built_in">empty</span>();</span><br><span class="line"><span class="comment">//删除a向量的最后一个元素</span></span><br><span class="line">a.<span class="built_in">pop_back</span>();</span><br><span class="line"><span class="comment">//删除a中第一个（从第0个算起）到第二个元素，也就是说删除的元素从a.begin()+1算起（包括它）一直到a.begin()+3（不包括它）结束</span></span><br><span class="line">a.<span class="built_in">erase</span>(a.<span class="built_in">begin</span>()+<span class="number">1</span>,a.<span class="built_in">begin</span>()+<span class="number">3</span>);</span><br><span class="line"><span class="comment">//在a的最后一个向量后插入一个元素，其值为5</span></span><br><span class="line">a.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line"><span class="comment">//在a的第一个元素（从第0个算起）位置插入数值5,</span></span><br><span class="line">a.<span class="built_in">insert</span>(a.<span class="built_in">begin</span>()+<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line"><span class="comment">//在a的第一个元素（从第0个算起）位置插入3个数，其值都为5</span></span><br><span class="line">a.<span class="built_in">insert</span>(a.<span class="built_in">begin</span>()+<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>);</span><br><span class="line"><span class="comment">//b为数组，在a的第一个元素（从第0个元素算起）的位置插入b的第三个元素到第5个元素（不包括b+6）</span></span><br><span class="line">a.<span class="built_in">insert</span>(a.<span class="built_in">begin</span>()+<span class="number">1</span>,b+<span class="number">3</span>,b+<span class="number">6</span>);</span><br><span class="line"><span class="comment">//返回a中元素的个数</span></span><br><span class="line">a.<span class="built_in">size</span>();</span><br><span class="line"><span class="comment">//返回a在内存中总共可以容纳的元素个数</span></span><br><span class="line">a.<span class="built_in">capacity</span>();</span><br><span class="line"><span class="comment">//将a的现有元素个数调整至10个，多则删，少则补，其值随机</span></span><br><span class="line">a.<span class="built_in">resize</span>(<span class="number">10</span>);</span><br><span class="line"><span class="comment">//将a的现有元素个数调整至10个，多则删，少则补，其值为2</span></span><br><span class="line">a.<span class="built_in">resize</span>(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line"><span class="comment">//将a的容量扩充至100，</span></span><br><span class="line">a.<span class="built_in">reserve</span>(<span class="number">100</span>);</span><br><span class="line"><span class="comment">//b为向量，将a中的元素和b中的元素整体交换</span></span><br><span class="line">a.<span class="built_in">swap</span>(b);</span><br><span class="line"><span class="comment">//b为向量，向量的比较操作还有 != &gt;= &gt; &lt;= &lt;</span></span><br><span class="line">a==b;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-顺序访问vector的几种方式，举例说明"><a href="#2-顺序访问vector的几种方式，举例说明" class="headerlink" title="2. 顺序访问vector的几种方式，举例说明"></a>2. 顺序访问vector的几种方式，举例说明</h2><h4 id="2-1-对向量a添加元素的几种方式"><a href="#2-1-对向量a添加元素的几种方式" class="headerlink" title="2.1. 对向量a添加元素的几种方式"></a>2.1. 对向量a添加元素的几种方式</h4><p>1.向向量a中添加元素</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt;a;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;++i)&#123;</span><br><span class="line">a.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.从数组中选择元素向向量中添加</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">6</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; b;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">4</span>;++i)</span><br><span class="line">&#123;b.<span class="built_in">push_back</span>(a[i]);&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.从现有向量中选择元素向向量中添加</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">6</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;b;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;c(a,a+<span class="number">4</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;::iterator it=c.begin();it&lt;c.end();++it)</span><br><span class="line">&#123;</span><br><span class="line">b.push_back(*it);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.从文件中读取元素向向量中添加</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ifstream <span class="title function_">in</span><span class="params">(<span class="string">&quot;data.txt&quot;</span>)</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;a;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i;in&gt;&gt;i)&#123;a.push_back(i);&#125;</span><br></pre></td></tr></table></figure><p><strong>5.常见错误赋值方式</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;a;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;++i)&#123;a[i]=i;&#125;<span class="comment">//下标只能用来获取已经存在的元素</span></span><br></pre></td></tr></table></figure><h4 id="2-2-从向量中读取元素"><a href="#2-2-从向量中读取元素" class="headerlink" title="2.2 从向量中读取元素"></a>2.2 从向量中读取元素</h4><p>1.通过下标方式获取</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">6</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;b(a,a+<span class="number">4</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=b.size()<span class="number">-1</span>;++i)&#123;<span class="built_in">cout</span>&lt;&lt;b[i]&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br></pre></td></tr></table></figure><p>2.通过迭代器方式读取</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">6</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;b(a,a+<span class="number">4</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;::iterator it=b.begin();it!=b.end();it++)&#123;<span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="string">&quot;  &quot;</span>;&#125;</span><br></pre></td></tr></table></figure><h2 id="3-几个常用的算法"><a href="#3-几个常用的算法" class="headerlink" title="3.几个常用的算法"></a>3.几个常用的算法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="comment">//对a中的从a.begin()（包括它）到a.end()（不包括它）的元素进行从小到大排列</span></span><br><span class="line"><span class="built_in">sort</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>());</span><br><span class="line"><span class="comment">//对a中的从a.begin()（包括它）到a.end()（不包括它）的元素倒置，但不排列，如a中元素为1,3,2,4,倒置后为4,2,3,1</span></span><br><span class="line"><span class="built_in">reverse</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>());</span><br><span class="line"> <span class="comment">//把a中的从a.begin()（包括它）到a.end()（不包括它）的元素复制到b中，从b.begin()+1的位置（包括它）开始复制，覆盖掉原有元素</span></span><br><span class="line"><span class="built_in">copy</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>(),b.<span class="built_in">begin</span>()+<span class="number">1</span>);</span><br><span class="line"><span class="comment">//在a中的从a.begin()（包括它）到a.end()（不包括它）的元素中查找10，若存在返回其在向量中的位置</span></span><br><span class="line"> <span class="built_in">find</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>(),<span class="number">10</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vector容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分查找解题思路以及归错</title>
      <link href="/2023/04/10/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF%E4%BB%A5%E5%8F%8A%E5%BD%92%E9%94%99/"/>
      <url>/2023/04/10/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF%E4%BB%A5%E5%8F%8A%E5%BD%92%E9%94%99/</url>
      
        <content type="html"><![CDATA[<h1 id="1-left-right"><a href="#1-left-right" class="headerlink" title="1.[left,right]"></a>1.[left,right]</h1><p><img src="E:\BLOG\blog1\source\images\代码随想录\1.png" alt="IMG_0057"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">left=<span class="number">0</span>;</span><br><span class="line">right=num.size()<span class="number">-1</span>;   <span class="comment">//-1是因为]的原因</span></span><br><span class="line"><span class="keyword">while</span>(left&lt;=right)    <span class="comment">//为什么= 因为[1,1]合法</span></span><br><span class="line">&#123;</span><br><span class="line">    middle=(left+right)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(num[middle]&gt;target)</span><br><span class="line">    &#123;</span><br><span class="line">        right=middle<span class="number">-1</span>; <span class="comment">//为什么是middle-1 因为&#x27;]&#x27;右区间去了闭，所以要减一避免重复</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(num[middle]&lt;target)&#123;</span><br><span class="line">        left=middle+<span class="number">1</span>;  <span class="comment">//为什么+1，和上面同理</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> middle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="E:\BLOG\blog1\source\images\代码随想录\2.png" alt="B4B0D0DA4054146C02000B88684BE541"></p><h1 id="2-left-right"><a href="#2-left-right" class="headerlink" title="2.[left,right)"></a>2.[left,right)</h1><p><img src="E:\BLOG\blog1\source\images\代码随想录\1.png" alt="IMG_0057"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">left=<span class="number">0</span>;</span><br><span class="line">right=num.size();   <span class="comment">//)的原因</span></span><br><span class="line"><span class="keyword">while</span>(left&lt;right)  <span class="comment">//为什么是&lt;,因为[),[1,1)开区间的取不到</span></span><br><span class="line">&#123;</span><br><span class="line"> middle=(left+right)/<span class="number">2</span>;</span><br><span class="line"> <span class="keyword">if</span> (num[middle]&gt;target)&#123;</span><br><span class="line"> right=middle;  <span class="comment">//为什么不加1，因为)开区间取不到</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span>(num[middle]&lt;target)&#123;</span><br><span class="line"> left=middle+<span class="number">1</span>;  <span class="comment">//闭区间取得到，所以+1</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span>&#123;</span><br><span class="line"> <span class="keyword">return</span> middle;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="E:\BLOG\blog1\source\images\代码随想录\2.png" alt="B4B0D0DA4054146C02000B88684BE541"></p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>模板题<a href="https://leetcode.cn/problems/binary-search/">704. 二分查找</a></p><p>其他：</p><p><a href="https://leetcode.cn/problems/search-insert-position/">35 搜索插入位置</a></p>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu安装hive，并配置mysql作为元数据库</title>
      <link href="/2023/04/07/Ubuntu%E5%AE%89%E8%A3%85hive%EF%BC%8C%E5%B9%B6%E9%85%8D%E7%BD%AEmysql%E4%BD%9C%E4%B8%BA%E5%85%83%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2023/04/07/Ubuntu%E5%AE%89%E8%A3%85hive%EF%BC%8C%E5%B9%B6%E9%85%8D%E7%BD%AEmysql%E4%BD%9C%E4%B8%BA%E5%85%83%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>hive是基于Hadoop的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供简单的sql查询功能，可以将sql语句转换为MapReduce任务进行运行。 其优点是学习成本低，可以通过类SQL语句快速实现简单的MapReduce统计，不必开发专门的MapReduce应用，十分适合数据仓库的统计分析。</p><h2 id="一、安装hive"><a href="#一、安装hive" class="headerlink" title="一、安装hive"></a>一、安装hive</h2><p><strong>1. 下载并解压hive源程序</strong></p><p><a href="http://www.apache.org/dyn/closer.cgi/hive/">Hive下载地址</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -zxvf ./apache-hive-1.2.1-bin.tar.gz -C /usr/local   # 解压到/usr/local中</span><br><span class="line">cd /usr/local/</span><br><span class="line">sudo mv apache-hive-1.2.1-bin hive       # 将文件夹名改为hive</span><br><span class="line">sudo chown -R dblab:dblab hive            # 修改文件权限</span><br></pre></td></tr></table></figure><p><strong>2. 配置环境变量</strong><br>为了方便使用，我们把hive命令加入到环境变量中去，编辑~&#x2F;.bashrc文件<code>vim ~/.bashrc</code>，在最前面一行添加:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export HIVE_HOME=/usr/local/hive</span><br><span class="line">export PATH=$PATH:$HIVE_HOME/bin</span><br></pre></td></tr></table></figure><p>保存退出后，运行<code>source ~/.bashrc</code>使配置立即生效。</p><p><strong>3. 修改&#x2F;usr&#x2F;local&#x2F;hive&#x2F;conf下的hive-site.xml</strong><br>将hive-default.xml.template重命名为hive-default.xml；新建一个文件<code>touch hive-site.xml</code>，并在hive-site.xml中粘贴如下配置信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;</span><br><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;jdbc:mysql://localhost:3306/hive?createDatabaseIfNotExist=true&lt;/value&gt;</span><br><span class="line">    &lt;description&gt;JDBC connect string for a JDBC metastore&lt;/description&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt;</span><br><span class="line">    &lt;description&gt;Driver class name for a JDBC metastore&lt;/description&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;hive&lt;/value&gt;</span><br><span class="line">    &lt;description&gt;username to use against metastore database&lt;/description&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;hive&lt;/value&gt;</span><br><span class="line">    &lt;description&gt;password to use against metastore database&lt;/description&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h2 id="二、安装并配置mysql"><a href="#二、安装并配置mysql" class="headerlink" title="二、安装并配置mysql"></a>二、安装并配置mysql</h2><p><strong>1.Ubuntu下mysql的安装请参考</strong>：<a href="https://dblab.xmu.edu.cn/blog/install-mysql/">Ubuntu安装MySQL</a><br><strong>2.下载mysql jdbc 包</strong>,<a href="http://www.mysql.com/downloads/connector/j/">下载地址</a></p><p><a href="https://downloads.mysql.com/archives/c-j/">https://downloads.mysql.com/archives/c-j/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf mysql-connector-java-5.1.40.tar.gz   #解压</span><br><span class="line">cp mysql-connector-java-5.1.40/mysql-connector-java-5.1.40-bin.jar  /usr/local/hive/lib #将mysql-connector-java-5.1.40-bin.jar拷贝到/usr/local/hive/lib目录下</span><br></pre></td></tr></table></figure><p><strong>3. 启动并登陆mysql shell</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service mysql start #启动mysql服务</span><br><span class="line">mysql -u root -p  #登陆shell界面</span><br></pre></td></tr></table></figure><p><strong>4. 新建hive数据库</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database hive;    #这个hive数据库与hive-site.xml中localhost:3306/hive的hive对应，用来保存hive元数据</span><br></pre></td></tr></table></figure><p><strong>5. 配置mysql允许hive接入：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">这条MySQL语句是为用户&#x27;hive&#x27;授予所有数据库的所有权限，并设置&#x27;hive&#x27;用户的密码为&#x27;hive&#x27;。这个命令通常用于在授权给用户访问数据库之前，先为该用户创建一个数据库账户并为其授权。</span><br><span class="line"></span><br><span class="line">在这个命令中，&#x27;identified by&#x27;语句用于设置用户的密码。&#x27;hive&#x27;是数据库账户的用户名和密码，它将用于在hive-site.xml配置文件中连接数据库。</span><br><span class="line"></span><br><span class="line">请注意，为了安全起见，建议不要在授权语句中明文指定密码。相反，可以使用以下语句来创建用户并设置其密码：</span><br><span class="line"></span><br><span class="line">CREATE USER &#x27;hive&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;password&#x27;;</span><br><span class="line">然后使用以下命令来授予用户所有数据库的所有权限：</span><br><span class="line"></span><br><span class="line">GRANT ALL ON *.* TO &#x27;hive&#x27;@&#x27;localhost&#x27;;</span><br><span class="line">这样做可以保护您的数据库免受潜在的安全威胁。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; grant all on *.* to hive@localhost identified by &#x27;hive&#x27;;   #将所有数据库的所有表的所有权限赋给hive用户，后面的hive是配置hive-site.xml中配置的连接密码</span><br><span class="line">mysql&gt; flush privileges;  #刷新mysql系统权限关系表</span><br></pre></td></tr></table></figure><p><strong>6. 启动hive</strong><br>启动hive之前，请先启动hadoop集群。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">start-all.sh #启动hadoop</span><br><span class="line">hive  #启动hive</span><br></pre></td></tr></table></figure><p>解决Hive启动，Hive metastore database is not initialized的错误。出错原因：重新安装Hive和MySQL，导致版本、配置不一致。在终端执行如下命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schematool -dbType mysql -initSchema</span><br></pre></td></tr></table></figure><p>Hive 分布现在包含一个用于 Hive Metastore 架构操控的脱机工具，名为 schematool.此工具可用于初始化当前 Hive 版本的 Metastore 架构。此外，其还可处理从较旧版本到新版本的架构升级。</p><p><a href="https://dblab.xmu.edu.cn/blog/996/">https://dblab.xmu.edu.cn/blog/996/</a></p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu安装MySQL及常用操作</title>
      <link href="/2023/04/07/Ubuntu%E5%AE%89%E8%A3%85MySQL%E5%8F%8A%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2023/04/07/Ubuntu%E5%AE%89%E8%A3%85MySQL%E5%8F%8A%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.mysql.com/">MySQL</a>是一个关系型数据库管理系统，由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下产品。MySQL 最流行的关系型数据库管理系统，在 WEB 应用方面MySQL是最好的 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件之一。</p><h2 id="一、安装MySQL"><a href="#一、安装MySQL" class="headerlink" title="一、安装MySQL"></a>一、安装MySQL</h2><p>使用以下命令即可进行mysql安装，注意安装前先更新一下软件源以获得最新版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update  #更新软件源</span><br><span class="line">sudo apt-get install mysql-server  #安装mysql</span><br></pre></td></tr></table></figure><p>上述命令会安装以下包：<br>apparmor<br>mysql-client-5.7<br>mysql-common<br>mysql-server<br>mysql-server-5.7<br>mysql-server-core-5.7<br>因此无需再安装mysql-client等。安装过程会提示设置mysql root用户的密码，设置完成后等待自动安装即可。默认安装完成就启动了mysql。</p><ul><li><p>启动和关闭mysql服务器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service mysql start</span><br><span class="line">service mysql stop</span><br></pre></td></tr></table></figure></li></ul><p><img src="/images/spark/78.png" alt="1680850535731"></p><ul><li><p>确认是否启动成功，mysql节点处于LISTEN状态表示启动成功：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo netstat -tap | grep mysql</span><br></pre></td></tr></table></figure><p><img src="/images/spark/79.png" alt="1680850589215"></p></li><li><p>进入mysql shell界面：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p><img src="/images/spark/80.png" alt="1680850651984"></p><p>解决利用sqoop导入MySQL中文乱码的问题（可以插入中文，但不能用sqoop导入中文）<br>导致导入时中文乱码的原因是character_set_server默认设置是latin1，如下图。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &quot;char%&quot;;</span><br></pre></td></tr></table></figure><p><img src="/images/spark/82.png" alt="未修改server 编码"></p><p>可以单个设置修改编码方式<code>set character_set_server=utf8;</code>但是重启会失效，建议按以下方式修改编码方式。<br>(1)编辑配置文件。<code>sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf</code><br>(2)在[mysqld]下添加一行<code>character_set_server=utf8</code>。如下图</p><p><img src="/images/spark/83.png" alt="未修改server 编码"></p><p>(3)重启MySQL服务。<code>service mysql restart</code><br>(4)登陆MySQL，并查看MySQL目前设置的编码。<code>show variables like &quot;char%&quot;;</code></p><p><img src="/images/spark/84.png" alt="未修改server 编码"></p><p>但是我的就直接是这样子的了：</p><p><img src="/images/spark/81.png" alt="1680850651984"></p><h2 id="二、MySQL常用操作"><a href="#二、MySQL常用操作" class="headerlink" title="二、MySQL常用操作"></a>二、MySQL常用操作</h2><p>注意：MySQL中每个命令后都要以英文分号；结尾。<br>1、显示数据库<br>mysql&gt; show databases;<br>MySql刚安装完有两个数据库：mysql和test。mysql库非常重要，它里面有MySQL的系统信息，我们改密码和新增用户，实际上就是用这个库中的相关表进行操作。</p><p>2、显示数据库中的表<br>mysql&gt; use mysql; （打开库，对每个库进行操作就要打开此库）<br>Database changed<br>mysql&gt; show tables;</p><p>3、显示数据表的结构：<br>describe 表名;</p><p>4、显示表中的记录：<br>select * from 表名;<br>例如：显示mysql库中user表中的纪录。所有能对MySQL用户操作的用户都在此表中。<br>select * from user;</p><p>5、建库：<br>create database 库名;<br>例如：创建一个名字位aaa的库<br>mysql&gt; create database aaa;</p><p>6、建表：<br>use 库名；<br>create table 表名 (字段设定列表)；<br>例如：在刚创建的aaa库中建立表person,表中有id(序号，自动增长)，xm（姓名）,xb（性别）,csny（出身年月）四个字段<br>use aaa;<br>mysql&gt; create table person (id int(3) auto_increment not null primary key, xm varchar(10),xb varchar(2),csny date);<br>可以用describe命令察看刚建立的表结构。<br>mysql&gt; describe person;</p><p><img src="/images/spark/85.png" alt="未修改server 编码"></p><p>7、增加记录<br>例如：增加几条相关纪录。<br>mysql&gt;insert into person values(null,’张三’,’男’,’1997-01-02’);<br>mysql&gt;insert into person values(null,’李四’,’女’,’1996-12-02’);<br>注意，字段的值（’张三’,’男’,’1997-01-02’）是使用两个英文的单撇号包围起来，后面也是如此。<br>因为在创建表时设置了id自增，因此无需插入id字段，用null代替即可。<br>可用select命令来验证结果。<br>mysql&gt; select * from person;</p><p><img src="/images/spark/86.png" alt="未修改server 编码"></p><p>8、修改纪录<br>例如：将张三的出生年月改为1971-01-10<br>mysql&gt; update person set csny&#x3D;’1971-01-10’ where xm&#x3D;’张三’;</p><p>9、删除纪录<br>例如：删除张三的纪录。<br>mysql&gt; delete from person where xm&#x3D;’张三’;</p><p>10、删库和删表<br>drop database 库名;<br>drop table 表名；</p><p>11、查看mysql版本<br>在mysql5.0中命令如下：<br>show variables like ‘version’;<br>或者：select version();</p><p><a href="https://dblab.xmu.edu.cn/blog/1002/">https://dblab.xmu.edu.cn/blog/1002/</a></p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验4  Spark SQL编程初级实践</title>
      <link href="/2023/04/07/%E5%AE%9E%E9%AA%8C4-Spark-SQL%E7%BC%96%E7%A8%8B%E5%88%9D%E7%BA%A7%E5%AE%9E%E8%B7%B5/"/>
      <url>/2023/04/07/%E5%AE%9E%E9%AA%8C4-Spark-SQL%E7%BC%96%E7%A8%8B%E5%88%9D%E7%BA%A7%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="1．Spark-SQL基本操作"><a href="#1．Spark-SQL基本操作" class="headerlink" title="1．Spark SQL基本操作"></a>1．Spark SQL基本操作</h2><p>将下列JSON格式数据复制到Linux系统中，并保存命名为employee.json。</p><p>为employee.json创建DataFrame，并写出Python语句完成下列操作：</p><p>(1)     查询所有数据；</p><p>(2)     查询所有数据，并去除重复的数据；</p><p>(3)     查询所有数据，打印时去除id字段；</p><p>(4)     筛选出age&gt;30的记录；</p><p>(5)     将数据按age分组；</p><p>(6)     将数据按name升序排列；</p><p>(7)     取出前3行数据；</p><p>(8)     查询所有记录的name列，并为其取别名为username；</p><p>(9)     查询年龄age的平均值；</p><p>(10)  查询年龄age的最小值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">首先为employee.json创建DataFrame，并写出Python语句完成下列操作：</span><br><span class="line">创建DataFrame</span><br><span class="line">答案：</span><br><span class="line">&gt;&gt;&gt; spark=SparkSession.builder().getOrCreate()</span><br><span class="line">&gt;&gt;&gt; df = spark.read.json(&quot;file:///usr/local/spark/employee.json&quot;)</span><br><span class="line">(1)查询DataFrame的所有数据</span><br><span class="line">答案：&gt;&gt;&gt; df.show()</span><br><span class="line">(2)查询所有数据，并去除重复的数据</span><br><span class="line">答案：&gt;&gt;&gt; df.distinct().show()</span><br><span class="line">(3)查询所有数据，打印时去除id字段</span><br><span class="line">答案：&gt;&gt;&gt; df.drop(&quot;id&quot;).show()</span><br><span class="line">(4)筛选age&gt;20的记录</span><br><span class="line">答案：&gt;&gt;&gt; df.filter(df.age &gt; 30 ).show()</span><br><span class="line">(5)将数据按name分组</span><br><span class="line">答案：&gt;&gt;&gt; df.groupBy(&quot;name&quot;).count().show()</span><br><span class="line">(6)将数据按name升序排列</span><br><span class="line">答案：&gt;&gt;&gt; df.sort(df.name.asc()).show()</span><br><span class="line">(7)取出前3行数据</span><br><span class="line">答案：&gt;&gt;&gt; df.take(3) 或python&gt; df.head(3)</span><br><span class="line">(8)查询所有记录的name列，并为其取别名为username</span><br><span class="line">答案：&gt;&gt;&gt; df.select(df.name.alias(&quot;username&quot;)).show()</span><br><span class="line">(9)查询年龄age的平均值</span><br><span class="line">答案：&gt;&gt;&gt; df.agg(&#123;&quot;age&quot;: &quot;mean&quot;&#125;).show()</span><br><span class="line">(10)查询年龄age的最大值</span><br><span class="line">答案：&gt;&gt;&gt; df.agg(&#123;&quot;age&quot;: &quot;max&quot;&#125;).show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2．编程实现将RDD转换为DataFrame"><a href="#2．编程实现将RDD转换为DataFrame" class="headerlink" title="2．编程实现将RDD转换为DataFrame"></a>2．编程实现将RDD转换为DataFrame</h2><p>源文件内容如下（包含id,name,age）：</p><p>​       请将数据复制保存到Linux系统中，命名为employee.txt，实现从RDD转换得到DataFrame，并按“id:1,name:Ella,age:36”的格式打印出DataFrame的所有数据。请写出程序代码。</p><p>假设当前目录为&#x2F;usr&#x2F;local&#x2F;spark&#x2F;mycode&#x2F;rddtodf，在当前目录下新建一个目录mkdir -p src&#x2F;main&#x2F;python，然后在目录&#x2F;usr&#x2F;local&#x2F;spark&#x2F;mycode&#x2F;rddtodf&#x2F;src&#x2F;main&#x2F;python下新建一个rddtodf.py，复制下面代码；（下列两种方式任选其一）</p><p>方法一：利用反射来推断包含特定类型对象的RDD的schema，适用对已知数据结构的RDD转换；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from pyspark.conf import SparkConf</span><br><span class="line">from pyspark.sql.session import SparkSession</span><br><span class="line">from pyspark import SparkContext</span><br><span class="line">from pyspark.sql.types import Row</span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">sc = SparkContext(&quot;local&quot;,&quot;Simple App&quot;)</span><br><span class="line">peopleRDD = sc.textFile(&quot;file:///usr/local/spark/employee.txt&quot;)</span><br><span class="line">rowRDD = peopleRDD.map(lambda line : line.split(&quot;,&quot;)).map(lambda attributes : Row(int(attributes[0]),attributes[1],int(attributes[2]))).toDF()</span><br><span class="line">rowRDD.createOrReplaceTempView(&quot;employee&quot;)</span><br><span class="line">personsDF = spark.sql(&quot;select * from employee&quot;)</span><br><span class="line">personsDF.rdd.map(lambda t : &quot;id:&quot;+str(t[0])+&quot;,&quot;+&quot;Name:&quot;+t[1]+&quot;,&quot;+&quot;age:&quot;+str(t[2])).foreach(print)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>方法二：使用编程接口，构造一个schema并将其应用在已知的RDD上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">from pyspark.sql.types import Row</span><br><span class="line">from pyspark.sql.types import StructType</span><br><span class="line">from pyspark.sql.types import StructField</span><br><span class="line">from pyspark.sql.types import StringType</span><br><span class="line">from pyspark.conf import SparkConf</span><br><span class="line">from pyspark import SparkContext</span><br><span class="line">from pyspark.sql.session import SparkSession</span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">sc = SparkContext(&quot;local&quot;,&quot;Simple App&quot;)</span><br><span class="line">peopleRDD = sc.textFile(&quot;file:///usr/local/spark/employee.txt&quot;)</span><br><span class="line">schemaString = &quot;id name age&quot;</span><br><span class="line">fields = list(map( lambda fieldName : StructField(fieldName, StringType(), nullable = True), schemaString.split(&quot; &quot;)))</span><br><span class="line">schema = StructType(fields)</span><br><span class="line">rowRDD = peopleRDD.map(lambda line : line.split(&quot;,&quot;)).map(lambda attributes : Row(int(attributes[0]),attributes[1],int(attributes[2])))</span><br><span class="line">employeeDF = spark.createDataFrame(rowRDD, schema)</span><br><span class="line">employeeDF.createOrReplaceTempView(&quot;employee&quot;)</span><br><span class="line">results = spark.sql(&quot;SELECT * FROM employee&quot;)</span><br><span class="line">results.rdd.map(lambda t : &quot;id:&quot;+str(t[0])+&quot;,&quot;+&quot;Name:&quot;+t[1]+&quot;,&quot;+&quot;age:&quot;+str(t[2])).foreach(print)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`python3 ./ rddtodf.py`</span><br></pre></td></tr></table></figure><h2 id="3-编程实现利用DataFrame读写MySQL的数据"><a href="#3-编程实现利用DataFrame读写MySQL的数据" class="headerlink" title="3. 编程实现利用DataFrame读写MySQL的数据"></a>3. 编程实现利用DataFrame读写MySQL的数据</h2><p>（1）在MySQL数据库中新建数据库sparktest，再创建表employee，包含如表5-2所示的两行数据。</p><p><strong>表<strong><strong>5-2 employee</strong></strong>表原有数据</strong></p><table><thead><tr><th>id</th><th>name</th><th>gender</th><th>Age</th></tr></thead><tbody><tr><td>1</td><td>Alice</td><td>F</td><td>22</td></tr><tr><td>2</td><td>John</td><td>M</td><td>25</td></tr></tbody></table> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database sparktest;</span><br><span class="line">mysql&gt; use sparktest;</span><br><span class="line">mysql&gt; create table employee (id int(4), name char(20), gender char(4), age int(4));</span><br><span class="line">mysql&gt; insert into employee values(1,&#x27;Alice&#x27;,&#x27;F&#x27;,22);</span><br><span class="line">mysql&gt; insert into employee values(2,&#x27;John&#x27;,&#x27;M&#x27;,25);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（2）配置Spark通过JDBC连接数据库MySQL，编程实现利用DataFrame插入如表5-3所示的两行数据到MySQL中，最后打印出age的最大值和age的总和。</p><p><strong>表<strong><strong>5-3 employee</strong></strong>表新增数据</strong></p><table><thead><tr><th>id</th><th>name</th><th>gender</th><th>age</th></tr></thead><tbody><tr><td>3</td><td>Mary</td><td>F</td><td>26</td></tr><tr><td>4</td><td>Tom</td><td>M</td><td>23</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">答案：假设当前目录为/usr/local/spark/mycode/testmysql，在当前目录下新建一个目录mkdir -p src/main/python，然后在目录/usr/local/spark/mycode/testmysql/src/main/python下新建一个testmysql.py，复制下面代码；</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">from pyspark import SparkContext</span><br><span class="line">from pyspark.sql import SQLContext</span><br><span class="line">from pyspark.sql.types import Row</span><br><span class="line">from pyspark.sql.types import StructType</span><br><span class="line">from pyspark.sql.types import StructField</span><br><span class="line">from pyspark.sql.types import StringType</span><br><span class="line">from pyspark.sql.types import IntegerType</span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line"></span><br><span class="line">sc = SparkContext( &#x27;local&#x27;, &#x27;test&#x27;)</span><br><span class="line">spark=SQLContext(sc)</span><br><span class="line">jdbcDF=spark.read.format(&quot;jdbc&quot;).option(&quot;url&quot;,&quot;jdbc:mysql://localhost:3306/sparktest&quot;).option(&quot;driver&quot;,&quot;com.mysql.jdbc.Driver&quot;).option(&quot;dbtable&quot;,&quot;employee&quot;).option(&quot;user&quot;, &quot;root&quot;).option(&quot;password&quot;, &quot;123&quot;).load()</span><br><span class="line">jdbcDF.filter(jdbcDF.age&gt;20).collect()//检测是否连接成功</span><br><span class="line">studentRDD = sc.parallelize([&quot;3 Mary F 26&quot;,&quot;4 Tom M 23&quot;]).map(lambda line : line.split(&quot; &quot;))</span><br><span class="line">schema = StructType([StructField(&quot;id&quot;,IntegerType(),True),StructField(&quot;name&quot;, StringType(), True),StructField(&quot;gender&quot;, StringType(), True),StructField(&quot;age&quot;,IntegerType(), True)])</span><br><span class="line">rowRDD = studentRDD.map(lambda p : Row(int(p[0]),p[1].strip(), p[2].strip(),int(p[3])))</span><br><span class="line">employeeDF = spark.createDataFrame(rowRDD, schema)</span><br><span class="line">prop = &#123;&#125;</span><br><span class="line">prop[&#x27;user&#x27;] = &#x27;root&#x27;</span><br><span class="line">prop[&#x27;password&#x27;] = &#x27;123&#x27;</span><br><span class="line">prop[&#x27;driver&#x27;] = &quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">employeeDF.write.jdbc(&quot;jdbc:mysql://localhost:3306/sparktest&quot;,&#x27;employee&#x27;,&#x27;append&#x27;, prop)</span><br><span class="line">  jdbcDF.collect()</span><br><span class="line">  jdbcDF.agg(&#123;&quot;age&quot;: &quot;max&quot;&#125;).show()</span><br><span class="line">  jdbcDF.agg(&#123;&quot;age&quot;: &quot;sum&quot;&#125;).show()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后我们，执行以下指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">python3 ./ rddtodf.py</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>在终端下，我们就可以看到结果了。</p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-6-2023</title>
      <link href="/2023/04/06/4-6-2023/"/>
      <url>/2023/04/06/4-6-2023/</url>
      
        <content type="html"><![CDATA[<h2 id="反思三月"><a href="#反思三月" class="headerlink" title="反思三月"></a>反思三月</h2><span id="more"></span><div ><img src="\images\dayliy_image\4.6.jpg" alt="drawing" width="200" /></div><ol><li><p>三月单词全勤</p></li><li><p>三月末制定了个学习计划分为①数学②数据结构③coding④单词。具体罗列出每天除去上课之后的空闲时间，然后安排这些内容。单词水课上可以背（但是早课太困用来睡觉为主），固定为21：00-23：00背，实现了三天（orz）。coding实现了0天（只把登录给写了），没实现是因为0：00之后的时间背没背完单词。数学重新看绿色同济书，目前看完了两章，并且把课后习题写完了，找回自信，但是错误率很高。回头看武忠祥的书，感觉总结的不错。接下来就是先看书，再看武忠祥。不得不说，书上的定义证明真的不错。数据结构进展为0</p></li><li><p>需要再安排时间实现②③</p></li><li><p>每天至多6h空闲时间，做到晚上不熬夜，不报复性看手机，我的计划就能实现80%（我做得到有鬼）</p></li><li><p>和老爸交流了一下留学，还是不出去的好。考得上就上，考不上就上班。我的学校层次就在这边，出了国能证明自己有能力吗？不能。找捷径穿了一层华丽的衣服，回来还是草包。如果出去了回来，说是说留过学的，这样不就拉不下面子进厂了吗？哈哈哈。初中数学老师说过一句话：“人在做，天在看。”这一天天的到底学没学，学习的效果怎么样，我用每周博客来记录，算是对我自己的鞭策。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> casual_talk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>访问者模式</title>
      <link href="/2023/03/29/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/03/29/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h2><p>访问者模式是一种行为设计模式， 它能将算法与其所作用的对象隔离开来。</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/4e23a618ff97985330433f90306dd504.png" alt="visitor.png"></p><h3 id="模式动机"><a href="#模式动机" class="headerlink" title="模式动机"></a>模式动机</h3><p>假如某个软件团队开发了一款能够使用巨型图像中地理信息的应用程序。 图像中的每个节点既能代表复杂实体 （例如一座城市）， 也能代表更精细的对象 （例如工业区和旅游景点等）。 如果节点代表的真实对象之间存在公路， 那么这些节点就会相互连接。 在程序内部， 每个节点的类型都由其所属的类来表示， 每个特定的节点则是一个对象。</p><p>一段时间后， 软件团队接到了实现将图像导出到 XML 文件中的任务，如下图所示。</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/9321980ba4009779f34c5ef36107c34f.png" alt="problem1.png"></p><p>图8.2.1 将图像导出为 XML。</p><p> 这些工作最初看上去非常简单。 该团队计划为每个节点类添加导出函数， 然后递归执行图像中每个节点的导出函数。 解决方案简单且优雅： 使用多态机制可以让导出方法的调用代码不会和具体的节点类相耦合。</p><p>但团队的系统架构师拒绝批准对已有节点类进行修改。 他认为这些代码已经是产品了， 不想冒险对其进行修改， 因为修改可能会引入潜在的缺陷。</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/4087528d356b1fd7bc80697b0bd559d9.png" alt="problem2-zh.png"></p><p>所有节点的类中都必须添加导出至 XML 文件的方法， 但如果在修改代码的过程中引入了任何缺陷， 那么整个程序都会面临风险。</p><p>此外， 他还质疑在节点类中包含导出 XML 文件的代码是否有意义。 这些类的主要工作是处理地理数据。 导出 XML 文件的代码放在这里并不合适。</p><p>还有另一个原因， 那就是在此项任务完成后， 营销部门很有可能会要求程序提供导出其他类型文件的功能， 或者提出其他奇怪的要求。 这样你很可能会被迫再次修改这些重要但脆弱的类。</p><p>该模式适用场景：如果我们想为一个现有的类增加新功能，不得不考虑几个事情：</p><ol><li>新功能会不会与现有功能出现兼容性问题？</li><li>以后会不会再需要添加？</li><li>如果类不允许修改代码怎么办？</li></ol><p>面对这些问题，最好的解决方法就是使用访问者模式，访问者模式适用于数据结构相对稳定的系统，把数据结构和算法解耦。</p><p>总结来说，在软件设计中，下面的情况可以使用访问者模式。</p><ul><li>在实际使用时，对同一集合对象的操作并不是唯一的，对相同的元素对象可能存在多种不同的操作方式。而且这些操作方式并不稳定，可能还需要增加新的操作，以满足新的业务需求。此时，访问者模式就是一个值得考虑的解决方案。</li><li>访问者模式的目的是封装一些施加于某种数据结构元素之上的操作，一旦这些操作需要修改的话，接受这个操作的数据结构可以保持不变。为不同类型的元素提供多种访问操作方式，且可以在不修改原有系统的情况下增加新的操作方式。</li></ul><p>简单来说，访问者模式就是一种<strong>分离****对象数据结构</strong>与<strong>行为</strong>的方法，通过这种分离，可达到为一个被访问者动态添加新的操作而无需做其它的修改的效果。</p><h3 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h3><p>将作用于某种数据结构中的各元素的操作分离出来封装成独立的类，使其在不改变数据结构的前提下可以添加作用于这些元素的新的操作，为数据结构中的每个元素提供多种访问方式。</p><h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><p><img src="https://p.ananas.chaoxing.com/star3/origin/1b760e73de40d5b3c4fe4d30241033ee.png" alt="visitor-diagram.png"></p><p>访问者模式包含如下角色：</p><ul><li>Vistor: 抽象访问者。定义了对每一个元素（Element）访问的行为，它的参数就是可以访问的元素，它的方法个数理论上来讲与元素类个数（Element的实现类个数）是一样的。</li><li>ConcreteVisitor: 具体访问者。给出对每一个元素类访问时所产生的具体行为。</li><li>Element: 抽象元素。定义了一个接受访问者的方法（accept），其意义是指，每一个元素都要可以被访问者访问。</li><li>ConcreteElement: 具体元素。提供接受访问方法的具体实现，而这个具体的实现，通常情况下是使用访问者提供的访问该元素类的方法。</li><li>ObjectStructure: 对象结构。定义当中所提到的对象结构，对象结构是一个抽象表述，具体点可以理解为一个具有容器性质或者复合对象特性的类，它会含有一组元素（Element），并且可以迭代这些元素，供访问者访问。</li></ul><h3 id="模式时序图"><a href="#模式时序图" class="headerlink" title="模式时序图"></a>模式时序图</h3><p><img src="https://p.ananas.chaoxing.com/star3/origin/5acd0ad9a8e0db00efc5318648fd0fd0.png" alt="visitor-sequence.png"></p><h3 id="模式抽象代码分析"><a href="#模式抽象代码分析" class="headerlink" title="模式抽象代码分析"></a>模式抽象代码分析</h3><p>抽象访问者类：</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/c53c88b55d3c3a16090dd777f227015f.png" alt="img"></p><p>具体访问者类：</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/57ac2ddcb5c1875d8e713152f3b9514a.png" alt="img"></p><p>抽象元素：</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/2f57cd37cd5bb7fda6b18423fd11ed1b.png" alt="img"></p><p>具体元素：</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/392a699ccd1cc4d563f5282103fd2dd2.png" alt="img"></p><p>对象结构：</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/64f16221067ce9c7ce88907fd1247317.png" alt="img"></p><h3 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h3><ul><li>访问者模式中对象结构存储了不同类型的元素对象，以供不同访问者访问。</li><li>访问者模式包括两个层次结构，一个是访问者层次结构，提供了抽象访问者和具体访问者，一个是元素层次结构，提供了抽象元素和具体元素。</li><li>相同的访问者可以以不同的方式访问不同的元素，相同的元素可以接受不同访问者以不同访问方式访问。在访问者模式中，增加新的访问者无须修改原有系统，系统具有较好的可扩展性</li></ul><h3 id="模式实例"><a href="#模式实例" class="headerlink" title="模式实例"></a>模式实例</h3><p>在本示例中，希望将一组几何形状导出到 XML文件。 存在的问题是，不能直接更改形状的代码，或者尽量少地修改形状代码。为此，使用访问者模式建立了一个基类，允许将任何行为添加到形状层次结构中，而无需更改这些类的现有代码。</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/f437fc69b5232ef8a21d9a75d19bd5b9.png" alt="example.png"></p><p>Shape.java</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/1daceedc4ebb0cf60b040d2c9244aab1.png" alt="img"></p><p>Dot.java</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/ae078d55949c6106261b4ac315d36c91.png" alt="img"></p><p>Circle.java</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/89a94e5cdbe85f79906b95ff0b83eb38.png" alt="img"></p><p>Rectangle.java</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/530dd2146ab5124fbaca8437277bea0c.png" alt="img"></p><p>CompoundShape.java</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/e471b5321ce1d5a34f76c2e35bde509b.png" alt="img"></p><p>Visitor.java</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/780d43b4d16bbbe2a0ec9733c28e7783.png" alt="img"></p><p>Visitor.java</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/7cb77b441d1015c925ecf8c2c4048657.png" alt="img"></p><p>Client.java</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/13e7bd8166cf77243849b842a21ab16b.png" alt="img"></p><h3 id="模式优点"><a href="#模式优点" class="headerlink" title="模式优点"></a>模式优点</h3><ul><li>使得增加新的访问操作变得很容易。</li><li>将有关元素对象的访问行为集中到一个访问者对象中，而不是分散到一个个的元素类中。</li><li>可以跨过类的等级结构访问属于不同的等级结构的元素类。</li><li>让用户能够在不修改现有类层次结构的情况下，定义该类层次结构的操作。</li></ul><h3 id="模式缺点"><a href="#模式缺点" class="headerlink" title="模式缺点"></a>模式缺点</h3><ul><li>增加新的元素类很困难。在访问者模式中，每增加一个新的元素类都意味着要在抽象访问者角色中增加一个新的抽象操作，并在每一个具体访问者类中增加相应的具体操作，<strong>违背了开闭原则的要求</strong>。</li><li>破坏封装。访问者模式要求访问者对象访问并调用每一个元素对象的操作，这意味着元素对象有时候必须暴露一些自己的内部操作和内部状态，否则无法供访问者访问。</li></ul><h3 id="模式适用环境"><a href="#模式适用环境" class="headerlink" title="模式适用环境"></a>模式适用环境</h3><ul><li>一个对象结构包含很多类型的对象，希望对这些对象实施一些依赖其具体类型的操作。在访问者中针对每一种具体的类型都提供了一个访问操作，不同类型的对象可以有不同的访问操作。</li><li>需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作污染这些对象的类，也不希望在增加新操作时修改这些类。访问者模式使得我们可以将相关的访问操作集中起来定义在访问者类中，对象结构可以被多个不同的访问者类所使用，将对象本身与对象的访问操作分离。</li><li>对象结构中对象对应的类很少改变，但经常需要在此对象结构上定义新的操作。</li></ul><h3 id="模式应用"><a href="#模式应用" class="headerlink" title="模式应用"></a>模式应用</h3><ol><li><p>Java类库实例</p><p>javax.lang.model.element.AnnotationValue和AnnotationValueVisitor</p><p>javax.lang.model.element.Element和ElementVisitor</p><p>javax.lang.model.type.TypeMirror和TypeVisitor</p><p>java.nio.file.FileVisitor和SimpleFileVisitor</p><p>javax.faces.component.visit.VisitContext和VisitCallback</p></li><li><p>在一些编译器的设计中运用了访问者模式，程序代码是被访问的对象，它包括变量定义、变量赋值、逻辑运算、算术运算等语句，编译器需要对代码进行分析，如检查变量是否定义、变量是否赋值、算术运算是否合法等，可以将不同的操作封装在不同的类中，如检查变量定义的类、检查变量赋值的类、检查算术运算是否合法的类，这些类就是具体访问者，可以访问程序代码中不同类型的语句。在编译过程中除了代码分析外，还包含代码优化、空间分配和代码生成等部分，也可以将每一个不同编译阶段的操作封装到了跟该阶段有关的一个访问者类中。</p></li><li><p>在常用的Java XML处理技术DOM4J中，可以通过访问者模式的方式来读取并解析XML文档，VisitorSupport是DOM4J提供的Visitor接口的默认适配器，具体访问者只需继承VisitorSupport类即可。</p></li></ol><h3 id="模式扩展"><a href="#模式扩展" class="headerlink" title="模式扩展"></a>模式扩展</h3><p>\1. 与其他模式联用</p><ul><li>由于访问者模式需要对对象结构进行操作，而对象结构本身是一个元素对象的集合，因此访问者模式经常需要与迭代器模式联用，在对象结构中使用迭代器来遍历元素对象。</li><li>在访问者模式中，元素对象可能存在容器对象和叶子对象，因此可以结合组合模式来进行设计。</li></ul><p>\2. 访问者模式以一种倾斜的方式支持开闭原则，增加新的访问者方便，但是增加新的元素很困难。</p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>行为型软件设计模式</title>
      <link href="/2023/03/29/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/03/29/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="行为型软件设计模式"><a href="#行为型软件设计模式" class="headerlink" title="行为型软件设计模式"></a>行为型软件设计模式</h2><p>行为型模式(Behavioral Pattern)是对在不同的对象之间划分责任和算法的抽象化。</p><p>行为型模式不仅仅关注类和对象的结构，而且重点关注它们之间的相互作用。</p><p>通过行为型模式，可以更加清晰地划分类与对象的职责，并研究系统在运行时实例对象 之间的交互。在系统运行时，对象并不是孤立的，它们可以通过相互通信与协作完成某些复杂功能，一个对象在运行时也将影响到其他对象的运行。</p><p>行为型模式分为类行为型模式和对象行为型模式两种：</p><ul><li>类行为型模式：类的行为型模式使用继承关系在几个类之间分配行为，类行为型模式主要通过多态等方式来分配父类与子类的职责。</li><li>对象行为型模式：对象的行为型模式则使用对象的聚合关联关系来分配行为，对象行为型模式主要是通过对象关联等方式来分配两个或多个类的职责。根据“合成复用原则”，系统中要尽量使用关联关系来取代继承关系，因此大部分行为型设计模式都属于对象行为型设计模式。</li></ul><h2 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h2><p><img src="https://p.ananas.chaoxing.com/star3/origin/b159d584c987ba42d57c12478b5a6329.png" alt="img"></p><p><strong>迭代器模式</strong>是一种行为设计模式， 让你能在不暴露集合底层表现形式 （列表、 栈和树等） 的情况下遍历集合中所有的元素。</p><h3 id="模式动机"><a href="#模式动机" class="headerlink" title="模式动机"></a>模式动机</h3><p>集合是编程中最常使用的数据类型之一，通常可以被认为是一组对象的容器。</p><p>大部分集合使用简单列表存储元素。 但有些集合还会使用栈、 树、 图和其他复杂的数据结构，如下图所示。</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/137117358456957d4ab80c7c761dced5.png" alt="img"></p><p>集合这种数据类型虽然是一种用于存储的数据结构，<strong>但同时需要提供访问其存储数据的方法，特别是一种可以遍历其存储所有数据的方法</strong>。</p><p>也就是说，无论集合的构成方式如何， 它都必须提供某种访问元素的方式， 便于其他代码使用其中的元素。 集合应提供一种能够遍历元素的方式， 且保证它不会周而复始地访问同一个元素。</p><p>对于基于数组或者列表的集合而言， 访问或者遍历其元素可以直接通过下标完成，这种对象遍历的方法是简单且唯一的。 但对于树和图这种复杂数据结构，应该如何遍历其中的元素呢？ 而且复杂数据结构的遍历方法是多样的。比如对于树形数据结构，就可以适用深度优先算法、广度优先或者随机存取等算法来遍历树结构。</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/5026e77949166ec60d7c18f08481333a.png" alt="img"></p><p>一种简单的做法是，将这些遍历算法作为这些集合数据结构类的公共成员函数。但不断向集合类中添加遍历算法，首先会导致单个类的功能过于臃肿，集合数据结构类承担太多的功能，一方面提供添加和删除等功能，还要提供遍历访问功能。其次，集合数据结构类的首要功能是 “高效存储数据”，在遍历过程中，需要保存遍历状态，其和元素的添加和删除混杂在一起，容易引起混乱；添加过多的遍历算法会导致类的职责模糊问题，违反单一职责的设计原则。最后，不论是列表，还是树或者图，一般都会继承自共有的父类——泛型类，有些算法可能是根据特定应用订制的， 将其加入泛型集合类中会显得非常奇怪。</p><p>另一方面，从客户端来看，使用多种集合的客户端代码可能并不关心存储数据的方式（如同SQL数据库的使用者并不会关心底层数据库是MySql、SQL Server，还是Oracle一样），其更关心的是用这些数据结构存储数据后，<strong>如何访问（遍历）其中的所有数据</strong>。 不过由于不同的集合数据结构类提供不同的元素访问方式， 客户端代码将不得不与特定集合类进行耦合。</p><p>在这样的场景下，动态变化的是遍历数据对象的方法。一个自然而然的想法是，将遍历数据功能抽象形成单独的类，其专门负责遍历集合数据结构类中数据——这就是迭代器设计模式。</p><p>总结</p><ul><li>一个聚合对象，如一个列表(List)或者一个集合(Set)，应该提供一种方法来让别人可以访问它的元素，而又不需要暴露它的内部结构。</li><li>针对不同的需要，可能还要以不同的方式遍历整个聚合对象，但是我们并不希望在聚合对象的抽象层接口中充斥着各种不同遍历的操作。</li><li>在迭代器模式中，提供一个外部的迭代器来对聚合对象进行访问和遍历，迭代器定义了一个访问该聚合元素的接口，并且可以跟踪当前遍历的元素，了解哪些元素已经遍历过而哪些没有。</li></ul><h3 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h3><p>迭代器模式(Iterator Pattern) ：提供一种方法来访问聚合对象，而不用暴露这个对象的内部表示，其别名为游标(Cursor)。</p><p>迭代器模式是一种对象行为型模式。</p><p>迭代器模式就是顺序访问聚集中的对象，这是集合中非常常见的一种操作。其包含两层意思：</p><ul><li>需要遍历的对象，即聚集对象，</li><li>迭代器对象，用于对聚集对象进行遍历访问。</li></ul><h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><p><img src="https://p.ananas.chaoxing.com/star3/origin/460f83df320b70eb2faf6f8306d6392b.png" alt="img"></p><h3 id="模式时序图"><a href="#模式时序图" class="headerlink" title="模式时序图"></a>模式时序图</h3><p><img src="https://p.ananas.chaoxing.com/star3/origin/17c7275fd590ae4f47ba004f6570f92b.png" alt="img"></p><h3 id="模式抽象代码分析"><a href="#模式抽象代码分析" class="headerlink" title="模式抽象代码分析"></a>模式抽象代码分析</h3><ol><li>迭代器接口</li></ol><p><img src="https://p.ananas.chaoxing.com/star3/origin/3b60f4305417170e2ef2f002e4807005.png" alt="img"></p><ol start="2"><li>具体迭代器</li></ol><p><img src="https://p.ananas.chaoxing.com/star3/origin/dd66290f9460b70c8d40963d7ab1bb9d.png" alt="img"></p><ol start="3"><li>集合接口声明</li></ol><p><img src="https://p.ananas.chaoxing.com/star3/origin/1dca748f480d31d59dd26fe0c2db6e5b.png" alt="img"></p><ol start="4"><li>具体集合类</li></ol><p><img src="https://p.ananas.chaoxing.com/star3/origin/c9d00498d86ea1d79c009a49c36935dd.png" alt="img"></p><h3 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h3><ul><li>聚合是一个管理和组织数据对象的数据结构。聚合对象主要拥有两个职责：一是存储内部数据；二是遍历内部数据。</li><li>将遍历聚合对象中数据的行为提取出来，封装到一个迭代器中，通过专门的迭代器来遍历聚合对象的内部数据，这就是迭代器模式的本质。迭代器模式是“单一职责原则”的完美体现。</li><li>在迭代器模式中应用了工厂方法模式，聚合类充当工厂类，而迭代器充当产品类，由于定义了抽象层，系统的扩展性很好，在客户端可以针对抽象聚合类和抽象迭代器进行编程。</li><li>java编程语言的类库都已经实现了迭代器模式，因此在实际使用中很少自定义迭代器，只需要直接使用Java语言中已定义好的迭代器即可。</li></ul><h3 id="模式实例"><a href="#模式实例" class="headerlink" title="模式实例"></a>模式实例</h3><p>在本例中， 迭代器模式用于遍历一个封装了访问微信好友关系功能的特殊集合。 该集合提供使用不同方式遍历档案资料的多个迭代器。</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/f8ea0cd42be67602a465f7526c8d98b5.png" alt="img"></p><p>“好友 （friends）” 迭代器可用于遍历指定档案的好友。  “同事 （colleagues）” 迭代器也提供同样的功能， 但仅包括与目标用户在同一家公司工作的好友。 这两个迭代器都实现了同一个通用接口， 客户端能在不了解认证和发送 REST 请求等实现细节的情况下获取档案。</p><p>客户端仅通过接口与集合和迭代器交互， 也就不会同具体类耦合。 如果你决定将应用连接到全新的社交网络， 只需提供新的集合和迭代器类即可， 无需修改现有代码。</p><p>SocialNetwork.java</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/6658d19e88990b5673f53e8ac43403a9.png" alt="img"></p><p>Webchat.java</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/365fb341ad681a5ad53f2c923cf87dcc.png" alt="img"></p><p>LinkedIn.java</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/4e37791703596db5b86dacd09a7b6993.png" alt="img"></p><p>ProfileIterator.java</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/1d954f05bfc7c2b66d3b6a3277c5ef53.png" alt="img"></p><p>WebchatIterator.java</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/d6fc80c8e43b54bd5a503cae6a363c07.png" alt="img"></p><p>LinkedInIterator.java</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/f3ecf2b860a1386fee47a1e1417e0067.png" alt="img"></p><p>Profile.java</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/22f89ae046c3c1a6fe291b625766fd43.png" alt="img"></p><p>SocialSpammer.java</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/1fc5bc549b935bc6dbf11a959d706eee.png" alt="img"></p><p>Client.java</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/156f2a78d920d0984b3a46c06e34c10c.png" alt="img"></p><h3 id="模式优点"><a href="#模式优点" class="headerlink" title="模式优点"></a>模式优点</h3><ul><li>单一职责原则。 通过将体积庞大的遍历算法代码抽取为独立的类， 可对客户端代码和集合进行整理。</li><li>开闭原则。 可实现新型的集合和迭代器并将其传递给现有代码， 无需修改现有代码。</li><li>可以并行遍历同一集合， 因为每个迭代器对象都包含其自身的遍历状态。</li><li>相似的， 可以暂停遍历并在需要时继续。</li></ul><h3 id="模式缺点"><a href="#模式缺点" class="headerlink" title="模式缺点"></a>模式缺点</h3><ul><li>如果你的程序只与简单的集合进行交互， 应用该模式可能会矫枉过正。</li><li>对于某些特殊集合， 使用迭代器可能比直接遍历的效率低。</li></ul><h3 id="模式适用环境"><a href="#模式适用环境" class="headerlink" title="模式适用环境"></a>模式适用环境</h3><ul><li>访问一个聚合对象的内容而无须暴露它的内部表示。</li><li>需要为聚合对象提供多种遍历方式。</li><li>为遍历不同的聚合结构提供一个统一的接口。</li></ul><h3 id="模式应用"><a href="#模式应用" class="headerlink" title="模式应用"></a>模式应用</h3><p>该模式在 Java 代码中很常见。 许多框架和程序库都会使用它来提供遍历其集合的标准方式。</p><p>\1. 下面是该模式在核心 Java 程序库中的一些示例：</p><p><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html">java.util.Iterator</a>的所有实现 （还有<a href="https://docs.oracle.com/javase/8/docs/api/java/util/Scanner.html"> java.util.Scanner</a>）。</p><p><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Enumeration.html">java.util.Enumeration</a>的所有实现</p><p>\2. JDK1.2 引入了新的Java聚合框架Collections</p><p><img src="https://duanguangguang.github.io/2017/09/17/designPattern/iterator/dp1603.jpg" alt="img"></p><ul><li>Collection是所有Java聚合类的根接口。</li><li>在JDK类库中，Collection的iterator()方法返回一个java.util.Iterator类型的对象，而其子接口java.util.List的listIterator()方法返回一个java.util.ListIterator类型的对象，ListIterator是Iterator的子类。它们构成了Java语言对迭代器模式的支持，Java语言的java.util.Iterator接口就是迭代器模式的应用。</li></ul><p>识别方法： 迭代器可以通过导航方法 （例如 next和 previous等） 来轻松识别。 使用迭代器的客户端代码可能没有其所遍历的集合的直接访问权限。</p><h3 id="模式扩展"><a href="#模式扩展" class="headerlink" title="模式扩展"></a>模式扩展</h3><p>Java迭代器，•在JDK中，Iterator接口具有如下3个基本方法：</p><ul><li>Object next()：通过反复调用next()方法可以逐个访问聚合中的元素。</li><li>boolean hasNext()：hasNext()方法用于判断聚合对象中是否还存在下一个元素，为了不抛出异常，必须在调用next()之前先调用hasNext()。如果迭代对象仍然拥有可供访问的元素，那么hasNext()返回true。</li><li>void remove()：用于删除上次调用next()时所返回的元素</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>声明迭代器接口。 该接口必须提供至少一个方法来获取集合中的下个元素。 但为了使用方便， 你还可以添加一些其他方法， 例如获取前一个元素、 记录当前位置和判断迭代是否已结束。</li><li>声明集合接口并描述一个获取迭代器的方法。 其返回值必须是迭代器接口。 如果你计划拥有多组不同的迭代器， 则可以声明多个类似的方法。</li><li>为希望使用迭代器进行遍历的集合实现具体迭代器类。 迭代器对象必须与单个集合实体链接。 链接关系通常通过迭代器的构造函数建立。</li><li>在你的集合类中实现集合接口。 其主要思想是针对特定集合为客户端代码提供创建迭代器的快捷方式。 集合对象必须将自身传递给迭代器的构造函数来创建两者之间的链接。</li><li>检查客户端代码， 使用迭代器替代所有集合遍历代码。 每当客户端需要遍历集合元素时都会获取一个新的迭代器。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No module named &#39;pyspark&#39;</title>
      <link href="/2023/03/28/ModuleNotFoundError%20No%20module%20named%20&#39;pyspark&#39;/"/>
      <url>/2023/03/28/ModuleNotFoundError%20No%20module%20named%20&#39;pyspark&#39;/</url>
      
        <content type="html"><![CDATA[<h1 id="ModuleNotFoundError-No-module-named-‘pyspark’"><a href="#ModuleNotFoundError-No-module-named-‘pyspark’" class="headerlink" title="ModuleNotFoundError: No module named ‘pyspark’"></a>ModuleNotFoundError: No module named ‘pyspark’</h1><p>root@gu-virtual-machine:&#x2F;usr&#x2F;local&#x2F;spark&#x2F;mycode&#x2F;remdup# python3 remdup.py<br>Traceback (most recent call last):<br>File “&#x2F;usr&#x2F;local&#x2F;spark&#x2F;mycode&#x2F;remdup&#x2F;remdup.py”, line 1, in <module><br>from pyspark import SparkContext<br>ModuleNotFoundError: No module named ‘pyspark’</p><p>1.找到.bashrc文件在哪</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/hadoop</span><br></pre></td></tr></table></figure><p>编辑环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export PYSPARK_HOME=/usr/local/spark</span><br><span class="line">export PYTHONPATH=$PYSPARK_HOME/python:$PYTHONPATH</span><br><span class="line">export PYTHONPATH=$PYSPARK_HOME/python/lib/py4j-0.10.9.5-src.zip:$PYTHONPATH</span><br></pre></td></tr></table></figure><p>其中&#96;&#96;&#96;py4j-0.10.9.5-src.zip&#96;&#96;</p><p>需要在<code>/usr/local/spark/python/lib/</code>中自己找自己的是啥版本</p><p>然后</p><p><code> source .bashrc</code></p><p><code>chatgpt 的prompt</code></p><p><code>怎么将PySpark安装目录添加到PYTHONPATH环境变量中</code></p><p><img src="/images/spark/77.png" alt="1679936834308"></p><p><a href="https://spark.apache.org/docs/latest/api/python/getting_started/install.html">https://spark.apache.org/docs/latest/api/python/getting_started/install.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark入门：初级编程实践</title>
      <link href="/2023/03/27/Spark%E5%85%A5%E9%97%A8%EF%BC%9A%E5%88%9D%E7%BA%A7%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5/"/>
      <url>/2023/03/27/Spark%E5%85%A5%E9%97%A8%EF%BC%9A%E5%88%9D%E7%BA%A7%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<p>1.pyspark交互式编程<img src="E:\BLOG\blog1\source\images\spark\76.png" alt="1679922636425"></p><p>（1）      该系总共有多少学生；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lines =   sc.textFile(&quot;file:///usr/local/spark/sparksqldata/Data01.txt&quot;)   </span><br><span class="line">res = lines.map(lambda x:x.split(&quot;,&quot;)).map(lambda x: x[0]) //获取每行数据的第1列  </span><br><span class="line">distinct_res = res.distinct()  //去重操作  </span><br><span class="line"></span><br><span class="line">distinct_res.count()//取元素总个数   //265</span><br></pre></td></tr></table></figure><p>答案为：265人</p><p>（2）      该系共开设了多少门课程；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lines =   sc.textFile(&quot;file:///usr/local/spark/sparksqldata/Data01.txt&quot;) </span><br><span class="line">res = lines.map(lambda x:x.split(&quot;,&quot;)).map(lambda x:x[1]) //获取每行数据的第2列</span><br><span class="line">distinct_res = res.distinct()//去重操作  </span><br><span class="line">distinct_res.count()//取元素总个数   //8   </span><br></pre></td></tr></table></figure><p>答案为8门</p><p>（3）      Tom同学的总成绩平均分是多少；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lines =   sc.textFile(&quot;file:///usr/local/spark/sparksqldata/Data01.txt&quot;)</span><br><span class="line">res = lines.map(lambda x:x.split(&quot;,&quot;)).filter(lambda   x:x[0]==&quot;Tom&quot;) //筛选Tom同学的成绩信息 </span><br><span class="line">res.foreach(print)   </span><br><span class="line">score = res.map(lambda x:int(x[2])) //提取Tom同学的每门成绩，并转换为int类型   </span><br><span class="line">num = res.count() //Tom同学选课门数  </span><br><span class="line">sum_score = score.reduce(lambda x,y:x+y) //Tom同学的总成绩   avg = sum_score/num // 总成绩/门数=平均分</span><br><span class="line">print(avg)   //30.8   </span><br></pre></td></tr></table></figure><p>Tom同学的平均分为30.8分</p><p>（4）      求每名同学的选修的课程门数；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lines =   sc.textFile(&quot;file:///usr/local/spark/sparksqldata/Data01.txt&quot;) </span><br><span class="line">res = lines.map(lambda x:x.split(&quot;,&quot;)).map(lambda x:(x[0],1)) //学生每门课程都对应(学生姓名,1)，学生有n门课程则有n个(学生姓名,1)  </span><br><span class="line">each_res = res.reduceByKey(lambda x,y: x+y) //按学生姓名获取每个学生的选课总数 </span><br><span class="line">each_res.foreach(print)   </span><br></pre></td></tr></table></figure><p>答案共265行</p><p>(‘Lewis’, 4)</p><p>(‘Mike’, 3)</p><p>(‘Walter’, 4)</p><p>(‘Conrad’, 2)</p><p>(‘Borg’, 4)</p><p>……</p><p>（5）      该系DataBase课程共有多少人选修；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lines = sc.textFile(&quot;file:///usr/local/spark/sparksqldata/Data01.txt&quot;)  </span><br><span class="line">res = lines.map(lambda x:x.split(&quot;,&quot;)).filter(lambda   x:x[1]==&quot;DataBase&quot;)  </span><br><span class="line">res.count()   //126   </span><br></pre></td></tr></table></figure><p>答案为126人</p><p>（6）      各门课程的平均分是多少；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lines = sc.textFile(&quot;file:///usr/local/spark/sparksqldata/Data01.txt&quot;)  </span><br><span class="line">res = lines.map(lambda x:x.split(&quot;,&quot;)).map(lambda   x:(x[1],(int(x[2]),1))) //为每门课程的分数后面新增一列1，表示1个学生选择了该课程。格式如(&#x27;ComputerNetwork&#x27;,   (44, 1))</span><br><span class="line">temp = res.reduceByKey(lambda x,y:(x[0]+y[0],x[1]+y[1])) //按课程名聚合课程总分和选课人数。格式如(&#x27;ComputerNetwork&#x27;,   (7370, 142))   </span><br><span class="line">avg = temp.map(lambda x:(x[0], round(x[1][0]/x[1][1],2)))//课程总分/选课人数 = 平均分，并利用round(x,2)保留两位小数  </span><br><span class="line">avg.foreach(print)   </span><br></pre></td></tr></table></figure><p>答案为：</p><p>(‘ComputerNetwork’, 51.9)</p><p>(‘Software’, 50.91)</p><p>(‘DataBase’, 50.54)</p><p>(‘Algorithm’, 48.83)</p><p>(‘OperatingSystem’, 54.94)</p><p>(‘Python’, 57.82)</p><p>(‘DataStructure’, 47.57)</p><p>(‘CLanguage’, 50.61)</p><p>（7）使用累加器计算共有多少人选了DataBase这门课。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lines = sc.textFile(&quot;file:///usr/local/spark/sparksqldata/Data01.txt&quot;) </span><br><span class="line">res = lines.map(lambda x:x.split(&quot;,&quot;)).filter(lambda   x:x[1]==&quot;DataBase&quot;)//筛选出选了DataBase课程的数据  </span><br><span class="line">accum = sc.accumulator(0) //定义一个从0开始的累加器accum  </span><br><span class="line">res.foreach(lambda x:accum.add(1))//遍历res，每扫描一条数据，累加器加1 </span><br><span class="line">accum.value //输出累加器的最终值   </span><br><span class="line">//126   </span><br></pre></td></tr></table></figure><h2 id="2-编写独立应用程序实现数据去重"><a href="#2-编写独立应用程序实现数据去重" class="headerlink" title="2.编写独立应用程序实现数据去重"></a>2.编写独立应用程序实现数据去重</h2><p>对于两个输入文件A和B，编写Spark独立应用程序，对两个文件进行合并，并剔除其中重复的内容，得到一个新文件C。下面是输入文件和输出文件的一个样例，供参考。</p><p>输入文件A的样例如下：</p><p>20170101    x</p><p>20170102    y</p><p>20170103    x</p><p>20170104    y</p><p>20170105    z</p><p>20170106    z</p><p>输入文件B的样例如下：</p><p>20170101    y</p><p>20170102    y</p><p>20170103    x</p><p>20170104    z</p><p>20170105    y</p><p>根据输入的文件A和B合并得到的输出文件C的样例如下：</p><p>20170101    x</p><p>20170101    y</p><p>20170102    y</p><p>20170103    x</p><p>20170104    y</p><p>20170104    z</p><p>20170105    y</p><p>20170105    z</p><p>20170106    z</p><p>【参考答案】</p><p>  实验答案参考步骤如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">（1）假设当前目录为/usr/local/spark/mycode/remdup，在当前目录下新建一个remdup.py文件，复制下面代码；</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（2）最后在目录/usr/local/spark/mycode/remdup下执行下面命令执行程序（注意执行程序时请先退出pyspark shell，否则会出现“地址已在使用”的警告）；</span><br><span class="line">$ python3 remdup.py</span><br><span class="line">（3）在目录/usr/local/spark/mycode/remdup/result下即可得到结果文件part-00000。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cookie和Session用户认证</title>
      <link href="/2023/03/27/%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81-Cookie%E5%92%8CSession/"/>
      <url>/2023/03/27/%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81-Cookie%E5%92%8CSession/</url>
      
        <content type="html"><![CDATA[<p>什么是cookie和session</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/admin/list/</span><br><span class="line">https://127.0.0.1:8000/admin/list/</span><br></pre></td></tr></table></figure><ul><li>无状态&amp;短链接</li></ul><p><img src="/images/django/1.png" alt="1679910829181"></p><p><img src="/images/django/2.png" alt="1679911346812"></p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统——进程同步——哲学家进餐问题</title>
      <link href="/2023/03/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5%E2%80%94%E2%80%94%E5%93%B2%E5%AD%A6%E5%AE%B6%E8%BF%9B%E9%A4%90%E9%97%AE%E9%A2%98/"/>
      <url>/2023/03/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5%E2%80%94%E2%80%94%E5%93%B2%E5%AD%A6%E5%AE%B6%E8%BF%9B%E9%A4%90%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="哲学家进餐问题"><a href="#哲学家进餐问题" class="headerlink" title="哲学家进餐问题"></a>哲学家进餐问题</h2><p>复习一下 pv操作 互斥锁</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">P --wait(信号量S)&#123;</span><br><span class="line">S&lt;=0</span><br><span class="line">S--//上锁</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">V --signal(信号量)&#123;</span><br><span class="line">S++//开锁</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p><img src="/images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4%EF%BC%88origin2%EF%BC%89.png"></p><p><img src="/images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.png" alt="1679620287199"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">semaphpore chopstick[<span class="number">5</span>]=&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;  </span><br><span class="line"><span class="comment">// 所有信号量均被初始化为1,第i位哲学家的活动可描述为</span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    P(chopstick[i]);      <span class="comment">//取左筷子  当所有哲学家都拿起左筷子</span></span><br><span class="line">    P(chopstick[i+<span class="number">1</span>]%<span class="number">5</span>);  <span class="comment">//取右筷子  右筷子被阻碍</span></span><br><span class="line">eat;</span><br><span class="line">    V(chopstick[i]);  <span class="comment">//放左筷子</span></span><br><span class="line">    V(chopstick[(i+<span class="number">1</span>)%<span class="number">5</span>]);<span class="comment">//放右筷子</span></span><br><span class="line">    think;</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p><img src="/images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4%EF%BC%88origin2%EF%BC%89.png"></p><p>至多只允许有4位哲学家同时去拿左边的筷子，仅当一名哲学家左右两边的筷子都可以使用时，才允许他抓筷子。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">semaphpore chopstick[<span class="number">5</span>]=&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;; <span class="comment">//筷子</span></span><br><span class="line">semaphpore count=<span class="number">4</span>;       <span class="comment">//控制最多只允许4名哲学家同时进餐</span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line"><span class="built_in">P</span>(count);  <span class="comment">//判断是否超过4个人进餐</span></span><br><span class="line"><span class="built_in">P</span>(chopstick[i]);  <span class="comment">//取左筷子</span></span><br><span class="line">    <span class="built_in">P</span>(chopstick[i+<span class="number">1</span>]%<span class="number">5</span>);  <span class="comment">// 取右筷子</span></span><br><span class="line">    eating;</span><br><span class="line">    <span class="built_in">V</span>(chopstick[i]);  <span class="comment">//放左筷子</span></span><br><span class="line">    <span class="built_in">V</span>(chopstick[i+<span class="number">1</span>]%<span class="number">5</span>);  <span class="comment">//放右筷子</span></span><br><span class="line">    <span class="built_in">V</span>(count);   <span class="comment">//用餐完毕</span></span><br><span class="line">    thinking;</span><br><span class="line">&#125;<span class="keyword">while</span>(True);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">A  count=3</span><br><span class="line">B  count=2</span><br><span class="line">C  count=1</span><br><span class="line">D  count=0</span><br><span class="line">E  (负数阻塞)</span><br><span class="line">保证了四个同时进餐</span><br></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p><img src="/images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.png"></p><p>对哲学家进行编号，</p><p>奇数哲学家，先拿左边筷子，再拿右边筷子</p><p>偶数哲学家，先拿右边筷子，再拿左边筷子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">semaphpore chopstick[5]=&#123;1,1,1,1,1&#125;; //筷子</span><br><span class="line">do&#123;</span><br><span class="line">if(i%2==1)&#123;//奇数</span><br><span class="line">P(chopstick[i]);  //取左筷子</span><br><span class="line">      P(chopstick[i+1]%5);  // 取右筷子</span><br><span class="line">&#125;</span><br><span class="line">else&#123;     //偶数</span><br><span class="line">P(chopstick[i]);  //取左筷子</span><br><span class="line">    P(chopstick[i+1]%5);  // 取右筷子</span><br><span class="line">&#125;</span><br><span class="line">eating;</span><br><span class="line">    V(chopstick[i]);  //放左筷子</span><br><span class="line">    V(chopstick[i+1]%5);  //放右筷子</span><br><span class="line">    thinking;</span><br><span class="line">&#125;while(True)</span><br></pre></td></tr></table></figure><h1 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h1><h3 id="第1关：03哲学家进餐同步控制问题"><a href="#第1关：03哲学家进餐同步控制问题" class="headerlink" title="第1关：03哲学家进餐同步控制问题"></a>第1关：03哲学家进餐同步控制问题</h3><ul><li><p>任务要求</p></li><li><p>评论</p></li><li><p>关卡排行榜</p></li><li><p><a href="https://www.educoder.net/tasks/hfrvjb2z8y46#%E4%BB%BB%E5%8A%A1%E6%8F%8F%E8%BF%B0">任务描述</a></p></li><li><p>相关知识</p><ul><li><a href="https://www.educoder.net/tasks/hfrvjb2z8y46#%E5%93%B2%E5%AD%A6%E5%AE%B6%E8%BF%9B%E9%A4%90%E9%97%AE%E9%A2%98">哲学家进餐问题</a></li><li><a href="https://www.educoder.net/tasks/hfrvjb2z8y46#%E5%93%B2%E5%AD%A6%E5%AE%B6%E9%97%AE%E9%A2%98%E6%AD%BB%E9%94%81%E6%A8%A1%E6%8B%9F">哲学家问题死锁模拟</a></li></ul></li><li><p><a href="https://www.educoder.net/tasks/hfrvjb2z8y46#%E7%A8%8B%E5%BA%8F%E7%BC%96%E7%A8%8B%E8%AF%B4%E6%98%8E">程序编程说明</a></p></li><li><p><a href="https://www.educoder.net/tasks/hfrvjb2z8y46#%E6%B5%8B%E8%AF%95%E8%AF%B4%E6%98%8E">测试说明</a></p></li></ul><hr><h4 id="任务描述"><a href="#任务描述" class="headerlink" title="任务描述"></a>任务描述</h4><p>本关任务：编写程序实现哲学家进餐同步控制。</p><h4 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h4><p>为了完成本关任务，你需要掌握：</p><p>1.多个哲学家进餐同步模型与死锁的产生。</p><p>2.同步控制避免哲学家进餐产生死锁。</p><p>3.<code>sem_timedwait</code>函数的使用。</p><h5 id="哲学家进餐问题-1"><a href="#哲学家进餐问题-1" class="headerlink" title="哲学家进餐问题"></a>哲学家进餐问题</h5><p>哲学家进餐问题是计算机操作系统中一个典型的同步问题，有五个哲学家在同一张圆桌，它们间隔放置了五只筷子，每个哲学家只有拿到两只筷子才可进餐，进餐完就进行思考。在该问题中筷子是一种临界资源，会被两个哲学家进行争用，在并发条件下，如果不进行适当控制，则线程发生死锁，可能产生所有哲学家无法进餐的情况。这样产生的死锁状态对计算机系统是不利的。 该线程运行模型如图： <img src="/images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/7.png" alt="哲学家进餐模型"></p><h5 id="哲学家问题死锁模拟"><a href="#哲学家问题死锁模拟" class="headerlink" title="哲学家问题死锁模拟"></a>哲学家问题死锁模拟</h5><p>原始的哲学家线程是无限等待的，这不利于在线测评(限定程序的运行时长)，因此本实训限定五个哲学家线程持续固定长的时间(无论成功或失败)即退出运行。 在本项目中有两种情况：一是不进行同步控制的哲学家线程，每个哲学家线程如果不进行控制，则所有哲学家线程都无法进行，这就是发生了死锁。二是对哲学家线程执行同步控制，每个哲学家线程不能取比自己编号大的信号量，经过控制的哲学家线程则不会发生死锁。</p><p>为了区分两种模式的运行效果不同，哲学家线程运行时还有一个统计线程Reporter，用于统计已经成功执行的线程数目。该实训项目说明访问临界资源进行限制后各线程可以执行完毕。</p><p>两种情况要有相同的开局，哲学家线程获得信号量后都持有信号量资源一段时间(200MS)，第一种情况是不控制线程直接再申请新资源，在1.5秒后进行完成情况统计。第二种情况是奇数编号的线程首先判断下一个编号资源是否可用，如果不可用，则马上释放已有资源。等100*编号(100MS或300MS)后再申请资源，经过控制的哲学家线程全部可以执行完成。 </p><h4 id="程序编程说明"><a href="#程序编程说明" class="headerlink" title="程序编程说明"></a>程序编程说明</h4><p>本项目采用C语言进行编写，采用的是linux平台的gcc编译器，主线程先执行未受控制的哲学家线程，并输出完成统计。再执行受控制的哲学家线程，也输出完成统计。</p><p>两种情况中，主线程初始化信号量资源，启动五个哲学家线程，主线程<code>ReporterPhi</code>函数第一次启动五个哲学家线程(Philosopher)，这五个哲学家线程在获得一个筷子后，都保持一段时间。然后试图再去获得新的筷子，发生死锁，造成所有线程都无法完成任务。五个线程结束后，统计成功的数目。</p><p><img src="/images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/8.png" alt="哲学家线程死锁"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![交错获取筷子](/images/操作系统/9.png) </span><br><span class="line"></span><br><span class="line">执行完毕的哲学家进程马上归还筷子资源， ![归还资源的哲学家线程](/images/操作系统/10.png) </span><br><span class="line"></span><br><span class="line">这样就使线程间可以依次执行完毕。主线程最后统计成功的数目。如果哲学家线程发生了死锁，则统计数会是0。经过同步控制的哲学家线程具有相互协调资源的能力，而不发生死锁，统计数会是5。</span><br><span class="line"></span><br><span class="line">这里对信号量的操作使用的是```sem_timedwait```函数，它在一个规定的时间尝试获取信号量，如果信号量值是可用的(大于0)，则该函数马上返回0值，如果信号量值是不可用的(不大于0)，则该方法会等待指定的时长，在阻塞指定时长后返回值是-1。```sem_timedwait```函数使用的是绝时间值。</span><br><span class="line"></span><br><span class="line">```sem_getvalue(&amp;sem, &amp;semvalue)```;该方法直接查看信号量的值。```sem_post(&amp;sem)```方法增加信号量的值，相当于归还资源;```gettimeofday```方法获得机器当前时间绝对值。```time_add_ms```对指定时间变量增加给定的时长。</span><br><span class="line"></span><br><span class="line">本实训核心内容是要求学生理解哲学家线程死锁的发生，以及如何避免发生死锁，要求学生对并发线程有较深刻的理解，了解linux平台线程的运用和信号量的使用。</span><br><span class="line"></span><br><span class="line">#### 测试说明</span><br><span class="line"></span><br><span class="line">项目没有输入数据，输出数据是两种情况下线程成功运行的数目。 </span><br><span class="line"></span><br><span class="line">测试输入：无 预期输出：1,1(非真正结果)</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">开始你的任务吧，祝你成功！</span><br><span class="line"></span><br><span class="line">```c++</span><br><span class="line">//stu001.c 哲学家进餐问题，程序模板，由学生完成缺失代码 </span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt; </span><br><span class="line">#include &lt;pthread.h&gt;</span><br><span class="line">#include &lt;semaphore.h&gt; </span><br><span class="line"></span><br><span class="line">static sem_t sem_chops[5];//筷子信号量 </span><br><span class="line">static sem_t sem_stop;//该信号量用于等待。</span><br><span class="line">//时间递增方法 </span><br><span class="line">void time_add_ms(struct timeval *time, uint ms)</span><br><span class="line">&#123;</span><br><span class="line">        time-&gt;tv_usec += ms * 1000; // 微秒 = 毫秒 * 1000</span><br><span class="line">        if(time-&gt;tv_usec &gt;= 1000000) // 进位，1000 000 微秒 = 1 秒</span><br><span class="line">        &#123;</span><br><span class="line">                time-&gt;tv_sec += time-&gt;tv_usec / 1000000;</span><br><span class="line">                time-&gt;tv_usec %= 1000000;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">//100毫秒</span><br><span class="line">#define TIMEOUT_FIRST 100</span><br><span class="line">//200毫秒</span><br><span class="line">#define TIMEOUT_HOLD 200</span><br><span class="line">//200毫秒</span><br><span class="line">#define TIMEOUT_PHIEND 200</span><br><span class="line">//200毫秒 </span><br><span class="line">#define TIME_REPORT 200</span><br><span class="line"></span><br><span class="line">struct timeval  begintime;      //获取的机器初始开始时间值</span><br><span class="line">struct timespec first_time;     //首次获取筷子信号量</span><br><span class="line">struct timespec phi_holdtime;    //保持一段时间</span><br><span class="line">struct timespec report_time;    //汇报线程完成情况时间</span><br><span class="line">struct timespec phi_endtime;    //哲学家线程结束绝对时间值</span><br><span class="line">static int finish[5]; </span><br><span class="line"></span><br><span class="line">//哲学家线程没有进行有效同步控制</span><br><span class="line">void* Philosopher(void *arg)</span><br><span class="line">&#123;</span><br><span class="line">int iIndex=*((int*)arg);</span><br><span class="line">int iRetWait1=-1,iRetWait2=-1;</span><br><span class="line">//iRetWait1是获取筷子资源1的结果，成功返回0，失败返回-1</span><br><span class="line"></span><br><span class="line">//iRetWait2是获取筷子资源2的结果，成功返回0，失败返回-1</span><br><span class="line">//获取第一个筷子成功后还要保持一段时间，继续请求下一个新筷子</span><br><span class="line">//begin ******哲学家线程获取筷子资源进餐</span><br><span class="line"></span><br><span class="line">                        //筷子信号量  //首次获取筷子信号量</span><br><span class="line">iRetWait1=sem_timedwait(sem_chops+iIndex,&amp;first_time);//获取筷子时间结束</span><br><span class="line">                //该信号量用于等待 //保持一段时间</span><br><span class="line">  sem_timedwait(&amp;sem_stop,&amp;phi_holdtime);</span><br><span class="line">                           //筷子信号量  //首次获取筷子信号量</span><br><span class="line">iRetWait2=sem_timedwait(sem_chops+(iIndex+1)%5,&amp;first_time); //获取筷子时间结束</span><br><span class="line">//end</span><br><span class="line">if((iRetWait1==0)&amp;&amp;(iRetWait2==0))&#123;</span><br><span class="line">    //检查获得两个筷子资源结果，都成功则为就餐成功</span><br><span class="line">    //设置任务完成标志为1，线程结束</span><br><span class="line">    finish[iIndex]=1;</span><br><span class="line">    //释放筷子资源iIndex</span><br><span class="line">    sem_post(&amp;sem_chops[iIndex]);</span><br><span class="line">    //释放筷子资源</span><br><span class="line">    sem_post(&amp;sem_chops[(iIndex+1)%5]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //线程结束时间点：约为700MS</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//哲学家线程进行有效同步控制</span><br><span class="line">void* PhilosopherGood(void *arg)</span><br><span class="line">&#123;</span><br><span class="line">int iIndex=*((int*)arg);</span><br><span class="line">int iRetWait1=-1,iRetWait2=-1;</span><br><span class="line">int i=0;</span><br><span class="line">/*begin ******哲学家线程获取筷子资源进餐-受同步控制********************* </span><br><span class="line">//根据线程编号选择筷子编号并尝试获取第一个筷子,未成功获取则等待一段时间后重试</span><br><span class="line">//成功后继续请求下一个新筷子</span><br><span class="line">****end*****************************************/</span><br><span class="line">  for(i=0;(i&lt;5)&amp;&amp;(iRetWait1!=0);i++)&#123;</span><br><span class="line">    //获取第一根筷子</span><br><span class="line">    if(iIndex%2==1)&#123;</span><br><span class="line">      iRetWait1=sem_timedwait(sem_chops+iIndex,&amp;first_time);</span><br><span class="line">    &#125;</span><br><span class="line">  iRetWait2=sem_timedwait(sem_chops+(iIndex+1)%5,&amp;first_time);</span><br><span class="line">    //设置任务完成标志为1，线程结束</span><br><span class="line">    finish[iIndex]=1;</span><br><span class="line">    //释放筷子资源iIndex</span><br><span class="line">    sem_post(&amp;sem_chops[iIndex]);</span><br><span class="line">    //释放筷子资源</span><br><span class="line">    sem_post(&amp;sem_chops[(iIndex+1)%5]);</span><br><span class="line">  &#125;</span><br><span class="line">    //线程结束时间点：约为700MS</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">//该线程用于检测哲学家未经同步控制完成任务的数量</span><br><span class="line">int ReporterPhi(void*(*phiFunc)(void*))</span><br><span class="line">&#123;</span><br><span class="line">  int iFinishCount=0;</span><br><span class="line">  pthread_t pids[5]; </span><br><span class="line">  int arg[5];</span><br><span class="line">  int iRetWait1=-1,iRetWait2=-1,retVal=-1;</span><br><span class="line">  int i=0; </span><br><span class="line">  gettimeofday(&amp;begintime, NULL);</span><br><span class="line">  //第一次获取筷子资源时间点:100MS</span><br><span class="line">  time_add_ms(&amp;begintime, TIMEOUT_FIRST);</span><br><span class="line">  first_time.tv_sec = begintime.tv_sec;</span><br><span class="line">  first_time.tv_nsec = begintime.tv_usec * 1000;  </span><br><span class="line">  </span><br><span class="line">  //保持获取筷子资源到时间点:300MS</span><br><span class="line">  time_add_ms(&amp;begintime, TIMEOUT_HOLD);</span><br><span class="line">  phi_holdtime.tv_sec = begintime.tv_sec;</span><br><span class="line">  phi_holdtime.tv_nsec = begintime.tv_usec * 1000; </span><br><span class="line">  </span><br><span class="line">  //哲学家线程结束时间点:500毫秒</span><br><span class="line">  time_add_ms(&amp;begintime, TIMEOUT_PHIEND);</span><br><span class="line">  phi_endtime.tv_sec= begintime.tv_sec;</span><br><span class="line">  phi_endtime.tv_nsec= begintime.tv_usec * 1000; </span><br><span class="line">  </span><br><span class="line">  //汇报线程完成情况时间点：700MS</span><br><span class="line">  time_add_ms(&amp;begintime, TIME_REPORT);</span><br><span class="line">  report_time.tv_sec = begintime.tv_sec;</span><br><span class="line">  report_time.tv_nsec = begintime.tv_usec * 1000; </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  sem_init(&amp;sem_stop,0,0);//该信号量初值为0 </span><br><span class="line">  </span><br><span class="line">  //初始化完成数组为0，筷子信号量值为1</span><br><span class="line">  for(i=0;i&lt;5;i++)</span><br><span class="line">  &#123;</span><br><span class="line">finish[i]=0;</span><br><span class="line">//设置信量初值为1</span><br><span class="line">sem_init(sem_chops+i,0,1); </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  for(i=0;i&lt;5;i++)</span><br><span class="line">  &#123;</span><br><span class="line">arg[i]=i;//传给线程的参数值，用来区分线程实体</span><br><span class="line">//创建消费者线程,pids+i是线程ID的保存地址，arg+i是线程的参数指针 </span><br><span class="line">pthread_create(pids+i,NULL,phiFunc,(void *)(&amp;arg[i]));  </span><br><span class="line">  &#125; </span><br><span class="line">  </span><br><span class="line">  //等待哲学家线程结束,但都没有完成任务。</span><br><span class="line">  for(i=0;i&lt;5;i++)</span><br><span class="line">  &#123;</span><br><span class="line">pthread_join(pids[i],NULL);  //主线程等待生产者线程结束</span><br><span class="line">  &#125;  </span><br><span class="line">  //等待到报告时间点：700MS </span><br><span class="line">  retVal = sem_timedwait(&amp;sem_stop, &amp;report_time);  </span><br><span class="line">  iFinishCount=0;</span><br><span class="line">  for(i=0;i&lt;5;i++)</span><br><span class="line">  &#123;</span><br><span class="line">if(finish[i]==1)</span><br><span class="line">&#123;iFinishCount++;&#125; </span><br><span class="line">  &#125; </span><br><span class="line">  return iFinishCount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main(int argc,char * argv[])</span><br><span class="line">&#123; </span><br><span class="line">  int i=0; </span><br><span class="line">  int phi1=-1,phi2=-1;</span><br><span class="line">  //调用无同步控制的哲学家线程</span><br><span class="line">  phi1=ReporterPhi(Philosopher);</span><br><span class="line">  //调用有同步控制的哲学家线程</span><br><span class="line">  phi2=ReporterPhi(PhilosopherGood); </span><br><span class="line">  //输出两种情况下完成任务的线程数</span><br><span class="line">  printf(&quot;%d,%d&quot;,phi1,phi2);</span><br><span class="line">  //销毁信号量资源</span><br><span class="line">  for(i=0;i&lt;5;i++)</span><br><span class="line">  &#123;</span><br><span class="line">sem_destroy(sem_chops+i); </span><br><span class="line">  &#125; </span><br><span class="line">  sem_destroy(&amp;sem_stop); </span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-23-2023</title>
      <link href="/2023/03/23/3-23-2023/"/>
      <url>/2023/03/23/3-23-2023/</url>
      
        <content type="html"><![CDATA[<h2 id="放平心态不焦虑"><a href="#放平心态不焦虑" class="headerlink" title="放平心态不焦虑"></a>放平心态不焦虑</h2><span id="more"></span><div ><img src="\images\dayliy_image\3.23.jpg" alt="drawing" width="200" /></div>加油咯1.接下来目标，确定中介，交钱，保底。2.加油把手上的东西学完（这周把它干掉交比赛）3.刷数据结构算法&&慢慢看数学慢慢刷题(方平心态)4.美团笔试准备摆烂<div ><img src="\images\dayliy_image\breautiful_team.png" alt="drawing" width="200" /></div>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> casual_talk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式--外观模式</title>
      <link href="/2023/03/22/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/03/22/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><span id="more"></span><p><img src="https://p.ananas.chaoxing.com/star3/origin/0399ac825ed1daf0f651bfc02285f2fe.png" alt="facade.png"></p><h3 id="模式动机"><a href="#模式动机" class="headerlink" title="模式动机"></a>模式动机</h3><p>为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p><p>外观模式是为了解决类与类之间的依赖关系的，像spring一样，可以将类和类之间的关系配置到配置文件中，而外观模式就是将其关系放在一个Facade类中，降低了类类之间的耦合度，该模式中没有涉及到接口。</p><h3 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h3><p>外观模式(Facade Pattern)：外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。外观模式又称为门面模式，它是一种对象结构型模式。</p><p>该模式对外有一个统一接口，外部应用程序不用关心内部子系统的具体的细节，这样会大大降低应用程序的复杂度，提高了程序的可维护性。</p><p>外观（Facade）模式是“迪米特法则”的典型应用</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/b86b419a00e7b54804b8c11fcb9e48d2.jpg" alt="外观模式引入.jpg"></p><h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><ul><li>Facade: 外观角色。为多个子系统对外提供一个共同的接口。</li><li>SubSystem:子系统角色。实现系统的部分功能，客户可以通过外观角色访问它。</li><li>Client：客户 角色</li></ul><p><img src="https://p.ananas.chaoxing.com/star3/origin/13fcb42c725de3dfebd8650c82ef321c.jpg" alt="Facade.jpg"></p><h3 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h3><p><img src="https://p.ananas.chaoxing.com/star3/origin/64b70bd5b107c730acaf8ae6941fe4bf.jpg" alt="seq_Facade.jpg"></p><h3 id="外观模式抽象代码"><a href="#外观模式抽象代码" class="headerlink" title="外观模式抽象代码"></a>外观模式抽象代码</h3><p><img src="https://p.ananas.chaoxing.com/star3/origin/caff6c5076db97e3300ce68dbede42af.png" alt="img"><img src="https://p.ananas.chaoxing.com/star3/origin/7c51781933ea7da6f51c74fa327a7741.png" alt="img"></p><p><img src="https://p.ananas.chaoxing.com/star3/origin/974296aef5da2a26ddacd3aa7eec6429.png" alt="img"></p><h3 id="外观模式分析"><a href="#外观模式分析" class="headerlink" title="外观模式分析"></a>外观模式分析</h3><ul><li>根据“单一职责原则”，在软件中将一个系统划分为若干个子系统有利于降低整个系统的复杂性，一个常见的设计目标是使子系统间的通信和相互依赖关系达到最小，而达到该目标的途径之一就是引入一个外观对象，它为子系统的访问提供了一个简单而单一的入口。 </li><li>外观模式也是“迪米特法则”的体现，通过引入一个新的外观类可以降低原有系统的复杂度，同时降低客户类与子系统类的耦合度。 </li><li>外观模式要求一个子系统的外部与其内部的通信通过一个统一的外观对象进行，外观类将客户端与子系统的内部复杂性分隔开，使得客户端只需要与外观对象打交道，而不需要与子系统内部的很多对象打交道。 </li><li>外观模式的目的在于降低系统的复杂程度。 </li><li>外观模式从很大程度上提高了客户端使用的便捷性，使得客户端无须关心子系统的工作细节，通过外观角色即可调用相关功能。</li></ul><h3 id="外观模式实例"><a href="#外观模式实例" class="headerlink" title="外观模式实例"></a>外观模式实例</h3><p>比如电脑是由CPU、内存、磁盘等部件组成，当启动电脑的时候，需要依次启动CPU、内存和磁盘等部件。CPU、Memory、Disk他们之间将会相互持有实例，产生关系，这样会造成严重的依赖，修改一个类，可能会带来其他类的修改。对于用户而言，其只需要知道可以把电脑打开即可。可以适用外观模式来设计该实例。类图如下图所示。</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/71f0df393a5d5e55bfe3fbd36767e65a.jpg" alt="dp901.jpg"></p><p>代码文件，CPU.java</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/194fc257fbb2b9ca0bf818d919344ce7.png" alt="img"></p><p>Memory.java</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/9694cc69463bfc05d2f5d00e3a37f897.png" alt="img"></p><p>Disk.java</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/3a73bdceadcc55ecdcf6e05586181812.png" alt="img"></p><p>Computer.java（外观类）</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/617e3bcdfabbdea0a2086fc9060bbbf1.png" alt="img"></p><p>Client.java</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/a06ac34d3d2d2bde2af0b2183be7fbcd.png" alt="img"></p><p>引入外观角色之后，用户只需要直接与外观角色交互，用户与子系统之间的复杂关系由外观角色来实现，从而降低了系统的耦合度。</p><h3 id="外观模式优点"><a href="#外观模式优点" class="headerlink" title="外观模式优点"></a>外观模式优点</h3><ul><li>对客户屏蔽子系统组件，减少了客户处理的对象数目并使得子系统使用起来更加容易。通过引入外观模式，客户代码将变得很简单，与之关联的对象也很少。</li><li>实现了子系统与客户之间的松耦合关系，这使得子系统的组件变化不会影响到调用它的客户类，只需要调整外观类即可。</li><li>降低了大型软件系统中的编译依赖性，并简化了系统在不同平台之间的移植过程，因为编译一个子系统一般不需要编译所有其他的子系统。一个子系统的修改对其他子系统没有任何影响，而且子系统内部变化也不会影响到外观对象。</li><li>只是提供了一个访问子系统的统一入口，并不影响用户直接使用子系统类。</li></ul><h3 id="外观模式缺点"><a href="#外观模式缺点" class="headerlink" title="外观模式缺点"></a>外观模式缺点</h3><ul><li>不能很好地限制客户使用子系统类，如果对客户访问子系统类做太多的限制则减少了可变性和灵活性。</li><li>在不引入抽象外观类的情况下，增加新的子系统可能需要修改外观类或客户端的源代码，违背了“开闭原则”。</li></ul><h3 id="外观模式适用环境"><a href="#外观模式适用环境" class="headerlink" title="外观模式适用环境"></a>外观模式适用环境</h3><ul><li>当要为一个复杂子系统提供一个简单接口时可以使用外观模式。该接口可以满足大多数用户的需求，而且用户也可以越过外观类直接访问子系统。</li><li>客户程序与多个子系统之间存在很大的依赖性。引入外观类将子系统与客户以及其他子系统解耦，可以提高子系统的独立性和可移植性。</li><li>在层次化结构中，可以使用外观模式定义系统中每一层的入口，层与层之间不直接产生联系，而通过外观类建立联系，降低层之间的耦合度。</li></ul><h3 id="外观模式应用"><a href="#外观模式应用" class="headerlink" title="外观模式应用"></a>外观模式应用</h3><p>在Java核心库中，下面的类使用了外观模式。</p><ul><li>javax.faces.context.FacesContext。该类使用了LifeCycle、ViewHandler、NavigationHandler等类。但用户直接使用FacesContext，并不觉得使用了后面的三个类。</li><li>javax.faces.context.ExternalContext 。该类使用了ServletContext，HttpSession，HttpServletRequest，HttpServletResponse等类。</li><li>JDBCFacade</li></ul><p><img src="https://p.ananas.chaoxing.com/star3/origin/0b7e81580154279d0f96f84b1c6bb05c.png" alt="img"></p><p>识别方法： 如果一个类提供了一个简单的接口，但是其工作实际由其它类来完成，则可以认为是个外观类。通常外观类管理其使用对象的整个生命周期。</p><h3 id="外观模式扩展"><a href="#外观模式扩展" class="headerlink" title="外观模式扩展"></a>外观模式扩展</h3><ul><li>在外观模式中，通常只需要一个外观类，并且此外观类只有一个实例，换言之它是一个单例类。在很多情况下为了节约系统资源，一般将外观类设计为单例类。当然这并不意味着在整个系统里只能有一个外观类，在一个系统中可以设计多个外观类，每个外观类都负责和一些特定的子系统交互，向用户提供相应的业务功能。</li><li>不要通过继承一个外观类在子系统中加入新的行为，这种做法是错误的。外观模式的用意是为子系统提供一个集中化和简化的沟通渠道，而不是向子系统加入新的行为，新的行为的增加应该通过修改原有子系统类或增加新的子系统类来实现，不能通过外观类来实现。</li><li>外观模式最大的缺点在于违背了“开闭原则”，当增加新的子系统或者移除子系统时需要修改外观类，可以通过引入抽象外观类在一定程度上解决该问题，客户端针对抽象外观类进行编程。对于新的业务需求，不修改原有外观类，而对应增加一个新的具体外观类，由新的具体外观类来关联新的子系统对象，同时通过修改配置文件来达到不修改源代码并更换外观类的目的。</li></ul><h3 id="外观模式总结"><a href="#外观模式总结" class="headerlink" title="外观模式总结"></a>外观模式总结</h3><ul><li>在外观模式中，外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。外观模式又称为门面模式，它是一种对象结构型模式。</li><li>外观模式包含两个角色：外观角色是在客户端直接调用的角色，在外观角色中可以知道相关的(一个或者多个)子系统的功能和责任，它将所有从客户端发来的请求委派到相应的子系统去，传递给相应的子系统对象处理；在软件系统中可以同时有一个或者多个子系统角色，每一个子系统可以不是一个单独的类，而是一个类的集合，它实现子系统的功能。</li><li>外观模式要求一个子系统的外部与其内部的通信通过一个统一的外观对象进行，外观类将客户端与子系统的内部复杂性分隔开，使得客户端只需要与外观对象打交道，而不需要与子系统内部的很多对象打交道。</li><li>外观模式主要优点在于对客户屏蔽子系统组件，减少了客户处理的对象数目并使得子系统使用起来更加容易，它实现了子系统与客户之间的松耦合关系，并降低了大型软件系统中的编译依赖性，简化了系统在不同平台之间的移植过程；其缺点在于不能很好地限制客户使用子系统类，而且在不引入抽象外观类的情况下，增加新的子系统可能需要修改外观类或客户端的源代码，违背了“开闭原则”。</li><li>外观模式适用情况包括：要为一个复杂子系统提供一个简单接口；客户程序与多个子系统之间存在很大的依赖性；在层次化结构中，需要定义系统中每一层的入口，使得层与层之间不直接产生联系。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django_搜索校验分页</title>
      <link href="/2023/03/21/django_%E6%90%9C%E7%B4%A2%E6%A0%A1%E9%AA%8C%E5%88%86%E9%A1%B5/"/>
      <url>/2023/03/21/django_%E6%90%9C%E7%B4%A2%E6%A0%A1%E9%AA%8C%E5%88%86%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##搜索</span></span><br><span class="line">PrettyNum.objects.<span class="built_in">filter</span>&#123;mobile=<span class="string">&#x27;13906135233&#x27;</span>,<span class="string">&quot;id&quot;</span>:<span class="number">123</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">data_dict=&#123;<span class="string">&quot;mobile&quot;</span>:<span class="string">&quot;13906135233&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="number">123</span>&#125;</span><br><span class="line"></span><br><span class="line">PrettyNum.objects.<span class="built_in">filter</span>(**data_dict)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PrettyNum.objects.filter(id=12)  等于12</span><br><span class="line">PrettyNum.objects.filter(id__gt=12) 大于12</span><br><span class="line">PrettyNum.objects.filter(id__gte=12) 大于等于12</span><br><span class="line">PrettyNum.objects.filter(id__lt=12)   小于12</span><br><span class="line">PrettyNum.objects.filter(id__lte=12) 小于等于12</span><br><span class="line"></span><br><span class="line">data_dict=&#123;&quot;id__lte&quot;:12&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PrettyNum.objects.filter(mobile=&#x27;233&#x27;)  等于 PrettyNum.objects.filter(mobile__startswitch=&quot;139&quot;) 筛选出以139开头</span><br><span class="line">PrettyNum.objects.filter(mobile__endswitch=&quot;233&quot;) 筛选出以233结尾</span><br><span class="line">PrettyNum.objects.filter(mobile__contains=&quot;5233&quot;) 筛选出包含5233</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># use</span></span><br><span class="line">data_dict=&#123;<span class="string">&quot;mobile__contains&quot;</span>:<span class="string">&quot;233&quot;</span>&#125;</span><br><span class="line">PrettyNum.objects.<span class="built_in">filter</span>(**data_dict)</span><br></pre></td></tr></table></figure><h2 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from django.core.exceptions import ValidationError</span><br><span class="line"># 验证方法一</span><br><span class="line">mobile=forms.CharField(</span><br><span class="line">    label=&quot;手机号&quot;,</span><br><span class="line">    disabled=True,</span><br><span class="line">    validators=[RegexValidator(r&#x27;^1[3-9]\d&#123;9&#125;$&#x27;,&#x27;手机号格式错误&#x27;)],</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from django.core.validators import RegexValidator</span><br><span class="line"># 验证方法二</span><br><span class="line">    def clean_mobile(self):</span><br><span class="line">        txt_mobile=self.cleaned_data[&quot;mobile&quot;]</span><br><span class="line">        exists=PrettyNum.objects.filter(mobile=txt_mobile).exists()</span><br><span class="line"></span><br><span class="line">        if len(txt_mobile)!=11:</span><br><span class="line">            #验证不通过</span><br><span class="line">            raise ValidationError(&quot;格式错误&quot;)</span><br><span class="line">        if exists:</span><br><span class="line">            #验证不通过</span><br><span class="line">            raise ValidationError(&quot;手机号已存在&quot;)</span><br><span class="line">        return txt_mobile</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">class PrettyForm(forms.ModelForm):</span><br><span class="line">    # 验证方法一</span><br><span class="line">    # mobile=forms.CharField(</span><br><span class="line">    #     label=&quot;手机号&quot;,</span><br><span class="line">    #     validators=[RegexValidator(r&#x27;^1[3-9]\d&#123;9&#125;$&#x27;,&#x27;手机号格式错误&#x27;)]</span><br><span class="line">    # )</span><br><span class="line">    class Meta:</span><br><span class="line">        model=PrettyNum</span><br><span class="line">        fields=[&#x27;mobile&#x27;,&#x27;price&#x27;,&#x27;level&#x27;,&#x27;status&#x27;]</span><br><span class="line">        # fields=&quot;__all__&quot;</span><br><span class="line">        # exclude=[&#x27;level&#x27;]</span><br><span class="line">        widgets=&#123;</span><br><span class="line">            &quot;mobile&quot;:forms.TextInput(attrs=&#123;&quot;class&quot;:&quot;form-control&quot;&#125;),</span><br><span class="line">            &quot;price&quot;:forms.TextInput(attrs=&#123;&quot;class&quot;:&quot;form-control&quot;&#125;),</span><br><span class="line">            &quot;level&quot;:forms.TextInput(attrs=&#123;&quot;class&quot;:&quot;form-control&quot;&#125;),</span><br><span class="line">            &quot;status&quot;:forms.TextInput(attrs=&#123;&quot;class&quot;:&quot;form-control&quot;&#125;),</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"># 验证方法二</span><br><span class="line">    def clean_mobile(self):</span><br><span class="line">        txt_mobile=self.cleaned_data[&quot;mobile&quot;]</span><br><span class="line">        exists=PrettyNum.objects.filter(mobile=txt_mobile).exists()</span><br><span class="line"></span><br><span class="line">        if len(txt_mobile)!=11:</span><br><span class="line">            #验证不通过</span><br><span class="line">            raise ValidationError(&quot;格式错误&quot;)</span><br><span class="line">        if exists:</span><br><span class="line">            #验证不通过</span><br><span class="line">            raise ValidationError(&quot;手机号已存在&quot;)</span><br><span class="line">        return txt_mobile</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data_dict=&#123;&#125;</span><br><span class="line">value=request.GET.get(<span class="string">&#x27;q&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> value:</span><br><span class="line">    data_dict[<span class="string">&quot;mobile__contains&quot;</span>] = value   qurylist=PrettyNum.objects.<span class="built_in">filter</span>(**data_dict).order_by(<span class="string">&quot;-level&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qurylist=PrettyNum.objects.<span class="built_in">all</span>()<span class="comment">#所有的</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qurylist=PrettyNum.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="number">4</span>)[<span class="number">0</span>:<span class="number">10</span>]<span class="comment">#id为4的前十页</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qurylist=PrettyNum.objects.<span class="built_in">all</span>()[<span class="number">0</span>:<span class="number">10</span>]<span class="comment">#第一页</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qurylist=PrettyNum.objects.all()[10:20]#第二页</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qurylist=PrettyNum.objects.all()[20:30]#第三页</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">page=int(request.GET.get(&#x27;page&#x27;,1))</span><br><span class="line">start=(page-1)*10</span><br><span class="line">end=page*10</span><br><span class="line">qurylist=PrettyNum.objects.filter(**data_dict).order_by(&quot;-level&quot;)[start:end]</span><br><span class="line">return render(request,&#x27;pretty_list.html&#x27;,&#123;&#x27;qurylist&#x27;:qurylist,&quot;search_data&quot;:value&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;nav aria-label=&quot;Page navigation&quot;&gt;</span><br><span class="line">  &lt;ul class=&quot;pagination&quot;&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      &lt;a href=&quot;#&quot; aria-label=&quot;Previous&quot;&gt;</span><br><span class="line">        &lt;span aria-hidden=&quot;true&quot;&gt;«&lt;/span&gt;</span><br><span class="line">      &lt;/a&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;/pretty/list/?page=1&quot;&gt;1&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;?page=2&quot;&gt;2&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;?page=3&quot;&gt;3&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;?page=4&quot;&gt;4&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;?page=5&quot;&gt;5&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      &lt;a href=&quot;#&quot; aria-label=&quot;Next&quot;&gt;</span><br><span class="line">        &lt;span aria-hidden=&quot;true&quot;&gt;»&lt;/span&gt;</span><br><span class="line">      &lt;/a&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/nav&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">#分页</span><br><span class="line">    # qurylist=PrettyNum.objects.all()</span><br><span class="line">    # qurylist=PrettyNum.objects.filter(id=4)[0:10]</span><br><span class="line">    # qurylist=PrettyNum.objects.all()[0:10]</span><br><span class="line">    # qurylist=PrettyNum.objects.all()[10:20]</span><br><span class="line">    # qurylist=PrettyNum.objects.all()[20:30]</span><br><span class="line">    page=int(request.GET.get(&#x27;page&#x27;,1))</span><br><span class="line">    pageSize=10</span><br><span class="line">    start=(page-1)*pageSize</span><br><span class="line">    end=page*pageSize</span><br><span class="line"></span><br><span class="line">    qurylist=PrettyNum.objects.filter(**data_dict).order_by(&quot;-level&quot;)[start:end]</span><br><span class="line">   #总数据条数</span><br><span class="line">    total_count=PrettyNum.objects.filter(**data_dict).order_by(&quot;-level&quot;).count()</span><br><span class="line">   #总页码</span><br><span class="line">    total_page_count,div=divmod(total_count,pageSize)</span><br><span class="line">    if div:</span><br><span class="line">        total_page_count+=1</span><br><span class="line"></span><br><span class="line">    # 计算出，显示当前页的前5页、后5页</span><br><span class="line">    plus=5</span><br><span class="line">    if total_page_count&lt;=2*plus+1:</span><br><span class="line">        #数据库中的数据比较少，都没有达到11页</span><br><span class="line">        start_page=1</span><br><span class="line">        end_page=total_page_count</span><br><span class="line">    else:</span><br><span class="line">        #数据库中的数据比较多 &gt;11页</span><br><span class="line"></span><br><span class="line">        #当前页&lt;5时(极小值)</span><br><span class="line">        if page&lt;=plus:</span><br><span class="line">            start_page=1</span><br><span class="line">            end_page=2*plus+1</span><br><span class="line">        else:</span><br><span class="line">            #当前页&gt;5</span><br><span class="line">            #当前页+5&gt;总页面</span><br><span class="line">            if (page+plus)&gt;total_page_count:</span><br><span class="line">                start_page=total_page_count-2*plus</span><br><span class="line">                end_page=total_page_count</span><br><span class="line">            else:</span><br><span class="line">                start_page=page-plus</span><br><span class="line">                end_page=page+plus</span><br><span class="line">    #页码</span><br><span class="line">    page_str_list=[]</span><br><span class="line">    #首页</span><br><span class="line">    page_str_list.append(&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;&#x27;.format(1))</span><br><span class="line">    #上一页</span><br><span class="line">    if page&gt;1:</span><br><span class="line">        prev=&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;&#x27;.format(page-1)</span><br><span class="line">    else:</span><br><span class="line">        prev=&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;&#x27;.format(1)</span><br><span class="line">    page_str_list.append(prev)</span><br><span class="line">    </span><br><span class="line">    for i in range(start_page,end_page+1):</span><br><span class="line">        if i==page:</span><br><span class="line">            ele=&#x27;&lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;&#123;&#125;&lt;/a&gt;&lt;/li&gt;&#x27;.format(i,i)</span><br><span class="line">        else:</span><br><span class="line">            ele=&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;&#123;&#125;&lt;/a&gt;&lt;/li&gt;&#x27;.format(i,i)</span><br><span class="line">        page_str_list.append(ele)</span><br><span class="line">    #下一页</span><br><span class="line">    if page&lt;total_page_count:</span><br><span class="line">        prev=&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;&#x27;.format(page+1)</span><br><span class="line">    else:</span><br><span class="line">        prev=&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;&#x27;.format(total_page_count)</span><br><span class="line">    page_str_list.append(prev)</span><br><span class="line">    #尾页</span><br><span class="line">    page_str_list.append(&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;尾页&lt;/a&gt;&lt;/li&gt;&#x27;.format(total_page_count))</span><br><span class="line">    </span><br><span class="line">    page_string =mark_safe(&quot;&quot;.join(page_str_list))</span><br><span class="line">    return render(request,&#x27;pretty_list.html&#x27;,&#123;&#x27;qurylist&#x27;:qurylist,&quot;search_data&quot;:value,&quot;page_string&quot;:page_string&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">def pretty_list(request):</span><br><span class="line">##搜索</span><br><span class="line"># --------------------</span><br><span class="line"># 1.PrettyNum.objects.filter&#123;mobile=&#x27;13906135233&#x27;,&quot;id&quot;:123&#125;</span><br><span class="line"># 2.data_dict=&#123;&quot;mobile&quot;:&quot;13906135233&quot;,&quot;id&quot;:123&#125;</span><br><span class="line">#   PrettyNum.objects.filter(**data_dict)</span><br><span class="line"># --------------------------------</span><br><span class="line"># PrettyNum.objects.filter(id=12)  等于12</span><br><span class="line"># PrettyNum.objects.filter(id__gt=12) 大于12</span><br><span class="line"># PrettyNum.objects.filter(id__gte=12) 大于等于12</span><br><span class="line"># PrettyNum.objects.filter(id__lt=12)   小于12</span><br><span class="line"># PrettyNum.objects.filter(id__lte=12) 小于等于12</span><br><span class="line"></span><br><span class="line"># data_dict=&#123;&quot;id__lte&quot;:12&#125;</span><br><span class="line"># # -----------------------------------</span><br><span class="line"># PrettyNum.objects.filter(mobile=&#x27;233&#x27;)  等于</span><br><span class="line"># PrettyNum.objects.filter(mobile__startswitch=&quot;139&quot;) 筛选出以139开头</span><br><span class="line"># PrettyNum.objects.filter(mobile__endswitch=&quot;233&quot;) 筛选出以233结尾</span><br><span class="line"># PrettyNum.objects.filter(mobile__contains=&quot;5233&quot;) 筛选出包含5233</span><br><span class="line"># use</span><br><span class="line"># data_dict=&#123;&quot;mobile__contains&quot;:&quot;233&quot;&#125;</span><br><span class="line"># PrettyNum.objects.filter(**data_dict)</span><br><span class="line"># ----------------------------------------</span><br><span class="line"># test</span><br><span class="line">    # for i in range(300):</span><br><span class="line">    #     PrettyNum.objects.create(mobile=&quot;13906135899&quot;,price=10,level=1,status=1)</span><br><span class="line"></span><br><span class="line">    data_dict=&#123;&#125;</span><br><span class="line">    value=request.GET.get(&#x27;q&#x27;,&#x27;&#x27;)</span><br><span class="line">    if value:</span><br><span class="line">        data_dict[&quot;mobile__contains&quot;] = value</span><br><span class="line">    # res=PrettyNum.objects.filter(**data_dict)</span><br><span class="line">    # print(res)</span><br><span class="line"></span><br><span class="line">    # if request.method==&#x27;GET&#x27;:</span><br><span class="line">    # ****qurylist=PrettyNum.objects.filter(**data_dict).order_by(&quot;-level&quot;)[start:end]</span><br><span class="line">    #select * from 表 order by level desc</span><br><span class="line">    # qurylist=PrettyNum.objects.all().order_by(&quot;-level&quot;)</span><br><span class="line">#分页</span><br><span class="line">    # qurylist=PrettyNum.objects.all()</span><br><span class="line">    # qurylist=PrettyNum.objects.filter(id=4)[0:10]</span><br><span class="line">    # qurylist=PrettyNum.objects.all()[0:10]</span><br><span class="line">    # qurylist=PrettyNum.objects.all()[10:20]</span><br><span class="line">    # qurylist=PrettyNum.objects.all()[20:30]</span><br><span class="line">    page=int(request.GET.get(&#x27;page&#x27;,1))</span><br><span class="line">    pageSize=10</span><br><span class="line">    start=(page-1)*pageSize</span><br><span class="line">    end=page*pageSize</span><br><span class="line"></span><br><span class="line">    qurylist=PrettyNum.objects.filter(**data_dict).order_by(&quot;-level&quot;)[start:end]</span><br><span class="line">   #总数据条数</span><br><span class="line">    total_count=PrettyNum.objects.filter(**data_dict).order_by(&quot;-level&quot;).count()</span><br><span class="line">   #总页码</span><br><span class="line">    total_page_count,div=divmod(total_count,pageSize)</span><br><span class="line">    if div:</span><br><span class="line">        total_page_count+=1</span><br><span class="line"></span><br><span class="line">    # 计算出，显示当前页的前5页、后5页</span><br><span class="line">    plus=5</span><br><span class="line">    if total_page_count&lt;=2*plus+1:</span><br><span class="line">        #数据库中的数据比较少，都没有达到11页</span><br><span class="line">        start_page=1</span><br><span class="line">        end_page=total_page_count</span><br><span class="line">    else:</span><br><span class="line">        #数据库中的数据比较多 &gt;11页</span><br><span class="line"></span><br><span class="line">        #当前页&lt;5时(极小值)</span><br><span class="line">        if page&lt;=plus:</span><br><span class="line">            start_page=1</span><br><span class="line">            end_page=2*plus+1</span><br><span class="line">        else:</span><br><span class="line">            #当前页&gt;5</span><br><span class="line">            #当前页+5&gt;总页面</span><br><span class="line">            if (page+plus)&gt;total_page_count:</span><br><span class="line">                start_page=total_page_count-2*plus</span><br><span class="line">                end_page=total_page_count</span><br><span class="line">            else:</span><br><span class="line">                start_page=page-plus</span><br><span class="line">                end_page=page+plus</span><br><span class="line">    #页码</span><br><span class="line">    page_str_list=[]</span><br><span class="line">    #首页</span><br><span class="line">    page_str_list.append(&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;&#x27;.format(1))</span><br><span class="line">    #上一页</span><br><span class="line">    if page&gt;1:</span><br><span class="line">        prev=&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;&#x27;.format(page-1)</span><br><span class="line">    else:</span><br><span class="line">        prev=&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;&#x27;.format(1)</span><br><span class="line">    page_str_list.append(prev)</span><br><span class="line">    </span><br><span class="line">    for i in range(start_page,end_page+1):</span><br><span class="line">        if i==page:</span><br><span class="line">            ele=&#x27;&lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;&#123;&#125;&lt;/a&gt;&lt;/li&gt;&#x27;.format(i,i)</span><br><span class="line">        else:</span><br><span class="line">            ele=&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;&#123;&#125;&lt;/a&gt;&lt;/li&gt;&#x27;.format(i,i)</span><br><span class="line">        page_str_list.append(ele)</span><br><span class="line">    #下一页</span><br><span class="line">    if page&lt;total_page_count:</span><br><span class="line">        prev=&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;&#x27;.format(page+1)</span><br><span class="line">    else:</span><br><span class="line">        prev=&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;&#x27;.format(total_page_count)</span><br><span class="line">    page_str_list.append(prev)</span><br><span class="line">    #尾页</span><br><span class="line">    page_str_list.append(&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;尾页&lt;/a&gt;&lt;/li&gt;&#x27;.format(total_page_count))</span><br><span class="line">    search_string=&quot;&quot;&quot;&quot;</span><br><span class="line">  &lt;form class=&quot;navbar-form navbar-left&quot; method=&quot;GET&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;Search&quot; name=&quot;page&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;Submit&lt;/button&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    page_str_list.append(search_string)</span><br><span class="line">    page_string =mark_safe(&quot;&quot;.join(page_str_list))</span><br><span class="line">    return render(request,&#x27;pretty_list.html&#x27;,&#123;&#x27;qurylist&#x27;:qurylist,&quot;search_data&quot;:value,&quot;page_string&quot;:page_string&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &#x27;layout.html&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div style=&quot;float: right;&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;form class=&quot;navbar-form navbar-left&quot; method=&quot;GET&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;Search&quot; name=&quot;q&quot; value=&quot;&#123;&#123;search_data&#125;&#125;&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;Search&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div&gt;            </span><br><span class="line">  &lt;a href=&quot;/pretty/add/&quot; &gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-success dropdown-toggle&quot; data-toggle=&quot;dropdown&quot; aria-haspopup=&quot;true&quot; aria-expanded=&quot;false&quot;&gt;新建&lt;/button&gt;&lt;/a&gt;    </span><br><span class="line">  &lt;!-- &lt;a href=&quot;/usr/addform&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-success dropdown-toggle&quot; data-toggle=&quot;dropdown&quot; aria-haspopup=&quot;true&quot; aria-expanded=&quot;false&quot;&gt;用form新建&lt;/button&gt;&lt;/a&gt; --&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;panel panel-default &quot;&gt; &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;bs-example&quot; data-example-id=&quot;table-within-panel&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;panel panel-default&quot;&gt;</span><br><span class="line">    &lt;!-- Default panel contents --&gt;</span><br><span class="line">    &lt;div class=&quot;panel-heading&quot;&gt;靓号列表&lt;/div&gt;</span><br><span class="line">    &lt;!-- &lt;div class=&quot;panel-body&quot;&gt;</span><br><span class="line">    &lt;/div&gt; --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Table --&gt;</span><br><span class="line">    &lt;table class=&quot;table&quot;&gt;</span><br><span class="line">      &lt;thead&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">          &lt;th&gt;id&lt;/th&gt;</span><br><span class="line">          &lt;th&gt;手机号&lt;/th&gt;</span><br><span class="line">          &lt;th&gt;价格&lt;/th&gt;</span><br><span class="line">          &lt;th&gt;级别&lt;/th&gt;</span><br><span class="line">          &lt;th&gt;状态&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">      &lt;/thead&gt;</span><br><span class="line"></span><br><span class="line">      &lt;tbody&gt;</span><br><span class="line">          &#123;% for mp in qurylist %&#125;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">          &lt;th scope=&quot;row&quot;&gt;&#123;&#123;mp.id&#125;&#125;&lt;/th&gt;</span><br><span class="line">          &lt;td&gt;&#123;&#123;mp.mobile&#125;&#125;&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;&#123;&#123;mp.price&#125;&#125;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">          &lt;!-- &lt;td&gt;&#123;&#123;mp.create_time&#125;&#125;&lt;/td&gt; --&gt;</span><br><span class="line">          &lt;!-- &lt;td&gt;&#123;&#123;mp.create_time|date:&quot;Y-m-d H:i:s&quot;&#125;&#125;&lt;/td&gt; --&gt;</span><br><span class="line">          &lt;td&gt;&#123;&#123;mp.get_level_display&#125;&#125;&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;&#123;&#123;mp.get_status_display&#125;&#125;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">          &lt;td&gt;</span><br><span class="line">            &lt;a href=&quot;/pretty/&#123;&#123;mp.id&#125;&#125;/edit/&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-warning dropdown-toggle&quot; data-toggle=&quot;dropdown&quot; aria-haspopup=&quot;true&quot; aria-expanded=&quot;false&quot;&gt;编辑&lt;/button&gt;&lt;/a&gt;  </span><br><span class="line">           &lt;!-- &lt;a href=&quot;/dep/delete/?memid=&#123;&#123;mp.id&#125;&#125;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-danger dropdown-toggle&quot; data-toggle=&quot;dropdown&quot; aria-haspopup=&quot;true&quot; aria-expanded=&quot;false&quot; &gt;删除&lt;/button&gt;&lt;/a&gt; --&gt;</span><br><span class="line">           &lt;!-- &lt;a href=&quot;/dep/delete/?memid=&#123;&#123;mp.id&#125;&#125;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-danger dropdown-toggle&quot; data-toggle=&quot;dropdown&quot; aria-haspopup=&quot;true&quot; aria-expanded=&quot;false&quot; &gt;删除&lt;/button&gt;&lt;/a&gt; --&gt;</span><br><span class="line">           &lt;a href=&quot;/pretty/&#123;&#123;mp.id&#125;&#125;/delete/&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-danger dropdown-toggle&quot; data-toggle=&quot;dropdown&quot; aria-haspopup=&quot;true&quot; aria-expanded=&quot;false&quot; &gt;删除&lt;/button&gt;&lt;/a&gt;</span><br><span class="line">          &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">      &#123;% endfor %&#125;</span><br><span class="line">   </span><br><span class="line">      &lt;/tbody&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;nav aria-label=&quot;Page navigation&quot;&gt;</span><br><span class="line">    &lt;ul class=&quot;pagination&quot;&gt;</span><br><span class="line">      &#123;&#123;page_string&#125;&#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/nav&gt;</span><br><span class="line">  &lt;!-- &lt;form class=&quot;navbar-form navbar-left&quot; method=&quot;GET&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;Search&quot; name=&quot;page&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;Submit&lt;/button&gt;</span><br><span class="line">  &lt;/form&gt; --&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><h2 id="BootStrap样式父类"><a href="#BootStrap样式父类" class="headerlink" title="BootStrap样式父类"></a>BootStrap样式父类</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br></pre></td><td class="code"><pre><span class="line">from django.shortcuts import render,HttpResponse,redirect</span><br><span class="line">from .models import Department,Employee,PrettyNum</span><br><span class="line">from django import forms</span><br><span class="line">from django.core.exceptions import ValidationError</span><br><span class="line">from django.core.validators import RegexValidator</span><br><span class="line">from django.utils.safestring import mark_safe</span><br><span class="line">from app01.utils.pagination import Pagination</span><br><span class="line">import copy</span><br><span class="line"># Create your views here.</span><br><span class="line">def department_list(request):</span><br><span class="line">    member_list=Department.objects.all()</span><br><span class="line">    return  render(request,&#x27;dep.html&#x27;,&#123;&#x27;member&#x27;:member_list&#125;)</span><br><span class="line"></span><br><span class="line">def add_dep(request):</span><br><span class="line">    if request.method==&#x27;GET&#x27;:</span><br><span class="line">        return render(request,&#x27;adddep.html&#x27;)</span><br><span class="line">    elif request.method==&#x27;POST&#x27;:</span><br><span class="line">        title=request.POST.get(&#x27;aatitle&#x27;)</span><br><span class="line">        Department.objects.create(tittle=title)</span><br><span class="line">        return redirect(&quot;/dep/list/&quot;)</span><br><span class="line"></span><br><span class="line">def delete_dep(request):</span><br><span class="line">    memid=request.GET.get(&#x27;memid&#x27;)</span><br><span class="line">    Department.objects.filter(id=memid).delete()</span><br><span class="line">    return redirect(&quot;/dep/list/&quot;)</span><br><span class="line">def edit_dep(request,memid):</span><br><span class="line">    if request.method==&#x27;GET&#x27;:</span><br><span class="line">        nnmame=Department.objects.filter(id=memid).first()</span><br><span class="line">        return render(request,&#x27;editdpt.html&#x27;,&#123;&#x27;nnmame&#x27;:nnmame.tittle&#125;)</span><br><span class="line">    aatitle=request.POST.get(&#x27;aatitle&#x27;)</span><br><span class="line">    Department.objects.filter(id=memid).update(tittle=aatitle)</span><br><span class="line">    return redirect(&quot;/dep/list/&quot;)</span><br><span class="line"></span><br><span class="line">def test(request):</span><br><span class="line">    return render(request,&#x27;tt.html&#x27;)</span><br><span class="line">def usr_list(request):</span><br><span class="line">        # for i in range(300):</span><br><span class="line">        #     Employee.objects.create(name=&quot;maomao&quot;,password=123,age=50,create_time=&#x27;2023-10-5&#x27;,depart_id=5)</span><br><span class="line">    </span><br><span class="line">        qurylist=Employee.objects.all()</span><br><span class="line"></span><br><span class="line">        page_object=Pagination(request,qurylist)</span><br><span class="line"></span><br><span class="line">        context=&#123;</span><br><span class="line">            &quot;qurylist&quot;:page_object.page_qurylist,</span><br><span class="line">            &quot;page_string&quot;:page_object.html(),</span><br><span class="line">        &#125;</span><br><span class="line">        return render(request,&#x27;usr.html&#x27;,context)</span><br><span class="line"># class MyForm(forms.Form):</span><br><span class="line">    # usr=forms.CharField(widget=forms.EmailInput)</span><br><span class="line">    # pwd=forms.CharField(widget=forms.PasswordInput)</span><br><span class="line">    # age=forms.ImageField(widget=forms.NumberInput)</span><br><span class="line"># class MyForm(forms.Form):</span><br><span class="line">#     class Meta:</span><br><span class="line">#         model=Employee</span><br><span class="line">#         fields=[&#x27;name&#x27;,&#x27;password&#x27;,&#x27;age&#x27;]</span><br><span class="line">def add_usr(request):</span><br><span class="line">    </span><br><span class="line">    context=&#123;</span><br><span class="line">        &#x27;gender_choice&#x27;:Employee.gender_choices,</span><br><span class="line">        &#x27;depart_list&#x27;:Department.objects.all()</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    # form=MyForm()</span><br><span class="line">    </span><br><span class="line">    return render(request,&#x27;add_usr.html&#x27;,context)</span><br><span class="line">    # return render(request,&#x27;add_usr_fro.html&#x27;,&#123;&#x27;form&#x27;:form&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class MyForm(forms.ModelForm):</span><br><span class="line">    # name=forms.CharField(min_length=3,label=&quot;用户名&quot;)</span><br><span class="line">    # usr=forms.CharField(widget=forms.EmailInput)</span><br><span class="line">    # pwd=forms.CharField(widget=forms.PasswordInput)</span><br><span class="line">    # age=forms.ImageField(widget=forms.NumberInput)</span><br><span class="line">    class Meta:</span><br><span class="line">        model=Employee</span><br><span class="line">        fields=[&#x27;name&#x27;,&#x27;password&#x27;,&#x27;age&#x27;,&#x27;account&#x27;,&#x27;create_time&#x27;,&#x27;depart&#x27;,&#x27;gender&#x27;]</span><br><span class="line">        widgets=&#123;</span><br><span class="line">            &quot;name&quot;:forms.TextInput(attrs=&#123;&quot;class&quot;:&quot;form-control&quot;&#125;),</span><br><span class="line">            &quot;age&quot;:forms.TextInput(attrs=&#123;&quot;class&quot;:&quot;form-control&quot;&#125;),</span><br><span class="line">            &quot;create-time&quot;:forms.TextInput(attrs=&#123;&quot;type&quot;:&quot;data&quot;&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        # def __init__(self,*args, **kwargs):</span><br><span class="line">        #    super().__init__(*args,**kwargs)</span><br><span class="line">        #</span><br><span class="line">        #    for name,field in self.fields.items():</span><br><span class="line">        #        field.Widget.attrs=&#123;&quot;class&quot;:&quot;form-control&quot;,&quot;placeholder&quot;:field.label&#125;</span><br><span class="line"></span><br><span class="line">def add_usr_form(request):</span><br><span class="line">    if request.method == &quot;GET&quot;:</span><br><span class="line">      form=MyForm()</span><br><span class="line">      return render(request,&#x27;add_usr_fro.html&#x27;,&#123;&#x27;form&#x27;:form&#125;)</span><br><span class="line">    </span><br><span class="line">    # post 校验</span><br><span class="line">    form=MyForm(data=request.POST)</span><br><span class="line">    if form.is_valid():</span><br><span class="line">        form.save()</span><br><span class="line">        return redirect(&#x27;/usr/list/&#x27;)</span><br><span class="line">    else:</span><br><span class="line">        return render(request,&#x27;add_usr_fro.html&#x27;,&#123;&quot;form&quot;:form&#125;)</span><br><span class="line">def usr_edit(request,nid):</span><br><span class="line">    #获取默认值</span><br><span class="line">    row_object=Employee.objects.filter(id=nid).first()</span><br><span class="line">    if request.method ==&#x27;GET&#x27;:</span><br><span class="line">        form =MyForm(instance=row_object)</span><br><span class="line">        return render(request,&#x27;usr_edit.html&#x27;,&#123;&#x27;form&#x27;:form&#125;)</span><br><span class="line">    #post</span><br><span class="line">    form=MyForm(data=request.POST,instance=row_object)</span><br><span class="line">    if form.is_valid():</span><br><span class="line">        form.save()</span><br><span class="line">        return redirect(&#x27;/usr/list/&#x27;)</span><br><span class="line">    return render(request,&#x27;usr_edit.html&#x27;,&#123;&#x27;form&#x27;:form&#125;)</span><br><span class="line">def usr_delete(request,nid):</span><br><span class="line">    Employee.objects.filter(id=nid).delete()</span><br><span class="line">    return redirect(&#x27;/usr/list/&#x27;)</span><br><span class="line">class PrettyForm(forms.ModelForm):</span><br><span class="line">    # 验证方法一</span><br><span class="line">    # mobile=forms.CharField(</span><br><span class="line">    #     label=&quot;手机号&quot;,</span><br><span class="line">    #     validators=[RegexValidator(r&#x27;^1[3-9]\d&#123;9&#125;$&#x27;,&#x27;手机号格式错误&#x27;)]</span><br><span class="line">    # )</span><br><span class="line">    class Meta:</span><br><span class="line">        model=PrettyNum</span><br><span class="line">        fields=[&#x27;mobile&#x27;,&#x27;price&#x27;,&#x27;level&#x27;,&#x27;status&#x27;]</span><br><span class="line">        # fields=&quot;__all__&quot;</span><br><span class="line">        # exclude=[&#x27;level&#x27;]</span><br><span class="line">        widgets=&#123;</span><br><span class="line">            &quot;mobile&quot;:forms.TextInput(attrs=&#123;&quot;class&quot;:&quot;form-control&quot;&#125;),</span><br><span class="line">            &quot;price&quot;:forms.TextInput(attrs=&#123;&quot;class&quot;:&quot;form-control&quot;&#125;),</span><br><span class="line">            &quot;level&quot;:forms.TextInput(attrs=&#123;&quot;class&quot;:&quot;form-control&quot;&#125;),</span><br><span class="line">            &quot;status&quot;:forms.TextInput(attrs=&#123;&quot;class&quot;:&quot;form-control&quot;&#125;),</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"># 验证方法二</span><br><span class="line">    def clean_mobile(self):</span><br><span class="line">        txt_mobile=self.cleaned_data[&quot;mobile&quot;]</span><br><span class="line">        exists=PrettyNum.objects.filter(mobile=txt_mobile).exists()</span><br><span class="line"></span><br><span class="line">        if len(txt_mobile)!=11:</span><br><span class="line">            #验证不通过</span><br><span class="line">            raise ValidationError(&quot;格式错误&quot;)</span><br><span class="line">        if exists:</span><br><span class="line">            #验证不通过</span><br><span class="line">            raise ValidationError(&quot;手机号已存在&quot;)</span><br><span class="line">        return txt_mobile</span><br><span class="line">def pretty_list(request):</span><br><span class="line">##搜索</span><br><span class="line"># --------------------</span><br><span class="line"># 1.PrettyNum.objects.filter&#123;mobile=&#x27;13906135233&#x27;,&quot;id&quot;:123&#125;</span><br><span class="line"># 2.data_dict=&#123;&quot;mobile&quot;:&quot;13906135233&quot;,&quot;id&quot;:123&#125;</span><br><span class="line">#   PrettyNum.objects.filter(**data_dict)</span><br><span class="line"># --------------------------------</span><br><span class="line"># PrettyNum.objects.filter(id=12)  等于12</span><br><span class="line"># PrettyNum.objects.filter(id__gt=12) 大于12</span><br><span class="line"># PrettyNum.objects.filter(id__gte=12) 大于等于12</span><br><span class="line"># PrettyNum.objects.filter(id__lt=12)   小于12</span><br><span class="line"># PrettyNum.objects.filter(id__lte=12) 小于等于12</span><br><span class="line"></span><br><span class="line"># data_dict=&#123;&quot;id__lte&quot;:12&#125;</span><br><span class="line"># # -----------------------------------</span><br><span class="line"># PrettyNum.objects.filter(mobile=&#x27;233&#x27;)  等于</span><br><span class="line"># PrettyNum.objects.filter(mobile__startswitch=&quot;139&quot;) 筛选出以139开头</span><br><span class="line"># PrettyNum.objects.filter(mobile__endswitch=&quot;233&quot;) 筛选出以233结尾</span><br><span class="line"># PrettyNum.objects.filter(mobile__contains=&quot;5233&quot;) 筛选出包含5233</span><br><span class="line"># use</span><br><span class="line"># data_dict=&#123;&quot;mobile__contains&quot;:&quot;233&quot;&#125;</span><br><span class="line"># PrettyNum.objects.filter(**data_dict)</span><br><span class="line"># ----------------------------------------</span><br><span class="line"># test</span><br><span class="line">    # for i in range(300):</span><br><span class="line">    #     PrettyNum.objects.create(mobile=&quot;13906135899&quot;,price=10,level=1,status=1)</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">    # print(request.GET)</span><br><span class="line">    # request.GET.setlist(&#x27;xx&#x27;,11)</span><br><span class="line">    # print(request.GET.urlencode())</span><br><span class="line"></span><br><span class="line">    #q=123&amp;page=2</span><br><span class="line"></span><br><span class="line">    # get_object=copy.deepcopy(request.GET)</span><br><span class="line">    # get_object._mutable=True</span><br><span class="line">    # get_object.setlist(&#x27;page&#x27;,[11])</span><br><span class="line">    # print(get_object.urlencode())</span><br><span class="line">    qury_dict=copy.deepcopy(request.GET)</span><br><span class="line">    qury_dict._mutable=True</span><br><span class="line">    qury_dict.setlist(&#x27;page&#x27;,[11])</span><br><span class="line">    print(qury_dict.urlencode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    data_dict=&#123;&#125;</span><br><span class="line">    value=request.GET.get(&#x27;q&#x27;,&#x27;&#x27;)</span><br><span class="line">    if value:</span><br><span class="line">        data_dict[&quot;mobile__contains&quot;] = value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    qurylist=PrettyNum.objects.filter(**data_dict).order_by(&quot;-level&quot;)</span><br><span class="line">    page_object= Pagination(request,qurylist)</span><br><span class="line">    page_qurylist=page_object.page_qurylist</span><br><span class="line">    page_string=page_object.html()</span><br><span class="line">    context=&#123;&#x27;qurylist&#x27;:page_qurylist,</span><br><span class="line">             &quot;search_data&quot;:value,</span><br><span class="line">             &quot;page_string&quot;:page_string&#125;</span><br><span class="line">    # res=PrettyNum.objects.filter(**data_dict)</span><br><span class="line">    # print(res)</span><br><span class="line"></span><br><span class="line">    # if request.method==&#x27;GET&#x27;:</span><br><span class="line">    # ****qurylist=PrettyNum.objects.filter(**data_dict).order_by(&quot;-level&quot;)[start:end]</span><br><span class="line">    #select * from 表 order by level desc</span><br><span class="line">    # qurylist=PrettyNum.objects.all().order_by(&quot;-level&quot;)</span><br><span class="line">#分页</span><br><span class="line">    # qurylist=PrettyNum.objects.all()</span><br><span class="line">    # qurylist=PrettyNum.objects.filter(id=4)[0:10]</span><br><span class="line">    # qurylist=PrettyNum.objects.all()[0:10]</span><br><span class="line">    # qurylist=PrettyNum.objects.all()[10:20]</span><br><span class="line">    # qurylist=PrettyNum.objects.all()[20:30]</span><br><span class="line">    # page=int(request.GET.get(&#x27;page&#x27;,1))</span><br><span class="line">    # pageSize=10</span><br><span class="line">    # start=(page-1)*pageSize</span><br><span class="line">    # end=page*pageSize</span><br><span class="line"></span><br><span class="line">    # qurylist=PrettyNum.objects.filter(**data_dict).order_by(&quot;-level&quot;)[page_object.start:page_object.end]</span><br><span class="line">   #总数据条数</span><br><span class="line">#     total_count=PrettyNum.objects.filter(**data_dict).order_by(&quot;-level&quot;).count()</span><br><span class="line">#    #总页码</span><br><span class="line">#     total_page_count,div=divmod(total_count,pageSize)</span><br><span class="line">#     if div:</span><br><span class="line">#         total_page_count+=1</span><br><span class="line"></span><br><span class="line">    # 计算出，显示当前页的前5页、后5页</span><br><span class="line">#     plus=5</span><br><span class="line">#     if total_page_count&lt;=2*plus+1:</span><br><span class="line">#         #数据库中的数据比较少，都没有达到11页</span><br><span class="line">#         start_page=1</span><br><span class="line">#         end_page=total_page_count</span><br><span class="line">#     else:</span><br><span class="line">#         #数据库中的数据比较多 &gt;11页</span><br><span class="line"></span><br><span class="line">#         #当前页&lt;5时(极小值)</span><br><span class="line">#         if page&lt;=plus:</span><br><span class="line">#             start_page=1</span><br><span class="line">#             end_page=2*plus+1</span><br><span class="line">#         else:</span><br><span class="line">#             #当前页&gt;5</span><br><span class="line">#             #当前页+5&gt;总页面</span><br><span class="line">#             if (page+plus)&gt;total_page_count:</span><br><span class="line">#                 start_page=total_page_count-2*plus</span><br><span class="line">#                 end_page=total_page_count</span><br><span class="line">#             else:</span><br><span class="line">#                 start_page=page-plus</span><br><span class="line">#                 end_page=page+plus</span><br><span class="line">#     #页码</span><br><span class="line">#     page_str_list=[]</span><br><span class="line">#     #首页</span><br><span class="line">#     page_str_list.append(&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;&#x27;.format(1))</span><br><span class="line">#     #上一页</span><br><span class="line">#     if page&gt;1:</span><br><span class="line">#         prev=&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;&#x27;.format(page-1)</span><br><span class="line">#     else:</span><br><span class="line">#         prev=&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;&#x27;.format(1)</span><br><span class="line">#     page_str_list.append(prev)</span><br><span class="line">    </span><br><span class="line">#     for i in range(start_page,end_page+1):</span><br><span class="line">#         if i==page:</span><br><span class="line">#             ele=&#x27;&lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;&#123;&#125;&lt;/a&gt;&lt;/li&gt;&#x27;.format(i,i)</span><br><span class="line">#         else:</span><br><span class="line">#             ele=&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;&#123;&#125;&lt;/a&gt;&lt;/li&gt;&#x27;.format(i,i)</span><br><span class="line">#         page_str_list.append(ele)</span><br><span class="line">#     #下一页</span><br><span class="line">#     if page&lt;total_page_count:</span><br><span class="line">#         prev=&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;&#x27;.format(page+1)</span><br><span class="line">#     else:</span><br><span class="line">#         prev=&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;&#x27;.format(total_page_count)</span><br><span class="line">#     page_str_list.append(prev)</span><br><span class="line">#     #尾页</span><br><span class="line">#     page_str_list.append(&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;尾页&lt;/a&gt;&lt;/li&gt;&#x27;.format(total_page_count))</span><br><span class="line">#     search_string=&quot;&quot;&quot;&quot;</span><br><span class="line">#   &lt;form class=&quot;navbar-form navbar-left&quot; method=&quot;GET&quot;&gt;</span><br><span class="line">#     &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">#       &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;Search&quot; name=&quot;page&quot;&gt;</span><br><span class="line">#     &lt;/div&gt;</span><br><span class="line">#     &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;Submit&lt;/button&gt;</span><br><span class="line">#   &lt;/form&gt;</span><br><span class="line">#     &quot;&quot;&quot;</span><br><span class="line">#     page_str_list.append(search_string)</span><br><span class="line">#     page_string =mark_safe(&quot;&quot;.join(page_str_list))</span><br><span class="line">    return render(request,&#x27;pretty_list.html&#x27;,context)</span><br><span class="line">def pretty_add(request):</span><br><span class="line">    if request.method==&#x27;GET&#x27;:</span><br><span class="line">        form=PrettyForm()</span><br><span class="line">        return render(request,&#x27;pretty_add.html&#x27;,&#123;&#x27;form&#x27;:form&#125;)</span><br><span class="line">    #post校验</span><br><span class="line">    form=PrettyForm(data=request.POST)</span><br><span class="line">    if form.is_valid():</span><br><span class="line">        form.save()</span><br><span class="line">        return redirect(&#x27;/pretty/list/&#x27;)</span><br><span class="line">    else:</span><br><span class="line">        return render(request,&#x27;pretty_add.html&#x27;,&#123;&quot;form&quot;:form&#125;)</span><br><span class="line">class PrettyEditModelForm(forms.ModelForm):</span><br><span class="line">        # 验证方法一</span><br><span class="line">    mobile=forms.CharField(</span><br><span class="line">  </span><br><span class="line">        label=&quot;手机号&quot;,</span><br><span class="line">        # disabled=True,</span><br><span class="line">        validators=[RegexValidator(r&#x27;^1[3-9]\d&#123;9&#125;$&#x27;,&#x27;手机号格式错误&#x27;)],</span><br><span class="line">    ) </span><br><span class="line">    ## mobile=forms.CharField(disabled=True,label=&quot;手机号&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        model=PrettyNum</span><br><span class="line">        fields=[&#x27;mobile&#x27;,&#x27;price&#x27;,&#x27;level&#x27;,&#x27;status&#x27;]</span><br><span class="line">    def clean_mobile(self):</span><br><span class="line">    #     print(self.instance.pk)</span><br><span class="line">        </span><br><span class="line">        txt_mobile=self.cleaned_data[&quot;mobile&quot;]</span><br><span class="line">        exists=PrettyNum.objects.exclude(id=self.instance.pk).filter(mobile=txt_mobile).exists()</span><br><span class="line">        # if len(txt_mobile)!=11:</span><br><span class="line">        #     # 验证不通过</span><br><span class="line">        #     raise ValidationError(&quot;格式错误&quot;)</span><br><span class="line">        if exists:</span><br><span class="line">            #验证不通过</span><br><span class="line">            raise ValidationError(&quot;手机号已存在&quot;)</span><br><span class="line">        return txt_mobile</span><br><span class="line">       </span><br><span class="line">def pertty_edit(request,nid):</span><br><span class="line">    row_object=PrettyNum.objects.filter(id=nid).first()</span><br><span class="line">    if request.method==&#x27;GET&#x27;:</span><br><span class="line">        form=PrettyEditModelForm(instance=row_object)</span><br><span class="line">        return render(request,&#x27;pretty_edit.html&#x27;,&#123;&#x27;form&#x27;:form&#125;)</span><br><span class="line">    #post</span><br><span class="line">    form=PrettyEditModelForm(data=request.POST,instance=row_object)</span><br><span class="line">    if form.is_valid():</span><br><span class="line">        form.save()</span><br><span class="line">        return redirect(&#x27;/pretty/list/&#x27;)</span><br><span class="line">    else:</span><br><span class="line">        return render(request,&#x27;pretty_edit.html&#x27;,&#123;&#x27;form&#x27;:form&#125;)</span><br><span class="line">def pertty_delete(request,nid):</span><br><span class="line">    PrettyNum.objects.filter(id=nid).delete()</span><br><span class="line">    return redirect(&#x27;/pretty/list/&#x27;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark入门：RDD编程（2）</title>
      <link href="/2023/03/21/Spark%E5%85%A5%E9%97%A8%EF%BC%9ARDD%E7%BC%96%E7%A8%8B%EF%BC%882%EF%BC%89/"/>
      <url>/2023/03/21/Spark%E5%85%A5%E9%97%A8%EF%BC%9ARDD%E7%BC%96%E7%A8%8B%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Spark入门：RDD编程-2"><a href="#Spark入门：RDD编程-2" class="headerlink" title="Spark入门：RDD编程(2)"></a>Spark入门：RDD编程(2)</h1><h1 id="4-2键值对RDD"><a href="#4-2键值对RDD" class="headerlink" title="4.2键值对RDD"></a>4.2键值对RDD</h1><h3 id="4-2-1键值对RDD的创建"><a href="#4-2-1键值对RDD的创建" class="headerlink" title="4.2.1键值对RDD的创建"></a>4.2.1键值对RDD的创建</h3><p><img src="E:\BLOG\blog1\source\images\spark\55.png" alt="1679919962655"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lines=sc.textFile(&quot;file:///usr/local/spark/mycode/rdd/word.txt&quot;)</span><br><span class="line"></span><br><span class="line">pairRdd=lines.flatMap(lambda line:line.split(&quot; &quot;)).map(lambda word:(word,1))</span><br><span class="line"></span><br><span class="line">pairRdd.foreach(print)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="E:\BLOG\blog1\source\images\spark\57.png" alt="1679920610754"></p><p><img src="E:\BLOG\blog1\source\images\spark\56.png" alt="1679920024570"></p><p><img src="E:\BLOG\blog1\source\images\spark\58.png" alt="1679920857471"></p><h3 id="4-2-2常用键值对转换操作"><a href="#4-2-2常用键值对转换操作" class="headerlink" title="4.2.2常用键值对转换操作"></a>4.2.2常用键值对转换操作</h3><p><img src="E:\BLOG\blog1\source\images\spark\59.png" alt="1679920904927"></p><h4 id="1-reduceByKey-func"><a href="#1-reduceByKey-func" class="headerlink" title="1.reduceByKey(func)"></a>1.reduceByKey(func)</h4><p><img src="E:\BLOG\blog1\source\images\spark\60.png" alt="1679920937895"></p><p><img src="E:\BLOG\blog1\source\images\spark\61.png" alt="1679921092076"></p><h4 id="2-groupByKey"><a href="#2-groupByKey" class="headerlink" title="2.groupByKey()"></a>2.groupByKey()</h4><p><img src="E:\BLOG\blog1\source\images\spark\62.png" alt="1679921126885"></p><p><img src="E:\BLOG\blog1\source\images\spark\63.png" alt="1679921148329"></p><p><img src="E:\BLOG\blog1\source\images\spark\64.png" alt="1679921162978"></p><h4 id="3-key"><a href="#3-key" class="headerlink" title="3.key"></a>3.key</h4><p><img src="E:\BLOG\blog1\source\images\spark\65.png" alt="1679921231527"></p><h4 id="4-value"><a href="#4-value" class="headerlink" title="4.value"></a>4.value</h4><p><img src="E:\BLOG\blog1\source\images\spark\66.png" alt="1679921285079"></p><h4 id="5-sortByKey"><a href="#5-sortByKey" class="headerlink" title="5.sortByKey()"></a>5.sortByKey()</h4><p><img src="E:\BLOG\blog1\source\images\spark\67.png" alt="1679921328845"></p><h4 id="6-sortBy"><a href="#6-sortBy" class="headerlink" title="6.sortBy()"></a>6.sortBy()</h4><p><img src="E:\BLOG\blog1\source\images\spark\68.png" alt="1679921389676"></p><h4 id="7-mapValues-func"><a href="#7-mapValues-func" class="headerlink" title="7.mapValues(func)"></a>7.mapValues(func)</h4><p><img src="E:\BLOG\blog1\source\images\spark\69.png" alt="1679921487925"></p><h4 id="8-join"><a href="#8-join" class="headerlink" title="8.join"></a>8.join</h4><p><img src="E:\BLOG\blog1\source\images\spark\70.png" alt="1679921512081"></p><h3 id="4-2-3一个综合实例"><a href="#4-2-3一个综合实例" class="headerlink" title="4.2.3一个综合实例"></a>4.2.3一个综合实例</h3><p><img src="E:\BLOG\blog1\source\images\spark\71.png" alt="1679921667681"></p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark入门：RDD编程（1）</title>
      <link href="/2023/03/20/spark/"/>
      <url>/2023/03/20/spark/</url>
      
        <content type="html"><![CDATA[<h1 id="Spark入门：RDD编程-1"><a href="#Spark入门：RDD编程-1" class="headerlink" title="Spark入门：RDD编程(1)"></a>Spark入门：RDD编程(1)</h1><span id="more"></span><h1 id="4-1RDD编程基础"><a href="#4-1RDD编程基础" class="headerlink" title="4.1RDD编程基础"></a>4.1RDD编程基础</h1><h2 id="RDD创建"><a href="#RDD创建" class="headerlink" title="RDD创建"></a>RDD创建</h2><p>RDD可以通过两种方式创建：</p><ul><li>第一种：读取一个外部数据集。比如，从本地文件加载数据集，或者从HDFS文件系统、HBase、Cassandra、Amazon S3等外部数据源中加载数据集。Spark可以支持文本文件、SequenceFile文件（Hadoop提供的 SequenceFile是一个由二进制序列化过的key&#x2F;value的字节流组成的文本存储文件）和其他符合Hadoop InputFormat格式的文件。</li><li>第二种：调用SparkContext的parallelize方法，在Driver中一个已经存在的集合（数组）上创建</li></ul><p>在即将进行相关的实践操作之前，我们首先要登录Linux系统（本教程统一采用hadoop用户登录），然后，打开命令行“终端”，请按照下面的命令启动Hadoop中的HDFS组件：</p><h3 id="创建RDD之前的准备工作"><a href="#创建RDD之前的准备工作" class="headerlink" title="创建RDD之前的准备工作"></a>创建RDD之前的准备工作</h3><p>在即将进行相关的实践操作之前，我们首先要登录Linux系统（本教程统一采用hadoop用户登录），然后，打开命令行“终端”，请按照下面的命令启动Hadoop中的HDFS组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd  /usr/local/hadoop</span><br><span class="line">./sbin/start-dfs.sh</span><br></pre></td></tr></table></figure><p>然后，我们按照下面命令启动spark-shell：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/spark</span><br><span class="line">./bin/pyspark</span><br></pre></td></tr></table></figure><p><img src="/images/spark/1.png" alt="1678715171189"></p><p>然后，新建第二个“终端”，方法是，在前面已经建设的第一个终端窗口的左上方，点击“终端”菜单，在弹出的子菜单中选择“新建终端”，就可以打开第二个终端窗口，现在，我们切换到第二个终端窗口，在第二个终端窗口中，执行以下命令，进入之前已经创建好的“&#x2F;usr&#x2F;local&#x2F;spark&#x2F;mycode&#x2F;”目录，在这个目录下新建rdd子目录，用来存放本章的代码和相关文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd usr/local/spark/mycode/</span><br><span class="line">mkdir rdd</span><br></pre></td></tr></table></figure><p>然后，使用vim编辑器，在rdd目录下新建一个word.txt文件，你可以在文件里面随便输入几行英文语句用来测试。</p><p>经过上面的准备工作以后，我们就可以开始创建RDD了。</p><h3 id="从文件系统中加载数据创建RDD"><a href="#从文件系统中加载数据创建RDD" class="headerlink" title="从文件系统中加载数据创建RDD"></a>从文件系统中加载数据创建RDD</h3><p>Spark采用textFile()方法来从文件系统中加载数据创建RDD，该方法把文件的URI作为参数，这个URI可以是本地文件系统的地址，或者是分布式文件系统HDFS的地址，或者是Amazon S3的地址等等。<br>下面请切换回spark-shell窗口，看一下如何从本地文件系统中加载数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;lines = sc.textFile(&quot;file:///usr/local/spark/mycode/rdd/word.txt&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/spark/2.png" alt="1678715444810"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;lines.foreach(print)</span><br></pre></td></tr></table></figure><p><img src="/images/spark/3.png" alt="1678715770877"></p><p><img src="/images/spark/14.png" alt="1678720839060"></p><h3 id="加载HDFS中的文件"><a href="#加载HDFS中的文件" class="headerlink" title="加载HDFS中的文件"></a>加载HDFS中的文件</h3><p>为了能够读取HDFS中的文件，请首先启动Hadoop中的HDFS组件。注意，之前我们在“Spark安装”这章内容已经介绍了如何安装Hadoop和Spark，所以，这里我们可以使用以下命令直接启动Hadoop中的HDFS组件（由于用不到MapReduce组件，所以，不需要启动MapReduce或者YARN）。请到第二个终端窗口，使用Linux Shell命令提示符状态，然后输入下面命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/hadoop</span><br><span class="line">./sbin/start-dfs.sh</span><br></pre></td></tr></table></figure><p><img src="/images/spark/4.png" alt="1678715996913"></p><p>启动结束后，HDFS开始进入可用状态。如果你在HDFS文件系统中，还没有为当前Linux登录用户创建目录(本教程统一使用用户名hadoop登录Linux系统)，请使用下面命令创建：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/hdfs dfs -mkdir -p /user/hadoop</span><br></pre></td></tr></table></figure><p>也就是说，HDFS文件系统为Linux登录用户开辟的默认目录是“&#x2F;user&#x2F;用户名”（注意：是user，不是usr），本教程统一使用用户名hadoop登录Linux系统，所以，上面创建了“&#x2F;user&#x2F;hadoop”目录，再次强调，这个目录是在HDFS文件系统中，不在本地文件系统中。创建好以后，下面我们使用命令查看一下HDFS文件系统中的目录和文件：</p><p><img src="/images/spark/5.png" alt="1678716107634"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/hdfs dfs -ls .</span><br></pre></td></tr></table></figure><p>** 但这个命令我搞不出来，显示的是这个</p><p><img src="/images/spark/6.png" alt="1678717090642"></p><p>–</p><p>上面命令中，最后一个点号“.”，表示要查看Linux当前登录用户hadoop在HDFS文件系统中与hadoop对应的目录下的文件，也就是查看HDFS文件系统中“&#x2F;user&#x2F;hadoop&#x2F;”目录下的文件，所以，下面两条命令是等价的：</p><p>–</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./bin/hdfs dfs -ls .</span><br><span class="line">./bin/hdfs dfs -ls /user/hadoop</span><br></pre></td></tr></table></figure><p> 你自己可以试一试，只有第二个可以用</p><p><img src="/images/spark/7.png" alt="1678717187423"></p><p>如果要查看HDFS文件系统根目录下的内容，需要使用下面命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/hdfs dfs -ls /</span><br></pre></td></tr></table></figure><p>然后输出的东西见上面那个图，有一个items</p><p>下面，我们把本地文件系统中的“&#x2F;usr&#x2F;local&#x2F;spark&#x2F;mycode&#x2F;rdd&#x2F;word.txt”上传到分布式文件系统HDFS中（放到hadoop用户目录下）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/hdfs dfs -put /usr/local/spark/mycode/rdd/word.txt /user/hadoop</span><br></pre></td></tr></table></figure><p><img src="/images/spark/8.png" alt="1678717295097"></p><p>然后，用命令查看一下HDFS的hadoop用户目录下是否多了word.txt文件，可以使用下面命令列出hadoop目录下的内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/hdfs dfs -ls /</span><br></pre></td></tr></table></figure><p><img src="/images/spark/9.png" alt="1678717376742"></p><p>可以看到，确实多了一个word.txt文件，我们使用cat命令查看一个HDFS中的word.txt文件的内容，命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/hdfs dfs -cat ./word.txt</span><br></pre></td></tr></table></figure><p><img src="/images/spark/10.png" alt="1678717420477"></p><p>上面命令执行后，就会看到HDFS中word.txt的内容了。</p><p>现在，让我们切换回到spark-shell窗口，编写语句从HDFS中加载word.txt文件，并显示第一行文本内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;lines= sc.textFile(&quot;hdfs://localhost:9000/user/hadoop/word.txt&quot;)</span><br><span class="line">&gt;&gt;&gt;lines=sc.foreach(print)</span><br></pre></td></tr></table></figure><p><img src="/images/spark/11.png" alt="1678717605626"></p><p><img src="/images/spark/12.png" alt="1678717639868"></p><p>注意，上面三条命令是完全等价的命令，只不过使用了不同的目录形式，你可以使用其中任意一条命令完成数据加载操作。</p><p>在使用Spark读取文件时，需要说明以下几点：<br>（1）如果使用了本地文件系统的路径，那么，必须要保证在所有的worker节点上，也都能够采用相同的路径访问到该文件，比如，可以把该文件拷贝到每个worker节点上，或者也可以使用网络挂载共享文件系统。<br>（2）textFile()方法的输入参数，可以是文件名，也可以是目录，也可以是压缩文件等。比如，textFile(“&#x2F;my&#x2F;directory”), textFile(“&#x2F;my&#x2F;directory&#x2F;<em>.txt”), and textFile(“&#x2F;my&#x2F;directory&#x2F;</em>.gz”).<br>（3）textFile()方法也可以接受第2个输入参数（可选），用来指定分区的数目。默认情况下，Spark会为HDFS的每个block创建一个分区（HDFS中每个block默认是128MB）。你也可以提供一个比block数量更大的值作为分区数目，但是，你不能提供一个小于block数量的值作为分区数目。</p><h3 id="通过并行集合（数组）创建RDD"><a href="#通过并行集合（数组）创建RDD" class="headerlink" title="通过并行集合（数组）创建RDD"></a>通过并行集合（数组）创建RDD</h3><p>可以调用SparkContext的parallelize方法，在Driver中一个已经存在的集合（数组）上创建。<br>下面请在spark-shell中操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;array = [1,2,3,4,5]</span><br><span class="line">&gt;&gt;&gt;rdd = sc.parallelize(array)</span><br><span class="line">&gt;&gt;&gt;rdd.foreach(print)</span><br></pre></td></tr></table></figure><p><img src="/images/spark/13.png" alt="1678720471787"></p><p><img src="/images/spark/15.png" alt="1678720865514"></p><h2 id="RDD操作"><a href="#RDD操作" class="headerlink" title="RDD操作"></a>RDD操作</h2><p>RDD被创建好以后，在后续使用过程中一般会发生两种操作：<br>*  转换（Transformation）： 基于现有的数据集创建一个新的数据集。<br>*  行动（Action）：在数据集上进行运算，返回计算值。</p><h3 id="Ⅰ转换操作"><a href="#Ⅰ转换操作" class="headerlink" title="Ⅰ转换操作"></a>Ⅰ转换操作</h3><p>对于RDD而言，每一次转换操作都会产生不同的RDD，供给下一个“转换”使用。转换得到的RDD是惰性求值的，也就是说，整个转换过程只是记录了转换的轨迹，并不会发生真正的计算，只有遇到行动操作时，才会发生真正的计算，开始从血缘关系源头开始，进行物理的转换操作。<br>下面列出一些常见的转换操作（Transformation API）：<br>* filter(func)：筛选出满足函数func的元素，并返回一个新的数据集<br>* map(func)：将每个元素传递到函数func中，并将结果返回为一个新的数据集<br>* flatMap(func)：与map()相似，但每个输入元素都可以映射到0或多个输出结果<br>* groupByKey()：应用于(K,V)键值对的数据集时，返回一个新的(K, Iterable)形式的数据集<br>* reduceByKey(func)：应用于(K,V)键值对的数据集时，返回一个新的(K, V)形式的数据集，其中的每个值是将每个key传递到函数func中进行聚合</p><p><img src="/images/spark/16.png" alt="1678720959522"></p><p><img src="/images/spark/17.png" alt="1678720974857"></p><h4 id="1-filter-func"><a href="#1-filter-func" class="headerlink" title="1.filter(func)"></a>1.filter(func)</h4><p><img src="/images/spark/18.png" alt="1678720994986"></p><p>好吧，这个书上说要把word.txt写成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Hadoop is good</span><br><span class="line"></span><br><span class="line">Spark is fast</span><br><span class="line"></span><br><span class="line">Spark is better</span><br></pre></td></tr></table></figure><p>那我们就</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/spark/mycode/rdd</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gedit word.txt</span><br></pre></td></tr></table></figure><p>然后再</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;lines=sc.textFile(&quot;file:///usr/local/spark/mycode/rdd/word.txt&quot;)</span><br><span class="line">&gt;&gt;&gt;linesWithSpark = lines.filter(lambda line: &quot;Spark&quot; in line)</span><br><span class="line">&gt;&gt;&gt;linesWithSpark.foreach(print)</span><br></pre></td></tr></table></figure><p><img src="/images/spark/20.png" alt="1678722624927"></p><p>上面的代码中，lines就是一个RDD。lines.filter()会遍历lines中的每行文本，并对每行文本执行括号中的匿名函数，也就是执行Lamda表达式：line &#x3D;&gt; line.contains(“Spark”)，在执行Lamda表达式时，会把当前遍历到的这行文本内容赋值给参数line，然后，执行处理逻辑line.contains(“Spark”)，也就是只有当改行文本包含“Spark”才满足条件，才会被放入到结果集中。最后，等到lines集合遍历结束后，就会得到一个结果集，这个结果集中包含了所有包含“Spark”的行。最后，对这个结果集调用count()，这是一个行动操作，会计算出结果集中的元素个数。</p><h4 id="2-map-func"><a href="#2-map-func" class="headerlink" title="2.map(func)"></a>2.map(func)</h4><p><img src="/images/spark/21.png" alt="1678724709366"></p><p>map(func)：将每个元素传递到函数func中，并将结果返回为一个新的数据集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; data =[1,2,3,4,5]</span><br><span class="line">&gt;&gt;&gt; rdd1 = sc.parallelize(data)</span><br><span class="line">&gt;&gt;&gt; rdd2 = rdd1.map(lambda x:x+10)</span><br><span class="line">&gt;&gt;&gt; rdd2.foreach(print)</span><br></pre></td></tr></table></figure><p><img src="/images/spark/22.png" alt="1678724836563"></p><p>上述语句执行过程如图 所示。第 1行语句创建了一个包含 5 个整型元素的列表 data。第2行语句执行 sc.parallelize(data)，从列表 data 中生成一个 RDD，即 rdd1,rdd1 中包含了5 个整型的元素即1、2、3、4、5。第 3 行语句执行 rdd1.map0操作,map0的输入参数“lambda x:x+10”是一个Lambda表达式。rdd1.map(lambda x:x+10)的含义是，依次取出 rdd1 这个RDD 中的每个元素，对于当前取到的元素，把它赋值给 Lambda 表达式中的变量x，然后，执行 Lambda 表达式的函数体部分“x+10”也就是把变量x的值和 10 相加后，作为函数的返回值，并作为一个元素放入到新的 RDD(即rdd2中。最终，新牛成的RDD (即 rdd2) 中包含了 5 个整型元素，即 11、12、13、14、15。</p><p>另外一个实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;lines=sc.textFile(&quot;file:///usr/local/spark/mycode/rdd/word.txt&quot;)</span><br><span class="line">&gt;&gt;&gt; words = lines.map(lambda line:line.split(&quot; &quot;))</span><br><span class="line">&gt;&gt;&gt; words.foreach(print)</span><br></pre></td></tr></table></figure><p><img src="/images/spark/24.png" alt="1678725201907"></p><p>上述语句执行过程如图所示。在第 1 行语句中，执行 sc.textFile0方法把 word.txt 文件中的数据加载到内存生成一个 RDD，即 lines，这个RDD 中的每个元素都是字符串类型，即每个 RDD 元素都是一行文本，比如，lines 中的第 1 个元素是”Hadoop is good”，第2 个元素是”Spark is fast”，第3个元素是”Spark is better”。在第 2 行语句中，执行 lies.map0操作，map0的输入参数 lambdaline:line.split(“)是一个 Lambda 表达式。linesmap(lambda line:line.split(“”)的含义是，依次取出 lines这个 RDD 中的每个元素，对于当前取到的元素，把它赋值给 Lambda 表达式中的变量 line，然后，执行 Lambda 表达式的函数体部分 line.split(“”)。因为 line 是一行文本，如”Hadoop is good”，一行文本中包含了很多个单词，单词之间以空格进行分隔，所以，line.split(“”的功能是，以空格作为分隔符把 line 拆分成一个个单词,拆分后得到的单词都封装在一个列表对象中,成为新的 RDD( 即 words)的一个元素，比如，”Hadoop is good”被拆分后，得到”Hadoop”、”is”和”good”3 个单词，会被封装到一个列表对象中，即[“Hadoop”.”is”,”good”]，成为 words 这个 RDD 中的一个元素。</p><p><img src="/images/spark/23.png" alt="1678725073888"></p><h4 id="3-flatMap-func"><a href="#3-flatMap-func" class="headerlink" title="3.flatMap(func)"></a>3.flatMap(func)</h4><p>flatMap(func)与 map0相似，但每个输入元素都可以映射到 0 或多个输出结果。例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;lines=sc.textFile(&quot;file:///usr/local/spark/mycode/rdd/word.txt&quot;)</span><br><span class="line">&gt;&gt;&gt;words =lines.flatMap(lambda line:line.split(&quot; &quot;))</span><br><span class="line">&gt;&gt;&gt; words.foreach(print)</span><br></pre></td></tr></table></figure><p><img src="/images/spark/26.png" alt="1678725603008"></p><p>上述语句执行过程如图所示。在第 1行语句中，执行 sc.textFile0方法把 wordtxt 文件中的数据加载到内存生成一个RDD，即 lines，这个 RDD 中的每个元素都是字符串类型，即每个RDD 元素都是一行文本。在第2行语句中，执行 linesflatMap0操作，flatMap0的输入参数 line:linesplit(“”)是个Lambda 表达式。lines.flatMap(lambda line:line.split(“”))的结果，等价于如下两步操作的结果。</p><p><img src="/images/spark/25.png" alt="1678725419517"></p><p>第1步: map0。执行 lines.map(lambda line: linesplit(“”))操作，从 lines 转换得到一个新的 RDD(即wordArray),wordArray 中的每个元素都是一个列表,比如,第1个元素是[“Hadoop”,”is”，”good”]7.第2个元素是”Spark”，”is”,”fast”]，第3 个元素是[“Spark”,”is””better”]。</p><p>第 2步:拍扁 ( flat)。flatMap0操作中的“flat”是一个很形象的动作-“拍扁”，也就是把vordArray 中的每个 RDD 元素都“拍扁”成多个元素。所有这些被拍扁以后得到的元素，构成一个新的 RDD，即 words。比如，wordArray 中的第1个元素是[“Hadoop”,”is”,”good]，被拍扁以后得到3个新的字符串类型的元素,即”Hadoop”、”is”和”good”; wordArray 中的第 2 个元素是[“Spark”,”is”fast”],被拍扁以后得到 3 个新的元素,即”Spark”、”is”和”fast”; wordArray 中的第 3 个元素是[“Spark””is””beter”，被拍扁以后得到 3 个新的元素，即”Spark”、”is”和”beter”。最终，这些被拍扁以后得到的 9 个字符串类型的元素构成一个新的 RDD (即 words )。也就是说，words 里面包含了 9 个字串类型的元素，分别是”Hadoop”、”is”、”good”、”Spark”、”is”、”fast”、”Spark”、”is”和”‘better’。</p><h4 id="4-gropByKey"><a href="#4-gropByKey" class="headerlink" title="4.gropByKey"></a>4.gropByKey</h4><p>groupByKey()应用于(K,V)键值对的数据集时，返回一个新的(K,Iterable)形式的数据集。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">words=sc.parallelize([(&quot;Hadoop&quot;,1),(&quot;is&quot;,1),(&quot;good&quot;,1),(&quot;Spark&quot;,1),(&quot;is&quot;,1),(&quot;better&quot;,1)])</span><br><span class="line">words1=words.groupByKey()</span><br><span class="line">words1.foreach(print)</span><br></pre></td></tr></table></figure><p><img src="/images/spark/27.png" alt="1679317892865"></p><p><img src="/images/spark/28.png" alt="1679318485755"></p><p><img src="/images/spark/29.png" alt="1679318770911"></p><p>如图所示，在这个实例中，名称为 words 的 RDD 中包含了 9 个元素，每个元素都是(KV)键值对类型。wordsl&#x3D;words.groupByKey0操作执行以后，所有 key 相同的键值对，它们的 value都被归并到一起。比如，(“is”,1)、(“is”,1)、(is”,1)这3 个键值对的 key 相同，就会被归并成一个新的键值对(“is”,(1,1,1))，其中，key 是”is”，value 是(1,1,1)，而且，value 会被封装成 Iterable 对象 (一种可选代集合 )。</p><h4 id="5-reduceByKey-func"><a href="#5-reduceByKey-func" class="headerlink" title="5.reduceByKey(func)"></a>5.reduceByKey(func)</h4><p>reduceByKey(func)应用于(KV)键值对的数据集时，返回一个新的(K,V)形式的数据集，其中的每个值是将每个key传递到函数func中进行聚合后得到的结果</p><p><img src="/images/spark/30.png" alt="1679318833321"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">words=sc.parallelize([(&quot;Hadoop&quot;,1),(&quot;is&quot;,1),(&quot;good&quot;,1),(&quot;Spark&quot;,1),(&quot;is&quot;,1),(&quot;better&quot;,1)])</span><br><span class="line">words1=words.reduceByKey(lambda a,b:a+b)</span><br><span class="line">words1.foreach(print)</span><br></pre></td></tr></table></figure><p><img src="/images/spark/31.png" alt="1679319056594"></p><p><img src="/images/spark/33.png" alt="1679319272140"></p><p><img src="/images/spark/32.png" alt="1679319106659"></p><p>如图所示，在这个实例中，名称为 words 的 RDD 中包含了 9个元素，每个元素都是(K,V)键值对类型。words.reduceByKey(lambda a,b;atb)操作执行以后,所有 key 相同的键值对，它们的 value首先被归并到一起，比如，(“is”,1)、(“is”1)、(“is”,1)这3 个键值对的 key 相同，就会被归并成一个新的键值对(“is”,(1,1,1))，其中，key 是”is”，value 是一个 value-list，即(1,1,1)。然后，使用 func 函数把(l,1,1)聚合到一起，这里的 func 函数是一个Lambda 表达式，即 lambda a,b;atb，它的功能是把(1,1,1)这个 value-list 中的每个元素进行汇总求和。首先，把 value-list 中的第1个元素(即 1) 赋值给参数a，把 value-list 中的第 2个元素(也是 1)赋值给参数 b，执行 atb 得到 2，然后，继续对 value-list中的元素执行下一次计算，把刚才求和得到的 2 赋值给 a，把 value-list 中的第 3 个元素(即 1)赋值给b，再次执行 a+b 计算得到 3。最终，就得到聚合后的结果(‘is’,3)。</p><h3 id="Ⅱ行动操作"><a href="#Ⅱ行动操作" class="headerlink" title="Ⅱ行动操作"></a>Ⅱ行动操作</h3><p>行动操作是真正触发计算的地方。Spark程序执行到行动操作时，才会执行真正的计算，从文件中加载数据，完成一次又一次转换操作，最终，完成行动操作得到结果。</p><p><img src="/images/spark/34.png" alt="1679319390149"></p><p>用一个例子看看</p><p><img src="/images/spark/35.png" alt="1679319465685"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rdd =sc.parallelize([1,2,3,4,5])</span><br><span class="line">rdd.count()</span><br></pre></td></tr></table></figure><p><code>5</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rdd.first()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>1</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdd.take(3)</span><br></pre></td></tr></table></figure><p><code>[1, 2, 3]</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdd.reduce(lambda a,b:a+b)</span><br></pre></td></tr></table></figure><p><code>15</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdd.collect()</span><br></pre></td></tr></table></figure><p><code>[1, 2, 3, 4, 5]</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdd.foreach(lambda elem:print(elem))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p>这里首先使用 sc.parallelize([1,2,3,4,5])生成了一个 RDD,变量名称为 rdd,rdd 中包含了5个元素分别是1、2、3、4和5，因此，rdd.count0语句执行以后返回的结果是 5。执行 rdd.first0语句后，会返回第1个元素，即1。当执行完 rdd.take(3)语句以后，会以列表的形式返回 rdd 中的前 3 个元素即[1,2,3]。执行完<code>rdd.reduce(lambda a,b:a+b)</code>语句后，会得到对 rdd 中的所有元素(即1、2、3、4、5进行求和以后的结果，即 15。在执行 rdd.reduce(lambda a,b;atb)时，系统会把 rdd 中的第1个元素1传入参数 a，把rdd 的第2个元素 2 传入参数 b，执行 a+b 计算得到求和结果 3;然后，把这个求和的结果 3 传入给参数 a，把 rdd 的第 3 个元素3 传入参数 b，执行 atb 计算得到求和结果 6; 然后,把6传入参数 a，把 rdd 的第 4 个元素 4 传入参数 b，执行 a+b 计算得到求和结果 10; 最后，把 10传入参数 a，把 rdd 的第 5个元素 5 传入参数 b，执行 atb 算得到求和结果 S。接下来，执行<code>rdd.collect()</code>，以列表的形式返回 rdd 中的所有元素，可以看出，执行结果是一个列表[1,2,3,4,5]。在这个实例的最后，执行了语句 <code>rdd.foreach(lambda elem:print(elem)</code>，该语句会依次遍历 rdd 中的每个元素，把当前遍历到的元素赋值给变量 elem，并使用 print(elem)打印出 elem 的值。实际上<code>rdd.foreach(lambda elem:print(elem))</code>可以被简化成<code> rdd.foreach(print)</code>，执行效果是一样的。<br>需要特别强调的是,当采用Local 模式在单机上执行时,<code>rdd.foreach(print)</code>语句会打印出一个RDD中的所有元素。但是，当采用集群模式执行时，在 Worker 节点上执行打印语句是输出到 Worker 节点的 stdout 中，而不是输出到任务控制节点 Driver 中，因此，任务控制节点 Driver 中的 stdout 是不会显示打印语句的这些输出内容的。为了能够把所有 Worker 节点上的打印输出信息也显示到 Driver中，就需要使用 collect0方法，比如，<code>print(rdd.collect())</code>。但是，由于 collect0方法会把各个 Worker节点上的所有 RDD元素都抓取到 Driver 中，因此，这可能会导致 Driver 所在节点发生内存溢出。所以，在实际编程中，需要谨慎使用&#96;&#96;&#96; collect()&#96;&#96;方法。</p><h3 id="Ⅲ惰性机制"><a href="#Ⅲ惰性机制" class="headerlink" title="Ⅲ惰性机制"></a>Ⅲ惰性机制</h3><p>惰性机制是指整个转换过程只是记录了转换的轨迹，并不会发生真正的计算，只有遇到行动操作时，才会触发“从头到尾”的真正的计算。这里给出一段简单的语句来解释 Spark 的惰性机制。</p><p><img src="/images/spark/37.png" alt="1679320607704"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lines=sc.textFile(&quot;file:///usr/local/spark/mycode/rdd/word.txt&quot;)</span><br><span class="line">lineLengths=lines.map(lambda s:len(s))</span><br><span class="line">totalLength=lineLengths.reduce(lambda a,b:a+b)</span><br><span class="line">print(totalLength)</span><br></pre></td></tr></table></figure><p>在上述语句中，第1 行语句中的 textFile()是一个转换操作，执行后，系统只会记录这次转换，并不会真正读取 wordtxt 文件的数据到内存中;第 2 行语句的 map也是一个转换操作，系统只是记录这次转换，不会真正执行 map()方法;第 3 行语句的 reduce()方法是一个“行动”类型的操作，这时，系统会生成一个作业，触发真正的计算。也就是说，这时才会加载 word.txt 的数据到内存，生成lines 这个RDD。lines 中的每个元素都是一行文本，然后，对 lines 执行 map()方法，计算这个RDD中每个元素的长度(即一行文本包含的单词个数 )，得到新的 RDD，即 lineLengths，这个RDD中每个元素都是整型，表示文本的长度。最后，在 lineLengths 上调用reduce()方法，执行 RDD元素求和，得到所有文本长度的总和。</p><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><p>在 Spark 中，RDD 采用惰性求值的机制，每次遇到行动操作，都会从头开始执行计算。每次调用行动操作，都会触发一次从头开始的计算，这对于迭代计算而言，代价是很大的，因为选代计算经常需要多次重复使用同一组数据。下面就是多次计算同一个 RDD 的例子。</p><p><img src="/images/spark/38.png" alt="1679321131046"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list = [&quot;Hadoop&quot;,&quot;Spark&quot;,&quot;Hive&quot;]</span><br><span class="line">rdd = sc.parallelize(list)</span><br><span class="line">print (rdd.count ()) #行动操作，触发一次真正从头到尾的计算</span><br><span class="line">print (&#x27;,&#x27;.join(rdd.collect())) #行动操作，触发一次真正从头到尾的计算Hadoop,Spark,Hive</span><br></pre></td></tr></table></figure><p><img src="/images/spark/39.png" alt="1679320828250"></p><p>实际上，可以通过持久化(缓存)机制来避免这种重复计算的开销。具体方法是使用 persist0方法将一个 RDD 标记为持久化，之所以要“标记为持久化”，是因为出现 persist0语句的地方，并不会马上计算生成 RDD 并把它持久化，而是要等到遇到第一个行动操作触发真正计算以后，才会把算结果进行持久化。持久化后的 RDD 将会被保留在计算节点的内存中，被后面的行动操作重复使用persist0的圆括号中包含的是持久化级别参数，可以有如下不同的级别。</p><ul><li><p>persist(MEMORY ONLY): 表示将 RDD作为反序列化的对象存储于JVM 中，如果内存足，就要按照 LRU 原则替换缓存中的内容。</p></li><li><p>persist(MEMORYAND DISK):表示将RDD作为反序列化的对象存储在JVM中，如果内存不足，超出的分区将会被存放在硬盘上。</p><p>一般而言，使用 cache()方法时，会调用 persist(MEMORY ONLY)。针对上面的实例，增加持久化语句以后的执行过程如下:</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list = [&quot;Hadoop&quot;,&quot;Spark&quot;,&quot;Hive&quot;]</span><br><span class="line">rdd = sc.parallelize(list)</span><br><span class="line">rdd.cache() #会调用 persist(MEMORY ONLY)，但是，语句执行到这里，并不会缓存 rdd，因为这#时 rdd 还没有被计算生成</span><br><span class="line">print(rdd.count()) #第一次行动操作，触发一次真正从头到尾的计算，这时上面的 rdd.cache ()#才会被执行，把这个 rdd 放到缓存中</span><br><span class="line">print(&#x27;.&#x27;.join(rdd.collect())) #第二次行动操作，不需要触发从头到尾的计算，只需要重复使#用上面缓存中的 rdd</span><br></pre></td></tr></table></figure><p><img src="/images/spark/40.png" alt="1679321297416"></p><p>持久化RDD 会占用内存空间，当不再需要一个 RDD 时，就可以使用 unpersist0方法手动地把持久化的 RDD 从缓存中移除，释放内存空间。</p><h3 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h3><h4 id="1-分区的作用"><a href="#1-分区的作用" class="headerlink" title="1.分区的作用"></a>1.分区的作用</h4><p>RDD 是弹性分布式数据集，通常 RDD 很大，会被分成很多个分区，分别保存在不同的节点上如图49所示，一个集群中包含 4 个工作节点( WorkerNode )，分别是 WorkerNodel、WorkerNode2WorkerNode3 和 WorkerNode4。假设有两个 RDD，即rdd1 和 rdd2，其中，rdd1 包含5 个分区(即plp2、p3、p4和p5)，rdd2 包含3 个分区(即p6、p7和p8)。<br>对RDD 进行分区，第一个作用是增加并行度。比如，在图 4-9 中，rdd2 的 3 个分区 p6、p7和p8,分布在3 个不同的工作节点 WorkerNode2、WorkerNode3 和 WorkerNode4 上，就可以在这3个T作节点上分别启动 3 个线程对这 3 个分区的数据进行并行处理，增加任务的并行度。</p><p><img src="/images/spark/41.png" alt="1679321394814"></p><p>对 RDD 进行分区的第二个作用是减少通信开销。在分布式系统中，通信的代价是巨大的，控制数据分布以获得最少的网络传输可以极大地提升整体性能。Spark 程序可以通过控制 RDD 分区方式来减少网络通信的开销。下面通过一个实例来解释为什么通过分区可以减少网络传输开销。</p><p>连接(join)是查询分析中经常使用的一种操作。假设在某种应用中需要对两个表进行连接操作第1个表是一个很大的用户信息表 UserData(UserID,UserInfo)，其中，UserId 和 UserInfo 是 UserData表的两个字段，UserInfo 包含了某个用户所订阅的主题信息。第 2 个表是 Events(UserID,LinkInfo),这个表比较小，只记录了过去 5 分钟内发生的事件，即某个用户查看了哪个链接。为了对用户访问情况进行统计，需要周期性地对 UserData 和 Events 这两个表进行连接操作，获得(UserID,UserInfo,LinkInfo)这种形式的结果，从而知道某个用户订阅的是哪个主题，以及访问了哪个链接。</p><p>可以用 Spark 来实现上述应用场景。在执行 Spark 作业时，首先，UserData 表会被加载到内存中生成RDD(假设 RDD的名称为 userData)，RDD 中的每个元素是(UserID,UserInfo)这种形式的键值对,即 key 是 UserID,value 是 UserInfo;Events 表也会被加载到内存中生成RDD(假设名称为 events)RDD中的每个元素是(UserID，LinkInfo)这种形式的键值对，key 是 UserID，value 是 LinkInfo。由于UserData 是一个很大的表，通常会被存放到 HDFS 文件中，Spark 系统会根据每个 RDD 元素的数据来源，把每个 RDD 元素放在相应的节点上。比如，从工作节点 上的 HDFS 文件块 (block)中读取到的记录，其生成的 RDD 元素 ((UserID，UserInfo)形式的键值对 ，就会被放在节点上，从节点上的 HDFS 文件块 (block)中读取到的记录，其生成的 RDD 元素会被放在节点上，最终userData 这个 RDD 的元素就会分布在节点u1、u2…..um上。<br>然后，执行连接操作 userData,join(events)得到连接结果。如图  所示，在默认情况下，连接操作会将两个数据集中的所有的 key 的哈希值都求出来，将哈希值相同的记录传送到同一台机器上之后在该机器上对所有 key 相同的记录进行连接操作。比如，对于 userData 这个 RDD 而言，它在节点山上的所有 RDD 元素，都需要根据 key 的值进行哈，然后，根据哈希值再分发到 j1、j2…..j这些节点上;在节点u上的所有 RDD 元素，也需要根据 key 的值进行哈希，然后，根据哈希值再分发到j1……jk这些节点上;同理，u1……um等节点上的 RDD元素，都需要进行同样的操作对于events 这个RDD 而言，也需要执行同样的操作。可以看出，在这种情况下，每次进行连接操作都会有数据混洗的问题，造成了很大的网络传输开销。</p><p><img src="/images/spark/42.png" alt="1679321456313"></p><p>实际上，由于userData 这个 RDD 要比 events 大很多，所以，可以选择对 userData 进行分区。比如.可以采用哈希分区方法，把 userData 这个 RDD 分区成 m 个分区，这些分区分布在节点 、u…“u，上。对userData 进行分区以后，在执行连接操作时，就不会产生图 4-10 中的数据混洗情况。如图所示，由于已经对 userData 根据哈希值进行了分区，因此，在执行连接操作时，不需要再把 userData中的每个元素进行哈希求值以后再分发到其他节点上，只需要对 events 这个 RDD 的每个元素求哈希值(采用与 userData 相同的哈希函数)。然后，根据哈希值把每个 events 中的 RDD 元素分发到对应的节点u、u····um上面。整个过程中，只有 events 发生了数据混洗，产生了网络通信，而 userData的数据都是在本地引用，不会产生网络传输开销。由此可以看出，Spark 通过数据分区，可以大大降低一些特定类型的操作(比如join()、leftOuterJoin()、groupByKey()、reduceByKey()等)的网络传输开销。</p><p><img src="/images/spark/43.png" alt="1679321697993"></p><h4 id="2-分区的原则"><a href="#2-分区的原则" class="headerlink" title="2.分区的原则"></a>2.分区的原则</h4><p><img src="/images/spark/44.png" alt="1679322183409"></p><p>RDD分区的一个原则是使得分区的个数尽量等于集群中的 CPU核心(Core)数目。对于不同的Spark 部署模式 (Local 模式、Standalone 模式、YARN 模式、Mesos 模式)而言，都可以通过设置spark.defaultparallelism 这个参数的值，来配置默认的分区数目。一般而言，各种模式下的默认分区数目如下。<br>Local模式:默认为本地机器的 CPU 数目，若设置了 local[N]，则默认为 N。Standalone 或YARN模式:在“集群中所有 CPU 核心数目总和”和“2”这二者中取较大值作为<br>默认值。<br>Mesos 模式:默认的分区数为 8。</p><h4 id="3-设置分区的个数"><a href="#3-设置分区的个数" class="headerlink" title="3.设置分区的个数"></a>3.设置分区的个数</h4><p>可以手动设置分区的数量，主要包括两种方式: 创建 RDD 时手动指定分区个数;使用repartition方法重新设置分区个数。</p><h5 id="1-创建RDD-时手动指定分区个数"><a href="#1-创建RDD-时手动指定分区个数" class="headerlink" title="(1)创建RDD 时手动指定分区个数"></a>(1)创建RDD 时手动指定分区个数</h5><p><img src="/images/spark/45.png" alt="1679322207468"></p><p>在调用 textFile()和 parallelize()方法的时候手动指定分区个数即可，语法格式如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc.textFile(path, partitionNum)</span><br></pre></td></tr></table></figure><p>其中，path 参数用于指定要加载的文件的地址，partitionNum 参数用于指定分区个数。下面是个分区的实例。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list = [1,2,3,4,5]</span><br><span class="line">rdd = sc.parallelize(list,2) //设置两个分区</span><br></pre></td></tr></table></figure><p>对于 parallelize()而言，如果没有在方法中指定分区数，则默认为 spark.default,parallelism。对于textFile()而言，如果没有在方法中指定分区数，则默认为 min(defaultParallelism,2)，其中defaultParallelism 对应的就是 spark.default,parallelism。如果是从HDFS 中读取文件，则分区数为文件分片数(比如，128MB&#x2F;片 )。</p><h5 id="2-使用repartition-方法重新设置分区个数"><a href="#2-使用repartition-方法重新设置分区个数" class="headerlink" title="(2)使用repartition 方法重新设置分区个数"></a>(2)使用repartition 方法重新设置分区个数</h5><p><img src="/images/spark/46.png" alt="1679322237913"></p><p>通过转换操作得到新 RDD 时，直接调用 repartition 方法即可。例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data = sc.parallelize([1,2,3,4,5],2)</span><br><span class="line">len(data.glom().collect ()) #显示 data 这个 RDD 的分区数量</span><br><span class="line">2</span><br><span class="line">rdd = data.repartition(1) #对 data 这个RDD进行重新分区</span><br><span class="line">len(rdd.glom().collect())#显示 rdd 这个 RDD的分区数量</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h4 id="4-自定义分区方法"><a href="#4-自定义分区方法" class="headerlink" title="4.自定义分区方法"></a>4.自定义分区方法</h4><p><img src="/images/spark/47.png" alt="1679322265099"></p><p><img src="/images/spark/48.png" alt="1679322297300"></p><p>Spark 提供了自带的 HashPartitioner (哈希分区)与 RangePartitioner ( 区城分区)，能够满足大数应用场景的需求。与此同时，Spark 也支持自定义分区方式，即通过提供一个自定义的分区函数来控制 RDD 的分区方式，从而利用领域知识进一步减少通信开销。需要注意的是，Spark 的分区函数针对的是(key;value)类型的 RDD，也就是说，RDD 中的每个元素都是(key,value)类型，然后，分区数根据 key对RDD 元素进行分区。因此，当需要对一些非(key,value)类型的 RDD进行自定义分区时需要首先把 RDD 元素转换为(key,value)类型，然后再使用分区函数。<br>下面是一个实例，要求根据 key 值的最后一位数字将 key 写入到不同的文件中，比如，10 写入到part-00000，11写入到 part-00001，12 写入到 part-00002。打开一个 Linux 终端，使用 vim 编辑器创建一个代码文件“&#x2F;usr&#x2F;local&#x2F;spark&#x2F;mycode&#x2F;rdd&#x2F;TestPartitioner.py”，输入以下代码:</p><p><img src="/images/spark/49.png" alt="1679322332812"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">MyPartitioner</span>(<span class="params">key</span>):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;MyPartitioner is running&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;The key is %d&#x27;</span> % key)</span><br><span class="line"><span class="keyword">return</span> key%<span class="number">10</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The main function is running&quot;</span>)</span><br><span class="line">conf=SparkConf().setMaster(<span class="string">&quot;local&quot;</span>).setAppName(<span class="string">&quot;MyApp&quot;</span>)</span><br><span class="line">sc=SparkContext(conf=conf)</span><br><span class="line">data=sc.parallelize(<span class="built_in">range</span>(<span class="number">10</span>),<span class="number">5</span>)</span><br><span class="line">data.<span class="built_in">map</span>(<span class="keyword">lambda</span> x:(x,<span class="number">1</span>)) \</span><br><span class="line">         .partitionBy(<span class="number">10</span>,MyPartitioner)\</span><br><span class="line">             .<span class="built_in">map</span>(<span class="keyword">lambda</span> x:x[<span class="number">0</span>]) \</span><br><span class="line">         .saveAsTextFile(<span class="string">&quot;File:///usr/local/spark/mycode/add/partitioner&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>出现问题</p><p><code>ModuleNotFoundError: No module named &#39;pyspark&#39;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install python3-pip</span><br><span class="line">pip install pyspark</span><br></pre></td></tr></table></figure><p>在上述代码中，data&#x3D;sc.parallelize(range(10),5)这行代码执行后，会生成一个名称为 data 的 RDD这个RDD 中包含了 0、1、2、3…..9 共 10 个整型元素，并被分成 5个分区。data,map(lambda x:(x,1)表示把 data 中的每个整型元素取出来，转换成(key,value)类型。比如，把1 这个元素取出来以后转按成(1,1)，把2这个元素取出来以后转换成(2,1)，这是因为，自定义分区函数要求 RDD 元素的类型必须是(key, value)类型。partitionBy(10,MyPartitioner表示调用自定义分区函数，把(0,1)、(,)、(2,1)、(3,1)….(9,1)这些 RDD 元素根据尾号分成10个分区。划分分区完成以后,再使用 map(ambda x:x[0).把(0,1)、(1,1)、(2,1)、(3,1) .·….(9,1)等(key,value)类型元素的 key 提取出来，得到 0、1、2、3…9.最后调用 saveAsTextFile0方法把 RDD的 10个整型元素写入到本地文件中。</p><p>使用如下命令运行 TestPartitioner.py:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/spark/mycode/rdd</span><br><span class="line">python3 TestPartitioner.py</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd /usr/local/spark/mycode/rdd</span><br><span class="line">S /usr/local/spark/bin/spark-submit TestPartitioner.py</span><br></pre></td></tr></table></figure><p>程序运行后会返回如下信息:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">The main function is running</span><br><span class="line">MyPartitioner is running</span><br><span class="line">The key is 0</span><br><span class="line">MyPartitioner is running</span><br><span class="line">The key is 1</span><br><span class="line">MyPartitioner is running</span><br><span class="line">The key is 9</span><br></pre></td></tr></table></figure><p><img src="/images/spark/50.png" alt="1679322360532"></p><p>运行结束后可以看到，在本地文件系统的“file:&#x2F;&#x2F;&#x2F;usr&#x2F;local&#x2F;spark&#x2F;mycode&#x2F;rdd&#x2F;partitioner”目录下面，会生成 part-00000、part-00001、part-00002…..part-00009 和_SUCCESS 等文件。其中,part-00000文件中包含了数字 0，part-00001 文件中包含了数字 1，part-00002 文件中包含了数字 2</p><h3 id="综合实例"><a href="#综合实例" class="headerlink" title="综合实例"></a>综合实例</h3><p>假设有一个本地文件“&#x2F;usr&#x2F;local&#x2F;spark&#x2F;mycode&#x2F;rdd&#x2F;word.txt”，里面包含了很多行文本，每行文本由多个单词构成，单词之间用空格分隔。可以使用如下语句对 word.txt 中的单词进行词频统计(即统计每个单词出现的次数 ):</p><p><img src="/images/spark/51.png" alt="1679329145076"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lines=sc.textFile(<span class="string">&quot;file:///usr/local/spark/mycode/rdd/word.txt&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wordCount=lines.flatMap(<span class="keyword">lambda</span> line:line.split(<span class="string">&quot; &quot;</span>)).<span class="built_in">map</span>(<span class="keyword">lambda</span> word:(word,<span class="number">1</span>)).reduceByKey(<span class="keyword">lambda</span> a,b:a+b)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(wordCount.collect())</span><br></pre></td></tr></table></figure><p><img src="/images/spark/52.png" alt="1679329176974"></p><p><img src="/images/spark/53.png" alt="1679329211688"></p><p><img src="/images/spark/54.png" alt="1679329237135"></p><p>在实际应用中，单词文件可能非常大，会被保存到分布式文件系统 HDFS 中，Spark 和 Hadoop会统一部署在一个集群上。如图所示，HDFS 的名称节点(HDFS NN)和 Spark 的主节点( SparkMaster)可以分开部署，而HDFS 的数据节点(HDFS DN)和 Spark 的从节点 ( Spark Worker)会部署在一起。这时采用 Spark 进行分布式处理,可以大大提高词频统计程序的执行效率,这是因为,SparkWorker 可以就近处理与自己部署在一起的 HDFS 数据节点中的数据。</p><p>对于词频统计程序 WordCount 而言，该程序分布式运行在每个 Slave 节点的每个分区上，统计本分区内的单词计数，然后将它传回给 Driver，再由 Driver 合并来自各个分区的所有单词计数，形成最终的单词计数。</p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UML类图 &amp; UML时序图</title>
      <link href="/2023/03/20/UML%E7%B1%BB%E5%9B%BE-&amp;-UML%E6%97%B6%E5%BA%8F%E5%9B%BE/"/>
      <url>/2023/03/20/UML%E7%B1%BB%E5%9B%BE-&amp;-UML%E6%97%B6%E5%BA%8F%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="2-1-UML图"><a href="#2-1-UML图" class="headerlink" title="2.1 UML图"></a>2.1 UML图</h2><h2 id="2-1-UML类图-amp-UML时序图"><a href="#2-1-UML类图-amp-UML时序图" class="headerlink" title="2.1 UML类图 &amp; UML时序图"></a>2.1 UML类图 &amp; UML时序图</h2><p>统一建模语言（Unified Modeling Language，UML）是用来设计软件的可视化建模语言。它的特点是简单、统一、图形化、能表达软件设计中的动态与静态信息。UML是一种为面向对象系统的产品进行说明、可视化和编制文档的标准语言，独立于任何一种具体的程序设计语言。</p><p>1997 年 UML 被国际对象管理组织（OMG）采纳为面向对象的建模语言的国际标准。它的特点是简单、统一、图形化、能表达软件设计中的动态与静态信息。</p><p><strong>应用场景</strong></p><p>UML 能为软件开发的所有阶段提供模型化和可视化支持。而且融入了软件工程领域的新思想、新方法和新技术，使软件设计人员沟通更简明，进一步缩短了设计时间，减少开发成本。</p><p>UML 具有很宽的应用领域。其中最常用的是建立软件系统的模型，但它同样可以用于描述非软件领域的系统，如机械系统、企业机构或业务过程，以及处理复杂数据的信息系统、具有实时要求的工业系统或工业过程等。总之，UML 可以对任何具有静态结构和动态行为的系统进行建模，而且使用于从需求规格描述直至系统完成后的测试和维护等系统开发的各个阶段。</p><p>UML 模型大多以图表的方式表现出来，一份典型的建模图表通常包含几个块或框、连接线和作为模型附加信息的文本。这些虽简单却非常重要，在 UML 规则中相互联系和扩展。</p><p>语言是包括文字和图形的，有很多内容文字是无法表达的。比如建筑设计图纸吗，里面存在多图形，光用文字并不能表达清楚建筑设计。在建筑界，有一套标准来描述设计，同样道理，在软件开发界，也需要一套标准来帮助我们做好软件开发的工作。UML 就是其中的一种标准，注意这可不是唯一标准，只是 UML 是大家比较推崇的一种标准而已。UML 并不是强制性标准，没有规定在软件开发中一定要用 UML，但是我们需要包括 UML 在内的各种标准，来提高软件开发的水平。</p><p><strong>基本构件</strong></p><p>UML 建模的核心是模型，模型是现实的简化、真实系统的抽象。UML 提供了系统的设计蓝图。当给软件系统建模时，需要采用通用的符号语言，这种描述模型所使用的语言被称为建模语言。在 UML 中，所有的描述由事物、关系和图这些构件组成。下图完整地描述了所有构件的关系。</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/8b41ffb818f6758e08c3a4307c24d76f.png" alt="img"></p><p><strong>事物</strong></p><p>事物是抽象化的最终结果，分为结构事物、行为事物、分组事物和注释事物。</p><ol><li>结构事物</li></ol><p>结构事物是模型中的静态部分，用以呈现概念或实体的表现元素，如下表所示。</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/6d050090c2dd17905c284bec11c2ded1.png" alt="img"></p><ol start="2"><li>行为事物</li></ol><p>行为事物指 UML 模型中的动态部分，如下表所示。</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/a1b45aed6c2bc4351ca486f51f349ff1.png" alt="img"></p><ol start="3"><li>分组事物</li></ol><p>目前只有一种分组事物，即包。包纯碎是概念上的，只存在于开发阶段，结构事物、行为事物甚至分组事物都有可能放在一个包中，如下表所示。</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/45f2e9d2f5a63f6a015e119e83ad678e.png" alt="img"></p><ol start="4"><li>注释事物</li></ol><p>注释事物是解释 UML 模型元素的部分，如下表所示。</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/c01bdb3ec33250922bf8bd337031ad30.png" alt="img"></p><p>UML 从目标系统的不同角度出发，UML2.0 一共有 13 种图（UML1.5 定义了 9 种，UML2.0 增加了 4 种），别是类图、对象图、构件图、部署图、活动图、状态图、用例图、时序图、协作图 9 种，以及包图、组合结构图、时间图、交互概览图 4 种。</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/1b62f09be7dfc3a727620cf046e29d5b.png" alt="img"></p><p>在 UML 2.0 的 13 种图中，类图（Class Diagrams）是使用频率最高的 UML 图之一。类图描述系统中的类，以及各个类之间的关系的静态视图，能够让我们在正确编写代码之前对系统有一个全面的认识。类图是一种模型类型，确切地说，是一种静态模型类型。类图表示类、接口和它们之间的协作关系，用于系统设计阶段。</p><h3 id="2-1-1-类图概述"><a href="#2-1-1-类图概述" class="headerlink" title="2.1.1 类图概述"></a>2.1.1 类图概述</h3><p>类图(Class diagram)是显示了模型的静态结构，特别是模型中存在的类、类的内部结构以及它们与其他类的关系等。类图不显示暂时性的信息。类图是面向对象建模的主要组成部分。</p><h3 id="2-1-2-类图作用"><a href="#2-1-2-类图作用" class="headerlink" title="2.1.2 类图作用"></a>2.1.2 类图作用</h3><ul><li>在软件工程中，类图是一种静态的结构图，描述了系统的类的集合，类的属性和类之间的关系，可以简化了人们对系统的理解；</li><li>类图是系统分析和设计阶段的重要产物，是系统编码和测试的重要模型。</li></ul><h3 id="2-1-3-类图表示"><a href="#2-1-3-类图表示" class="headerlink" title="2.1.3 类图表示"></a>2.1.3 类图表示</h3><p>   <strong>1.类</strong></p><p>​    类（Class）是指具有相同属性、方法和关系的对象的抽象，它封装了数据和行为，是面向对象程序设计（OOP）的基础，具有封装性、继承性和多态性等三大特性。</p><p>  (1) 类名（Name）是一个字符串，例如，Student。</p><p>  (2) 属性（Attribute）是指类的特性，即类的成员变量。</p><p>  (3) 操作（Operations）是类的任意一个实例对象都可以使用的行为，是类的成员方法。    在UML类图中，类使用包含类名、属性(field) 和方法(method) 且带有分割线的矩形来表示，比如下图表示一个Employee类，它包含name,age和address这3个属性，以及work()方法。</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/5de8b469efc781f32fd20dddb5633f6e.jpg" alt="Employee.jpg"></p><p>​    属性&#x2F;方法名称前加的加号和减号表示了这个属性&#x2F;方法的可见性，UML类图中表示可见性的符号有三种：</p><ul><li>+：表示public</li><li>-：表示private</li><li>#：表示protected</li></ul><p>​    属性的完整表示方式是： <strong>可见性 名称 ：类型 [ &#x3D; 缺省值]</strong></p><p>​    方法的完整表示方式是： <strong>可见性 名称(参数列表) [ ： 返回类型]</strong></p><blockquote><p>注意：</p><p>1，中括号中的内容表示是可选的</p><p>2，也有将类型放在变量名前面，返回值类型放在方法名前面</p></blockquote><p><strong>举个例子：</strong></p><p><img src="https://p.ananas.chaoxing.com/star3/origin/d4c5ec49b8ee9f5ae4c5dccd902290a8.png" alt="demo.png"></p><p>​    上图Demo类定义了三个方法：</p><ul><li>method()方法：修饰符为public，没有参数，没有返回值。</li><li>method1()方法：修饰符为private，没有参数，返回值类型为String。</li><li>method2()方法：修饰符为protected，接收两个参数，第一个参数类型为int，第二个参数类型为String，返回值类型是int。</li></ul><p>类图中，需注意以下几点：</p><ul><li>抽象类或抽象方法用斜体表示</li><li>如果是接口，则在类名上方加 &lt;<Interface>&gt;</li><li>字段和方法返回值的数据类型非必需</li><li>静态类或静态方法加下划线</li></ul><p><strong>另外一个例子：</strong></p><p>请看以下这个类图，类之间的关系是我们需要关注的：</p><p><strong><img src="https://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_class_struct.jpg" alt="_images/uml_class_struct.jpg"></strong></p><ul><li>车的类图结构为&lt;<abstract>&gt;，表示车是一个抽象类；</li><li>它有两个继承类：小汽车和自行车；它们之间的关系为实现关系，使用带空心箭头的虚线表示；</li><li>小汽车为与SUV之间也是继承关系，它们之间的关系为泛化关系，使用带空心箭头的实线表示；</li><li>小汽车与发动机之间是组合关系，使用带实心箭头的实线表示；</li><li>学生与班级之间是聚合关系，使用带空心箭头的实线表示；</li><li>学生与身份证之间为关联关系，使用一根实线表示；</li><li>学生上学需要用到自行车，与自行车是一种依赖关系，使用带箭头的虚线表示；</li></ul><p><strong>2. 接口</strong></p><p>接口（Interface）是一种特殊的类，它具有类的结构但不可被实例化，只可以被子类实现。它包含抽象操作，但不包含属性。它描述了类或组件对外可见的动作。在 UML 中，接口使用一个带有名称的小圆圈来进行表示。</p><p>如下所示是图形类接口的 UML 表示。</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/64a5bf7166d365b206bdefeb4a66fa20.png" alt="img"></p><p><strong>3. 类图</strong></p><p>类图（ClassDiagram）是用来显示系统中的类、接口、协作以及它们之间的静态结构和关系的一种静态模型。它主要用于描述软件系统的结构化设计，帮助人们简化对软件系统的理解，它是系统分析与设计阶段的重要产物，也是系统编码与测试的重要模型依据。</p><p>类图中的类可以通过某种编程语言直接实现。类图在软件系统开发的整个生命周期都是有效的，它是面向对象系统的建模中最常见的图。如下所示是“计算长方形和圆形的周长与面积”的类图，图形接口有计算面积和周长的抽象方法，长方形和圆形实现这两个方法供访问类调用。</p><p><strong><img src="https://p.ananas.chaoxing.com/star3/origin/f95aee4f5136a105551af5aa732544d7.png" alt="img"></strong></p><h3 id="2-1-4-类与类之间关系的表示"><a href="#2-1-4-类与类之间关系的表示" class="headerlink" title="2.1.4 类与类之间关系的表示"></a>2.1.4 类与类之间关系的表示</h3><ol><li><strong>关联关系(association)</strong></li></ol><p> 关联关系是用一条直线表示的；它描述不同类的对象之间的结构关系；它是一种静态关系， 通常与运行状态无关，一般由常识等因素决定的；它一般用来定义对象之间静态的、天然的结构； 所以，关联关系是一种“强关联”的关系；</p><p>比如，乘车人和车票之间就是一种关联关系；学生和学校就是一种关联关系；</p><p>关联关系默认不强调方向，表示对象间相互知道；如果特别强调方向，如下图，表示A知道B，但 B不知道A；</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/961e252cc29eacbaaa509dbca06e867d.jpg" alt="uml_association.jpg"></p><p>注：在最终代码中，关联对象通常是以成员变量的形式实现的；</p><p>关联关系是类与类之间最常用的一种关系，分为一般关联关系、聚合关系和组合关系。我们先介绍一般关联。关联又可以分为单向关联，双向关联，自关联。</p><p>a）单项关联</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/4e20737215be9cc0838f06ba6d9e3e73.png" alt="customer_address.png"></p><p>在UML类图中单向关联用一个带箭头的实线表示。上图表示每个顾客都有一个地址，这通过让Customer类持有一个类型为Address的成员变量类实现。</p><p>b）双向关联</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/0647a820494e08997a6b773174116f72.png" alt="customer_product.png"></p><p>从上图中我们很容易看出，所谓的双向关联就是双方各自持有对方类型的成员变量。</p><p>在UML类图中，双向关联用一个不带箭头的直线表示。上图中在Customer类中维护一个List<Product>，表示一个顾客可以购买多个商品；在Product类中维护一个Customer类型的成员变量表示这个产品被哪个顾客所购买。</p><p>c）自关联</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/645df4c3220d37685e4cdb81c926e465.png" alt="node.png"></p><p>自关联在UML类图中用一个带有箭头且指向自身的线表示。上图的意思就是Node类包含类型为Node的成员变量，也就是“自己包含自己”。</p><h3 id="2-聚合关系-aggregation"><a href="#2-聚合关系-aggregation" class="headerlink" title="2. 聚合关系(aggregation)"></a>2. 聚合关系(aggregation)</h3><p>聚合关系是关联关系的一种，是强关联关系，是整体和部分之间的关系。</p><p>聚合关系也是通过成员对象来实现的，其中成员对象是整体对象的一部分，但是成员对象可以脱离整体对象而独立存在。例如，学校与老师的关系，学校包含老师，但如果学校停办了，老师依然存在。</p><p>聚合关系用一条带空心菱形箭头的直线表示，如下图表示A聚合到B上，或者说B由A组成；</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/29ec48ef1ad32353bbdb2f17e3ad5cee.jpg" alt="uml_aggregation.jpg"></p><p>下图所示是大学和教师的关系图：</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/72d895954f4087e90cd2c017a8ac65b2.png" alt="image-20191229173422328.png"></p><h3 id="3-组合关系-composition"><a href="#3-组合关系-composition" class="headerlink" title="3. 组合关系(composition)"></a>3. 组合关系(composition)</h3><p>组合表示类之间的整体与部分的关系，但它是一种更强烈的聚合关系。</p><p>在组合关系中，整体对象可以控制部分对象的生命周期，一旦整体对象不存在，部分对象也将不存在，部分对象不能脱离整体对象而存在。例如，头和嘴的关系，没有了头，嘴也就不存在了。</p><p>在 UML 类图中，组合关系用带实心菱形的实线来表示，菱形指向整体。如下图表示A组成B，或者B由A组成；</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/689c10062581c795135afd579f7c739e.jpg" alt="uml_composition.jpg"></p><p>下图所示是头和嘴的关系图：</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/d85e919e84777cf76b88ff21e034508c.png" alt="image-20191229173455149.png"></p><p>与聚合关系一样，组合关系同样表示整体由部分构成的语义；比如公司由多个部门组成；</p><p>但组合关系是一种强依赖的特殊聚合关系，如果整体不存在了，则部分也不存在了；例如， 公司不存在了，部门也将不存在了；</p><h3 id="4-依赖关系-dependency"><a href="#4-依赖关系-dependency" class="headerlink" title="4. 依赖关系(dependency)"></a>4. 依赖关系(dependency)</h3><p>依赖关系是一种使用关系，它是对象之间耦合度最弱的一种关联方式，是临时性的关联。在代码中，某个类的方法通过局部变量、方法的参数或者对静态方法的调用来访问另一个类（被依赖类）中的某些方法来完成一些职责。</p><p>在 UML 类图中，依赖关系使用带箭头的虚线来表示，箭头从使用类指向被依赖的类。如下图表示A依赖于B；他描述一个对象在运行期间会用到另一个对象的关系；</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/3af99c1229a43e6eda76e06d40101781.jpg" alt="uml_dependency.jpg"></p><p>下图所示是司机和汽车的关系图，司机驾驶汽车：</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/cf4014bd5e1ef9db4dad9802f7bd7cb6.png" alt="image-20191229173518926.png"></p><p>与关联关系不同的是，它是一种临时性的关系，通常在运行期间产生，并且随着运行时的变化； 依赖关系也可能发生变化；</p><p>显然，依赖也有方向，双向依赖是一种非常糟糕的结构，我们总是应该保持单向依赖，杜绝双向依赖的产生；</p><p>注：在最终代码中，依赖关系体现为类构造方法及类方法的传入参数，箭头的指向为调用关系；依赖关系除了临时知道对方外，还是“使用”对方的方法和属性；</p><h3 id="5-继承关系-x2F-泛化关系-generalization"><a href="#5-继承关系-x2F-泛化关系-generalization" class="headerlink" title="5. 继承关系&#x2F;泛化关系(generalization)"></a>5. 继承关系&#x2F;泛化关系(generalization)</h3><p>继承关系是对象之间耦合度最大的一种关系，表示一般与特殊的关系，是父类与子类之间的关系，是一种继承关系。类的继承结构表现在UML中为：泛化(generalize)与实现(realize)：</p><p>继承关系为 is-a的关系；两个对象之间如果可以用 is-a 来表示，就是继承关系：（..是..)</p><p>eg：自行车是车、猫是动物</p><p>在 UML 类图中，泛化关系用带空心三角箭头的实线来表示，箭头从子类指向父类。如下图表示（A继承自B）；</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/8907c51dba42ffa0482fb71cbe52a51c.jpg" alt="uml_generalization.jpg"></p><p>例如，汽车在现实中有实现，可用汽车定义具体的对象；汽车与SUV之间为泛化关系；</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/1922c1289aa576d923c28dd2e369735a.jpg" alt="uml_generalize.jpg"></p><p>再比如，Student 类和 Teacher 类都是 Person 类的子类，其类图如下图所示：</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/4a3aa059e7bd0c658b8c7f9c38ceb415.png" alt="image-20191229173539838.png"></p><p>注：最终代码中，泛化关系表现为继承非抽象类；</p><h3 id="6-实现关系-realize"><a href="#6-实现关系-realize" class="headerlink" title="6. 实现关系(realize)"></a>6. 实现关系(realize)</h3><p>实现关系是接口与实现类之间的关系。在这种关系中，类实现了接口，类中的操作实现了接口中所声明的所有的抽象操作。</p><p>在 UML 类图中，实现关系使用带空心三角箭头的虚线来表示，箭头从实现类指向接口。</p><p>比如：”车”为一个抽象概念，在现实中并无法直接用来定义对象；只有指明具体的子类(汽车还是自行车)，才 可以用来定义对象（”车”这个类在C++中用抽象类表示，在JAVA中有接口这个概念，更容易理解）</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/65f15a3616c6085fab91d7a7864e7b93.jpg" alt="uml_realize.jpg"></p><p>再例如，汽车和船实现了交通工具，其类图如图 9 所示。</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/ac2c49a538d0cda03187a91c71c75ba5.png" alt="image-20191229173554296.png"></p><p>注：最终代码中，实现关系表现为继承抽象类；</p><p>类关系记忆技巧如下表所示。</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/2cd964f35657776fb8770597e5059927.png" alt="img"></p><p>注意：UML 的标准类关系图中，没有实心箭头。有些 Java 编程的 IDE 自带类生成工具可能出现实心箭头，主要目的是降低理解难度。</p><p>下面用一个经典案例来加深和巩固对类图的理解。下图是对动物衍生关系描述的类图。这个图非常有技术含量也非常经典，大家可以好好理解一下。</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/d4a03394dd4e454c9462fa9f495d9c7d.png" alt="img"></p><h3 id="2-1-5-时序图"><a href="#2-1-5-时序图" class="headerlink" title="2.1.5 时序图"></a>2.1.5 时序图</h3><p>为了展示对象之间的交互细节，后续对设计模式解析的章节，都会用到时序图；</p><p>时序图（Sequence Diagram）是显示对象之间交互的图，这些对象是按时间顺序排列的。时序图中显示的是参与交互的对象及其对象之间消息交互的顺序。</p><p>时序图包括的建模元素主要有：对象（Actor）、生命线（Lifeline）、控制焦点（Focus of control）、消息（Message）等等。</p><p> <strong>角色（Actor）：</strong>   系统角色，可以是人、及其甚至其他的系统或者子系统。</p><p> <strong>对象（Object）：</strong>  对象包括三种命名方式：</p><ul><li>第一种方式包括对象名和类名；</li><li>第二中方式只显示类名不显示对象名，即表示他是一个匿名对象；</li><li>第三种方式只显示对象名不显示类明。</li></ul><p><img src="https://p.ananas.chaoxing.com/star3/origin/3d4ad77cf16fc64667e0119e3afe2afb.jpg" alt="SequenceDiagram.jpg"></p><p> <strong>生命线（Lifeline）：</strong>  生命线在顺序图中表示为从对象图标向下延伸的一条虚线，表示对象存在的时间，如下图</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/751e54d02d74a97919dd96625caa3dbe.gif" alt="lifeline.gif"></p><p> <strong>控制焦点（Focus of Control）</strong>：  控制焦点是顺序图中表示时间段的符号，在这个时间段内对象将执行相应的操作。用小矩形表示，如下图。</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/ebfdc7233927ef3a60cbf9da3de617f7.jpg" alt="ElementFOC.jpg"></p><p><strong>消息（Message）</strong>：  消息一般分为同步消息（Synchronous Message），异步消息（Asynchronous Message）和返回消息（Return Message）.如下图所示：</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/9a63cede09efb161e9a93b753f296554.gif" alt="Message.gif"></p><p>同步消息&#x3D;调用消息（Synchronous Message）：  消息的发送者把控制传递给消息的接收者，然后停止活动，等待消息的接收者放弃或者返回控制。用来表示同步的意义。</p><p> 异步消息（Asynchronous Message）：  消息发送者通过消息把信号传递给消息的接收者，然后继续自己的活动，不等待接受者返回消息或者控制。异步消息的接收者和发送者是并发工作的。</p><p>  返回消息（Return Message）：  返回消息表示从过程调用返回</p><p>  自关联消息（Self-Message）：  表示方法的自身调用以及一个对象内的一个方法调用另外一个方法。</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/31dca6f1c4828e193dd3834b7fc1323e.gif" alt="SelfMessage.gif"></p><p>组合片段示例：</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/aa735c6b2c20dc9a0c35a67e9e42dcca.gif" alt="CombinedFragments.gif"> </p><ul><li>Alternative fragment（denoted “alt”） 与 if…then…else对应</li><li>Option fragment (denoted “opt”) 与 Switch对应</li><li>Parallel fragment (denoted “par”) 表示同时发生</li><li>Loop fragment(denoted “loop”) 与 for 或者 Foreach对应</li></ul><p><strong>时序图实例分析（Sequece Diagram Example Analysis）</strong></p><p>完成课程创建功能，主要流程有：</p><p>1、请求添加课程页面，填写课程表单，点击【create】按钮</p><p>2、添加课程信息到数据库</p><p>3、向课程对象追加主题信息</p><p>4、为课程指派教师</p><p>5、完成课程创建功能</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/6381e4331f4ce0b365690111bdd6b04a.jpg" alt="Dequence_Diagram_Example.jpg"></p><p>1、序号1.0-1.3  完成页面的初始化</p><p>2、序号1.4-1.5  课程管理员填充课程表单</p><p>3、序号1.6-1.7  课程管理员点击【Create】按钮，并响应点击事件</p><p>4、序号1.8     Service层创建课程</p><p>5、序号1.9-1.10 添加课程到数据库，并返回课程编号CourseId</p><p>6、序号1.11-1.12 添加课程主题到数据库，并返回主题编号topicId</p><p>7、序号1.13         给课程指派教师</p><p>8、序号1.14         向界面抛创建课程成功与否的消息</p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python类</title>
      <link href="/2023/03/20/Python%E7%B1%BB/"/>
      <url>/2023/03/20/Python%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="Python类"><a href="#Python类" class="headerlink" title="Python类"></a>Python类</h1><h3 id="类-class-和-对象-object"><a href="#类-class-和-对象-object" class="headerlink" title="类(class) 和 对象(object)"></a>类(class) 和 对象(object)</h3><p>类：创建对象的模板，定义对象将会拥有的属性和函数</p><p>__init__函数：每个类必须定义的函数，对象创建语句时自动执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">myday</span>: <span class="comment">#建立一个类模板</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">def</span> <span class="title function_">__init__</span>():</span><br><span class="line"></span><br><span class="line">          .....</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">day1 = myday()      <span class="comment">#创建一个myday类的对象 </span></span><br></pre></td></tr></table></figure><ul><li>python类<br>类名：mayday<br>属性：name和emotion<br>函数：<strong>init</strong>函数，wake函数，eat函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 类(class)</span></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">myday</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):             <span class="comment">#每个类必须定义(def)    __init__函数，每个函数第一参数都是self</span></span><br><span class="line">               self.name = <span class="string">&quot;Xiao Ming&quot;</span>  <span class="comment">#myday对象拥有属性name和emotion</span></span><br><span class="line">               self.emotion = <span class="string">&quot;happy&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wake</span>(<span class="params">self,event</span>):</span><br><span class="line">               <span class="keyword">if</span> event == <span class="string">&quot;上课&quot;</span>:</span><br><span class="line">                     self.emotion = <span class="string">&quot;still happy&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self, food</span>):</span><br><span class="line">               <span class="keyword">if</span> food == <span class="string">&quot;牛肉&quot;</span>:</span><br><span class="line">                     self.emotion = <span class="string">&quot;more happy&quot;</span></span><br><span class="line">        <span class="comment">#def __eq__(self,other):</span></span><br><span class="line">            <span class="comment">#return self.name == other.name</span></span><br><span class="line">day2 = myday()</span><br><span class="line"><span class="comment">#创建对象时会自动执行__init__方法</span></span><br><span class="line"><span class="built_in">print</span>(day2.emotion)</span><br><span class="line"><span class="built_in">print</span>(day2.name)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>__init__函数添加参数  </code></p><p><code> 创建对象时传入self之后的参数</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span>  <span class="title class_">myday</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,emotion</span>):                                                                 </span><br><span class="line">            self.emotion = emotion  <span class="comment">#定义对象属性“self.emotion”，将这个属性赋值为函数传入的参数“emotion”</span></span><br><span class="line">            self.name = name</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wake</span>(<span class="params">self,event</span>):</span><br><span class="line">            <span class="keyword">if</span> event == <span class="string">&quot;上课&quot;</span>:</span><br><span class="line">                self.emotion = <span class="string">&quot;still happy&quot;</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self, food</span>):</span><br><span class="line">            <span class="keyword">if</span> food == <span class="string">&quot;牛肉&quot;</span>:</span><br><span class="line">                self.emotion = <span class="string">&quot;more happy&quot;</span></span><br><span class="line">        <span class="comment">#def __eq__(self,other):</span></span><br><span class="line">            <span class="comment">#return self.name == other.name</span></span><br><span class="line">day2 = myday(<span class="string">&quot;me&quot;</span>,<span class="string">&quot;very happy&quot;</span>)</span><br><span class="line"><span class="comment">#创建对象时会自动执行__init__函数</span></span><br><span class="line"><span class="built_in">print</span>(day2.name)</span><br><span class="line"><span class="built_in">print</span>(day2.emotion)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span>  <span class="title class_">myday</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,emotion</span>):                                                                 </span><br><span class="line">            self.emotion = emotion  <span class="comment">#定义对象属性“self.emotion”，将这个属性赋值为函数传入的参数“emotion”</span></span><br><span class="line">            self.name = name</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wake</span>(<span class="params">self,event</span>):</span><br><span class="line">            <span class="keyword">if</span> event == <span class="string">&quot;上课&quot;</span>:</span><br><span class="line">                self.emotion = <span class="string">&quot;still happy&quot;</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self, food</span>):</span><br><span class="line">            <span class="keyword">if</span> food == <span class="string">&quot;牛肉&quot;</span>:</span><br><span class="line">                self.emotion = <span class="string">&quot;more happy&quot;</span></span><br><span class="line">        <span class="comment">#def __eq__(self,other):</span></span><br><span class="line">            <span class="comment">#return self.name == other.name</span></span><br><span class="line">day2 = myday(<span class="string">&quot;me&quot;</span>,<span class="string">&quot;very happy&quot;</span>)</span><br><span class="line"><span class="comment">#调用对象函数时，从self之后的参数开始传入</span></span><br><span class="line">day2.eat(<span class="string">&quot;jiaozi&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(day2.emotion)</span><br><span class="line">day2.eat(<span class="string">&quot;牛肉&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(day2.emotion)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="任务：编写一个类继承myday类"><a href="#任务：编写一个类继承myday类" class="headerlink" title="任务：编写一个类继承myday类"></a>任务：编写一个类继承myday类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span>  <span class="title class_">myday</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,emotion</span>):                                                                 </span><br><span class="line">            self.emotion = emotion  <span class="comment">#定义对象属性“self.emotion”，将这个属性赋值为函数传入的参数“emotion”</span></span><br><span class="line">            self.name = name</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wake</span>(<span class="params">self,event</span>):</span><br><span class="line">            <span class="keyword">if</span> event == <span class="string">&quot;上课&quot;</span>:</span><br><span class="line">                self.emotion = <span class="string">&quot;still happy&quot;</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self, food</span>):</span><br><span class="line">            <span class="keyword">if</span> food == <span class="string">&quot;牛肉&quot;</span>:</span><br><span class="line">                self.emotion = <span class="string">&quot;more happy&quot;</span></span><br><span class="line">        <span class="comment">#def __eq__(self,other):</span></span><br><span class="line">            <span class="comment">#return self.name == other.name</span></span><br><span class="line">day2 = myday(<span class="string">&quot;me&quot;</span>,<span class="string">&quot;very happy&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建对象时，程序会自动执行__init__函数</span></span><br><span class="line">day2.eat(<span class="string">&quot;jiaozi&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(day2.emotion)</span><br><span class="line">day2.eat(<span class="string">&quot;牛肉&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(day2.emotion)</span><br><span class="line"></span><br><span class="line"><span class="comment">#类的继承     和     函数重写</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">night</span>(<span class="title class_ inherited__">myday</span>): <span class="comment">#night类继承myday类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.emotion = <span class="string">&quot;nice&quot;</span></span><br><span class="line">        self.name = <span class="string">&quot;me&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">play</span>(<span class="params">self</span>):</span><br><span class="line">        self.emotion = <span class="string">&quot;so nice&quot;</span></span><br><span class="line">night1 = night()</span><br><span class="line">night1.eat(<span class="string">&quot;羊肉&quot;</span>)  <span class="comment">#night继承myday类除__init__之外的函数</span></span><br><span class="line"><span class="built_in">print</span>(night1.emotion)</span><br><span class="line">night1.eat(<span class="string">&quot;牛肉&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(night1.emotion)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="一个类是否等于另一个类？"><a href="#一个类是否等于另一个类？" class="headerlink" title="一个类是否等于另一个类？"></a><strong>一个类是否等于另一个类？</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">day1 = myday(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;happy&quot;</span>)</span><br><span class="line">day2 = myday(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;happy&quot;</span>)</span><br><span class="line"></span><br><span class="line">day1.name == day2.name   <span class="comment">#True or False</span></span><br><span class="line">day1 == day2    <span class="comment">#True or False?</span></span><br><span class="line"><span class="comment">#（如果我们在类里定义一个__eq__函数，当我们执行 day1 == day2语句的时候，程序会自动执行__eq__函数）</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/1.png" alt="1679290854192"></p><h3 id="多线程开发案例"><a href="#多线程开发案例" class="headerlink" title="多线程开发案例"></a><strong>多线程开发案例</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestThread</span>(threading.Thread):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, para=<span class="string">&#x27;hi&#x27;</span>, sleep=<span class="number">3</span></span>):</span><br><span class="line">         <span class="built_in">super</span>().__init__()</span><br><span class="line">         self.para = para</span><br><span class="line">         self.sleep = sleep</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">         <span class="string">&quot;&quot;&quot;线程内容&quot;&quot;&quot;</span></span><br><span class="line">         time.sleep(self.sleep)</span><br><span class="line">         <span class="built_in">print</span>(self.para)</span><br><span class="line"></span><br><span class="line">thread_hi = TestThread()</span><br><span class="line">thread_hello = TestThread(<span class="string">&#x27;hello&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"> <span class="comment"># 启动线程</span></span><br><span class="line">thread_hi.start()</span><br><span class="line">thread_hello.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="任务！：按照如下描述定义一个类，代表一个企业"><a href="#任务！：按照如下描述定义一个类，代表一个企业" class="headerlink" title="任务！：按照如下描述定义一个类，代表一个企业"></a>任务！：按照如下描述定义一个类，代表一个企业</h3><p>class company: init函数：定义资金（money)属性，产品(product)属性和价格（price）属性</p><p>register函数：公司注册，修改资金属性</p><p>produce函数：制造，修改资金属性，修改产品属性</p><p>sale函数：销售，修改资金属性和产品属性</p><p>research函数：研发，修改资金属性和价格属性</p><ul><li>任务！：定义另一个类，继承company类，重写research函数（子类需要添加至少一个新的函数，并重写至少一个父类的函数。）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">company</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,money,product,price</span>) :</span><br><span class="line">        self.money=money</span><br><span class="line">        self.product=product</span><br><span class="line">        self.price=price</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">register</span>(<span class="params">self,tol_money</span>):<span class="comment">#注册资金</span></span><br><span class="line">        self.money=tol_money</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">produce</span>(<span class="params">self,pro_money,product_num</span>):</span><br><span class="line">        self.money-=pro_money<span class="comment">#生产就减少了</span></span><br><span class="line">        self.product+=product_num<span class="comment">#产品多了</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sale</span>(<span class="params">self,sal_money,product_num</span>):</span><br><span class="line">        self.money+=sal_money<span class="comment">#钱多了</span></span><br><span class="line">        self.product-=product_num<span class="comment">#产品减少了</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">research</span>(<span class="params">self,re_money,re_price</span>):</span><br><span class="line">        self.money-=re_money<span class="comment">#钱减少了</span></span><br><span class="line">        self.price+=re_price<span class="comment">#价格上去了</span></span><br><span class="line">company1=company(<span class="string">&quot;1000&quot;</span>,<span class="string">&quot;机器&quot;</span>,<span class="string">&quot;100/2&quot;</span>)</span><br><span class="line">company1.register(<span class="string">&quot;5000&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(company1.money)</span><br></pre></td></tr></table></figure><p>research函数：研发，修改资金属性和价格属性，产品属性</p><p>invert函数:投资，修改金钱属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BigCompany</span>(<span class="title class_ inherited__">company</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,money,product,price</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(money,product,price)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">research</span>(<span class="params">self,re_money,re_price,re_prodcut</span>):</span><br><span class="line">        self.money=re_money<span class="comment">#钱减少了</span></span><br><span class="line">        self.price+=re_price<span class="comment">#价格上去了</span></span><br><span class="line">        self.product+=re_prodcut<span class="comment">#产品多了</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inverst</span>(<span class="params">self,invstment_money</span>):</span><br><span class="line">        self.money-=invstment_money</span><br><span class="line"></span><br><span class="line">company2=BigCompany(<span class="number">7000</span>,<span class="number">2</span>,<span class="number">50</span>)</span><br><span class="line">company2.research(<span class="number">8000</span>,<span class="number">80</span>,<span class="number">90</span>)</span><br><span class="line">company2.inverst(<span class="number">908070</span>)</span><br><span class="line"><span class="built_in">print</span>(company2.money)</span><br><span class="line">        </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在Linux系统下编译C++</title>
      <link href="/2023/03/17/%E5%A6%82%E4%BD%95%E5%9C%A8Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%BC%96%E8%AF%91C++/"/>
      <url>/2023/03/17/%E5%A6%82%E4%BD%95%E5%9C%A8Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%BC%96%E8%AF%91C++/</url>
      
        <content type="html"><![CDATA[<h1 id="如何在Linux系统下编译C"><a href="#如何在Linux系统下编译C" class="headerlink" title="如何在Linux系统下编译C++"></a>如何在Linux系统下编译C++</h1><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一:"></a>方法一:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;hello_word&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/NOI/1.png" alt="1679061064013"></p><p>编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc 1.cpp -lstdc++ </span><br></pre></td></tr></table></figure><p>生a.out文件</p><p><img src="/images/NOI/2.png" alt="1679061165889"></p><p>运行a.out</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./a.out</span><br></pre></td></tr></table></figure><p><img src="/images/NOI/3.png" alt="1679061280444"></p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二:"></a>方法二:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;hello_word222&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/NOI/5.png" alt="1679061782953"></p><p>编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ 2.cpp -o 2output</span><br></pre></td></tr></table></figure><p>运行2output</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./2output</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux_c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统——进程同步——生产者消费者问题</title>
      <link href="/2023/03/17/%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5/"/>
      <url>/2023/03/17/%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h1><ul><li><p><strong>pv 操作 互斥锁</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">P --wait(信号量S)&#123;</span><br><span class="line">S&lt;=0</span><br><span class="line">S--//上锁</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成对出现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">V --signal(信号量)&#123;</span><br><span class="line">S++//开锁</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>生产者</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">in</span><span class="params">()</span>,out</span>=();</span><br><span class="line">item butter[n];</span><br><span class="line">semaphore mutex=<span class="number">1</span>,empty=n,full=();<span class="comment">//mutex必须为1 ,empty空位置,full有多少个</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">proceducer</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">producer an item nextp;</span><br><span class="line">……</span><br><span class="line"><span class="built_in">wait</span>(empty);       <span class="comment">//enpty--</span></span><br><span class="line"><span class="built_in">wait</span>(mutex);   <span class="comment">//上锁</span></span><br><span class="line">butter[in]=nextp;  <span class="comment">//生产一个</span></span><br><span class="line">in:=(in+<span class="number">1</span>)%n;      <span class="comment">// 生产一个</span></span><br><span class="line"><span class="built_in">signal</span>(mutex);   <span class="comment">//解锁</span></span><br><span class="line"><span class="built_in">signal</span>(full);      <span class="comment">//full++</span></span><br><span class="line">&#125;<span class="keyword">while</span>(TRUE)；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>消费者</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">consumer</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line"><span class="built_in">wait</span>(full)；      <span class="comment">//full-1</span></span><br><span class="line"><span class="built_in">wait</span>(mutex);<span class="comment">//上锁</span></span><br><span class="line">nextc=butter[out];  <span class="comment">//消费一个</span></span><br><span class="line">out=(out+<span class="number">1</span>)%n;<span class="comment">//消费一个</span></span><br><span class="line"><span class="built_in">signal</span>(mutex);  <span class="comment">//解锁</span></span><br><span class="line"><span class="built_in">signal</span>(empty); <span class="comment">//empty++</span></span><br><span class="line">consumer the item in nextc;</span><br><span class="line">&#125;<span class="keyword">while</span>(TRUE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">cobegin</span></span><br><span class="line"><span class="function"><span class="title">proceducer</span><span class="params">()</span></span>;<span class="built_in">consumer</span>();</span><br><span class="line">coend</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/1.png" alt="1679017003280"></p><h3 id="第1关：生产者消费者同步控制"><a href="#第1关：生产者消费者同步控制" class="headerlink" title="第1关：生产者消费者同步控制"></a>第1关：生产者消费者同步控制</h3><h4 id="任务描述"><a href="#任务描述" class="headerlink" title="任务描述"></a>任务描述</h4><p>本关任务：编写生产者消费者同步控制程序。</p><h4 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h4><p>为了完成本关任务，你需要掌握：1.理解生产者消费者同步问题，2.线程的编写方法，3.使用信号量实现线程间同步控制。</p><h5 id="线程并发引起的同步问题"><a href="#线程并发引起的同步问题" class="headerlink" title="线程并发引起的同步问题"></a>线程并发引起的同步问题</h5><p>线程以并发形式运行，当并发的线程间访问共享数据时，会发后争用现象，不进行同步控制的线程运行会造成不恰当的结果。</p><h5 id="生产者消费者同步问题"><a href="#生产者消费者同步问题" class="headerlink" title="生产者消费者同步问题"></a>生产者消费者同步问题</h5><p>生产者消费者是典型的同步问题，他们共享了一个缓冲池(全局变量数组)，当缓冲池有空位时生产者线程向缓冲池中依次赋值，如果缓冲池满则等待。当缓冲池中有数据时消费者线程从中取走数据，如果缓冲池空则等待。</p><h5 id="如何解决线程间访问共享变量的冲突问题"><a href="#如何解决线程间访问共享变量的冲突问题" class="headerlink" title="如何解决线程间访问共享变量的冲突问题"></a>如何解决线程间访问共享变量的冲突问题</h5><p>当多个线程访问同一个共享变量时，共享变量成为临界资源，它需要操作系统提供同步控制机制，以保证多个线程可以依序访问，当一个线程操作临界资源时其它线程不会中断其操作，因此对临界资源的操作是安全的。 下面是linux平台使用信号量的头文件和方法。 #include &lt;semaphore.h&gt; int sem_init(sem_t * sem, int pshared, unsigned int value);&#x2F;&#x2F;创建信号量变量，value是信号量的初值 int sem_destroy(sem_t *sem);&#x2F;&#x2F;销毁信号量 int sem_post(sem_t * sem);  &#x2F;&#x2F;信号量值增加1，并激活处于等待状态的线程  int sem_wait(sem_t * sem);  &#x2F;&#x2F;信号量值减少1 为0时将调用该方法的线程被OS阻塞 </p><h4 id="编程要求"><a href="#编程要求" class="headerlink" title="编程要求"></a>编程要求</h4><p>主线程序启动生产者线程和消费者线程，并等待两个线程的结束。 两个线程使用三个信号量，其中生产者线程向全局变量进行十次赋值(代表生产)，每次赋值前都要检查是否有空位，有空位的情况下 需要获得互斥量sem_mutex，并对共享缓冲区进行赋值，然后释放互斥量以便消费者线程可以操作缓冲区临界资源。 消费者线程要从缓冲区取值，取值前先检查是否有可用数据，有可用数据的情况下再获得互斥量sem_mutex，再取出缓冲区的值。 要特别说明的是生产者和消费者线程工作的速率是不同的，但在同步信号控制下，两个线程节奏互相配合步调一致。在《计算机操作系统》 教材中使用了伪代码，并且循环体没有结束条件，在此用C语言改写原程序，生产者一共只生产十个数据。 ####测试说明 为简化数据操作，程序没有输入，主线程已经写好， void * producer(void * arg); void * consumer(void * arg); static sem_t sem_empty;&#x2F;&#x2F;空位个数 static sem_t sem_full; &#x2F;&#x2F;可用数据个数 static sem_t sem_mutex; &#x2F;&#x2F;互斥量，用于控制两个线程互斥访问缓冲区 static int buffer[]&#x3D;{0,0,0}; int main(int argc,char * argv[]) {   pthread_t id_prod,id_consum;   sem_init(&amp;sem_empty,0,3); &#x2F;&#x2F;初值为3，空位为3，   sem_init(&amp;sem_full,0,0);  &#x2F;&#x2F;初值为0，可用数据个数为0，   sem_init(&amp;sem_mutex,0,1); &#x2F;&#x2F;初值为1，用于控制两个线程互斥访问缓冲区    pthread_create(&amp;id_prod,  NULL,producer,NULL);&#x2F;&#x2F;创建生产者线程   pthread_create(&amp;id_consum,NULL,consumer,NULL);&#x2F;&#x2F;创建消费者线程</p><p>  pthread_join(id_prod,NULL);  &#x2F;&#x2F;主线程等待生产者线程结束   pthread_join(id_consum,NULL);&#x2F;&#x2F;主线程等待消费者线程结束   sem_destroy(&amp;sem_empty);   sem_destroy(&amp;sem_full);   sem_destroy(&amp;sem_mutex);   return 0; } 学生需要补充producer线程与consumer中关于同步控制部分的程序。</p><p>输出：1至10 (需由学生根据程序生成正确结果) 开始你的任务吧，祝你成功！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//stu001.c 生产者消费者同步控制，由学生完成缺失代码。 </span></span><br><span class="line"><span class="comment">//主线程序启动生产者线程和消费者线程，全局变量初值为0</span></span><br><span class="line"><span class="comment">//生产者线程向全局变量进行10次赋值(代表生产)，消费者线程从全局变量读取值，///并重新赋值0(代表消费了产品)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> * <span class="title function_">producer</span><span class="params">(<span class="type">void</span> * arg)</span>;</span><br><span class="line"><span class="type">void</span> * <span class="title function_">consumer</span><span class="params">(<span class="type">void</span> * arg)</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">sem_t</span> sem_empty;<span class="comment">//空位个数</span></span><br><span class="line"><span class="type">static</span> <span class="type">sem_t</span> sem_full; <span class="comment">//可用数据个数</span></span><br><span class="line"><span class="type">static</span> <span class="type">sem_t</span> sem_mutex; <span class="comment">//互斥量，用于控制两个线程互斥访问缓冲区</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> buffer[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;<span class="comment">//共享的缓冲区</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> * argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">pthread_t</span> id_prod,id_consum;</span><br><span class="line">  sem_init(&amp;sem_empty,<span class="number">0</span>,<span class="number">3</span>); <span class="comment">//初值为3，空位为3，</span></span><br><span class="line">  sem_init(&amp;sem_full,<span class="number">0</span>,<span class="number">0</span>);  <span class="comment">//初值为0，可用数据个数为0，</span></span><br><span class="line">  sem_init(&amp;sem_mutex,<span class="number">0</span>,<span class="number">1</span>); <span class="comment">//初值为1，用于控制两个线程互斥访问缓冲区 </span></span><br><span class="line">  pthread_create(&amp;id_prod,  <span class="literal">NULL</span>,producer,<span class="literal">NULL</span>);<span class="comment">//创建生产者线程</span></span><br><span class="line">  pthread_create(&amp;id_consum,<span class="literal">NULL</span>,consumer,<span class="literal">NULL</span>);<span class="comment">//创建消费者线程</span></span><br><span class="line"></span><br><span class="line">  pthread_join(id_prod,<span class="literal">NULL</span>);  <span class="comment">//主线程等待生产者线程结束</span></span><br><span class="line">  pthread_join(id_consum,<span class="literal">NULL</span>);<span class="comment">//主线程等待消费者线程结束</span></span><br><span class="line">  sem_destroy(&amp;sem_empty);</span><br><span class="line">  sem_destroy(&amp;sem_full);</span><br><span class="line">  sem_destroy(&amp;sem_mutex);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> * <span class="title function_">producer</span><span class="params">(<span class="type">void</span> * arg)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i,pIndex=<span class="number">0</span>; </span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">11</span>;i&lt;<span class="number">21</span>;i++)</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="comment">//请在begin end语句间补全程序语句实现生产者向缓冲区赋值操作 </span></span><br><span class="line">  <span class="comment">/*  begin *******************程序代码约六行******************************* */</span></span><br><span class="line">  sem_wait(&amp;sem_empty);<span class="comment">//empty--</span></span><br><span class="line">      sem_wait(&amp;sem_mutex); <span class="comment">//枷锁</span></span><br><span class="line">      buffer[pIndex]=i;   <span class="comment">//缓冲区只有三个位置</span></span><br><span class="line">      pIndex=(pIndex+<span class="number">1</span>)%<span class="number">3</span>;<span class="comment">// 11-- 0  12--1 13--2 14--0 15--1 16--2</span></span><br><span class="line">      sem_post(&amp;sem_mutex);<span class="comment">//解锁</span></span><br><span class="line">      sem_post(&amp;sem_full);<span class="comment">//full++</span></span><br><span class="line">  <span class="comment">/*   end  ************************************************************** */</span> </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> * <span class="title function_">consumer</span><span class="params">(<span class="type">void</span> *arg)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i,cIndex=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">11</span>;i&lt;<span class="number">21</span>;i++)</span><br><span class="line">  &#123; </span><br><span class="line">  <span class="comment">//请在begin end语句间补全程序语句实现扫描算法，算出总访问磁道数存入totaltracks变量 </span></span><br><span class="line">  <span class="comment">/*  begin *******************程序代码约六行******************************* */</span> </span><br><span class="line">    sem_wait(&amp;sem_full);<span class="comment">//full--</span></span><br><span class="line">    sem_wait(&amp;sem_mutex);<span class="comment">//枷锁</span></span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;%d,&quot;</span>,buffer[cIndex]);</span><br><span class="line">    cIndex=(cIndex+<span class="number">1</span>)%<span class="number">3</span>;<span class="comment">//与上面对应</span></span><br><span class="line">    sem_post(&amp;sem_mutex);<span class="comment">//解锁</span></span><br><span class="line">    sem_post(&amp;sem_empty);<span class="comment">//empty++</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*   end  ************************************************************** */</span> </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参考Linux下c++的东西</p><p><a href="https://man7.org/linux/man-pages/man3/sem_wait.3.html">https://man7.org/linux/man-pages/man3/sem_wait.3.html</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sem_wait是一个函数，也是一个原子操作，它的作用是从信号量的值减去一个“1”，但它永远会先等待该信号量为一个非零值才开始做减法。也就是说，如果你对一个值为2的信号量调用sem_wait()，线程将会继续执行，将信号量的值将减到1。</span><br><span class="line">如果对一个值为0的信号量调用sem_wait()，这个函数就会原地等待直到有其它线程增加了这个值使它不再是0为止。如果有两个线程都在sem_wait()中等待同一个信号量变成非零值，那么当它被第三个线程增加 一个“1”时，等待线程中只有一个能够对信号量做减法并继续执行，另一个还将处于等待状态。sem_trywait(sem_t *sem)是函数sem_wait的非阻塞版，它直接将信号量sem减1，同时返回错误代码。</span><br><span class="line">(不得不说，百度确实蛮会复制粘贴翻译的，只不过没有那个网站格式做的好hhh)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sem_post是给信号量的值加上一个“1”，它是一个“原子操作”－－－即同时对同一个信号量做加“1”操作的两个线程是不会冲突的；而同 时对同一个文件进行读和写操作的两个程序就有可能会引起冲突。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sem_t  C语言中，信号量的数据类型为结构sem_t，它本质上是一个长整型的数。</span><br></pre></td></tr></table></figure><p><a href="https://blog.51cto.com/u_13999641/4314815">https://blog.51cto.com/u_13999641/4314815</a></p><p>没看完【argc，argv是什么】</p><p>真的忘的差不多了0.0</p><p><img src="/images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.png" alt="1679026388457"></p><p><img src="/images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/3.png" alt="1679026432795"></p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java数据类型</title>
      <link href="/2023/03/16/java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2023/03/16/java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Java数据类型"><a href="#Java数据类型" class="headerlink" title="Java数据类型"></a>Java数据类型</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>Java语言是强类型语言，对于每一种数据都定义了明确的具体的数据类型，在内存中分配了不同大小的内存空间。</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li>基本数据类型<ul><li>数值型<ul><li>整数类型(byte,short,int,long)</li><li>浮点类型(float,double)</li></ul></li><li>字符型(char)</li><li>布尔型(boolean)</li></ul></li><li>引用数据类型<ul><li>类(class)</li><li>接口(interface)</li><li>数组([])</li></ul></li></ul><h2 id="计算机存储单元"><a href="#计算机存储单元" class="headerlink" title="计算机存储单元"></a>计算机存储单元</h2><ul><li>定义：变量是内存中的小容器，用来存储数据。那么计算机内存是怎么存储数据的呢？无论是内存还是硬盘，计算机存储设备的最小信息单元叫“位（bit）”，我们又称之为“比特位”，通常用小写的字母b表示。而计算机最小的存储单元叫“字节（byte）”，通常用大写字母B表示，字节是由连续的8个位组成。</li><li>常用存储单元关系<ul><li>1B&#x3D; 8b<br>1KB &#x3D; 1024B<br>1MB &#x3D; 1024KB<br>1GB &#x3D; 1024MB<br>1TB &#x3D; 1024GB</li></ul></li></ul><h2 id="Java基本数据类型图"><a href="#Java基本数据类型图" class="headerlink" title="Java基本数据类型图"></a>Java基本数据类型图</h2><p><img src="/images/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/9.png" alt="1678974709618"></p><ul><li><p>定义</p><ul><li>数据类型的转换是在所赋值的数值类型和被变量接收的数据类型不一致时发生的，它需要从一种数据类型转换成另一种数据类型。</li></ul></li><li><p>分类</p><ul><li><p>隐式转换</p><ul><li><p>定义</p><ul><li>在运算过程中，由于不同的数据类型会转换成同一种数据类型，所以整型、浮点型以及字符型都可以参与混合运算。自动转换的规则是从低级类型数据转换成高级类型数据。</li></ul></li><li><p>转换规则</p><ul><li>数值型数据的转换：byte→short→int→long→float→double。</li><li>字符型转换为整型：char→int。</li></ul></li><li><p>转换条件</p><ul><li>自动类型转换的实现需要同时满足两个条件：①两种数据类型彼此兼容，②目标类型的取值范围大于源数据类型（低级类型数据转换成高级类型数据）。例如 byte 类型向 short 类型转换时，由于 short 类型的取值范围较大，会自动将 byte 转换为 short 类型。</li></ul></li></ul></li><li><p>显式转换</p><ul><li>定义<ul><li>当两种数据类型不兼容，或目标类型的取值范围小于源类型时，自动转换将无法进行，这时就需要进行强制类型转换。</li><li>语法格式<ul><li>目标类型 变量名 &#x3D; (目标类型) (被转换的数据);<br>举例：int b &#x3D; (byte)(a + b);</li></ul></li><li>注意<ul><li>如果超出了被赋值的数据类型的取值范围得到的结果会与你期望的结果不同</li><li>不建议强制转换，因为会有精度的损失。</li></ul></li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-15-2023</title>
      <link href="/2023/03/15/3-15-2023/"/>
      <url>/2023/03/15/3-15-2023/</url>
      
        <content type="html"><![CDATA[<h3 id="三月中自我崩溃"><a href="#三月中自我崩溃" class="headerlink" title="三月中自我崩溃"></a>三月中自我崩溃</h3><span id="more"></span><p>1.每日单词</p><div ><img src="\images\dayliy_image\3.16.jpg" alt="drawing" width="200" /></div>考试周，复习无进展，极度自我焦虑,看的上海的学校今年分数下来了，崩溃，高了40分，崩溃,换学校，觉得三年青春换水硕不值转战留学]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> casual_talk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式homework(1)</title>
      <link href="/2023/03/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8Fhomework(1)/"/>
      <url>/2023/03/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8Fhomework(1)/</url>
      
        <content type="html"><![CDATA[<h2 id="2023-Week1-Exp-Upload"><a href="#2023-Week1-Exp-Upload" class="headerlink" title="2023_Week1_Exp_Upload"></a>2023_Week1_Exp_Upload</h2><h3 id="1-简答题-用-UMLet-工具对下面代码绘制类图"><a href="#1-简答题-用-UMLet-工具对下面代码绘制类图" class="headerlink" title="1. (简答题)用 UMLet 工具对下面代码绘制类图"></a>1. (简答题)用 UMLet 工具对下面代码绘制类图</h3><p><img src="/images/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/10.png" alt="img"></p><p><img src="/images/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/5.png" alt="img"></p><p><img src="/images/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/11.png" alt="1678972004441"></p><p><img src="/images/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/6.png" alt="1678972695825"></p><p>【关联关系】：是一种拥有的关系，它使一个类知道另一个类的属性和方法</p><p>【代码体现】：成员变量</p><p>【箭头及指向】：带普通箭头的实心线，指向被拥有者</p><p>1.上图中，课程与学生是双向关联，课程有多名学生，学生也可能有多个课程。</p><p>2.但学生与成绩间的关系为单向关联，一名学生可能要有多门成绩，成绩有学生信息，但学生类不拥有成绩变量</p><p><img src="/images/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7.png" alt="1678972739648"></p><p>3.【组合关系】：是整体与部分的关系，但部分不能离开整体而单独存在。如公司和部门是整体和部分的关系，没有公司就不存在部门。</p><p>组合关系是关联关系的一种，是比聚合关系还要强的关系，它要求普通的聚合关系中代表整体的对象负责代表部分的对象的生命周期。</p><p>【代码体现】：成员变量</p><p>【箭头及指向】：带实心菱形的实线，菱形指向整体</p><p>上图中课程为整体，成绩没有课程就不存在。</p><p><img src="/images/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/8.png" alt="1678973083372"></p><p>4.【依赖关系】：是一种使用的关系，即一个类的实现需要另一个类的协助，所以要尽量不使用双向的互相依赖.</p><p>【代码表现】：局部变量、方法的参数或者对静态方法的调用</p><p>【箭头及指向】：带箭头的虚线，指向被使用者</p><p>一个宿舍类的实现需要另一个学生类的协助，宿舍是被使用者</p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UML&amp;&amp;面向对象设计原则</title>
      <link href="/2023/03/15/UML%E7%B1%BB%E5%9B%BE&amp;&amp;%E5%8E%9F%E5%88%99%E6%A6%82%E8%BF%B0/"/>
      <url>/2023/03/15/UML%E7%B1%BB%E5%9B%BE&amp;&amp;%E5%8E%9F%E5%88%99%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="一、单一职责原则"><a href="#一、单一职责原则" class="headerlink" title="一、单一职责原则**"></a>一、单一职责原则**</h3><p>就一个类而言，应该仅有一个引起它变化的原因。</p><p>如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化可能会削弱或者抑制这个类完成其他职责的能力。这种耦合会导致脆弱他的设计，当变化发生时，设计会遭受到意想不到的破坏；软件设计真正要做的许多内容就是发现职责并把那些职责相互分离。</p><h3 id="二、开放-封闭原则"><a href="#二、开放-封闭原则" class="headerlink" title="二、开放-封闭原则"></a><strong>二、开放-封闭原则</strong></h3><p>软件实体应该可以扩展，但不可修改。该原则是面向对象设计的核心所在，遵循这个原则可以带来面向对象技术所声称的可维护、可扩展、可复用、灵活性好。</p><p>设计人员必须对于他设计的模块应该对哪种变化封闭做出选择，必须先猜测出最有可能发生的变化种类，然后构造抽象来隔离那些变化。最初编写程序时假设变化不会发生，当变化发生时，就创建抽象来隔离以后发生的同类变化，拒绝不成熟的抽象。</p><h3 id="三、里氏代换原则"><a href="#三、里氏代换原则" class="headerlink" title="三、里氏代换原则"></a><strong>三、里氏代换原则</strong></h3><p>子类型必须能够替换掉它们的父类型。由于子类型的可替换性才使得使用父类类型的模块在无需修改的情况下就可以扩展。</p><h3 id="四、依赖倒转原则"><a href="#四、依赖倒转原则" class="headerlink" title="四、依赖倒转原则"></a><strong>四、依赖倒转原则</strong></h3><p>高层模块不应该依赖低层模块，两个都应该依赖抽象；抽象不应该依赖细节，细节应该依赖抽象。</p><p>要针对接口编程，不要针对实现编程。该原则可以说是面向对象设计的标志，编写时考虑的是如何对抽象编程而不是针对细节编程，即程序中所有的依赖关系都是终止于抽象类或者接口。</p><h3 id="五、迪迷特原则（最少知识原则）"><a href="#五、迪迷特原则（最少知识原则）" class="headerlink" title="五、迪迷特原则（最少知识原则）"></a><strong>五、迪迷特原则（最少知识原则）</strong></h3><p>如果两个类不必彼此直接通信，那么这两个类就不应当发生直接的相互作用；如果其中一个类需要调用另一个类的某一个方法的话，可以通过第三者转发这个调用。</p><p>该原则其根本思想，是强调了类之间的松耦合；类之间的耦合越弱，越利于复用，一个处在弱耦合的类被修改，不会对有关系的类造成波及。在类的结构设计上，每一个类都应当尽量降低成员的访问权限。</p><h3 id="六、合成-x2F-聚合复用原则"><a href="#六、合成-x2F-聚合复用原则" class="headerlink" title="六、合成&#x2F;聚合复用原则"></a><strong>六、合成&#x2F;聚合复用原则</strong></h3><p>尽量使用合成&#x2F;聚合，尽量不要使用类继承。</p><p>聚合表示一种弱的“拥有”关系，体现的是A对象可以包含B对象，但B对象不是A对象的一部分；合成则是一种强的“拥有”关系，体现了严格的部分和整体的关系，部分和整体的生命周期一样。</p><p>优先使用对象的合成&#x2F;聚合将有助于你保持每个类被封装，并被击中在单个任务上，这样类和类继承层次会保持较小规模，并且不太可能增长为不可控制的庞然大物。</p><h3 id="七、UML例图"><a href="#七、UML例图" class="headerlink" title="七、UML例图"></a><strong>七、UML例图</strong></h3><p>‘+’表示public，‘-’表示private，‘#’表示protected；</p><p>接口顶端有《interface》显示，只有两行；同时另一个表示方法为棒棒糖表示法；</p><p>聚合表示一种弱的’拥有’关系，体现的是A对象可以包含B对象，但B对象不是A对象的一部分；</p><p>合成是一种强的’拥有’关系，体现了严格的部分和整体的关系，部分和整体的生命周期一样；</p><p><img src="https://pic2.zhimg.com/80/v2-2a5e007cbbf020df430358e56cc37501_1440w.webp" alt="img"></p><p>在UML类图中，常见的有以下几种关系: 泛化（Generalization）, 实现（Realization），关联（Association)，聚合（Aggregation），组合(Composition)，依赖(Dependency)</p><h3 id="1-泛化（Generalization）"><a href="#1-泛化（Generalization）" class="headerlink" title="1. 泛化（Generalization）"></a><strong>1. 泛化（Generalization）</strong></h3><p>【泛化关系】：是一种继承关系，表示一般与特殊的关系，它指定了子类如何特化父类的所有特征和行为。例如：老虎是动物的一种，即有老虎的特性也有动物的共性。</p><p>【箭头指向】：带三角箭头的实线，箭头指向父类</p><p><img src="https://pic4.zhimg.com/80/v2-2111f42427a07f8270f76c1e41b91127_1440w.webp" alt="img"></p><h3 id="2-实现（Realization）"><a href="#2-实现（Realization）" class="headerlink" title="2. 实现（Realization）"></a><strong>2. 实现（Realization）</strong></h3><p>【实现关系】：是一种类与接口的关系，表示类是接口所有特征和行为的实现.</p><p>【箭头指向】：带三角箭头的虚线，箭头指向接口</p><p><img src="https://pic2.zhimg.com/80/v2-b02e9f6289d1f6ba0e5511e66315368d_1440w.webp" alt="img"></p><h3 id="3-关联（Association"><a href="#3-关联（Association" class="headerlink" title="3. 关联（Association)"></a><strong>3. 关联（Association)</strong></h3><p>【关联关系】：是一种拥有的关系，它使一个类知道另一个类的属性和方法；如：老师与学生，丈夫与妻子关联可以是双向的，也可以是单向的。双向的关联可以有两个箭头或者没有箭头，单向的关联有一个箭头。</p><p>【代码体现】：成员变量</p><p>【箭头及指向】：带普通箭头的实心线，指向被拥有者</p><p><img src="https://pic3.zhimg.com/80/v2-b8a99595152fe8f15587f87e1e15e4ae_1440w.webp" alt="img"></p><p>上图中，老师与学生是双向关联，老师有多名学生，学生也可能有多名老师。但学生与某课程间的关系为单向关联，一名学生可能要上多门课程，课程是个抽象的东西他不拥有学生。</p><p>下图为自身关联：</p><p><img src="https://pic1.zhimg.com/80/v2-07a309a7b5e45179fccbd48f1c76b16c_1440w.webp" alt="img"></p><h3 id="4-聚合（Aggregation）"><a href="#4-聚合（Aggregation）" class="headerlink" title="4. 聚合（Aggregation）"></a><strong>4. 聚合（Aggregation）</strong></h3><p>【聚合关系】：是整体与部分的关系，且部分可以离开整体而单独存在。如车和轮胎是整体和部分的关系，轮胎离开车仍然可以存在。</p><p>聚合关系是关联关系的一种，是强的关联关系；关联和聚合在语法上无法区分，必须考察具体的逻辑关系。</p><p>【代码体现】：成员变量</p><p>【箭头及指向】：带空心菱形的实心线，菱形指向整体</p><p><img src="https://pic3.zhimg.com/80/v2-44cad250f321a597839e05c437e0112a_1440w.webp" alt="img"></p><h3 id="5-组合-Composition"><a href="#5-组合-Composition" class="headerlink" title="5. 组合(Composition)"></a><strong>5. 组合(Composition)</strong></h3><p>【组合关系】：是整体与部分的关系，但部分不能离开整体而单独存在。如公司和部门是整体和部分的关系，没有公司就不存在部门。</p><p>组合关系是关联关系的一种，是比聚合关系还要强的关系，它要求普通的聚合关系中代表整体的对象负责代表部分的对象的生命周期。</p><p>【代码体现】：成员变量</p><p>【箭头及指向】：带实心菱形的实线，菱形指向整体</p><p><img src="https://pic3.zhimg.com/80/v2-7f0849545b8f89914f327c63677587d6_1440w.webp" alt="img"></p><h3 id="6-依赖-Dependency"><a href="#6-依赖-Dependency" class="headerlink" title="6. 依赖(Dependency)"></a><strong>6. 依赖(Dependency)</strong></h3><p>【依赖关系】：是一种使用的关系，即一个类的实现需要另一个类的协助，所以要尽量不使用双向的互相依赖.</p><p>【代码表现】：局部变量、方法的参数或者对静态方法的调用</p><p>【箭头及指向】：带箭头的虚线，指向被使用者</p><p><img src="https://pic3.zhimg.com/80/v2-6651fe1f4705d9bd32cedda210ace8b6_1440w.webp" alt="img"></p><p>各种关系的强弱顺序：</p><blockquote><p>泛化 &#x3D; 实现 &gt; 组合 &gt; 聚合 &gt; 关联 &gt; 依赖</p></blockquote><p>下面这张UML图，比较形象地展示了各种类图关系：</p><p><img src="https://pic1.zhimg.com/80/v2-064242574ba428a2330bf41e069a0f88_1440w.webp" alt="img"></p><h2 id="创建型"><a href="#创建型" class="headerlink" title="创建型"></a>创建型</h2><h3 id="1-Factory-Method（工厂方法）"><a href="#1-Factory-Method（工厂方法）" class="headerlink" title="1. Factory Method（工厂方法）"></a><strong>1. Factory Method（工厂方法）</strong></h3><p><img src="https://pic2.zhimg.com/80/v2-8f3b98dadbc5d9cf9469dcc99ee20991_1440w.webp" alt="img"></p><p><strong>意图：</strong></p><p>定义一个用于创建对象的接口，让子类决定实例化哪一个类。Factory Method 使一个类的实例化延迟到其子类。</p><p><strong>适用性：</strong></p><p>当一个类不知道它所必须创建的对象的类的时候。</p><p>当一个类希望由它的子类来指定它所创建的对象的时候。</p><p>当类将创建对象的职责委托给多个帮助子类中的某一个，并且你希望将哪一个帮助子类是代理者这一信息局部化的时候。</p><p>详解：<a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247487170&idx=2&sn=34b135090c064c1ca202d629a4beab52&chksm=ebd631eedca1b8f85e444f7544c2cbe696b253fe3916f17dbcfbab49b6b74653126c230fdc39&scene=21%23wechat_redirect">设计模式是什么鬼（工厂方法）</a></p><h3 id="2-Abstract-Factory（抽象工厂）"><a href="#2-Abstract-Factory（抽象工厂）" class="headerlink" title="2. Abstract Factory（抽象工厂）"></a><strong>2. Abstract Factory（抽象工厂）</strong></h3><p><img src="https://pic2.zhimg.com/80/v2-1436a190dde8067b8d461ace42c7e4a9_1440w.webp" alt="img"></p><p><strong>意图：</strong></p><p>提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</p><p><strong>适用性：</strong></p><p>一个系统要独立于它的产品的创建、组合和表示时。</p><p>一个系统要由多个产品系列中的一个来配置时。</p><p>当你要强调一系列相关的产品对象的设计以便进行联合使用时。</p><p>当你提供一个产品类库，而只想显示它们的接口而不是实现时。</p><p>详解：<a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247487234&idx=2&sn=1dca994fb989ca55ec311cae187805f2&chksm=ebd6302edca1b938f0b8107d129652d9bc2e1e72d37ce1d6dfd188294a93a62cdbec5ddd91bb&scene=21%23wechat_redirect">设计模式是什么鬼（抽象工厂）</a></p><h3 id="3-Builder（建造者）"><a href="#3-Builder（建造者）" class="headerlink" title="3. Builder（建造者）"></a><strong>3. Builder（建造者）</strong></h3><p><img src="https://pic3.zhimg.com/80/v2-48835219bebcd3b23e9548ae17f80f86_1440w.webp" alt="img"></p><p><strong>意图：</strong></p><p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p><p><strong>适用性：</strong></p><p>当创建复杂对象的算法应该独立于该对象的组成部分以及它们的装配方式时。</p><p>当构造过程必须允许被构造的对象有不同的表示时。</p><p>详解：<a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247487258&idx=2&sn=cee8a48b247ec1fb2fb1a45396c0a04e&chksm=ebd63036dca1b920246061b0287c6f29040a338c46094c8b8eeff03ea068de03180fa48aa2b2&scene=21%23wechat_redirect">设计模式是什么鬼（建造者）</a></p><h3 id="4-Prototype（原型）"><a href="#4-Prototype（原型）" class="headerlink" title="4. Prototype（原型）"></a><strong>4. Prototype（原型）</strong></h3><p><img src="https://pic1.zhimg.com/80/v2-cbd77b435c3c2c6624413b698a2ae4f8_1440w.webp" alt="img"></p><p><strong>意图：</strong></p><p>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p><p><strong>适用性：</strong></p><p>当要实例化的类是在运行时刻指定时，例如，通过动态装载；或者</p><p>为了避免创建一个与产品类层次平行的工厂类层次时；或者</p><p>当一个类的实例只能有几个不同状态组合中的一种时。建立相应数目的原型并克隆它们可能比每次用合适的状态手工实例化该类更方便一些。</p><p>详解：<a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247485830&idx=1&sn=a3164e131d4ed08cc6cfcdaec4425ff4&chksm=ebd636aadca1bfbcd1df059f9795350157c600f37238ba2f334e03064e25e8359b0acfc177b4&scene=21%23wechat_redirect">设计模式是什么鬼（原型）</a></p><h3 id="5-Singleton（单例）"><a href="#5-Singleton（单例）" class="headerlink" title="5. Singleton（单例）"></a><strong>5. Singleton（单例）</strong></h3><p><img src="https://pic4.zhimg.com/80/v2-4fd103fadf7d58b90c355bf91139e307_1440w.webp" alt="img"></p><p><strong>意图：</strong></p><p>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p><p><strong>适用性：</strong></p><p>当类只能有一个实例而且客户可以从一个众所周知的访问点访问它时。</p><p>当这个唯一实例应该是通过子类化可扩展的，并且客户应该无需更改代码就能使用一个扩展的实例时。</p><p>详解：<a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247485826&idx=2&sn=e21d6188ea07a992f1eb9a6671ae7485&chksm=ebd636aedca1bfb8ff0ad69343ab40e87cd65ec41e2dfc54d761e97e9058effe6bd2eac28486&scene=21%23wechat_redirect">设计模式是什么鬼（单例）</a></p><h2 id="结构型"><a href="#结构型" class="headerlink" title="结构型"></a>结构型</h2><h3 id="6-Adapter-Class-x2F-Object（适配器）"><a href="#6-Adapter-Class-x2F-Object（适配器）" class="headerlink" title="6. Adapter Class&#x2F;Object（适配器）"></a><strong>6. Adapter Class&#x2F;Object（适配器）</strong></h3><p><img src="https://pic3.zhimg.com/80/v2-5c8c31d37a74ba8901028488fcada606_1440w.webp" alt="img"></p><p><strong>意图：</strong></p><p>将一个类的接口转换成客户希望的另外一个接口。Adapter 模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p><p><strong>适用性：</strong></p><p>你想使用一个已经存在的类，而它的接口不符合你的需求。</p><p>你想创建一个可以复用的类，该类可以与其他不相关的类或不可预见的类（即那些接口可能不一定兼容的类）协同工作。</p><p>（仅适用于对象Adapter ）你想使用一些已经存在的子类，但是不可能对每一个都进行子类化以匹配它们的接口。对象适配器可以适配它的父类接口。</p><p>详解：<a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247485849&idx=2&sn=79922e3fe8278d01e3fab1870ed824bc&chksm=ebd636b5dca1bfa3c83c3d2d740e25553bc1ba686b2ea6de46acc14d9ea547eb636e24ac7db0&scene=21%23wechat_redirect">设计模式是什么鬼（适配器）</a></p><h3 id="7-Bridge（桥接）"><a href="#7-Bridge（桥接）" class="headerlink" title="7. Bridge（桥接）"></a><strong>7. Bridge（桥接）</strong></h3><p><img src="https://pic2.zhimg.com/80/v2-e36ccde15c056c60e0a2b4e719c3afa9_1440w.webp" alt="img"></p><p><strong>意图：</strong></p><p>将抽象部分与它的实现部分分离，使它们都可以独立地变化。</p><p><strong>适用性：</strong></p><p>你不希望在抽象和它的实现部分之间有一个固定的绑定关系。例如这种情况可能是因为，在程序运行时刻实现部分应可以被选择或者切换。</p><p>类的抽象以及它的实现都应该可以通过生成子类的方法加以扩充。这时Bridge 模式使你可以对不同的抽象接口和实现部分进行组合，并分别对它们进行扩充。</p><p>对一个抽象的实现部分的修改应对客户不产生影响，即客户的代码不必重新编译。</p><p>（C++）你想对客户完全隐藏抽象的实现部分。在C++中，类的表示在类接口中是可见的。</p><p>有许多类要生成。这样一种类层次结构说明你必须将一个对象分解成两个部分。Rumbaugh 称这种类层次结构为“嵌套的普化”（nested generalizations ）。</p><p>你想在多个对象间共享实现（可能使用引用计数），但同时要求客户并不知道这一点。一个简单的例子便是Coplien 的String 类[ Cop92 ]，在这个类中多个对象可以共享同一个字符串表示（StringRep ）。</p><p>详解：<a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247487099&idx=2&sn=457440878204cf39ade08d1643aa6375&chksm=ebd63157dca1b841e4a09c32e7ed7bd28988cc54d08d4e03eb7bbc25dc50c1acd8938fae155c&scene=21%23wechat_redirect">设计模式是什么鬼（桥接）</a></p><h3 id="8-Composite（组合）"><a href="#8-Composite（组合）" class="headerlink" title="8. Composite（组合）"></a><strong>8. Composite（组合）</strong></h3><p><img src="https://pic4.zhimg.com/80/v2-75d82d38597a3c79e0c19665bc816487_1440w.webp" alt="img"></p><p><strong>意图：</strong></p><p>将对象组合成树形结构以表示“部分-整体”的层次结构。C o m p o s i t e 使得用户对单个对象和组合对象的使用具有一致性。</p><p><strong>适用性：</strong></p><p>你想表示对象的部分-整体层次结构。</p><p>你希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。</p><p>详解：<a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247486525&idx=2&sn=a2059bcf272a82f5a98cbd9f22349a96&chksm=ebd63311dca1ba071022d396a12eca74d58be8164713fe90f42aa1a7376db77bd6d97755bde8&scene=21%23wechat_redirect">设计模式是什么鬼（组合）</a></p><h3 id="9-Decorator（装饰）"><a href="#9-Decorator（装饰）" class="headerlink" title="9. Decorator（装饰）"></a><strong>9. Decorator（装饰）</strong></h3><p><img src="https://pic3.zhimg.com/80/v2-20f4f4c4eb272b615394cea73450ca76_1440w.webp" alt="img"></p><p><strong>意图：</strong></p><p>动态地给一个对象添加一些额外的职责。就增加功能来说，Decorator 模式相比生成子类更为灵活。</p><p><strong>适用性：</strong></p><p>在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责。</p><p>处理那些可以撤消的职责。</p><p>当不能采用生成子类的方法进行扩充时。一种情况是，可能有大量独立的扩展，为支持每一种组合将产生大量的子类，使得子类数目呈爆炸性增长。另一种情况可能是因为类定义被隐藏，或类定义不能用于生成子类。</p><p>详解：<a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247486377&idx=2&sn=e88370d32c36b19ac89189341cbaf03b&chksm=ebd63485dca1bd93fd46ce901b8ed5adaa0f1f5db15b8a19902bef66a05bd38ed420e26f7f5e&scene=21%23wechat_redirect">设计模式是什么鬼（装饰）</a></p><h3 id="10-Facade（外观）"><a href="#10-Facade（外观）" class="headerlink" title="10. Facade（外观）"></a><strong>10. Facade（外观）</strong></h3><p><img src="https://pic2.zhimg.com/80/v2-aa585c0b4be937d5a1ee0d9fb5683aa1_1440w.webp" alt="img"></p><p><strong>意图：</strong></p><p>为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p><p><strong>适用性：</strong></p><p>当你要为一个复杂子系统提供一个简单接口时。子系统往往因为不断演化而变得越来越复杂。大多数模式使用时都会产生更多更小的类。这使得子系统更具可重用性，也更容易对子系统进行定制，但这也给那些不需要定制子系统的用户带来一些使用上的困难。Facade 可以提供一个简单的缺省视图，这一视图对大多数用户来说已经足够，而那些需要更多的可定制性的用户可以越过facade层。</p><p>客户程序与抽象类的实现部分之间存在着很大的依赖性。引入facade 将这个子系统与客户以及其他的子系统分离，可以提高子系统的独立性和可移植性。</p><p>当你需要构建一个层次结构的子系统时，使用facade模式定义子系统中每层的入口点。如果子系统之间是相互依赖的，你可以让它们仅通过facade进行通讯，从而简化了它们之间的依赖关系。</p><p>详解：<a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247486253&idx=2&sn=60b15886f8230ee17067d48d8a273329&chksm=ebd63401dca1bd17a26acf0f139f01feebde6071646bfad60c2ca2773fd1f593955aa2efe992&scene=21%23wechat_redirect">设计模式是什么鬼（门面）</a></p><h3 id="11-Flyweight（享元）"><a href="#11-Flyweight（享元）" class="headerlink" title="11. Flyweight（享元）"></a><strong>11. Flyweight（享元）</strong></h3><p><img src="https://pic4.zhimg.com/80/v2-2753d0d9328f08928db006313e08bd43_1440w.webp" alt="img"></p><p><strong>意图：</strong></p><p>运用共享技术有效地支持大量细粒度的对象。</p><p><strong>适用性：</strong></p><p>一个应用程序使用了大量的对象。</p><p>完全由于使用大量的对象，造成很大的存储开销。</p><p>对象的大多数状态都可变为外部状态。</p><p>如果删除对象的外部状态，那么可以用相对较少的共享对象取代很多组对象。</p><p>应用程序不依赖于对象标识。由于Flyweight 对象可以被共享，对于概念上明显有别的对象，标识测试将返回真值。</p><p>详解：<a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247486986&idx=2&sn=0956b282423ac82a64bad9d4b75bd63d&chksm=ebd63126dca1b830bdb1464ec0d2957a63e19956e657673af192d514088a7bef569741656d42&scene=21%23wechat_redirect">设计模式是什么鬼（享元）</a></p><h3 id="12-Proxy（代理）"><a href="#12-Proxy（代理）" class="headerlink" title="12. Proxy（代理）"></a><strong>12. Proxy（代理）</strong></h3><p><img src="https://pic4.zhimg.com/80/v2-6e64b84a618958acae36cb537c70c583_1440w.webp" alt="img"></p><p><strong>意图：</strong></p><p>为其他对象提供一种代理以控制对这个对象的访问。</p><p><strong>适用性：</strong></p><p>在需要用比较通用和复杂的对象指针代替简单的指针的时候，使用Proxy模式。下面是一 些可以使用Proxy 模式常见情况：</p><ul><li>远程代理（Remote Proxy ）为一个对象在不同的地址空间提供局部代表。NEXTSTEP[Add94] 使用NXProxy 类实现了这一目的。Coplien[Cop92] 称这种代理为“大使” （Ambassador ）。</li><li>虚代理（Virtual Proxy ）根据需要创建开销很大的对象。在动机一节描述的ImageProxy 就是这样一种代理的例子。</li><li>保护代理（Protection Proxy ）控制对原始对象的访问。保护代理用于对象应该有不同 的访问权限的时候。例如，在Choices 操作系统[ CIRM93]中KemelProxies为操作系统对象提供 了访问保护。</li><li>智能指引（Smart Reference ）取代了简单的指针，它在访问对象时执行一些附加操作。它的典型用途包括：</li></ul><p>对指向实际对象的引用计数，这样当该对象没有引用时，可以自动释放它(也称为SmartPointers[Ede92 ] )。</p><p>当第一次引用一个持久对象时，将它装入内存。</p><p>在访问一个实际对象前，检查是否已经锁定了它，以确保其他对象不能改变它。</p><p>详解：<a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247487054&idx=2&sn=489695986c038525e25c017c217b72fb&chksm=ebd63162dca1b874edcaa30680e1da4d3a02c9b0011cb5c60c22d2b9ebea9169022813810bd5&scene=21%23wechat_redirect">设计模式是什么鬼（代理）</a></p><h2 id="行为型"><a href="#行为型" class="headerlink" title="行为型"></a>行为型</h2><h3 id="13-Interpreter（解释器）"><a href="#13-Interpreter（解释器）" class="headerlink" title="13. Interpreter（解释器）"></a><strong>13. Interpreter（解释器）</strong></h3><p><img src="https://pic4.zhimg.com/80/v2-1c7090078bc60481325e481502a7074f_1440w.webp" alt="img"></p><p><strong>意图：</strong></p><p>给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。</p><p><strong>适用性：</strong></p><p>当有一个语言需要解释执行, 并且你可将该语言中的句子表示为一个抽象语法树时，可使用解释器模式。而当存在以下情况时该模式效果最好：</p><p>该文法简单对于复杂的文法, 文法的类层次变得庞大而无法管理。此时语法分析程序生成器这样的工具是更好的选择。它们无需构建抽象语法树即可解释表达式, 这样可以节省空间而且还可能节省时间。</p><p>效率不是一个关键问题最高效的解释器通常不是通过直接解释语法分析树实现的, 而是首先将它们转换成另一种形式。例如，正则表达式通常被转换成状态机。但即使在这种情况下, 转换器仍可用解释器模式实现, 该模式仍是有用的。</p><p>详解：<a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247487345&idx=2&sn=1ee3aa645b265c55de74a1d2567c7e89&chksm=ebd6305ddca1b94b7ac2b713c5d439c031765e24315653ae2f728a3de3f10d03ba554c1ab872&scene=21%23wechat_redirect">设计模式是什么鬼（解释器）</a></p><h3 id="14-Template-Method（模板方法）"><a href="#14-Template-Method（模板方法）" class="headerlink" title="14. Template Method（模板方法）"></a><strong>14. Template Method（模板方法）</strong></h3><p><img src="https://pic1.zhimg.com/80/v2-a232d4224c19e0c44d0f5a70a1d74728_1440w.webp" alt="img"></p><p><strong>意图：</strong></p><p>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。TemplateMethod 使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p><p><strong>适用性：</strong></p><p>一次性实现一个算法的不变的部分，并将可变的行为留给子类来实现。</p><p>各子类中公共的行为应被提取出来并集中到一个公共父类中以避免代码重复。这是Opdyke 和Johnson 所描述过的“重分解以一般化”的一个很好的例子[ OJ93 ]。首先识别现有代码中的不同之处，并且将不同之处分离为新的操作。最后，用一个调用这些新的操作的模板方法来替换这些不同的代码。</p><p>控制子类扩展。模板方法只在特定点调用“hook ”操作（参见效果一节），这样就只允许在这些点进行扩展。</p><p>详解：<a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247486148&idx=1&sn=601fa38aee0aa27137341ce9a2624fec&chksm=ebd635e8dca1bcfe8da575478244414d13620010cd0d9823f423af8d2457ad1bb65a17d6a940&scene=21%23wechat_redirect">设计模式是什么鬼（模板方法）</a></p><h3 id="15-Chain-of-Responsibility（责任链）"><a href="#15-Chain-of-Responsibility（责任链）" class="headerlink" title="15. Chain of Responsibility（责任链）"></a><strong>15. Chain of Responsibility（责任链）</strong></h3><p><img src="https://pic4.zhimg.com/80/v2-84c0347f8d4e33bde0a1eaaaebbd347f_1440w.webp" alt="img"></p><p><strong>意图：</strong></p><p>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</p><p><strong>适用性：</strong></p><p>有多个的对象可以处理一个请求，哪个对象处理该请求运行时刻自动确定。</p><p>你想在不明确指定接收者的情况下，向多个对象中的一个提交一个请求。</p><p>可处理一个请求的对象集合应被动态指定。</p><p>详解：<a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247486851&idx=2&sn=e5eb6b74336f0148e8c3e3043e613e87&chksm=ebd632afdca1bbb9d8a54555ed67e248fed58ebc1991cae9961c4d22e226b04369295cc49877&scene=21%23wechat_redirect">设计模式是什么鬼（责任链）</a></p><h3 id="16-Command（命令）"><a href="#16-Command（命令）" class="headerlink" title="16. Command（命令）"></a><strong>16. Command（命令）</strong></h3><p><img src="https://pic3.zhimg.com/80/v2-eeb21ebeb421049703255e00065feb26_1440w.webp" alt="img"></p><p><strong>意图：</strong></p><p>将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤消的操作。</p><p><strong>适用性：</strong></p><p>抽象出待执行的动作以参数化某对象，你可用过程语言中的回调（call back）函数表达这种参数化机制。所谓回调函数是指函数先在某处注册，而它将在稍后某个需要的时候被调用。Command 模式是回调机制的一个面向对象的替代品。</p><p>在不同的时刻指定、排列和执行请求。一个Command对象可以有一个与初始请求无关的生存期。如果一个请求的接收者可用一种与地址空间无关的方式表达，那么就可将负责该请求的命令对象传送给另一个不同的进程并在那儿实现该请求。</p><p>支持取消操作。Command的Excute 操作可在实施操作前将状态存储起来，在取消操作时这个状态用来消除该操作的影响。Command 接口必须添加一个Unexecute操作，该操作取消上一次Execute调用的效果。执行的命令被存储在一个历史列表中。可通过向后和向前遍历这一列表并分别调用Unexecute和Execute来实现重数不限的“取消”和“重做”。</p><p>支持修改日志，这样当系统崩溃时，这些修改可以被重做一遍。在Command接口中添加装载操作和存储操作，可以用来保持变动的一个一致的修改日志。从崩溃中恢复的过程包括从磁盘中重新读入记录下来的命令并用Execute操作重新执行它们。</p><p>用构建在原语操作上的高层操作构造一个系统。这样一种结构在支持事务( transaction)的信息系统中很常见。一个事务封装了对数据的一组变动。Command模式提供了对事务进行建模的方法。Command有一个公共的接口，使得你可以用同一种方式调用所有的事务。同时使用该模式也易于添加新事务以扩展系统。</p><p>详解：<a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247487282&idx=2&sn=875f2c0a1ea711dca843c80c7bb6f34a&chksm=ebd6301edca1b908026c18897d07dbe426cb80bf7788f2d1f8b28e6d0ade726d68d99cfc7739&scene=21%23wechat_redirect">设计模式是什么鬼（命令模式）</a></p><h3 id="17-Iterator（迭代器）"><a href="#17-Iterator（迭代器）" class="headerlink" title="17. Iterator（迭代器）"></a><strong>17. Iterator（迭代器）</strong></h3><p><img src="https://pic3.zhimg.com/80/v2-cd8dac7ccac2eb57e3e56571269867e2_1440w.webp" alt="img"></p><p><strong>意图：</strong></p><p>提供一种方法顺序访问一个聚合对象中各个元素, 而又不需暴露该对象的内部表示。</p><p><strong>适用性：</strong></p><p>访问一个聚合对象的内容而无需暴露它的内部表示。</p><p>支持对聚合对象的多种遍历。</p><p>为遍历不同的聚合结构提供一个统一的接口(即, 支持多态迭代)。</p><p>详解：<a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247486776&idx=2&sn=0f4773ca76d325e51bb358325d312642&chksm=ebd63214dca1bb02dc73c0c58f334076226d13e00499c42cad5ff79422c29af44b28e827e77c&scene=21%23wechat_redirect">设计模式是什么鬼（迭代器）</a></p><h3 id="18-Mediator（中介者）"><a href="#18-Mediator（中介者）" class="headerlink" title="18. Mediator（中介者）"></a><strong>18. Mediator（中介者）</strong></h3><p><img src="https://pic1.zhimg.com/80/v2-4246996c655cd30e5a68cedfb587439c_1440w.webp" alt="img"></p><p><strong>意图：</strong></p><p>用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p><p><strong>适用性：</strong></p><p>一组对象以定义良好但是复杂的方式进行通信。产生的相互依赖关系结构混乱且难以理解。</p><p>一个对象引用其他很多对象并且直接与这些对象通信,导致难以复用该对象。</p><p>想定制一个分布在多个类中的行为，而又不想生成太多的子类。</p><p>详解：<a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247486616&idx=1&sn=e18c5f52fc01187b56a7f579f51878a0&chksm=ebd633b4dca1baa21a87516923460a0a598bf35114fcbd4c73e1f42ff5a7693adab540c401a9&scene=21%23wechat_redirect">设计模式是什么鬼（中介）</a></p><h3 id="19-Memento（备忘录）"><a href="#19-Memento（备忘录）" class="headerlink" title="19. Memento（备忘录）"></a><strong>19. Memento（备忘录）</strong></h3><p><img src="https://pic4.zhimg.com/80/v2-c03892a81c777cc4967136b65d24edbb_1440w.webp" alt="img"></p><p><strong>意图：</strong></p><p>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。</p><p><strong>适用性：</strong></p><p>必须保存一个对象在某一个时刻的(部分)状态, 这样以后需要时它才能恢复到先前的状态。</p><p>如果一个用接口来让其它对象直接得到这些状态，将会暴露对象的实现细节并破坏对象的封装性。</p><p>详解：<a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247486709&idx=2&sn=a3cd99b7c0e7f7953bd5bf44cbbccf87&chksm=ebd633d9dca1bacf94451863de6982593ac15a11f15611de1d3aba9ada3244b5fda6a1bc093e&scene=21%23wechat_redirect">设计模式是什么鬼（备忘录）</a></p><h3 id="20-Observer（观察者）"><a href="#20-Observer（观察者）" class="headerlink" title="20. Observer（观察者）"></a><strong>20. Observer（观察者）</strong></h3><p><img src="https://pic1.zhimg.com/80/v2-18916c491a66e507eb9fd0442da74c50_1440w.webp" alt="img"></p><p><strong>意图：</strong></p><p>定义对象间的一种一对多的依赖关系,当一个对象的状态发生改变时, 所有依赖于它的对象都得到通知并被自动更新。</p><p><strong>适用性：</strong></p><p>当一个抽象模型有两个方面, 其中一个方面依赖于另一方面。将这二者封装在独立的对象中以使它们可以各自独立地改变和复用。</p><p>当对一个对象的改变需要同时改变其它对象, 而不知道具体有多少对象有待改变。</p><p>当一个对象必须通知其它对象，而它又不能假定其它对象是谁。换言之, 你不希望这些对象是紧密耦合的。</p><p>详解：<a href="https://link.zhihu.com/?target=https://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247486897&idx=2&sn=927e4dd95695163fa250447ea88e12e8&scene=21%23wechat_redirect">设计模式是什么鬼（观察者）</a></p><h3 id="21-State（状态）"><a href="#21-State（状态）" class="headerlink" title="21. State（状态）"></a><strong>21. State（状态）</strong></h3><p><img src="https://pic1.zhimg.com/80/v2-bea873507272a679e4dba7ddea2d6edc_1440w.webp" alt="img"></p><p><strong>意图：</strong></p><p>允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它的类。</p><p><strong>适用性：</strong></p><p>一个对象的行为取决于它的状态, 并且它必须在运行时刻根据状态改变它的行为。</p><p>一个操作中含有庞大的多分支的条件语句，且这些分支依赖于该对象的状态。这个状态通常用一个或多个枚举常量表示。通常, 有多个操作包含这一相同的条件结构。State模式将每一个条件分支放入一个独立的类中。这使得你可以根据对象自身的情况将对象的状态作为一个对象，这一对象可以不依赖于其他对象而独立变化。</p><p>详解：<a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247485989&idx=1&sn=7d6967a19531190fb55085e1db559ec1&chksm=ebd63509dca1bc1f710b9df5607a999f68493460e7b610668276009bcd546213500968891f64&scene=21%23wechat_redirect">设计模式是什么鬼（状态）</a></p><h3 id="22-Strategy（策略）"><a href="#22-Strategy（策略）" class="headerlink" title="22. Strategy（策略）"></a><strong>22. Strategy（策略）</strong></h3><p><img src="https://pic3.zhimg.com/80/v2-40ff8a46922f467bba253a34ce20f89a_1440w.webp" alt="img"></p><p><strong>意图：</strong></p><p>定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。本模式使得算法可独立于使用它的客户而变化。</p><p><strong>适用性：</strong></p><p>许多相关的类仅仅是行为有异。“策略”提供了一种用多个行为中的一个行为来配置一个类的方法。</p><p>需要使用一个算法的不同变体。例如，你可能会定义一些反映不同的空间&#x2F;时间权衡的算法。当这些变体实现为一个算法的类层次时[H087] ,可以使用策略模式。</p><p>算法使用客户不应该知道的数据。可使用策略模式以避免暴露复杂的、与算法相关的数据结构。</p><p>一个类定义了多种行为, 并且这些行为在这个类的操作中以多个条件语句的形式出现。将相关的条件分支移入它们各自的Strategy类中以代替这些条件语句。</p><p>详解：<a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247485903&idx=1&sn=172401bccf663455fd90c55aa957db18&chksm=ebd636e3dca1bff544c671c9f8de3a6e8d40049ab7cea3d750d03ed00ef6e6c4fae376333de1&scene=21%23wechat_redirect">设计模式是什么鬼（策略）</a></p><h3 id="23-Visitor（访问者）"><a href="#23-Visitor（访问者）" class="headerlink" title="23. Visitor（访问者）"></a><strong>23. Visitor（访问者）</strong></h3><p><img src="https://pic2.zhimg.com/80/v2-99fb72f8ca261dc1cbd99f0c5203f7f5_1440w.webp" alt="img"></p><p><strong>意图：</strong></p><p>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。TemplateMethod 使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p><p><strong>适用性：</strong></p><p>一次性实现一个算法的不变的部分，并将可变的行为留给子类来实现。</p><p>各子类中公共的行为应被提取出来并集中到一个公共父类中以避免代码重复。这是Opdyke和Johnson所描述过的“重分解以一般化”的一个很好的例子[OJ93]。首先识别现有代码中的不同之处，并且将不同之处分离为新的操作。最后，用一个调用这些新的操作的模板方法来替换这些不同的代码。</p><p>控制子类扩展。模板方法只在特定点调用“hook ”操作（参见效果一节），这样就只允许在这些点进行扩展。</p><p>详解：<a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247487316&idx=2&sn=068c3ef1e11722a0220dea7fc2c28dd6&chksm=ebd63078dca1b96ed3048bc390c97700cbcfff3c0f18425a862de768ee3489b76b15598b56db&scene=21%23wechat_redirect">设计模式是什么鬼（访问者）</a></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">来源：blog.csdn.net/zsjlovesm521/article/details/94382666</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件体系结构</title>
      <link href="/2023/03/15/%E8%BD%AF%E4%BB%B6%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
      <url>/2023/03/15/%E8%BD%AF%E4%BB%B6%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="软件体系结构"><a href="#软件体系结构" class="headerlink" title="软件体系结构"></a>软件体系结构</h2><p>​    软件体系结构是有关软件系统如何组织的描述。体系结构影响了系统的性能、安全性和可用性。软件工程师可以在给定的体系结构类型中使用不同的体系结构风格和模式，而不同的模式描述了不同的系统类别、构建、连接件及约束。</p><p>​    软件体系结构脱胎于软件工程．但其形成同时借鉴了计算机体系结构和网络体系结构中很多宝贵的思想和方法。最近几年软件体系结构研究完全独立于软件工程的研究，成为计算机科学的一个最新的研究方向和独立学科分支。</p><p>软件体系结构是对系统的高层设计，是从一个较高的层次来考虑组成系统的构建、构建之间的连接关系，以及系统需满足的约束等。设计模式可以用于软件体系结构的设计，以实现体系结构级的设计复用。用于软件体系结构的设计模式通常称为架构模式（Architectural Pattern）或体系机构风格（Architectural Style）。</p><p>在《Pattern - Oriented Software Architecture》第一卷中，Buschmann等人根据问题的规模或抽象层次将软件设计模式分为三个层次：架构模式（Architectural Patterns）、设计模式（Design Patterns）和习惯用法（Idioms）。</p><p>（1）架构模式</p><p>架构模式是一种高层模式，用于描述系统级的结构组成、相互关系及相关约束。对架构模式的选择是最基本的设计决策，将决定系统的基本架构，并决定后续的设计及开发活动。</p><p>例如，模型 - 视图 - 控制器（Model - View - Controller，MVC）即是一种架构模式，该模式给出了一种交互式系统的架构设计，该模式的主要思想式实现业务逻辑、用户界面的分离。</p><p>（2）设计模式</p><p>设计模式是中层模式，是针对系统局部设计问题给出的解决方案。一般情况下，人们所讲的设计模式都是指中层模式。设计模式的选择对系统的基本架构没有影响，但在实现架构模式时，则可能采用多种设计模式。</p><p>例如，在实现MVC架构模式时，采用的主要设计模式有观察者模式、组合模式和策略模式等。</p><p>（3）习惯用法</p><p>架构模式和设计模式被认为是与具体编程语言无关的，而习惯用法则通常被认为是与具体编程语言相关的一种低层模式。习惯用法给出的解决方案通常与具体编程语言的某种语法机制相关。</p><p>本课程中，软件体系结构就是指架构模式，可以认为是：软件体系结构 &#x3D; 构件 + 连接件 + 约束 。</p><p><img src="https://pic4.zhimg.com/v2-8c98ec4b5d9d5283ff4d1ad92766de57_r.jpg" alt="preview"></p><p>构件</p><p>构件是具有某种功能的可复用的软件结构单元，表示系统中主要的计算元素 和 数据存储。</p><p>构件是一个抽象的概念，在程序中可以指程序函数、模块、对象、类等。</p><p><img src="https://pic2.zhimg.com/80/v2-b666558008dc4ff3329ca63e35a6e225_720w.jpg" alt="img"></p><p>连接件</p><p>连接是构件间建立和维护行为关联与信息传递的途径。连接包含下面两种要素：</p><p>其中，机制指的实际中的消息传递方式。</p><p>而协议则决定了 消息的语义理解。</p><p><img src="https://pic2.zhimg.com/80/v2-1bb5a6d90757c84a0b4009b3f955fd8d_720w.jpg" alt="img"></p><p>连接件表示构件之间的交互并实现构件之间的连接。</p><p><img src="https://pic4.zhimg.com/80/v2-17f01a5446ba515aca87b563de50f7cb_720w.jpg" alt="img"></p><h2 id="软件体系结构目标"><a href="#软件体系结构目标" class="headerlink" title="软件体系结构目标"></a>软件体系结构目标</h2><p>为了更好理解后面的软件体系结构涉及的原则和体系结构风格，请牢记这些目标，时不时的对照后面的内容回顾这些目标。</p><p>所有的设计原则等理论基本上都可以映射到下面一个或几个目标上。</p><p><img src="https://pic4.zhimg.com/80/v2-97de430bbe1b18afbc7dd681c511ba33_720w.jpg" alt="img"></p><h2 id="体系结构的发展"><a href="#体系结构的发展" class="headerlink" title="体系结构的发展"></a>体系结构的发展</h2><p>现在软件的复杂性及多变性，导致了软件粒度越来越粗，越来越开放。</p><p><img src="https://pic3.zhimg.com/80/v2-d6fe8623f78de2cb0ec0d98660466a52_720w.jpg" alt="img"></p><h2 id="下面是常见的软件体系结构"><a href="#下面是常见的软件体系结构" class="headerlink" title="下面是常见的软件体系结构"></a>下面是常见的软件体系结构</h2><p><img src="/images/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/3.png" alt="11.png"></p><h2 id="软件体系结构与软件设计模式的区别"><a href="#软件体系结构与软件设计模式的区别" class="headerlink" title="软件体系结构与软件设计模式的区别"></a>软件体系结构与软件设计模式的区别</h2><p><img src="/images/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/4.png" alt="Design-vs-Patterns-SAP.png"></p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式概述</title>
      <link href="/2023/03/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(1)/"/>
      <url>/2023/03/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(1)/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式概述（1）"><a href="#设计模式概述（1）" class="headerlink" title="设计模式概述（1）"></a>设计模式概述（1）</h1><h3 id="1-1-软件设计模式的产生背景"><a href="#1-1-软件设计模式的产生背景" class="headerlink" title="1.1 软件设计模式的产生背景"></a>1.1 软件设计模式的产生背景</h3><p>“设计模式”最初并不是出现在软件设计中，而是被用于建筑领域的设计中。</p><p>1977年美国著名建筑大师、加利福尼亚大学伯克利分校环境结构中心主任<code>克里斯托夫·亚历山大（Christopher Alexander）</code>在他的著作《建筑模式语言：城镇、建筑、构造》（A Pattern Language: Towns Building Construction）中描述了一些常见的建筑设计问题，并提出了 253 种关于对城镇、邻里、住宅、花园和房间等进行设计的基本模式。</p><p>1979 年他的另一部经典著作《建筑的永恒之道》（The Timeless Way of Building）进一步强化了设计模式的思想，为后来的建筑设计指明了方向。</p><p>1987 年，肯特·贝克（Kent Beck）和沃德·坎宁安（Ward Cunningham）首先将克里斯托夫·亚历山大的模式思想应用在 Smalltalk 中的图形用户接口的生成中，但没有引起软件界的关注。</p><p>1990年软件工程界开始研讨设计模式的话题，后来召开了多次关于设计模式的研讨会。直到1995 年，艾瑞克·伽马（ErichGamma）、理査德·海尔姆（Richard Helm）、拉尔夫·约翰森（Ralph Johnson）、约翰·威利斯迪斯（John Vlissides）等 4 位作者合作出版了《设计模式：可复用面向对象软件的基础》一书，在此书中收录了 23 个设计模式，这是设计模式领域里程碑的事件，导致了软件设计模式的突破。这 4 位作者在软件开发领域里也以他们的“四人组”（Gang of Four，GoF）著称。</p><h3 id="1-2-软件设计模式的概念"><a href="#1-2-软件设计模式的概念" class="headerlink" title="1.2 软件设计模式的概念"></a>1.2 软件设计模式的概念</h3><p>软件设计模式（Software Design Pattern），又称设计模式，“解决如下的在特定的环境中反复出现的设计问题，并且为其提供了解决方案”(Buschmann, et. al. 1996)，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。它描述了在软件设计过程中的一些不断重复发生的问题，以及该问题的解决方案。也就是说，它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用。</p><h3 id="1-3-学习设计模式的必要性"><a href="#1-3-学习设计模式的必要性" class="headerlink" title="1.3 学习设计模式的必要性"></a>1.3 学习设计模式的必要性</h3><p>设计模式的本质是面向对象设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解。</p><p>正确使用设计模式具有以下优点。</p><ol><li>可以提高程序员的思维能力、编程能力和设计能力。</li><li>使程序设计更加标准化、代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期。</li><li>使设计的代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强。</li><li>成为优秀的软件工程师。</li></ol><p>当然，软件设计模式只是一个引导。在具体的软件幵发中，必须根据设计的应用系统的特点和要求来恰当选择。对于简单的程序开发，苛能写一个简单的算法要比引入某种设计模式更加容易。但对大项目的开发或者框架设计，用设计模式来组织代码显然更好。</p><h3 id="1-4-软件设计模式的基本要素"><a href="#1-4-软件设计模式的基本要素" class="headerlink" title="1.4 软件设计模式的基本要素"></a>1.4 软件设计模式的基本要素</h3><p>软件设计模式使人们可以更加简单方便地复用成功的设计和体系结构，它通常包含以下几个基本要素：模式名称、别名、动机、问题、解决方案、效果、结构、模式角色、合作关系、实现方法、适用性、已知应用、例程、模式扩展和相关模式等，其中最关键的元素包括以下 4 个主要部分。</p><ol><li>模式名称</li></ol><p>每一个模式都有自己的名字，通常用一两个词来描述，可以根据模式的问题、特点、解决方案、功能和效果来命名。模式名称（PatternName）有助于我们理解和记忆该模式，也方便我们来讨论自己的设计。</p><ol start="2"><li>问题</li></ol><p>问题（Problem）描述了该模式的应用环境，即何时使用该模式。它解释了设计问题和问题存在的前因后果，以及必须满足的一系列先决条件。</p><ol start="3"><li>解决方案</li></ol><p>模式问题的解决方案（Solution）包括设计的组成成分、它们之间的相互关系及各自的职责和协作方式。因为模式就像一个模板，可应用于多种不同场合，所以解决方案并不描述一个特定而具体的设计或实现，而是提供设计问题的抽象描述和怎样用一个具有一般意义的元素组合（类或对象的 组合）来解决这个问题。</p><ol start="4"><li>效果</li></ol><p>描述了模式的应用效果以及使用该模式应该权衡的问题，即模式的优缺点。主要是对时间和空间的衡量，以及该模式对系统的灵活性、扩充性、可移植性的影响，也考虑其实现问题。显式地列出这些效果（Consequence）对理解和评价这些模式有很大的帮助。</p><h3 id="1-5-根据目的分类"><a href="#1-5-根据目的分类" class="headerlink" title="1.5 根据目的分类"></a>1.5 根据目的分类</h3><ul><li><p><strong>创建型模式</strong></p><p>用于描述“怎样创建对象”，它的主要特点是“将对象的创建与使用分离”。GoF（四人组）书中提供了单例、原型、工厂方法、抽象工厂、建造者等 5 种创建型模式。</p></li><li><p><strong>结构型模式</strong></p><p>用于描述如何将类或对象按某种布局组成更大的结构，GoF（四人组）书中提供了代理、适配器、桥接、装饰、外观、享元、组合等 7 种结构型模式。</p></li><li><p><strong>行为型模式</strong></p><p>用于描述类或对象之间怎样相互协作共同完成单个对象无法单独完成的任务，以及怎样分配职责。GoF（四人组）书中提供了模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器等 11 种行为型模式。</p></li></ul><p><img src="https://rajneekanth.files.wordpress.com/2014/04/alldesignpatterns.png" alt="What are Design Patterns? – Rajani Kanth"></p><h3 id="1-6-根据作用范围来分"><a href="#1-6-根据作用范围来分" class="headerlink" title="1.6 根据作用范围来分"></a>1.6 根据作用范围来分</h3><p>根据模式是主要用于类上还是主要用于对象上来分，这种方式可分为类模式和对象模式两种。</p><ol><li>类模式：用于处理类与子类之间的关系，这些关系通过继承来建立，是静态的，在编译时刻便确定下来了。GoF中的工厂方法、（类）适配器、模板方法、解释器属于该模式。</li><li>对象模式：用于处理对象之间的关系，这些关系可以通过组合或聚合来实现，在运行时刻是可以变化的，更具动态性。GoF 中除了以上 4 种，其他的都是对象模式。</li></ol><p><img src="/images/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2.png" alt="img"></p><h3 id="1-7-GoF的23种设计模式的功能简介"><a href="#1-7-GoF的23种设计模式的功能简介" class="headerlink" title="1.7. GoF的23种设计模式的功能简介"></a>1.7. GoF的23种设计模式的功能简介</h3><p>前面说明了 GoF 的 23 种设计模式的分类，现在对各个模式的功能进行介绍。</p><ol><li>单例（Singleton）模式：某个类只能生成一个实例，该类提供了一个全局访问点供外部获取该实例，其拓展是有限多例模式。</li><li>原型（Prototype）模式：将一个对象作为原型，通过对其进行复制而克隆出多个和原型类似的新实例。</li><li>工厂方法（Factory Method）模式：定义一个用于创建产品的接口，由子类决定生产什么产品。</li><li>抽象工厂（AbstractFactory）模式：提供一个创建产品族的接口，其每个子类可以生产一系列相关的产品。</li><li>建造者（Builder）模式：将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象。</li><li>代理（Proxy）模式：为某对象提供一种代理以控制对该对象的访问。即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性。</li><li>适配器（Adapter）模式：将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。</li><li>桥接（Bridge）模式：将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。</li><li>装饰（Decorator）模式：动态的给对象增加一些职责，即增加其额外的功能。</li><li>外观（Facade）模式：为多个复杂的子系统提供一个一致的接口，使这些子系统更加容易被访问。</li><li>享元（Flyweight）模式：运用共享技术来有效地支持大量细粒度对象的复用。</li><li>组合（Composite）模式：将对象组合成树状层次结构，使用户对单个对象和组合对象具有一致的访问性。</li><li>模板方法（TemplateMethod）模式：定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。</li><li>策略（Strategy）模式：定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的改变不会影响使用算法的客户。</li><li>命令（Command）模式：将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开。</li><li>职责链（Chain of Responsibility）模式：把请求从链中的一个对象传到下一个对象，直到请求被响应为止。通过这种方式去除对象之间的耦合。</li><li>状态（State）模式：允许一个对象在其内部状态发生改变时改变其行为能力。</li><li>观察者（Observer）模式：多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为。</li><li>中介者（Mediator）模式：定义一个中介对象来简化原有对象之间的交互关系，降低系统中对象间的耦合度，使原有对象之间不必相互了解。</li><li>迭代器（Iterator）模式：提供一种方法来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。</li><li>访问者（Visitor）模式：在不改变集合元素的前提下，为一个集合中的每个元素提供多种访问方式，即每个元素有多个访问者对象访问。</li><li>备忘录（Memento）模式：在不破坏封装性的前提下，获取并保存一个对象的内部状态，以便以后恢复它。</li><li>解释器（Interpreter）模式：提供如何定义语言的文法，以及对语言句子的解释方法，即解释器。</li></ol><p>必须指出，这 23 种设计模式不是孤立存在的，很多模式之间存在一定的关联关系，在大的系统开发中常常同时使用多种设计模式。</p><p><img src="https://s3.ananas.chaoxing.com/sv-w6/doc/81/1a/9b/044fa8cabde2944e50aa2661f8755299/thumb/1.png" alt="img"></p><p><img src="https://s3.ananas.chaoxing.com/sv-w6/doc/81/1a/9b/044fa8cabde2944e50aa2661f8755299/thumb/2.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机和主机双向复制</title>
      <link href="/2023/03/14/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%92%8C%E4%B8%BB%E6%9C%BA%E5%8F%8C%E5%90%91%E5%A4%8D%E5%88%B6/"/>
      <url>/2023/03/14/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%92%8C%E4%B8%BB%E6%9C%BA%E5%8F%8C%E5%90%91%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="虚拟机和主机双向复制"><a href="#虚拟机和主机双向复制" class="headerlink" title="虚拟机和主机双向复制"></a>虚拟机和主机双向复制</h1><span id="more"></span><p><img src="/images/%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%BB%E6%9C%BA/1.png" alt="1678724223117"></p><p>vmware tools黑了</p><p><a href="http://www.360doc.com/content/22/1205/19/81029453_1059073619.shtml">http://www.360doc.com/content/22/1205/19/81029453_1059073619.shtml</a></p><p>试试这个吧</p><p>手工安装Vmware tools方法<br> 这种方法是通过Ubuntu的安装命令直接从网上进行安装，打开终端窗口直接执行下列命令即可，安装之前要保证虚拟机可以连接外网，要能连上软件更新服务器，该服务器有可能在国外（根据你自己的设置）。命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo apt-get autoremove open-vm-tools</span><br><span class="line">sudo apt-get install open-vm-tools</span><br><span class="line">sudo apt-get install open-vm-tools-desktop</span><br></pre></td></tr></table></figure><p> 安装完之后最好重启一下虚拟机。安装完Vmware tools并正确配置后就可以实现主机和虚拟机双向内容复制、粘贴，包括文件的拷贝。</p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vmware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark入门：RDD编程</title>
      <link href="/2023/03/13/sparkRDD%E7%BC%96%E7%A8%8B/"/>
      <url>/2023/03/13/sparkRDD%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Spark入门：RDD编程"><a href="#Spark入门：RDD编程" class="headerlink" title="Spark入门：RDD编程"></a>Spark入门：RDD编程</h1><span id="more"></span><h2 id="RDD创建"><a href="#RDD创建" class="headerlink" title="RDD创建"></a>RDD创建</h2><p>RDD可以通过两种方式创建：</p><ul><li>第一种：读取一个外部数据集。比如，从本地文件加载数据集，或者从HDFS文件系统、HBase、Cassandra、Amazon S3等外部数据源中加载数据集。Spark可以支持文本文件、SequenceFile文件（Hadoop提供的 SequenceFile是一个由二进制序列化过的key&#x2F;value的字节流组成的文本存储文件）和其他符合Hadoop InputFormat格式的文件。</li><li>第二种：调用SparkContext的parallelize方法，在Driver中一个已经存在的集合（数组）上创建</li></ul><p>在即将进行相关的实践操作之前，我们首先要登录Linux系统（本教程统一采用hadoop用户登录），然后，打开命令行“终端”，请按照下面的命令启动Hadoop中的HDFS组件：</p><h3 id="创建RDD之前的准备工作"><a href="#创建RDD之前的准备工作" class="headerlink" title="创建RDD之前的准备工作"></a>创建RDD之前的准备工作</h3><p>在即将进行相关的实践操作之前，我们首先要登录Linux系统（本教程统一采用hadoop用户登录），然后，打开命令行“终端”，请按照下面的命令启动Hadoop中的HDFS组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd  /usr/local/hadoop</span><br><span class="line">./sbin/start-dfs.sh</span><br></pre></td></tr></table></figure><p>然后，我们按照下面命令启动spark-shell：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/spark</span><br><span class="line">./bin/pyspark</span><br></pre></td></tr></table></figure><p><img src="/images/spark/1.png" alt="1678715171189"></p><p>然后，新建第二个“终端”，方法是，在前面已经建设的第一个终端窗口的左上方，点击“终端”菜单，在弹出的子菜单中选择“新建终端”，就可以打开第二个终端窗口，现在，我们切换到第二个终端窗口，在第二个终端窗口中，执行以下命令，进入之前已经创建好的“&#x2F;usr&#x2F;local&#x2F;spark&#x2F;mycode&#x2F;”目录，在这个目录下新建rdd子目录，用来存放本章的代码和相关文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd usr/local/spark/mycode/</span><br><span class="line">mkdir rdd</span><br></pre></td></tr></table></figure><p>然后，使用vim编辑器，在rdd目录下新建一个word.txt文件，你可以在文件里面随便输入几行英文语句用来测试。</p><p>经过上面的准备工作以后，我们就可以开始创建RDD了。</p><h3 id="从文件系统中加载数据创建RDD"><a href="#从文件系统中加载数据创建RDD" class="headerlink" title="从文件系统中加载数据创建RDD"></a>从文件系统中加载数据创建RDD</h3><p>Spark采用textFile()方法来从文件系统中加载数据创建RDD，该方法把文件的URI作为参数，这个URI可以是本地文件系统的地址，或者是分布式文件系统HDFS的地址，或者是Amazon S3的地址等等。<br>下面请切换回spark-shell窗口，看一下如何从本地文件系统中加载数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;lines = sc.textFile(&quot;file:///usr/local/spark/mycode/rdd/word.txt&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/spark/2.png" alt="1678715444810"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;lines.foreach(print)</span><br></pre></td></tr></table></figure><p><img src="/images/spark/3.png" alt="1678715770877"></p><p><img src="/images/spark/14.png" alt="1678720839060"></p><h3 id="加载HDFS中的文件"><a href="#加载HDFS中的文件" class="headerlink" title="加载HDFS中的文件"></a>加载HDFS中的文件</h3><p>为了能够读取HDFS中的文件，请首先启动Hadoop中的HDFS组件。注意，之前我们在“Spark安装”这章内容已经介绍了如何安装Hadoop和Spark，所以，这里我们可以使用以下命令直接启动Hadoop中的HDFS组件（由于用不到MapReduce组件，所以，不需要启动MapReduce或者YARN）。请到第二个终端窗口，使用Linux Shell命令提示符状态，然后输入下面命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/hadoop</span><br><span class="line">./sbin/start-dfs.sh</span><br></pre></td></tr></table></figure><p><img src="/images/spark/4.png" alt="1678715996913"></p><p>启动结束后，HDFS开始进入可用状态。如果你在HDFS文件系统中，还没有为当前Linux登录用户创建目录(本教程统一使用用户名hadoop登录Linux系统)，请使用下面命令创建：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/hdfs dfs -mkdir -p /user/hadoop</span><br></pre></td></tr></table></figure><p>也就是说，HDFS文件系统为Linux登录用户开辟的默认目录是“&#x2F;user&#x2F;用户名”（注意：是user，不是usr），本教程统一使用用户名hadoop登录Linux系统，所以，上面创建了“&#x2F;user&#x2F;hadoop”目录，再次强调，这个目录是在HDFS文件系统中，不在本地文件系统中。创建好以后，下面我们使用命令查看一下HDFS文件系统中的目录和文件：</p><p><img src="/images/spark/5.png" alt="1678716107634"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/hdfs dfs -ls .</span><br></pre></td></tr></table></figure><p>** 但这个命令我搞不出来，显示的是这个</p><p><img src="/images/spark/6.png" alt="1678717090642"></p><p>–</p><p>上面命令中，最后一个点号“.”，表示要查看Linux当前登录用户hadoop在HDFS文件系统中与hadoop对应的目录下的文件，也就是查看HDFS文件系统中“&#x2F;user&#x2F;hadoop&#x2F;”目录下的文件，所以，下面两条命令是等价的：</p><p>–</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./bin/hdfs dfs -ls .</span><br><span class="line">./bin/hdfs dfs -ls /user/hadoop</span><br></pre></td></tr></table></figure><p> 你自己可以试一试，只有第二个可以用</p><p><img src="/images/spark/7.png" alt="1678717187423"></p><p>如果要查看HDFS文件系统根目录下的内容，需要使用下面命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/hdfs dfs -ls /</span><br></pre></td></tr></table></figure><p>然后输出的东西见上面那个图，有一个items</p><p>下面，我们把本地文件系统中的“&#x2F;usr&#x2F;local&#x2F;spark&#x2F;mycode&#x2F;rdd&#x2F;word.txt”上传到分布式文件系统HDFS中（放到hadoop用户目录下）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/hdfs dfs -put /usr/local/spark/mycode/rdd/word.txt /user/hadoop</span><br></pre></td></tr></table></figure><p><img src="/images/spark/8.png" alt="1678717295097"></p><p>然后，用命令查看一下HDFS的hadoop用户目录下是否多了word.txt文件，可以使用下面命令列出hadoop目录下的内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/hdfs dfs -ls /</span><br></pre></td></tr></table></figure><p><img src="/images/spark/9.png" alt="1678717376742"></p><p>可以看到，确实多了一个word.txt文件，我们使用cat命令查看一个HDFS中的word.txt文件的内容，命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/hdfs dfs -cat ./word.txt</span><br></pre></td></tr></table></figure><p><img src="/images/spark/10.png" alt="1678717420477"></p><p>上面命令执行后，就会看到HDFS中word.txt的内容了。</p><p>现在，让我们切换回到spark-shell窗口，编写语句从HDFS中加载word.txt文件，并显示第一行文本内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;lines= sc.textFile(&quot;hdfs://localhost:9000/user/hadoop/word.txt&quot;)</span><br><span class="line">&gt;&gt;&gt;lines=sc.foreach(print)</span><br></pre></td></tr></table></figure><p><img src="/images/spark/11.png" alt="1678717605626"></p><p><img src="/images/spark/12.png" alt="1678717639868"></p><p>注意，上面三条命令是完全等价的命令，只不过使用了不同的目录形式，你可以使用其中任意一条命令完成数据加载操作。</p><p>在使用Spark读取文件时，需要说明以下几点：<br>（1）如果使用了本地文件系统的路径，那么，必须要保证在所有的worker节点上，也都能够采用相同的路径访问到该文件，比如，可以把该文件拷贝到每个worker节点上，或者也可以使用网络挂载共享文件系统。<br>（2）textFile()方法的输入参数，可以是文件名，也可以是目录，也可以是压缩文件等。比如，textFile(“&#x2F;my&#x2F;directory”), textFile(“&#x2F;my&#x2F;directory&#x2F;<em>.txt”), and textFile(“&#x2F;my&#x2F;directory&#x2F;</em>.gz”).<br>（3）textFile()方法也可以接受第2个输入参数（可选），用来指定分区的数目。默认情况下，Spark会为HDFS的每个block创建一个分区（HDFS中每个block默认是128MB）。你也可以提供一个比block数量更大的值作为分区数目，但是，你不能提供一个小于block数量的值作为分区数目。</p><h3 id="通过并行集合（数组）创建RDD"><a href="#通过并行集合（数组）创建RDD" class="headerlink" title="通过并行集合（数组）创建RDD"></a>通过并行集合（数组）创建RDD</h3><p>可以调用SparkContext的parallelize方法，在Driver中一个已经存在的集合（数组）上创建。<br>下面请在spark-shell中操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;array = [1,2,3,4,5]</span><br><span class="line">&gt;&gt;&gt;rdd = sc.parallelize(array)</span><br><span class="line">&gt;&gt;&gt;rdd.foreach(print)</span><br></pre></td></tr></table></figure><p><img src="/images/spark/13.png" alt="1678720471787"></p><p><img src="/images/spark/15.png" alt="1678720865514"></p><h2 id="RDD操作"><a href="#RDD操作" class="headerlink" title="RDD操作"></a>RDD操作</h2><p>RDD被创建好以后，在后续使用过程中一般会发生两种操作：<br>*  转换（Transformation）： 基于现有的数据集创建一个新的数据集。<br>*  行动（Action）：在数据集上进行运算，返回计算值。</p><h3 id="转换操作"><a href="#转换操作" class="headerlink" title="转换操作"></a>转换操作</h3><p>对于RDD而言，每一次转换操作都会产生不同的RDD，供给下一个“转换”使用。转换得到的RDD是惰性求值的，也就是说，整个转换过程只是记录了转换的轨迹，并不会发生真正的计算，只有遇到行动操作时，才会发生真正的计算，开始从血缘关系源头开始，进行物理的转换操作。<br>下面列出一些常见的转换操作（Transformation API）：<br>* filter(func)：筛选出满足函数func的元素，并返回一个新的数据集<br>* map(func)：将每个元素传递到函数func中，并将结果返回为一个新的数据集<br>* flatMap(func)：与map()相似，但每个输入元素都可以映射到0或多个输出结果<br>* groupByKey()：应用于(K,V)键值对的数据集时，返回一个新的(K, Iterable)形式的数据集<br>* reduceByKey(func)：应用于(K,V)键值对的数据集时，返回一个新的(K, V)形式的数据集，其中的每个值是将每个key传递到函数func中进行聚合</p><p><img src="/images/spark/16.png" alt="1678720959522"></p><p><img src="/images/spark/17.png" alt="1678720974857"></p><h4 id="1-filter-func"><a href="#1-filter-func" class="headerlink" title="1.filter(func)"></a>1.filter(func)</h4><p><img src="/images/spark/18.png" alt="1678720994986"></p><p>好吧，这个书上说要把word.txt写成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Hadoop is good</span><br><span class="line"></span><br><span class="line">Spark is fast</span><br><span class="line"></span><br><span class="line">Spark is better</span><br></pre></td></tr></table></figure><p>那我们就</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/spark/mycode/rdd</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gedit word.txt</span><br></pre></td></tr></table></figure><p>然后再</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;lines=sc.textFile(&quot;file:///usr/local/spark/mycode/rdd/word.txt&quot;)</span><br><span class="line">&gt;&gt;&gt;linesWithSpark = lines.filter(lambda line: &quot;Spark&quot; in line)</span><br><span class="line">&gt;&gt;&gt;linesWithSpark.foreach(print)</span><br></pre></td></tr></table></figure><p><img src="/images/spark/20.png" alt="1678722624927"></p><p>上面的代码中，lines就是一个RDD。lines.filter()会遍历lines中的每行文本，并对每行文本执行括号中的匿名函数，也就是执行Lamda表达式：line &#x3D;&gt; line.contains(“Spark”)，在执行Lamda表达式时，会把当前遍历到的这行文本内容赋值给参数line，然后，执行处理逻辑line.contains(“Spark”)，也就是只有当改行文本包含“Spark”才满足条件，才会被放入到结果集中。最后，等到lines集合遍历结束后，就会得到一个结果集，这个结果集中包含了所有包含“Spark”的行。最后，对这个结果集调用count()，这是一个行动操作，会计算出结果集中的元素个数。</p><h4 id="2-map-func"><a href="#2-map-func" class="headerlink" title="2.map(func)"></a>2.map(func)</h4><p><img src="/images/spark/21.png" alt="1678724709366"></p><p>map(func)：将每个元素传递到函数func中，并将结果返回为一个新的数据集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; data =[1,2,3,4,5]</span><br><span class="line">&gt;&gt;&gt; rdd1 = sc.parallelize(data)</span><br><span class="line">&gt;&gt;&gt; rdd2 = rdd1.map(lambda x:x+10)</span><br><span class="line">&gt;&gt;&gt; rdd2.foreach(print)</span><br></pre></td></tr></table></figure><p><img src="/images/spark/22.png" alt="1678724836563"></p><p>上述语句执行过程如图 所示。第 1行语句创建了一个包含 5 个整型元素的列表 data。第2行语句执行 sc.parallelize(data)，从列表 data 中生成一个 RDD，即 rdd1,rdd1 中包含了5 个整型的元素即1、2、3、4、5。第 3 行语句执行 rdd1.map0操作,map0的输入参数“lambda x:x+10”是一个Lambda表达式。rdd1.map(lambda x:x+10)的含义是，依次取出 rdd1 这个RDD 中的每个元素，对于当前取到的元素，把它赋值给 Lambda 表达式中的变量x，然后，执行 Lambda 表达式的函数体部分“x+10”也就是把变量x的值和 10 相加后，作为函数的返回值，并作为一个元素放入到新的 RDD(即rdd2中。最终，新牛成的RDD (即 rdd2) 中包含了 5 个整型元素，即 11、12、13、14、15。</p><p>另外一个实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;lines=sc.textFile(&quot;file:///usr/local/spark/mycode/rdd/word.txt&quot;)</span><br><span class="line">&gt;&gt;&gt; words = lines.map(lambda line:line.split(&quot; &quot;))</span><br><span class="line">&gt;&gt;&gt; words.foreach(print)</span><br></pre></td></tr></table></figure><p><img src="/images/spark/24.png" alt="1678725201907"></p><p>上述语句执行过程如图所示。在第 1 行语句中，执行 sc.textFile0方法把 word.txt 文件中的数据加载到内存生成一个 RDD，即 lines，这个RDD 中的每个元素都是字符串类型，即每个 RDD 元素都是一行文本，比如，lines 中的第 1 个元素是”Hadoop is good”，第2 个元素是”Spark is fast”，第3个元素是”Spark is better”。在第 2 行语句中，执行 lies.map0操作，map0的输入参数 lambdaline:line.split(“)是一个 Lambda 表达式。linesmap(lambda line:line.split(“”)的含义是，依次取出 lines这个 RDD 中的每个元素，对于当前取到的元素，把它赋值给 Lambda 表达式中的变量 line，然后，执行 Lambda 表达式的函数体部分 line.split(“”)。因为 line 是一行文本，如”Hadoop is good”，一行文本中包含了很多个单词，单词之间以空格进行分隔，所以，line.split(“”的功能是，以空格作为分隔符把 line 拆分成一个个单词,拆分后得到的单词都封装在一个列表对象中,成为新的 RDD( 即 words)的一个元素，比如，”Hadoop is good”被拆分后，得到”Hadoop”、”is”和”good”3 个单词，会被封装到一个列表对象中，即[“Hadoop”.”is”,”good”]，成为 words 这个 RDD 中的一个元素。</p><p><img src="/images/spark/23.png" alt="1678725073888"></p><h4 id="3-flatMap-func"><a href="#3-flatMap-func" class="headerlink" title="3.flatMap(func)"></a>3.flatMap(func)</h4><p>flatMap(func)与 map0相似，但每个输入元素都可以映射到 0 或多个输出结果。例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;lines=sc.textFile(&quot;file:///usr/local/spark/mycode/rdd/word.txt&quot;)</span><br><span class="line">&gt;&gt;&gt;words =lines.flatMap(lambda line:line.split(&quot; &quot;))</span><br><span class="line">&gt;&gt;&gt; words.foreach(print)</span><br></pre></td></tr></table></figure><p><img src="/images/spark/26.png" alt="1678725603008"></p><p>上述语句执行过程如图所示。在第 1行语句中，执行 sc.textFile0方法把 wordtxt 文件中的数据加载到内存生成一个RDD，即 lines，这个 RDD 中的每个元素都是字符串类型，即每个RDD 元素都是一行文本。在第2行语句中，执行 linesflatMap0操作，flatMap0的输入参数 line:linesplit(“”)是个Lambda 表达式。lines.flatMap(lambda line:line.split(“”))的结果，等价于如下两步操作的结果。</p><p><img src="/images/spark/25.png" alt="1678725419517"></p><p>第1步: map0。执行 lines.map(lambda line: linesplit(“”))操作，从 lines 转换得到一个新的 RDD(即wordArray),wordArray 中的每个元素都是一个列表,比如,第1个元素是[“Hadoop”,”is”，”good”]7.第2个元素是”Spark”，”is”,”fast”]，第3 个元素是[“Spark”,”is””better”]。</p><p>第 2步:拍扁 ( flat)。flatMap0操作中的“flat”是一个很形象的动作-“拍扁”，也就是把vordArray 中的每个 RDD 元素都“拍扁”成多个元素。所有这些被拍扁以后得到的元素，构成一个新的 RDD，即 words。比如，wordArray 中的第1个元素是[“Hadoop”,”is”,”good]，被拍扁以后得到3个新的字符串类型的元素,即”Hadoop”、”is”和”good”; wordArray 中的第 2 个元素是[“Spark”,”is”fast”],被拍扁以后得到 3 个新的元素,即”Spark”、”is”和”fast”; wordArray 中的第 3 个元素是[“Spark””is””beter”，被拍扁以后得到 3 个新的元素，即”Spark”、”is”和”beter”。最终，这些被拍扁以后得到的 9 个字符串类型的元素构成一个新的 RDD (即 words )。也就是说，words 里面包含了 9 个字串类型的元素，分别是”Hadoop”、”is”、”good”、”Spark”、”is”、”fast”、”Spark”、”is”和”。</p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-8-2023</title>
      <link href="/2023/03/08/3-8-2023/"/>
      <url>/2023/03/08/3-8-2023/</url>
      
        <content type="html"><![CDATA[<h3 id="三月初自我反省"><a href="#三月初自我反省" class="headerlink" title="三月初自我反省"></a>三月初自我反省</h3><span id="more"></span><p>1.退实验室✔</p><p>2.数学第一章✔</p><p>3.单词200 per day✔</p><div ><img src="\images\dayliy_image\3.8.1.jpg" alt="drawing" width="200" style='float:left'/><img src="\images\dayliy_image\3.8.2.jpg"  style='float:left' alt="drawing" width="200"/></div><p>4.后端增删查改✔</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">department_list</span>(<span class="params">request</span>):</span><br><span class="line">    member_list=Department.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span>  render(request,<span class="string">&#x27;dep.html&#x27;</span>,&#123;<span class="string">&#x27;member&#x27;</span>:member_list&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_dep</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method==<span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">&#x27;adddep.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> request.method==<span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        title=request.POST.get(<span class="string">&#x27;aatitle&#x27;</span>)</span><br><span class="line">        Department.objects.create(tittle=title)</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/dep/list&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_dep</span>(<span class="params">request</span>):</span><br><span class="line">    memid=request.GET.get(<span class="string">&#x27;memid&#x27;</span>)</span><br><span class="line">    Department.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=memid).delete()</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/dep/list&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit_dep</span>(<span class="params">request,memid</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method==<span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        nnmame=Department.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=memid).first()</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">&#x27;editdpt.html&#x27;</span>,&#123;<span class="string">&#x27;nnmame&#x27;</span>:nnmame.tittle&#125;)</span><br><span class="line">    aatitle=request.POST.get(<span class="string">&#x27;aatitle&#x27;</span>)</span><br><span class="line">    Department.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=memid).update(tittle=aatitle)</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/dep/list&quot;</span>)</span><br></pre></td></tr></table></figure><p>5.数据结构 图(floyd，dijkstra)✔</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">101</span>][<span class="number">3</span>];</span><br><span class="line"><span class="type">double</span> f[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"><span class="type">int</span> n,i,j,k,x,y,m,s,e;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//freopen(&quot;short.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line"><span class="comment">//freopen(&quot;short.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">cin&gt;&gt;a[i][<span class="number">1</span>]&gt;&gt;a[i][<span class="number">2</span>];</span><br><span class="line">cin&gt;&gt;m;</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">0x7f</span>,<span class="built_in">sizeof</span>(f)); <span class="comment">//初始化为最大值</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="comment">//int temp1=;</span></span><br><span class="line"><span class="comment">//int temp2=;</span></span><br><span class="line">f[y][x]=f[x][y]=<span class="built_in">sqrt</span>(<span class="built_in">pow</span>(<span class="built_in">double</span>(a[x][<span class="number">1</span>]-a[y][<span class="number">1</span>]),<span class="number">2</span>)+<span class="built_in">pow</span>(<span class="built_in">double</span>(a[x][<span class="number">2</span>]-a[y][<span class="number">2</span>]),<span class="number">2</span>));</span><br><span class="line">&#125; </span><br><span class="line">cin&gt;&gt;s&gt;&gt;e;</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;=n;k++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span>(f[i][k]+f[k][j]&lt;f[i][j])</span><br><span class="line">f[i][j]=f[i][k]+f[k][j];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>,f[s][e]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 1e4+10</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">1e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n,m,s;</span><br><span class="line"><span class="type">int</span> mp[N][M];</span><br><span class="line"><span class="type">int</span> dis[N],vis[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">initmp</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(mp,INF,<span class="built_in">sizeof</span>(mp));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijkstra</span><span class="params">(<span class="type">int</span> s)</span></span>&#123; <span class="comment">//求s点到其它点的最短路径 </span></span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));<span class="comment">//0表示蓝点(未确定最短路径的点)，1表示白点（确定路径的点） </span></span><br><span class="line"><span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dis));<span class="comment">//默认情况下设置为无穷大</span></span><br><span class="line">dis[s]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="type">int</span> mini=<span class="number">0</span>,min_=INF;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[j]&amp;&amp;min_&gt;dis[j])&#123;<span class="comment">//从蓝点中找出最小的点 .vis[j](蓝点)为0,那么!vis[j]就为1了.dis[j]是权值 </span></span><br><span class="line">mini=j;<span class="comment">//记录第几个点</span></span><br><span class="line">min_=dis[j]; <span class="comment">//记录最短的路的距离 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果没有蓝点就提前结束 </span></span><br><span class="line"><span class="keyword">if</span>(mini==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">vis[mini]=<span class="number">1</span>;<span class="comment">//变成白点</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[i]&gt;dis[mini]+mp[mini][i])</span><br><span class="line">dis[i]=dis[mini]+mp[mini][i];</span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(mp,INF,<span class="built_in">sizeof</span>(mp));</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)!=EOF&amp;&amp;n)&#123;</span><br><span class="line"><span class="built_in">initmp</span>();<span class="comment">//每次清空mp</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line"><span class="type">int</span> u,v,w;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line"><span class="keyword">if</span>(mp[u][v]&gt;w)</span><br><span class="line">mp[u][v]=mp[v][u]=w;</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">dijkstra</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,dis[n]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> casual_talk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DataError at /index/add_member 1366, &quot;Incorrect string value :\\xE4\\xBC\\x98\\xE</title>
      <link href="/2023/03/05/ERROR%201366%20(HY000)Incorrect%20string%20value%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2023/03/05/ERROR%201366%20(HY000)Incorrect%20string%20value%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p><a href="mailto:&#x38;&#x32;&#53;&#x35;&#x37;&#55;&#x39;&#52;&#x30;&#x40;&#x71;&#113;&#46;&#99;&#111;&#109;">&#x38;&#x32;&#53;&#x35;&#x37;&#55;&#x39;&#52;&#x30;&#x40;&#x71;&#113;&#46;&#99;&#111;&#109;</a> DataError at &#x2F;index&#x2F;add_member 1366, “Incorrect string value: ‘\xE4\xBC\x98\xE</p><h1 id="ERROR-1366-HY000-Incorrect-string-value解决方案"><a href="#ERROR-1366-HY000-Incorrect-string-value解决方案" class="headerlink" title="ERROR 1366 (HY000):Incorrect string value解决方案"></a>ERROR 1366 (HY000):Incorrect string value解决方案</h1><span id="more"></span><p><a href="https://zhuanlan.zhihu.com/p/53941345">https://zhuanlan.zhihu.com/p/53941345</a></p><p><img src="/images/mysql/1.png" alt="1677985811006"></p><p><img src="/images/mysql/2.png" alt="1677985852047"></p><p>after</p><p><img src="/images/mysql/3.png" alt="1677985952688"></p><p>before</p><p><img src="/images/mysql/4.png" alt="1677985979541"></p><p>然后把数据库删除，重新创建数据库，再导入数据库文件，就又是一条好汉</p><p><img src="/images/mysql/5.png" alt="1677988728653"></p><p><img src="/images/mysql/6.png" alt="1677988745809"></p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>远离不规范书籍，不然会变得不幸</title>
      <link href="/2023/03/04/%E8%BF%9C%E7%A6%BB%E4%B8%8D%E8%A7%84%E8%8C%83%E4%B9%A6%E7%B1%8D%EF%BC%8C%E4%B8%8D%E7%84%B6%E4%BC%9A%E5%8F%98%E5%BE%97%E4%B8%8D%E5%B9%B8/"/>
      <url>/2023/03/04/%E8%BF%9C%E7%A6%BB%E4%B8%8D%E8%A7%84%E8%8C%83%E4%B9%A6%E7%B1%8D%EF%BC%8C%E4%B8%8D%E7%84%B6%E4%BC%9A%E5%8F%98%E5%BE%97%E4%B8%8D%E5%B9%B8/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/nolucky.png"></p><h1>远离不规范书籍,不然会变得不幸</h1><span id="more"></span><img src="\images\sbbook.jpg" alt="drawing" width="200"/>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> casual_talk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2月开学总结</title>
      <link href="/2023/03/01/2%E6%9C%88%E5%BC%80%E5%AD%A6%E6%80%BB%E7%BB%93/"/>
      <url>/2023/03/01/2%E6%9C%88%E5%BC%80%E5%AD%A6%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="2月开学总结"><a href="#2月开学总结" class="headerlink" title="2月开学总结"></a>2月开学总结</h3><span id="more"></span><ol><li>每日200单词，真的坚持不下来（我妈说过一句老话：新的马桶只有三天是香的）</li><li>周五-周日每日50页django目前停滞（p117），在后渲前的简单<code>&#123;&#123;&#125;&#125;</code>不清楚具体语法，有时间看b具体简单讲解，我实在无法理解，这种书怎么出版的，前20页每页都有错误，这个人抄官方文档都能抄错？？？？！！！</li><li>问了师姐她复习进度，四月之前（include四月）刷完1800,以及师姐说英二难度比江苏高考英语难度小</li><li>临时接了挑战杯的复赛答辩，要准备讲演稿子</li><li>目前数学进度第一章（第一遍做不到不看视频（看视频时真的费时间），但已经都忘了（为什么上学期我要拒绝高数老师让我做她的助教（扇自己耳光）））</li><li>英语6级太难了</li><li>准备算法考试</li><li>所有的东西并行真的做不到，一天只能选一个（上周多线程进行复习&amp;&amp;学习，效率极低）</li><li>佛山顺德愿望get</li><li>实验室老师开始整幺蛾子了：周四下午7、8节加了一节选修课。明天去一节看看情况，不行就退实验室;以及未来一个月内实验室搬迁，不行就退。</li><li>昨天去交材料，党建的辅导老师说：好久没看见你了，你最近在干嘛。<br>  我：准备考研，和实验室的东西。<br>  老师:你准备考研的话要平衡比赛和考研准备的东西<br>  老师:考研的书差不多要买了<br>  我：嗯嗯<br>12.仰天长叹，下个月三场考试，4月份一轮，师姐说828要在这学期内过完，操作系统跟着这学期的老师好好学一遍，就没什么问题，我真的能平衡吗……实验室感觉差不多可以退了，但又想拼一把计算机设计大赛，自己再做个东西出来……</li></ol><p><a href="https://www.emojicopy.com/">emoji</a></p><p><a href="https://www.huntsbot.com/qa/9raM">format</a></p><img src="\images\dayliy_image\3.1.1.jpg" alt="drawing" width="200"/><p><a href="https://blog.csdn.net/Calvin_zhou/article/details/109303640?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167765384916782427491388%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=167765384916782427491388&biz_id=0&utm_medium=distribute.pc_chrome_plugin_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-109303640-null-null.nonecase&utm_term=%20=====%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Context%20Dump%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20=====%20%20%20%20%20===%20(line%20number%20probably%20different%20from%20source)%20===&spm=1018.2226.3001.4187">本来想花15min解决的note，花了1个小时的原因窒息</a><br><img src="\images\dayliy_image\3.1.2.png" alt="drawing" width="500"/></p><!-- ![111](\images\dayliy_image\3.1.2.png) -->]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> casual_talk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Import pymysql could not be resolved from</title>
      <link href="/2023/02/26/Import%20pymysql%20could%20not%20be%20resolved%20from/"/>
      <url>/2023/02/26/Import%20pymysql%20could%20not%20be%20resolved%20from/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/anaconda/3.png" alt="1677241477982"></p><p>Import “pymysql” could not be resolved from </p><span id="more"></span><p><img src="/images/anaconda/4.png" alt="1677241534025"></p><p>在anaconda里面装一个</p><p>首先先切进django的虚拟环境里面</p><p>  在Anaconda中，可以通过使用conda命令来创建和管理虚拟环境。要切换已创建的虚拟环境，可以使用以下命令：</p><ol><li>列出已有环境：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda info --envs</span><br></pre></td></tr></table></figure><ol start="2"><li>激活目标环境：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate &lt;env_name&gt;</span><br></pre></td></tr></table></figure><p>这里<code>&lt;env_name&gt;</code>是你想要激活的虚拟环境的名称。激活环境后，你可以在该环境中使用安装的软件包和工具。</p><ol start="3"><li>取消激活当前环境：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda deactivate</span><br></pre></td></tr></table></figure><p>这将使当前环境不再处于活动状态，回到默认的基础环境。 </p><p>注意：如果你在使用Anaconda Navigator，也可以通过选择“Environments”选项卡，然后单击目标环境的名称来激活虚拟环境。  </p><p><code>conda install pymysql</code></p><p>看你anaconda用的是什么源，国内的记得关闭魔法上网工具</p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>官方文档</title>
      <link href="/2023/02/24/null%C2%B6/"/>
      <url>/2023/02/24/null%C2%B6/</url>
      
        <content type="html"><![CDATA[<p><a href="https://stackoverflow.com/questions/19428572/django-templatesyntaxerror-could-not-parse-the-remainder">https://stackoverflow.com/questions/19428572/django-templatesyntaxerror-could-not-parse-the-remainder</a></p><span id="more"></span><p>模型字段参考</p><p>字段选项</p><p><a href="https://docs.djangoproject.com/zh-hans/4.1/ref/models/fields/#validators">https://docs.djangoproject.com/zh-hans/4.1/ref/models/fields/#validators</a></p><p>以下参数对所以字段类型均有效，且是可选的。</p><h3 id="null¶"><a href="#null¶" class="headerlink" title="null¶"></a><code>null</code><a href="https://docs.djangoproject.com/zh-hans/4.1/ref/models/fields/#null">¶</a></h3><ul><li><code>Field.``null</code><a href="https://docs.djangoproject.com/zh-hans/4.1/ref/models/fields/#django.db.models.Field.null">¶</a></li></ul><p>如果是 <code>True</code>， Django 将在数据库中存储空值为 <code>NULL</code>。默认为 <code>False</code>。</p><p>避免在基于字符串的字段上使用 <a href="https://docs.djangoproject.com/zh-hans/4.1/ref/models/fields/#django.db.models.Field.null"><code>null</code></a>，如 <a href="https://docs.djangoproject.com/zh-hans/4.1/ref/models/fields/#django.db.models.CharField"><code>CharField</code></a> 和 <a href="https://docs.djangoproject.com/zh-hans/4.1/ref/models/fields/#django.db.models.TextField"><code>TextField</code></a>。如果一个基于字符串的字段有 <code>null=True</code>，这意味着它有两种可能的“无数据”值。<code>NULL</code>，和空字符串。在大多数情况下，“无数据”有两种可能的值是多余的，Django 的惯例是使用空字符串，而不是 <code>NULL</code>。一个例外是当一个 <a href="https://docs.djangoproject.com/zh-hans/4.1/ref/models/fields/#django.db.models.CharField"><code>CharField</code></a> 同时设置了 <code>unique=True</code> 和 <code>blank=True</code>。在这种情况下，<code>null=True</code> 是需要的，以避免在保存具有空白值的多个对象时违反唯一约束。</p><p>无论是基于字符串的字段还是非字符串的字段，如果希望在表单中允许空值，还需要设置 <code>blank=True</code>，因为 <a href="https://docs.djangoproject.com/zh-hans/4.1/ref/models/fields/#django.db.models.Field.null"><code>null</code></a> 参数只影响数据库的存储（参见 <a href="https://docs.djangoproject.com/zh-hans/4.1/ref/models/fields/#django.db.models.Field.blank"><code>blank</code></a> ）。</p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Module &quot;django.contrib.sessions.serializers&quot; does not define a &quot;PicleSerializer&quot; attribute/class</title>
      <link href="/2023/02/24/Module%20django.contrib.sessions.serializers%20does%20not%20define%20a%20PicleSerializer%20attributeclass/"/>
      <url>/2023/02/24/Module%20django.contrib.sessions.serializers%20does%20not%20define%20a%20PicleSerializer%20attributeclass/</url>
      
        <content type="html"><![CDATA[<h1 id="Module-“django-contrib-sessions-serializers”-does-not-define-a-“PicleSerializer”-attribute-x2F-class"><a href="#Module-“django-contrib-sessions-serializers”-does-not-define-a-“PicleSerializer”-attribute-x2F-class" class="headerlink" title="Module “django.contrib.sessions.serializers” does not define a “PicleSerializer” attribute&#x2F;class"></a>Module “django.contrib.sessions.serializers” does not define a “PicleSerializer” attribute&#x2F;class</h1><span id="more"></span><p>是这本书打错了hhhh</p><p><a href="https://docs.djangoproject.com/zh-hans/4.1/topics/http/sessions/">https://docs.djangoproject.com/zh-hans/4.1/topics/http/sessions/</a></p><p>在这里ctrl+F找</p><p><strong>serializers</strong></p><p>最后一个</p><p><code>serializers.``PickleSerializer</code></p><p>tmd是这个玩意儿！</p><p>不是picle睡觉哦pick</p><p>服了这个写书的老六！</p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无法加载文件C:\Users\xxx\Documents\WindowsPowerShell\profile.ps1</title>
      <link href="/2023/02/24/%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E6%96%87%E4%BB%B6CUsersxxxDocumentsWindowsPowerShellprofile.ps1%EF%BC%8C%E5%9B%A0%E4%B8%BA%E5%9C%A8%E6%AD%A4%E7%B3%BB%E7%BB%9F%E4%B8%8A%E7%A6%81%E6%AD%A2%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC/"/>
      <url>/2023/02/24/%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E6%96%87%E4%BB%B6CUsersxxxDocumentsWindowsPowerShellprofile.ps1%EF%BC%8C%E5%9B%A0%E4%B8%BA%E5%9C%A8%E6%AD%A4%E7%B3%BB%E7%BB%9F%E4%B8%8A%E7%A6%81%E6%AD%A2%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="无法加载文件C-Users-xxx-Documents-WindowsPowerShell-profile-ps1，因为在此系统上禁止运行脚本"><a href="#无法加载文件C-Users-xxx-Documents-WindowsPowerShell-profile-ps1，因为在此系统上禁止运行脚本" class="headerlink" title="无法加载文件C:\Users\xxx\Documents\WindowsPowerShell\profile.ps1，因为在此系统上禁止运行脚本"></a>无法加载文件C:\Users\xxx\Documents\WindowsPowerShell\profile.ps1，因为在此系统上禁止运行脚本</h1><span id="more"></span><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>打开 PowerShell 提示如下报错信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Windows PowerShell</span><br><span class="line">版权所有（C） Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">安装最新的 PowerShell，了解新功能和改进！https://aka.ms/PSWindows</span><br><span class="line"></span><br><span class="line">. : 无法加载文件 C:\Users\87897\Documents\WindowsPowerShell\profile.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参</span><br><span class="line">阅 https:/go.microsoft.com/fwlink/?LinkID=135170 中的 about_Execution_Policies。</span><br><span class="line">所在位置 行:1 字符: 3</span><br><span class="line">+ . &#x27;C:\Users\87897\Documents\WindowsPowerShell\profile.ps1&#x27;</span><br><span class="line">+   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">    + CategoryInfo          : SecurityError: (:) []，PSSecurityException</span><br><span class="line">1234567891011</span><br></pre></td></tr></table></figure><h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>输入 <code>get-ExecutionPolicy</code> 输出 <code>Restricted</code>，即脚本执行策略受限。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Windows\system32&gt; get-ExecutionPolicy</span><br><span class="line">Restricted</span><br><span class="line">12</span><br></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>更换脚本执行策略：<code>set-ExecutionPolicy RemoteSigned</code>，然后输入 <code>Y</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Windows\system32&gt; set-ExecutionPolicy RemoteSigned</span><br><span class="line"></span><br><span class="line">执行策略更改</span><br><span class="line">执行策略可帮助你防止执行不信任的脚本。更改执行策略可能会产生安全风险，如 https:/go.microsoft.com/fwlink/?LinkID=135170</span><br><span class="line">中的 about_Execution_Policies 帮助主题所述。是否要更改执行策略?</span><br><span class="line">[Y] 是(Y)  [A] 全是(A)  [N] 否(N)  [L] 全否(L)  [S] 暂停(S)  [?] 帮助 (默认值为“N”): Y</span><br><span class="line">123456</span><br></pre></td></tr></table></figure><p>更换完成后，再次使用命令 <code>get-ExecutionPolicy</code> 查看脚本执行策略。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Windows\system32&gt; get-ExecutionPolicy</span><br><span class="line">RemoteSigned</span><br><span class="line">12</span><br></pre></td></tr></table></figure><p>可以发现已经更改了。问题完美解决，over~~😊</p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> powershell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>anaconda安装其他东西</title>
      <link href="/2023/02/24/Win10%E4%B8%8BAnaconda%E4%BD%BF%E7%94%A8conda%20activate%E6%8A%A5%E9%94%99Your%20shell%20has%20not%20been%20properly%20configured%20to%20use%20&#39;conda%20activate&#39;/"/>
      <url>/2023/02/24/Win10%E4%B8%8BAnaconda%E4%BD%BF%E7%94%A8conda%20activate%E6%8A%A5%E9%94%99Your%20shell%20has%20not%20been%20properly%20configured%20to%20use%20&#39;conda%20activate&#39;/</url>
      
        <content type="html"><![CDATA[<h1 id="Win10下Anaconda使用conda-activate报错Your-shell-has-not-been-properly-configured-to-use-‘conda-activate’"><a href="#Win10下Anaconda使用conda-activate报错Your-shell-has-not-been-properly-configured-to-use-‘conda-activate’" class="headerlink" title="Win10下Anaconda使用conda activate报错Your shell has not been properly configured to use ‘conda activate’"></a>Win10下Anaconda使用conda activate报错Your shell has not been properly configured to use ‘conda activate’</h1><p><img src="/images/anaconda/1.png" alt="1677212390344"></p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">PS E:\dijango&gt; conda activate base</span><br><span class="line"></span><br><span class="line">CommandNotFoundError: Your shell has not been properly configured to use &#x27;conda activate&#x27;.</span><br><span class="line">If using &#x27;conda activate&#x27; from a batch script, change your</span><br><span class="line">invocation to &#x27;CALL conda.bat activate&#x27;.</span><br><span class="line">To initialize your shell, run</span><br><span class="line">    $ conda init &lt;SHELL_NAME&gt;</span><br><span class="line"></span><br><span class="line">Currently supported shells are:</span><br><span class="line"></span><br><span class="line">- bash</span><br><span class="line">- cmd.exe</span><br><span class="line">- fish</span><br><span class="line">- tcsh</span><br><span class="line">- xonsh</span><br><span class="line">- zsh</span><br><span class="line">- powershell</span><br><span class="line"></span><br><span class="line">See &#x27;conda init --help&#x27; for more information and options.</span><br><span class="line"></span><br><span class="line">IMPORTANT: You may need to close and restart your shell after running &#x27;conda init&#x27;.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>先以管理员身份打开cmd。<br>试一下conda activate 环境名称。<br>如果命令行提示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Your shell has not been properly configured to use ‘conda activate’.</span><br></pre></td></tr></table></figure><p>然后下面还提示</p><p><code>conda init &lt;SHELL NAME&gt;</code></p><p>就按照他的要求，输入一下</p><p><code>conda init cmd.exe</code></p><p>或者</p><p><code>conda init powershell</code></p><p>这两条都试试，回车，重启cmd说不定就好了。反正我好了。<br><img src="/images/anaconda/2.png" alt="1677212587799"></p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> anaconda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闭包</title>
      <link href="/2023/02/23/%E9%97%AD%E5%8C%85/"/>
      <url>/2023/02/23/%E9%97%AD%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p><strong>闭包</strong></p><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.污染环境的全局变量实现函数执行一次次数减一</span></span><br><span class="line">    <span class="keyword">var</span> a=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fa</span>(<span class="params"></span>)&#123;</span><br><span class="line">        a--;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2.那就换成局部变量试试</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fb</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> a=<span class="number">10</span>;</span><br><span class="line">        a--;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    &#125;<span class="comment">/*它居然不动了*/</span></span><br><span class="line">    <span class="comment">// 3.闭包</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fc</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> a=<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">fd</span>(<span class="params"></span>)&#123;</span><br><span class="line">            a--;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> fm=<span class="title function_">fc</span>();<span class="comment">//完成这句才算闭包</span></span><br><span class="line">    <span class="comment">// 总结</span></span><br><span class="line">    <span class="comment">// 1.有嵌套函数</span></span><br><span class="line">    <span class="comment">// 2.内部函数引用外部作用域</span></span><br><span class="line">    <span class="comment">// 3.返回值是函数</span></span><br><span class="line">    <span class="comment">// 4.船舰一个对象函数，让其长期驻留</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2022 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reat-router</title>
      <link href="/2023/02/23/router/"/>
      <url>/2023/02/23/router/</url>
      
        <content type="html"><![CDATA[<p>随意使用您选择的打包器，例如 <a href="https://create-react-app.dev/">Create React App</a> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app router-tutorial</span><br></pre></td></tr></table></figure><span id="more"></span><p>然后安装 React Router 依赖项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd router-tutorial</span><br><span class="line">npm install react-router-dom@6 history@5</span><br></pre></td></tr></table></figure><p><img src="/images/router/1.png" alt="1668929643220"></p><p>然后编辑你的App.js，让它变得很无聊:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Bookkeeper!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，确认<code>index.js</code> or <code>main.jsx</code>（取决于你的打包工具）是可用的：</p><p>root渲染App</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rootElement = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>);</span><br><span class="line"><span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, rootElement);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/router/2.png" alt="1668929879392"></p><p>然后是删了一点东西</p><p><img src="/images/router/3.png" alt="1668930704957"></p><p>启动您的React应用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><h2 id="连接路由"><a href="#连接路由" class="headerlink" title="连接路由"></a>连接路由</h2><p>首先，我们想把你的应用连接到路由: import ‘ BrowserRouter ‘，并用它包裹你的整个应用。(修改index.js)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import &#123; render &#125; from &quot;react-dom&quot;;</span><br><span class="line">import &#123; BrowserRouter &#125; from &quot;react-router-dom&quot;;</span><br><span class="line">import App from &quot;./App&quot;;</span><br><span class="line"></span><br><span class="line">const rootElement = document.getElementById(&quot;root&quot;);</span><br><span class="line">render(</span><br><span class="line">  &lt;BrowserRouter&gt;</span><br><span class="line">    &lt;App /&gt;</span><br><span class="line">  &lt;/BrowserRouter&gt;,</span><br><span class="line">  rootElement</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>应用程序中没有任何变化，但现在我们已准备好开始处理路由。</p><h2 id="添加一些链接"><a href="#添加一些链接" class="headerlink" title="添加一些链接"></a>添加一些链接</h2><p>打开 src&#x2F;App.js、导入 Link 并添加一些全局导航。注：在本教程中不要对待样式太认真，我们只是为了方便而使用内联样式，你可以根据需要设置样式。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Bookkeeper<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">nav</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">borderBottom:</span> &quot;<span class="attr">solid</span> <span class="attr">1px</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">paddingBottom:</span> &quot;<span class="attr">1rem</span>&quot;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/invoices&quot;</span>&gt;</span>Invoices<span class="tag">&lt;/<span class="name">Link</span>&gt;</span> |&#123;&quot; &quot;&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/expenses&quot;</span>&gt;</span>Expenses<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/router/4.png" alt="1668930664190"></p><p><img src="/images/router/5.png" alt="1668930753632"></p><p>单击链接和后退&#x2F;前进按钮。React Router 现在正在控制 URL！</p><p>我们还没有在 URL 更改时呈现任何路由，但 Link 可以更改 URL，而不会导致整个页面重新加载。</p><h2 id="添加一些路由"><a href="#添加一些路由" class="headerlink" title="添加一些路由"></a>添加一些路由</h2><p>添加几个新文件：</p><ul><li><p><code>src/routes/invoices.jsx</code></p></li><li><p><code>src/routes/expenses.jsx</code></p><p>(文件的位置并不重要，但是当你想要自动生成后端API，服务器渲染，代码分割或者更多的功能时，像这样命名你的文件可以很容易地将这个应用程序移植到其他项目，<a href="https://remix.run/">Remix</a>😉)</p></li></ul><p>现在在文件中加入以下代码：</p><p>expenses.jsx</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export default function Expenses() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;main style=&#123;&#123; padding: &quot;1rem 0&quot; &#125;&#125;&gt;</span><br><span class="line">      &lt;h2&gt;Expenses&lt;/h2&gt;</span><br><span class="line">    &lt;/main&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>invoices.jsx</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export default function Invoices() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;main style=&#123;&#123; padding: &quot;1rem 0&quot; &#125;&#125;&gt;</span><br><span class="line">      &lt;h2&gt;Invoices&lt;/h2&gt;</span><br><span class="line">    &lt;/main&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，让我们通过在<code>main.jsx</code>或者<code>index.js</code> 中创建我们的第一个“路由配置”来让 React Router 在不同的 URL 上呈现我们的界面。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import &#123; render &#125; from &quot;react-dom&quot;;</span><br><span class="line">import &#123;</span><br><span class="line">  BrowserRouter,</span><br><span class="line">  Routes,</span><br><span class="line">  Route</span><br><span class="line">&#125; from &quot;react-router-dom&quot;;</span><br><span class="line">import App from &quot;./App&quot;;</span><br><span class="line">import Expenses from &quot;./routes/expenses&quot;;</span><br><span class="line">import Invoices from &quot;./routes/invoices&quot;;</span><br><span class="line"></span><br><span class="line">const rootElement = document.getElementById(&quot;root&quot;);</span><br><span class="line">render(</span><br><span class="line">  &lt;BrowserRouter&gt;</span><br><span class="line">    &lt;Routes&gt;</span><br><span class="line">      &lt;Route path=&quot;/&quot; element=&#123;&lt;App /&gt;&#125; /&gt;</span><br><span class="line">      &lt;Route path=&quot;expenses&quot; element=&#123;&lt;Expenses /&gt;&#125; /&gt;</span><br><span class="line">      &lt;Route path=&quot;invoices&quot; element=&#123;&lt;Invoices /&gt;&#125; /&gt;</span><br><span class="line">    &lt;/Routes&gt;</span><br><span class="line">  &lt;/BrowserRouter&gt;,</span><br><span class="line">  rootElement</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>注意：当路由为”&#x2F;“时它渲染App组件，在”&#x2F;invoices”时它渲染Invoices组件。</p><p><img src="/images/router/6.png" alt="1668931415821"></p><p><img src="/images/router/7.png" alt="1668931429768"></p><p><img src="/images/router/8.png" alt="1668931443632"></p><p>所以到这里我们可以看出，点击后会整页都会变换掉</p><h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><p>你可能已经注意到，当点击链接时，“App”中的布局会消失。共享布局是一件令人头疼的事情。我们已经知道，大多数UI都是一系列嵌套布局，这些布局总会映射到URL上，所以这个思路被直接植入到React Router中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import &#123; render &#125; from &quot;react-dom&quot;;</span><br><span class="line">import &#123;</span><br><span class="line">  BrowserRouter,</span><br><span class="line">  Routes,</span><br><span class="line">  Route</span><br><span class="line">&#125; from &quot;react-router-dom&quot;;</span><br><span class="line">import App from &quot;./App&quot;;</span><br><span class="line">import Expenses from &quot;./routes/expenses&quot;;</span><br><span class="line">import Invoices from &quot;./routes/invoices&quot;;</span><br><span class="line"></span><br><span class="line">const rootElement = document.getElementById(&quot;root&quot;);</span><br><span class="line">render(</span><br><span class="line">  &lt;BrowserRouter&gt;</span><br><span class="line">    &lt;Routes&gt;</span><br><span class="line">      &lt;Route path=&quot;/&quot; element=&#123;&lt;App /&gt;&#125;&gt;</span><br><span class="line">        &lt;Route path=&quot;expenses&quot; element=&#123;&lt;Expenses /&gt;&#125; /&gt;</span><br><span class="line">        &lt;Route path=&quot;invoices&quot; element=&#123;&lt;Invoices /&gt;&#125; /&gt;</span><br><span class="line">      &lt;/Route&gt;</span><br><span class="line">    &lt;/Routes&gt;</span><br><span class="line">  &lt;/BrowserRouter&gt;,</span><br><span class="line">  rootElement</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>当路由有子节点时，它会做两件事：</p><ol><li>它嵌套了 URL (<code>&quot;/&quot; + &quot;expenses&quot;</code> 和 <code>&quot;/&quot; + &quot;invoices&quot;</code>)</li><li>当子路由匹配时，它将嵌套共享布局的 UI 组件：</li></ol><p>但是，为了使（2）生效，我们需要在App.jsx“父”路由中渲染一个</p><p>组件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Outlet, Link &#125; from &quot;react-router-dom&quot;;</span><br><span class="line"></span><br><span class="line">export default function App() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;Bookkeeper&lt;/h1&gt;</span><br><span class="line">      &lt;nav</span><br><span class="line">        style=&#123;&#123;</span><br><span class="line">          borderBottom: &quot;solid 1px&quot;,</span><br><span class="line">          paddingBottom: &quot;1rem&quot;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;Link to=&quot;/invoices&quot;&gt;Invoices&lt;/Link&gt; |&#123;&quot; &quot;&#125;</span><br><span class="line">        &lt;Link to=&quot;/expenses&quot;&gt;Expenses&lt;/Link&gt;</span><br><span class="line">      &lt;/nav&gt;</span><br><span class="line">      &lt;Outlet /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在再次单击。父路由 ( App.js) 仍然存在，而 <code>&lt;Outlet&gt;</code> 在两个子路由 (<code>&lt;Invoices&gt;</code> 和 <code>&lt;Expenses&gt;</code>)之间切换！ 正如我们稍后将看到的，这适用于路由层次结构的任何级别，并且非常强大。</p><p><img src="/images/router/9.png" alt="1668931972695"></p><p><img src="/images/router/10.png" alt="1668931990946"></p><h2 id="列出发票"><a href="#列出发票" class="headerlink" title="列出发票"></a>列出发票</h2><p>通常你会从某个地方的服务器获取数据，但在本教程中，让我们造一些数据，这样我们就可以专注于路由。</p><p>创建一个文件src&#x2F;data.js并将其复制&#x2F;粘贴到那里：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> invoices = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Santa Monica&quot;</span>,</span><br><span class="line">    <span class="attr">number</span>: <span class="number">1995</span>,</span><br><span class="line">    <span class="attr">amount</span>: <span class="string">&quot;$10,800&quot;</span>,</span><br><span class="line">    <span class="attr">due</span>: <span class="string">&quot;12/05/1995&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Stankonia&quot;</span>,</span><br><span class="line">    <span class="attr">number</span>: <span class="number">2000</span>,</span><br><span class="line">    <span class="attr">amount</span>: <span class="string">&quot;$8,000&quot;</span>,</span><br><span class="line">    <span class="attr">due</span>: <span class="string">&quot;10/31/2000&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Ocean Avenue&quot;</span>,</span><br><span class="line">    <span class="attr">number</span>: <span class="number">2003</span>,</span><br><span class="line">    <span class="attr">amount</span>: <span class="string">&quot;$9,500&quot;</span>,</span><br><span class="line">    <span class="attr">due</span>: <span class="string">&quot;07/22/2003&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Tubthumper&quot;</span>,</span><br><span class="line">    <span class="attr">number</span>: <span class="number">1997</span>,</span><br><span class="line">    <span class="attr">amount</span>: <span class="string">&quot;$14,000&quot;</span>,</span><br><span class="line">    <span class="attr">due</span>: <span class="string">&quot;09/01/1997&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Wide Open Spaces&quot;</span>,</span><br><span class="line">    <span class="attr">number</span>: <span class="number">1998</span>,</span><br><span class="line">    <span class="attr">amount</span>: <span class="string">&quot;$4,600&quot;</span>,</span><br><span class="line">    <span class="attr">due</span>: <span class="string">&quot;01/27/2998&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getInvoices</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> invoices;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们可以在发票路由中使用它。让我们也添加一些样式来获得侧边栏导航布局。随意复制&#x2F;粘贴所有这些，但要特别注意 <code>&lt;Link&gt;</code> 组件需要 to 属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Link &#125; from &quot;react-router-dom&quot;;</span><br><span class="line">import &#123; getInvoices &#125; from &quot;../data&quot;;</span><br><span class="line"></span><br><span class="line">export default function Invoices() &#123;</span><br><span class="line">  let invoices = getInvoices();</span><br><span class="line">  return (</span><br><span class="line">    &lt;div style=&#123;&#123; display: &quot;flex&quot; &#125;&#125;&gt;</span><br><span class="line">      &lt;nav</span><br><span class="line">        style=&#123;&#123;</span><br><span class="line">          borderRight: &quot;solid 1px&quot;,</span><br><span class="line">          padding: &quot;1rem&quot;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        &#123;invoices.map(invoice =&gt; (</span><br><span class="line">          &lt;Link</span><br><span class="line">            style=&#123;&#123; display: &quot;block&quot;, margin: &quot;1rem 0&quot; &#125;&#125;</span><br><span class="line">            to=&#123;`/invoices/$&#123;invoice.number&#125;`&#125;</span><br><span class="line">            key=&#123;invoice.number&#125;</span><br><span class="line">          &gt;</span><br><span class="line">            &#123;invoice.name&#125;</span><br><span class="line">          &lt;/Link&gt;</span><br><span class="line">        ))&#125;</span><br><span class="line">      &lt;/nav&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2022 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>匿名函数</title>
      <link href="/2023/02/23/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/"/>
      <url>/2023/02/23/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p><strong>匿名函数</strong></p><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.表达式赋值给变量来使用</span></span><br><span class="line"><span class="keyword">var</span> fa =<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fa</span>();</span><br><span class="line"><span class="comment">// 2.当作函数来被调用</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">30</span>);&#125;,<span class="number">1000</span>);</span><br><span class="line"><span class="comment">// 3.通过函数嵌套当成闭包里的返回函数来调用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fb</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">40</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fm=<span class="title function_">fb</span>();</span><br><span class="line"><span class="title function_">fm</span>();</span><br><span class="line"><span class="comment">// 4.函数自己调用自己，也就是自调用。</span></span><br><span class="line">!<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">50</span>);&#125;();</span><br><span class="line"><span class="comment">//匿名函数智能被调用或是自调用。</span></span><br><span class="line"><span class="comment">//带参数的匿名函数自调用</span></span><br><span class="line">!<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(a+b);&#125;(<span class="number">40</span>,<span class="number">50</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2022 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回调函数</title>
      <link href="/2023/02/23/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/"/>
      <url>/2023/02/23/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p><em><strong>回调函数</strong></em></p><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先定义一个函数，用来做短时间或无法脱身的事情，同步</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sdo</span>(<span class="params">does</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(does);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在定义以恶搞函数，用来做长时间等待的事情，异步</span></span><br><span class="line"><span class="comment">//用回调解决这个问题</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ldo</span>(<span class="params">doing,callback</span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(doing);</span><br><span class="line">        <span class="title function_">callback</span>(<span class="string">&#x27;吃鸡&#x27;</span>)</span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接下来要开始迫害只因</span></span><br><span class="line"><span class="title function_">sdo</span>(<span class="string">&#x27;买鸡&#x27;</span>)</span><br><span class="line"><span class="title function_">sdo</span>(<span class="string">&#x27;杀鸡&#x27;</span>)</span><br><span class="line"><span class="title function_">ldo</span>(<span class="string">&#x27;炖鸡&#x27;</span>,sdo)<span class="comment">//===&gt;函数作为参数</span></span><br><span class="line"><span class="comment">// sdo(&#x27;吃鸡&#x27;)</span></span><br><span class="line"><span class="comment">// 会发现不对劲</span></span><br><span class="line">       </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2022 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>箭头函数</title>
      <link href="/2023/02/23/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"/>
      <url>/2023/02/23/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p><strong>箭头函数</strong></p><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.箭头函数常见写法</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fun1</span>=(<span class="params">a,b</span>)=&gt;&#123;<span class="keyword">return</span> a+b;&#125;</span><br><span class="line"><span class="comment">// 2.箭头函数没有参数，那么也要写括号</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fun2</span>=(<span class="params"></span>)=&gt;&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好&#x27;</span>);&#125;</span><br><span class="line"><span class="comment">// 3.如果只有一个参数，那么括号可以省略</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fun3</span>=name=&gt;&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`你好<span class="subst">$&#123;name&#125;</span>`</span>);&#125;</span><br><span class="line"><span class="comment">// 4.如果函数体只有一句执行代码，那么可以省略大括号，同时代码默认会被ruturn出去</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fun4</span>=name=&gt;<span class="string">`你好<span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fun4</span>(<span class="string">&#x27;小明&#x27;</span>));</span><br><span class="line"><span class="comment">// 5.箭头函数没有自己的this，他的this是来自于上层作用域的this</span></span><br><span class="line"> <span class="keyword">let</span> obj=&#123;</span><br><span class="line">    <span class="title function_">fun5</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fun5:&#x27;</span>,<span class="variable language_">this</span>);&#125;,</span><br><span class="line">    <span class="attr">fun6</span>:<span class="function">()=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fun6:&#x27;</span>,<span class="variable language_">this</span>);&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> obj.<span class="title function_">fun5</span>();</span><br><span class="line"> obj.<span class="title function_">fun6</span>();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2022 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决bash hexo command not found</title>
      <link href="/2023/02/23/%E8%A7%A3%E5%86%B3bash%20hexo%20command%20not%20found/"/>
      <url>/2023/02/23/%E8%A7%A3%E5%86%B3bash%20hexo%20command%20not%20found/</url>
      
        <content type="html"><![CDATA[<h1 id="解决bash-hexo-command-not-found"><a href="#解决bash-hexo-command-not-found" class="headerlink" title="解决bash: hexo: command not found"></a>解决bash: hexo: command not found</h1><span id="more"></span><p>检查 nodejs 和 npm 是否正常，依次输入命令 <code>node -v</code> 和 <code>npm -v</code> 看看是否有相关版本信息</p><!-- more --><p><img src="/images/hexo%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/1.png" alt="1669786706325"></p><p>出现了版本信息就证明 nodejs 和 npm 是没有问题的，那么就应该是环境变量的配置问题了，在【此电脑】右键【属性】，依次选择【高级系统设置】-【环境变量】，选择系统变量 Path，将 <code>node_modules</code> 下的 <code>.bin</code> 文件路径添加到 Path 里面</p><p>注意你的博客目录下应该有两个 <code>node_modules</code> 文件夹</p><p>F:\blog 和F:\blog\BLOG</p><p><img src="/images/hexo%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/2.png" alt="1669786987745"></p><p><img src="/images/hexo%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/3.png" alt="1669787025987"></p><p>我是加了第一个module在环境变量</p><p><img src="/images/hexo%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/4.png" alt="1669787251679"></p><p>别的博主有的加了第二个module</p><p>总之自己试一下按哪个</p><p>环境变量添加好了之后重新打开 git 即可运行 hexo 命令，如果此时仍然无法执行 hexo 命令，那就只能拿出终极绝招了，运行命令 <code>npm install hexo-cli -g</code> 重新安装 hexo 即可！</p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyQt5显示图片</title>
      <link href="/2023/02/23/PyQt5%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87/"/>
      <url>/2023/02/23/PyQt5%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<p>PyQt5显示图片</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redImg=QImage()</span><br><span class="line">QImage.load(redImg,&#x27;path&#x27;,format=&#x27;png&#x27;)</span><br><span class="line">self.label_3.setPixmap(QtGui.QPixmap(redImg))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">img_path=&#x27;path&#x27;</span><br><span class="line">self.showImage = QPixmap(img_path).scaled(self.label_3.width(), self.label_3.height())  # 适应窗口大小</span><br><span class="line">self.label_3.setPixmap(self.showImage)  # 显示图片</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">image=cv2.imread(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">showImageRed</span>(<span class="params">self</span>):</span><br><span class="line">self.image_1 = self.image</span><br><span class="line">self.image_1 = QtGui.QImage(self.image_1.data, self.image_1.shape[<span class="number">1</span>],self.image_1.shape[<span class="number">0</span>],QtGui.QImage.Format_RGB888).rgbSwapped()</span><br><span class="line">self.label_3.setPixmap(QtGui.QPixmap.fromImage(self.image_1))</span><br><span class="line"></span><br><span class="line">   </span><br></pre></td></tr></table></figure><p>第三种方法可能会有斜影子，修改成下方这样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def showImageRed(self):</span><br><span class="line">    self.image_1 = self.image</span><br><span class="line">    self.image_1 = QtGui.QImage(self.image_1.data, self.image_1.shape[1], self.image_1.shape[0],self.image_1.shape[1]*3, QtGui.QImage.Format_RGB888).rgbSwapped()</span><br><span class="line">    self.label_3.setPixmap(QtGui.QPixmap.fromImage(self.image_1))</span><br></pre></td></tr></table></figure><p>感觉应该是三通道问题</p>]]></content>
      
      
      <categories>
          
          <category> 2022 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyQt5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/02/23/hello-world/"/>
      <url>/2023/02/23/hello-world/</url>
      
        <content type="html"><![CDATA[<p>hello</p><span id="more"></span><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>maven 找不到依赖项 javax.servlet:servlet-api:${servlet-api.version}</title>
      <link href="/2023/02/23/maven/"/>
      <url>/2023/02/23/maven/</url>
      
        <content type="html"><![CDATA[<h1 id="找不到依赖项-javax-servlet-servlet-api-servlet-api-version"><a href="#找不到依赖项-javax-servlet-servlet-api-servlet-api-version" class="headerlink" title="找不到依赖项 javax.servlet:servlet-api:${servlet-api.version}"></a>找不到依赖项 javax.servlet:servlet-api:${servlet-api.version}</h1><p>1.下载maven百度</p><span id="more"></span><p>2.maven仓库查找</p><p><a href="https://mvnrepository.com/">https://mvnrepository.com/</a></p><p>直接搜索</p><p>比如<br><img src="/images/maven/1.png" alt="1672900140564"></p><p>直接搜索</p><p><img src="/images/maven/2.png" alt="1672900240366"></p><p>然后</p><p><img src="/images/maven/3.png" alt="1672900269701"></p><p>点击之后往下移动</p><p>找到这一行</p><p><img src="/C/images/maven/4.png" alt="1672900285401"></p><p>贴到pom.xml文件里</p><p><img src="/images/maven/5.png" alt="1672983178197"></p><p>坐标组成</p><p><img src="/images/maven/6.png" alt="1672983299156"></p><p>配置本地仓库</p><p><img src="/images/maven/7.png" alt="1672987574149"></p><p><img src="/images/maven/8.png" alt="1672987601115"></p><p>中央仓库</p><p><img src="/images/maven/9.png" alt="1672988046524"></p><p>id唯一标识符，用来区分不同的mirror元素</p><p>mirrorOf代替哪个仓库</p><p>url镜像的URL</p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql报错ERROR 1045 (28000) Access denied for user &#39;root&#39;@&#39;localhost&#39; (using password:NO)</title>
      <link href="/2023/02/23/mysql%E5%90%AF%E5%8A%A8/"/>
      <url>/2023/02/23/mysql%E5%90%AF%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="ERROR-1045-28000-Access-denied-for-user-‘root‘-’localhost’-using-password-NO"><a href="#ERROR-1045-28000-Access-denied-for-user-‘root‘-’localhost’-using-password-NO" class="headerlink" title="ERROR 1045 (28000): Access denied for user ‘root‘@’localhost’ (using password: NO)"></a>ERROR 1045 (28000): Access denied for user ‘root‘@’localhost’ (using password: NO)</h2><span id="more"></span><p><img src="/images/jeecgsql/1.png" alt="1672729110392"></p><p><img src="/images/jeecgsql/2.png" alt="1672729176810"></p><p>E:\jeecg\jeecg-boot-master\db\jeecgboot-mysql-5.7.sql</p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm install 包，没有报错，提示安装成功，但是项目中没有出现node_modules也没有安装的包</title>
      <link href="/2023/02/23/npm%20npm%20install%20hexo-cli%20-g/"/>
      <url>/2023/02/23/npm%20npm%20install%20hexo-cli%20-g/</url>
      
        <content type="html"><![CDATA[<h1 id="npm-install-包，没有报错，提示安装成功，但是项目中没有出现node-modules也没有安装的包"><a href="#npm-install-包，没有报错，提示安装成功，但是项目中没有出现node-modules也没有安装的包" class="headerlink" title="npm install 包，没有报错，提示安装成功，但是项目中没有出现node_modules也没有安装的包"></a>npm install 包，没有报错，提示安装成功，但是项目中没有出现node_modules也没有安装的包</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><span id="more"></span><p>在当前文件夹目录下npm安装 hexo-cli -g</p><p>在当前文件夹不显示</p><p>因为这是全局安装</p><p>所以会跑到node.js文件夹目录底下</p><p><img src="/images/hexo%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/5.png" alt="1669790121108"></p><p>去这边找会发现一个hexo-cli的文件夹</p><p>点击这个博客[<a href="https://blog.csdn.net/qq_38613992/article/details/103769192]">https://blog.csdn.net/qq_38613992/article/details/103769192]</a></p><p><strong>查看npm的配置</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config list</span><br></pre></td></tr></table></figure><p>一开始我是没有global&#x3D;？？？ 的</p><p><img src="/images/hexo%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/6.png" alt="npm配置信息"></p><p><strong>2.查看全局下，是否有自己安装的包</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm root -g<span class="comment">//获取到全局安装目录</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一般看上面那个F盘的图，会在那里</p><p>3.修改npm配置信息，查看 图例1，global属性是否安装到全局，如果你的这里是true，那么，就算你安装一个包时，没有写-g，它也会自动将你的包安装到全局！ — 修改配置信息 方法一：命令行输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm config set global=false，</span><br><span class="line"></span><br><span class="line">npm config set global=false</span><br></pre></td></tr></table></figure><p>再次查看配置，确认是否修改</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config list</span><br></pre></td></tr></table></figure><p><img src="/images/hexo%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/7.png" alt="1669790489536"></p><p>然后再</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli</span><br></pre></td></tr></table></figure><p>后面不要-g就会在自己的文件夹里出现node_moudle了</p><p>你可以试试有-g的&#96;&#96;&#96;npm install hexo-cli&#96;&#96;，这样的话，就又会跑到node.js的global的moudle的文件夹里了</p><p>安装完成，如图</p><p><img src="/images/hexo%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/8.png" alt="1669790709401"></p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyQt5</title>
      <link href="/2023/02/23/pyqt5/"/>
      <url>/2023/02/23/pyqt5/</url>
      
        <content type="html"><![CDATA[<h2 id="安装PyQt5"><a href="#安装PyQt5" class="headerlink" title="安装PyQt5"></a>安装PyQt5</h2><p>打开Anaconda Promt，切换到对应环境输入：</p><span id="more"></span> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install PyQt5 -i https://pypi.douban.com/simple</span><br></pre></td></tr></table></figure><h2 id="安装PyQt5-tools"><a href="#安装PyQt5-tools" class="headerlink" title="安装PyQt5-tools"></a>安装PyQt5-tools</h2> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install PyQt5-tools -i https://pypi.douban.com/simple</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>打开</p><p>Anaconda prompt</p><p><img src="/./images/pyqt5/1.png" alt="1669202006491"></p><p>输入:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PyQt5-tools designer</span><br></pre></td></tr></table></figure><p>它有很多东西</p><p><img src="/./images/pyqt5/2.png" alt="1669202116133"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">designer</span><br><span class="line">installuic</span><br><span class="line">qmlscene</span><br><span class="line">qmltestrunner</span><br></pre></td></tr></table></figure><p>不知道其他是啥（待解决）</p><hr><p><img src="/./images/pyqt5/3.png" alt="1669202186551"></p><p>直接点击创建（main window）</p><p><img src="/./images/pyqt5/4.png" alt="1669202245388"></p><p>随便拖两个button上去</p><p><img src="/./images/pyqt5/21.png" alt="1669202300112"></p><p>另存为</p><p><img src="/./images/pyqt5/5.png" alt="1669202348711"></p><p>然后回到anaconda那个窗口，</p><p>我们要把这个.ui文件转化为py文件</p><p>方法一：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m PyQt5.uic.pyuic test.ui -o test.py</span><br></pre></td></tr></table></figure><p><img src="/./images/pyqt5/6.png" alt="1669202702551"></p><p>要切换到相对应的文件夹路径下再运行</p><p><img src="/./images/pyqt5/7.png" alt="1669202755853"></p><p>已经生成了</p><p>方法二：</p><p>太烦了，不写</p><p>F:\anaconda\EMPYTY\pkgs\pyqt-5.9.2-py39hd77b12b_6\Library\bin</p><p>大概在这个路径里面</p><p><img src="/./images/pyqt5/7.1.png" alt="1669203475844"></p><p><img src="/./images/pyqt5/7.2.png" alt="1669203905200"></p><p><img src="/./images/pyqt5/7.3.png" alt="1669203924735"></p><p> 很鸡肋，虽然写的前面的那玩意少了点，但是要吧ui移到当前文件夹里面，辣鸡</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyuic5 test.ui -o test.py</span><br></pre></td></tr></table></figure><p>方法三：<br>直接使用扩展程序打开</p><p>pycharm扩展程序（vscode没找到在哪）</p><p><img src="/./images/pyqt5/8.png" alt="1669203187056"></p><p>不太好搞（不想写，没看懂）</p><p>综上，用方法一</p><p>1.水平布局</p><p><img src="/./images/pyqt5/9.png" alt="1669204341946"></p><p><img src="/./images/pyqt5/10.png" alt="1669204535028"></p><p>回到vscode里面</p><p><img src="/./images/pyqt5/11.png" alt="1669204935069"></p><p><img src="/./images/pyqt5/12.png" alt="1669205119299"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> shuiping</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication,QMainWindow</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建QApplication类的实例</span></span><br><span class="line">app=QApplication(sys.argv)</span><br><span class="line"><span class="comment">#创建一个窗口</span></span><br><span class="line">mainWindow=QMainWindow()</span><br><span class="line"><span class="comment">#向主窗口添加控件</span></span><br><span class="line">ui=shuiping.Ui_MainWindow()</span><br><span class="line">ui.setupUi(mainWindow)</span><br><span class="line"><span class="comment"># 显示窗口</span></span><br><span class="line">mainWindow.show()</span><br><span class="line"><span class="comment"># 进入程序的主循环、并通过exit函数确保主循环安全结束</span></span><br><span class="line">sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p>表单布局</p><p><img src="/./images/pyqt5/13.png" alt="1669206548415"></p><p>垂直布局</p><p><img src="/./images/pyqt5/14.png" alt="1669206597151"></p><p>栅格布局</p><p><img src="/./images/pyqt5/15.png" alt="1669206640854"></p><p>尺寸策略</p><p><img src="/./images/pyqt5/16.png" alt="1669210040330"></p><p>伙伴关系</p><p><img src="/./images/pyqt5/17.png" alt="1669210466222"></p><p>tab顺序</p><p><img src="/./images/pyqt5/18.png" alt="1669210672111"></p><p><img src="/./images/pyqt5/19.png" alt="1669210689346"></p><p>编辑信号和槽</p><p><img src="/./images/pyqt5/22.png" alt="1669211232251"></p><p><img src="/./images/pyqt5/20.png" alt="1669211749552"></p>]]></content>
      
      
      <categories>
          
          <category> 2022 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyQt5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>之前的博客慢慢再修复，先把最近的东西放上来，sos！</title>
      <link href="/2023/02/23/breautiful/"/>
      <url>/2023/02/23/breautiful/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/saltyfish.png"></p><div style="font-size:40px;color:purple">之前的博客慢慢再修复，先把最近的东西放上来，sos！</div><!-- <div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=39807850&cid=69927212&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"> </iframe></div> -->]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> casual_talk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++文件操作之freopen</title>
      <link href="/2023/02/23/C++%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E4%B9%8Bfreopen/"/>
      <url>/2023/02/23/C++%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E4%B9%8Bfreopen/</url>
      
        <content type="html"><![CDATA[<h1 id="C-文件操作之freopen"><a href="#C-文件操作之freopen" class="headerlink" title="C++文件操作之freopen"></a>C++文件操作之freopen</h1><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">freopen(&quot;xxx.in&quot;,&quot;r&quot;,stdin);//输入文件</span><br><span class="line">freopen(&quot;xxx.out&quot;,&quot;w&quot;,stdout);//输出文件</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">freopen(&quot;a+b.in&quot;,&quot;r&quot;,stdin);</span><br><span class="line">freopen(&quot;a+b.out&quot;,&quot;w&quot;,stdout);</span><br><span class="line">//以上是模板</span><br><span class="line">int a,b;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">cout&lt;&lt;a+b&lt;&lt;endl;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Failed to scan</title>
      <link href="/2023/02/23/Failed%20to%20scan%20%5BfileFmavenrepositoryorgspringframeworkspring-aspects5/"/>
      <url>/2023/02/23/Failed%20to%20scan%20%5BfileFmavenrepositoryorgspringframeworkspring-aspects5/</url>
      
        <content type="html"><![CDATA[<p> Failed to scan [file:&#x2F;F:&#x2F;maven&#x2F;repository&#x2F;org&#x2F;springframework&#x2F;spring-aspects&#x2F;5.1.9.RELEASE&#x2F;spring-aspects-5.1.9.RELEASE.jar] from classloader hierarchy<br>java.util.zip.ZipException: error in opening zip file</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file -DgroupId=com.qiyuesuo.sdk -DartifactId=sdk-java -Dversion=3.4.1 -Dpackaging=jar -Dfile=D:\jar\sdk-java-3.4.1.jar</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">F:\maven\repository\org\springframework\spring-aspects\5.1.9.RELEASE</span><br></pre></td></tr></table></figure><p>org.springframework.spring-aspects</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file -DgroupId=org.springframework.spring-aspects</span><br><span class="line">-DartifactId=spring-aspects  -Dversion=5.3.1 -Dpackaging=jar -Dfile=F:\maven\spring-aspects-5.3.1.jar</span><br></pre></td></tr></table></figure><p>mvn install:install-file -DgroupId&#x3D;org.springframework.spring-aspects<br>-DartifactId&#x3D;spring-aspects  -Dversion&#x3D;5.3.1 -Dpackaging&#x3D;jar -Dfile&#x3D;F:\maven\spring-aspects-5.3.1.jar</p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
