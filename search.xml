<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>六、暑假作业</title>
      <link href="/2023/07/05/%E5%85%AD%E3%80%81%E6%9A%91%E5%81%87%E4%BD%9C%E4%B8%9A/"/>
      <url>/2023/07/05/%E5%85%AD%E3%80%81%E6%9A%91%E5%81%87%E4%BD%9C%E4%B8%9A/</url>
      
        <content type="html"><![CDATA[<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database ods_edu;</span><br><span class="line">use ods_edu;</span><br><span class="line"><span class="comment">-- create table if not exists</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> database dw_edu;</span><br><span class="line"><span class="keyword">create</span> database app_edu;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> dw_edu.t_edu_chat</span><br><span class="line">(</span><br><span class="line">    id                           <span class="type">int</span> comment <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">    create_date_time             <span class="type">timestamp</span> comment <span class="string">&#x27;数据创建时间&#x27;</span>,</span><br><span class="line">    sid                          string comment <span class="string">&#x27;访客id&#x27;</span>,</span><br><span class="line">    create_time                  <span class="type">timestamp</span> comment <span class="string">&#x27;会话创建时间&#x27;</span>,</span><br><span class="line">    seo_source                   string comment <span class="string">&#x27;搜索来源&#x27;</span>,</span><br><span class="line">    seo_keywords                 string comment <span class="string">&#x27;关键字&#x27;</span>,</span><br><span class="line">    ip                           string comment <span class="string">&#x27;IP地址&#x27;</span>,</span><br><span class="line">    area                         string comment <span class="string">&#x27;地域&#x27;</span>,</span><br><span class="line">    country                      string comment <span class="string">&#x27;所在国家&#x27;</span>,</span><br><span class="line">    province                     string comment <span class="string">&#x27;省&#x27;</span>,</span><br><span class="line">    city                         string comment <span class="string">&#x27;城市&#x27;</span>,</span><br><span class="line">    origin_channel               string comment <span class="string">&#x27;投放渠道&#x27;</span>,</span><br><span class="line">    `<span class="keyword">user</span>`                       string comment <span class="string">&#x27;所属坐席&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    manual_time                  <span class="type">timestamp</span> comment <span class="string">&#x27;人工开始时间&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    begin_time                   <span class="type">timestamp</span> comment <span class="string">&#x27;坐席领取时间 &#x27;</span>,</span><br><span class="line"></span><br><span class="line">    end_time                     <span class="type">timestamp</span> comment <span class="string">&#x27;会话结束时间&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    last_customer_msg_time_stamp <span class="type">timestamp</span> comment <span class="string">&#x27;客户最后一条消息的时间&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    last_agent_msg_time_stamp    <span class="type">timestamp</span> comment <span class="string">&#x27;坐席最后一下回复的时间&#x27;</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    reply_msg_count              <span class="type">int</span> comment <span class="string">&#x27;客服回复消息数&#x27;</span>,</span><br><span class="line">    msg_count                    <span class="type">int</span> comment <span class="string">&#x27;客户发送消息数&#x27;</span>,</span><br><span class="line">    browser_name                 string comment <span class="string">&#x27;浏览器名称&#x27;</span>,</span><br><span class="line">    os_info                      string comment <span class="string">&#x27;系统名称&#x27;</span></span><br><span class="line">) partitioned <span class="keyword">by</span> (dt string comment <span class="string">&#x27;2019&#x27;</span>)</span><br><span class="line">    <span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> dw_edu.t_edu_chat <span class="keyword">partition</span> (dt <span class="operator">=</span> <span class="string">&#x27;2019&#x27;</span>)</span><br><span class="line"><span class="keyword">select</span> id,</span><br><span class="line">       create_date_time,</span><br><span class="line">       sid,</span><br><span class="line">       create_time,</span><br><span class="line"></span><br><span class="line">       seo_source comment,</span><br><span class="line">       seo_keywords,</span><br><span class="line">       ip,</span><br><span class="line">       area,</span><br><span class="line">       country,</span><br><span class="line">       province,</span><br><span class="line">       city,</span><br><span class="line">       origin_channel,</span><br><span class="line">       `<span class="keyword">user</span>`,</span><br><span class="line">       manual_time,</span><br><span class="line"></span><br><span class="line">       begin_time,</span><br><span class="line"></span><br><span class="line">       end_time,</span><br><span class="line"></span><br><span class="line">       last_customer_msg_time_stamp,</span><br><span class="line"></span><br><span class="line">       last_agent_msg_time_stamp,</span><br><span class="line"></span><br><span class="line">       reply_msg_count,</span><br><span class="line">       msg_count,</span><br><span class="line">       browser_name,</span><br><span class="line">       os_info</span><br><span class="line"><span class="keyword">from</span> web_chat_ems_2019_07;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--1.总访问客户量</span></span><br><span class="line"><span class="comment">-- 1.1年日</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_edu.total_year</span><br><span class="line">(</span><br><span class="line">    date_year       string comment <span class="string">&#x27;年份&#x27;</span>,</span><br><span class="line">    date_day string comment <span class="string">&#x27;日&#x27;</span>,</span><br><span class="line">    total_pel   string comment <span class="string">&#x27;访问客户量&#x27;</span></span><br><span class="line">) partitioned <span class="keyword">by</span> (dt string comment <span class="string">&#x27;2019&#x27;</span>) <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> app_edu.total_year <span class="keyword">partition</span> (dt  <span class="operator">=</span><span class="string">&#x27;2019&#x27;</span>)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">YEAR</span>(create_time)   <span class="keyword">AS</span> `年份`,</span><br><span class="line">       <span class="keyword">DAY</span>(create_time)    <span class="keyword">AS</span> `日`,</span><br><span class="line">       <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> sid) <span class="keyword">AS</span> `访问客户量`</span><br><span class="line"><span class="keyword">FROM</span> dw_edu.t_edu_chat</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">YEAR</span>(create_time) <span class="keyword">BETWEEN</span> <span class="string">&#x27;2019&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;2020&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">YEAR</span>(create_time), <span class="keyword">DAY</span>(create_time)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">YEAR</span>(create_time), <span class="keyword">DAY</span>(create_time);</span><br><span class="line"><span class="comment">--1.2季度日</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_edu.total_quater</span><br><span class="line">(</span><br><span class="line">    date_year       string comment <span class="string">&#x27;年份&#x27;</span>,</span><br><span class="line">    date_quater string comment <span class="string">&#x27;季度&#x27;</span>,</span><br><span class="line">    date_day string comment <span class="string">&#x27;日&#x27;</span>,</span><br><span class="line">    total_pel   string comment <span class="string">&#x27;访问客户量&#x27;</span></span><br><span class="line">) partitioned <span class="keyword">by</span> (dt string comment <span class="string">&#x27;2019&#x27;</span>) <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> app_edu.total_quater <span class="keyword">partition</span> (dt  <span class="operator">=</span><span class="string">&#x27;2019&#x27;</span>)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(create_time)    <span class="keyword">AS</span> `年份`,</span><br><span class="line">       QUARTER(create_time) <span class="keyword">AS</span> `季度`,</span><br><span class="line">       <span class="keyword">DAY</span>(create_time)     <span class="keyword">AS</span> `日期`,</span><br><span class="line">       <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> sid)  <span class="keyword">AS</span> `访问客户量`</span><br><span class="line"><span class="keyword">FROM</span> dw_edu.t_edu_chat</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">YEAR</span>(create_time) <span class="operator">=</span> <span class="string">&#x27;2019&#x27;</span></span><br><span class="line">  <span class="keyword">AND</span> QUARTER(create_time) <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">4</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">YEAR</span>(create_time), QUARTER(create_time), <span class="keyword">DAY</span>(create_time)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">YEAR</span>(create_time), QUARTER(create_time), <span class="keyword">DAY</span>(create_time);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--1.3月日</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_edu.total_month</span><br><span class="line">(</span><br><span class="line">    date_year       string comment <span class="string">&#x27;年份&#x27;</span>,</span><br><span class="line">    date_month string comment <span class="string">&#x27;月份&#x27;</span>,</span><br><span class="line">    date_day string comment <span class="string">&#x27;日&#x27;</span>,</span><br><span class="line">    total_pel   string comment <span class="string">&#x27;访问客户量&#x27;</span></span><br><span class="line">) partitioned <span class="keyword">by</span> (dt string comment <span class="string">&#x27;2019&#x27;</span>) <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> app_edu.total_month <span class="keyword">partition</span> (dt  <span class="operator">=</span><span class="string">&#x27;2019&#x27;</span>)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(create_time)   <span class="keyword">AS</span> `年份`,</span><br><span class="line">       <span class="keyword">MONTH</span>(create_time)  <span class="keyword">AS</span> `月份`,</span><br><span class="line">       <span class="keyword">DAY</span>(create_time)    <span class="keyword">AS</span> `日`,</span><br><span class="line">       <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> sid) <span class="keyword">AS</span> `访问客户量`</span><br><span class="line"><span class="keyword">FROM</span> dw_edu.t_edu_chat</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">YEAR</span>(create_time) <span class="operator">=</span> <span class="string">&#x27;2019&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">YEAR</span>(create_time), <span class="keyword">MONTH</span>(create_time), <span class="keyword">DAY</span>(create_time)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">YEAR</span>(create_time), <span class="keyword">MONTH</span>(create_time), <span class="keyword">DAY</span>(create_time);</span><br><span class="line"><span class="comment">-- 2 地区独立访客热力图</span></span><br><span class="line"><span class="comment">-- 2.1.1 地区日</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_edu.area_day</span><br><span class="line">(</span><br><span class="line">    date_year       string comment <span class="string">&#x27;年份&#x27;</span>,</span><br><span class="line">    date_day string comment <span class="string">&#x27;日&#x27;</span>,</span><br><span class="line">    province string ,</span><br><span class="line">    total_pel   string comment <span class="string">&#x27;访问客户量&#x27;</span></span><br><span class="line">) partitioned <span class="keyword">by</span> (dt string comment <span class="string">&#x27;2019&#x27;</span>) <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> app_edu.area_day <span class="keyword">partition</span> (dt  <span class="operator">=</span><span class="string">&#x27;2019&#x27;</span>)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(create_time)   <span class="keyword">AS</span> `年份`,</span><br><span class="line">       <span class="keyword">DAY</span>(create_time)    <span class="keyword">AS</span> `日`,</span><br><span class="line">       province            <span class="keyword">AS</span> `省份`,</span><br><span class="line">       <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> sid) <span class="keyword">AS</span> `访问量`</span><br><span class="line"><span class="keyword">FROM</span> dw_edu.t_edu_chat</span><br><span class="line"><span class="keyword">WHERE</span> create_time <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">  <span class="keyword">and</span> <span class="keyword">YEAR</span>(create_time) <span class="keyword">BETWEEN</span> <span class="string">&#x27;2019&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;2020&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">YEAR</span>(create_time), <span class="keyword">DAY</span>(create_time), province</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">YEAR</span>(create_time), <span class="keyword">DAY</span>(create_time), province;</span><br><span class="line"><span class="comment">-- 2.2 地区月</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--2.2季度日</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(create_time)    <span class="keyword">AS</span> `年份`,</span><br><span class="line">       QUARTER(create_time) <span class="keyword">AS</span> `季度`,</span><br><span class="line">       <span class="keyword">DAY</span>(create_time)     <span class="keyword">AS</span> `日期`,</span><br><span class="line">       province             <span class="keyword">AS</span> `省份`,</span><br><span class="line">       <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> sid)  <span class="keyword">AS</span> `访问客户量`</span><br><span class="line"><span class="keyword">FROM</span> dw_edu.t_edu_chat</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">YEAR</span>(create_time) <span class="operator">=</span> <span class="string">&#x27;2019&#x27;</span></span><br><span class="line">  <span class="keyword">AND</span> QUARTER(create_time) <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">4</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">YEAR</span>(create_time), QUARTER(create_time), <span class="keyword">DAY</span>(create_time), province</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">YEAR</span>(create_time), QUARTER(create_time), <span class="keyword">DAY</span>(create_time), province;</span><br><span class="line"></span><br><span class="line"><span class="comment">--2.3 month</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(create_time)   <span class="keyword">AS</span> `年份`,</span><br><span class="line">       <span class="keyword">MONTH</span>(create_time)  <span class="keyword">AS</span> `月份`,</span><br><span class="line">       <span class="keyword">DAY</span>(create_time)    <span class="keyword">AS</span> `日期`,</span><br><span class="line">       province,</span><br><span class="line">       <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> sid) <span class="keyword">AS</span> `访问客户量`</span><br><span class="line"><span class="keyword">FROM</span> dw_edu.t_edu_chat</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">YEAR</span>(create_time) <span class="operator">=</span> <span class="string">&#x27;2019&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">YEAR</span>(create_time), <span class="keyword">MONTH</span>(create_time), <span class="keyword">DAY</span>(create_time), province</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">YEAR</span>(create_time), <span class="keyword">MONTH</span>(create_time), <span class="keyword">DAY</span>(create_time), province;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- SELECT province, COUNT(DISTINCT CASE WHEN msg_count &gt; 0 THEN sid END) AS `咨询人数`</span></span><br><span class="line"><span class="comment">-- FROM dw_edu.t_edu_chat</span></span><br><span class="line"><span class="comment">-- GROUP BY province;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3.访客咨询率趋势</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_edu.click_tender</span><br><span class="line">(</span><br><span class="line">    date_year       string comment <span class="string">&#x27;年份&#x27;</span>,</span><br><span class="line">    date_month string ,</span><br><span class="line">    date_day string,</span><br><span class="line">    province string ,</span><br><span class="line">    con_cnt <span class="type">int</span>,</span><br><span class="line">    percent_ string</span><br><span class="line"></span><br><span class="line">) partitioned <span class="keyword">by</span> (dt string comment <span class="string">&#x27;2019&#x27;</span>) <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> app_edu.click_tender <span class="keyword">partition</span> (dt  <span class="operator">=</span><span class="string">&#x27;2019&#x27;</span>)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">YEAR</span>(create_time)   <span class="keyword">AS</span> `年份`,</span><br><span class="line">    <span class="keyword">MONTH</span>(create_time)  <span class="keyword">AS</span> `月份`,</span><br><span class="line">    <span class="keyword">DAY</span>(create_time)    <span class="keyword">AS</span> `日期`,</span><br><span class="line">    province, <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> <span class="keyword">CASE</span> <span class="keyword">WHEN</span> msg_count <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">THEN</span> sid <span class="keyword">END</span>) <span class="keyword">AS</span> `咨询人数`,</span><br><span class="line">       concat(round(<span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> <span class="keyword">CASE</span> <span class="keyword">WHEN</span> msg_count <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">THEN</span> sid <span class="keyword">END</span>) <span class="operator">/</span> total.total_consultations <span class="operator">*</span> <span class="number">100</span>, <span class="number">2</span>), <span class="string">&#x27;%&#x27;</span>) <span class="keyword">as</span> `百分比`</span><br><span class="line"><span class="keyword">FROM</span> dw_edu.t_edu_chat</span><br><span class="line">         <span class="keyword">CROSS</span> <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> <span class="keyword">CASE</span> <span class="keyword">WHEN</span> msg_count <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">THEN</span> sid <span class="keyword">END</span>) <span class="keyword">AS</span> total_consultations <span class="keyword">FROM</span> dw_edu.t_edu_chat) <span class="keyword">AS</span> total</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">YEAR</span>(create_time), <span class="keyword">MONTH</span>(create_time), <span class="keyword">DAY</span>(create_time), province, total.total_consultations;</span><br><span class="line"></span><br><span class="line"><span class="comment">--4.客户访问量和访客咨询率双轴趋势</span></span><br><span class="line"><span class="comment">-- concat(round( COUNT(DISTINCT CASE WHEN msg_count &gt; 0 THEN sid END) / COUNT(DISTINCT sid) * 100, 2), &#x27;%&#x27;) as `百分比`</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_edu.vis_tender</span><br><span class="line">(</span><br><span class="line">    date_year       string comment <span class="string">&#x27;年份&#x27;</span>,</span><br><span class="line">    date_month string ,</span><br><span class="line">    date_day string,</span><br><span class="line">    con_cnt <span class="type">int</span>,</span><br><span class="line">    percent_ string</span><br><span class="line"></span><br><span class="line">) partitioned <span class="keyword">by</span> (dt string comment <span class="string">&#x27;2019&#x27;</span>) <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> app_edu.vis_tender <span class="keyword">partition</span> (dt  <span class="operator">=</span><span class="string">&#x27;2019&#x27;</span>)</span><br><span class="line"><span class="keyword">SELECT</span>     <span class="keyword">YEAR</span>(create_time)   <span class="keyword">AS</span> `年份`,</span><br><span class="line">           <span class="keyword">MONTH</span>(create_time)  <span class="keyword">AS</span> `月份`,</span><br><span class="line">           <span class="keyword">DAY</span>(create_time)    <span class="keyword">AS</span> `日期`,</span><br><span class="line">       <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> sid) <span class="keyword">AS</span> `客户访问量`,</span><br><span class="line">           concat(round( <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> <span class="keyword">CASE</span> <span class="keyword">WHEN</span> msg_count <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">THEN</span> sid <span class="keyword">END</span>) <span class="operator">/</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> sid) <span class="operator">*</span> <span class="number">100</span>, <span class="number">2</span>), <span class="string">&#x27;%&#x27;</span>)  <span class="keyword">AS</span> `咨询率`</span><br><span class="line"><span class="keyword">FROM</span> dw_edu.t_edu_chat</span><br><span class="line"><span class="comment">-- WHERE create_time BETWEEN &#x27;2019-01-01&#x27; AND &#x27;2020&#x27; -- 替换为实际的日期范围</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">YEAR</span>(create_time), <span class="keyword">MONTH</span>(create_time), <span class="keyword">DAY</span>(create_time);</span><br><span class="line"><span class="comment">-- 5.时间段访问客户量趋势</span></span><br><span class="line"><span class="comment">-- 指定时间段的起始日期和结束日期</span></span><br><span class="line"><span class="comment">-- DECLARE @start_date DATE = &#x27;开始日期&#x27;;</span></span><br><span class="line"><span class="comment">-- DECLARE @end_date DATE = &#x27;结束日期&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询指定时间段内每个小时的访问客户量</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_edu.vis_per_hour</span><br><span class="line">(</span><br><span class="line"></span><br><span class="line">    date_hour string,</span><br><span class="line">    con_cnt <span class="type">int</span></span><br><span class="line"></span><br><span class="line">) partitioned <span class="keyword">by</span> (dt string comment <span class="string">&#x27;2019&#x27;</span>) <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> app_edu.vis_per_hour <span class="keyword">partition</span> (dt  <span class="operator">=</span><span class="string">&#x27;2019&#x27;</span>)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">HOUR</span>(create_time) <span class="keyword">AS</span> `小时`,</span><br><span class="line">       <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> sid) <span class="keyword">AS</span> `访问客户量`</span><br><span class="line"><span class="keyword">FROM</span> dw_edu.t_edu_chat</span><br><span class="line"><span class="comment">-- WHERE create_date_time &gt;= @start_date AND create_date_time &lt;= @end_date</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">HOUR</span>(create_time)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">HOUR</span>(create_time);</span><br><span class="line"><span class="comment">-- 6.</span></span><br><span class="line"><span class="comment">-- 查询指定时间段内不同来源渠道和小时的访问客户量</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_edu.dif_channel</span><br><span class="line">(</span><br><span class="line">    chennel_c string,</span><br><span class="line">    visiting <span class="type">int</span>,</span><br><span class="line">    percent_ string</span><br><span class="line"></span><br><span class="line">) partitioned <span class="keyword">by</span> (dt string comment <span class="string">&#x27;2019&#x27;</span>) <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> app_edu.dif_channel <span class="keyword">partition</span> (dt  <span class="operator">=</span><span class="string">&#x27;2019&#x27;</span>)</span><br><span class="line"><span class="keyword">SELECT</span> origin_channel <span class="keyword">AS</span> `来源渠道`,</span><br><span class="line">       <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> sid) <span class="keyword">AS</span> `访问客户量`,</span><br><span class="line">       concat(round(        <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> sid) <span class="operator">*</span> <span class="number">100.0</span> <span class="operator">/</span> (</span><br><span class="line">           <span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> sid)</span><br><span class="line">           <span class="keyword">FROM</span> dw_edu.t_edu_chat</span><br><span class="line"></span><br><span class="line">       ) , <span class="number">2</span>), <span class="string">&#x27;%&#x27;</span>)   <span class="keyword">AS</span> `占比`</span><br><span class="line"><span class="keyword">FROM</span> dw_edu.t_edu_chat</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> origin_channel</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> origin_channel;</span><br><span class="line"><span class="comment">-- 7.</span></span><br><span class="line"><span class="comment">-- 指定时间段的起始日期和结束日期</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_edu.dif_source</span><br><span class="line">(</span><br><span class="line">    source_c string,</span><br><span class="line">visit_count <span class="type">int</span>,</span><br><span class="line">    percent_ string</span><br><span class="line"></span><br><span class="line">) partitioned <span class="keyword">by</span> (dt string comment <span class="string">&#x27;2019&#x27;</span>) <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> app_edu.dif_source <span class="keyword">partition</span> (dt  <span class="operator">=</span><span class="string">&#x27;2019&#x27;</span>)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    seo_source,</span><br><span class="line">    <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> sid) <span class="keyword">AS</span> visitor_count,</span><br><span class="line">    concat(round(    <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> sid) <span class="operator">*</span> <span class="number">100.0</span> <span class="operator">/</span> (</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> sid)</span><br><span class="line">        <span class="keyword">FROM</span> dw_edu.t_edu_chat</span><br><span class="line"></span><br><span class="line">    )  , <span class="number">2</span>), <span class="string">&#x27;%&#x27;</span>)   <span class="keyword">AS</span> visitor_ratio</span><br><span class="line"><span class="keyword">FROM</span> dw_edu.t_edu_chat</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> seo_source;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 8.</span></span><br><span class="line"><span class="comment">-- 查询访问客户量最多的页面排行榜</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_edu.top_web</span><br><span class="line">(</span><br><span class="line">    date_year       string comment <span class="string">&#x27;年份&#x27;</span>,</span><br><span class="line">    date_month string ,</span><br><span class="line">    date_day string,</span><br><span class="line">    brouse_name string,</span><br><span class="line">    vis_cnt <span class="type">int</span></span><br><span class="line"></span><br><span class="line">) partitioned <span class="keyword">by</span> (dt string comment <span class="string">&#x27;2019&#x27;</span>) <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> app_edu.top_web <span class="keyword">partition</span> (dt  <span class="operator">=</span><span class="string">&#x27;2019&#x27;</span>)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(create_time)   <span class="keyword">AS</span> `年份`,</span><br><span class="line">           <span class="keyword">MONTH</span>(create_time)  <span class="keyword">AS</span> `月份`,</span><br><span class="line">           <span class="keyword">DAY</span>(create_time)    <span class="keyword">AS</span> `日期`,</span><br><span class="line">    browser_name,</span><br><span class="line">    <span class="built_in">COUNT</span>(<span class="number">1</span>) <span class="keyword">AS</span> visitor_count</span><br><span class="line"><span class="keyword">FROM</span> ods_edu.web_chat_ems_2019_07</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> browser_name,<span class="keyword">YEAR</span>(create_time),<span class="keyword">MONTH</span>(create_time),<span class="keyword">DAY</span>(create_time)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> visitor_count <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database app_edu_chat;</span><br><span class="line">use app_edu_chat;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_edu_chat.total_year</span><br><span class="line">(</span><br><span class="line">    date_year       <span class="type">varchar</span>(<span class="number">20</span>) comment <span class="string">&#x27;年份&#x27;</span>,</span><br><span class="line">    date_day   <span class="type">varchar</span>(<span class="number">20</span>) comment  <span class="string">&#x27;日&#x27;</span>,</span><br><span class="line">    total_pel  <span class="type">varchar</span>(<span class="number">20</span>) comment  <span class="string">&#x27;访问客户量&#x27;</span></span><br><span class="line">);</span><br><span class="line">sqoop export \</span><br><span class="line"><span class="comment">--connect jdbc:mysql://192.168.52.161:3306/app_edu_chat \</span></span><br><span class="line"><span class="comment">--username root \</span></span><br><span class="line"><span class="comment">--password 123456 \</span></span><br><span class="line"><span class="comment">--table total_year \</span></span><br><span class="line"><span class="comment">--export-dir /user/hive/warehouse/app_edu.db/total_year/dt=2019</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_edu_chat.total_quater</span><br><span class="line">(</span><br><span class="line">    date_year   <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    date_quater <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    date_day    <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    total_pel   <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">)</span><br><span class="line">    sqoop export \</span><br><span class="line"><span class="comment">--connect jdbc:mysql://192.168.52.161:3306/app_edu_chat \</span></span><br><span class="line"><span class="comment">--username root \</span></span><br><span class="line"><span class="comment">--password 123456 \</span></span><br><span class="line"><span class="comment">--table total_quater \</span></span><br><span class="line"><span class="comment">--export-dir /user/hive/warehouse/app_edu.db/total_quater/dt=2019</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_edu_chat.total_month</span><br><span class="line">(</span><br><span class="line">    date_year  <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    date_month <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    date_day   <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    total_pel  <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line">sqoop export \</span><br><span class="line"><span class="comment">--connect jdbc:mysql://192.168.52.161:3306/app_edu_chat \</span></span><br><span class="line"><span class="comment">--username root \</span></span><br><span class="line"><span class="comment">--password 123456 \</span></span><br><span class="line"><span class="comment">--table total_month \</span></span><br><span class="line"><span class="comment">--export-dir /user/hive/warehouse/app_edu.db/total_month/dt=2019</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_edu_chat.area_day</span><br><span class="line">(</span><br><span class="line">    date_year <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    date_day  <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    province  <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    total_pel <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">)</span><br><span class="line">    sqoop export \</span><br><span class="line"><span class="comment">--connect jdbc:mysql://192.168.52.161:3306/app_edu_chat \</span></span><br><span class="line"><span class="comment">--username root \</span></span><br><span class="line"><span class="comment">--password 123456 \</span></span><br><span class="line"><span class="comment">--table area_day \</span></span><br><span class="line"><span class="comment">--export-dir /user/hive/warehouse/app_edu.db/area_day/dt=2019</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_edu_chat.click_tender</span><br><span class="line">(</span><br><span class="line">    date_year     <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    date_month    <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    date_day      <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    province      <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    con_cnt <span class="type">int</span>,</span><br><span class="line">    percent_      <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">) ;</span><br><span class="line">sqoop export \</span><br><span class="line"><span class="comment">--connect jdbc:mysql://192.168.52.161:3306/app_edu_chat \</span></span><br><span class="line"><span class="comment">--username root \</span></span><br><span class="line"><span class="comment">--password 123456 \</span></span><br><span class="line"><span class="comment">--table click_tender \</span></span><br><span class="line"><span class="comment">--export-dir /user/hive/warehouse/app_edu.db/click_tender/dt=2019</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_edu_chat.vis_tender</span><br><span class="line">(</span><br><span class="line">    date_year      <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    date_month     <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    date_day       <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    con_cnt <span class="type">int</span>,</span><br><span class="line">    percent_       <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line">    sqoop export \</span><br><span class="line"><span class="comment">--connect jdbc:mysql://192.168.52.161:3306/app_edu_chat \</span></span><br><span class="line"><span class="comment">--username root \</span></span><br><span class="line"><span class="comment">--password 123456 \</span></span><br><span class="line"><span class="comment">--table vis_tender \</span></span><br><span class="line"><span class="comment">--export-dir /user/hive/warehouse/app_edu.db/vis_tender/dt=2019</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_edu_chat.vis_per_hour</span><br><span class="line">(</span><br><span class="line"></span><br><span class="line">    date_hour <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    con_cnt <span class="type">int</span></span><br><span class="line"></span><br><span class="line">);</span><br><span class="line">    sqoop export \</span><br><span class="line"><span class="comment">--connect jdbc:mysql://192.168.52.161:3306/app_edu_chat \</span></span><br><span class="line"><span class="comment">--username root \</span></span><br><span class="line"><span class="comment">--password 123456 \</span></span><br><span class="line"><span class="comment">--table vis_per_hour \</span></span><br><span class="line"><span class="comment">--export-dir /user/hive/warehouse/app_edu.db/vis_per_hour/dt=2019</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_edu_chat.dif_channel</span><br><span class="line">(</span><br><span class="line">    chennel_c       <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    visiting <span class="type">int</span>,</span><br><span class="line">    percent_        <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line">    sqoop export \</span><br><span class="line"><span class="comment">--connect jdbc:mysql://192.168.52.161:3306/app_edu_chat \</span></span><br><span class="line"><span class="comment">--username root \</span></span><br><span class="line"><span class="comment">--password 123456 \</span></span><br><span class="line"><span class="comment">--table dif_channel \</span></span><br><span class="line"><span class="comment">--export-dir /user/hive/warehouse/app_edu.db/dif_channel/dt=2019</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_edu_chat.dif_source</span><br><span class="line">(</span><br><span class="line">    source_c           <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    visit_count <span class="type">int</span>,</span><br><span class="line">    percent_           <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line">    sqoop export \</span><br><span class="line"><span class="comment">--connect jdbc:mysql://192.168.52.161:3306/app_edu_chat \</span></span><br><span class="line"><span class="comment">--username root \</span></span><br><span class="line"><span class="comment">--password 123456 \</span></span><br><span class="line"><span class="comment">--table dif_source \</span></span><br><span class="line"><span class="comment">--export-dir /user/hive/warehouse/app_edu.db/dif_source/dt=2019</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_edu_chat.top_web</span><br><span class="line">(</span><br><span class="line">    date_year      <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    date_month     <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    date_day       <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    brouse_name    <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    vis_cnt <span class="type">int</span></span><br><span class="line">)</span><br><span class="line">    sqoop export \</span><br><span class="line"><span class="comment">--connect jdbc:mysql://192.168.52.161:3306/app_edu_chat \</span></span><br><span class="line"><span class="comment">--username root \</span></span><br><span class="line"><span class="comment">--password 123456 \</span></span><br><span class="line"><span class="comment">--table top_web \</span></span><br><span class="line"><span class="comment">--export-dir /user/hive/warehouse/app_edu.db/top_web/dt=2019</span></span><br></pre></td></tr></table></figure><p>mysql导入hive</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sqoop import \ <span class="comment">--connect jdbc:mysql://node1:3306/nev \</span></span><br><span class="line"><span class="comment">--username root \ </span></span><br><span class="line"><span class="comment">--password 123456 \ </span></span><br><span class="line"><span class="comment">--table web_chat_ems_2019_07 \ </span></span><br><span class="line"><span class="comment">--warehouse-dir /user/hive/warehouse </span></span><br><span class="line"><span class="comment">--hive-database ods_edu \ </span></span><br><span class="line"><span class="comment">--hive-import \ </span></span><br><span class="line"><span class="comment">--hive-table web_chat_ems_2019_07</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 暑假实训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五、一些完成的sql</title>
      <link href="/2023/07/04/%E6%9A%82%E5%AD%98/"/>
      <url>/2023/07/04/%E6%9A%82%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1.数据仓库构建-- 1.1创建ods库create database if not exists ods_didi;-- 1.2创建dw数据库create database if not exists dw_didi;-- 1.3创建app数据库create database if not exists app_didi;use ods_didi;-- 2.在ods层创建表-- 2.1创建订单结构表-- 创建用户订单表结构create table if not exists ods_didi.t_user_order(    orderId         string comment &#x27;订单id&#x27;,    telephone       string comment &#x27;打车用户手机&#x27;,    lng             string comment &#x27;用户发起打车的经度&#x27;,    lat             string comment &#x27;用户发起打车的纬度&#x27;,    province        string comment &#x27;所在省份&#x27;,    city            string comment &#x27;所在城市&#x27;,    es_money        double comment &#x27;预估打车费用&#x27;,    gender          string comment &#x27;用户信息 - 性别&#x27;,    profession      string comment &#x27;用户信息 - 行业&#x27;,    age_range       string comment &#x27;年龄段（70后、80后、...）&#x27;,    tip             double comment &#x27;小费&#x27;,    subscribe       int comment &#x27;是否预约（0 - 非预约、1 - 预约）&#x27;,    sub_time        string comment &#x27;预约时间&#x27;,    is_agent        int comment &#x27;是否代叫（0 - 本人、1 - 代叫）&#x27;,    agent_telephone string comment &#x27;预约人手机&#x27;,    order_time      string comment &#x27;订单时间&#x27;)    partitioned by (dt string comment &#x27;时间分区&#x27;)    ROW FORMAT DELIMITED FIELDS TERMINATED BY &#x27;,&#x27;;-- ods创建取消订单表create table if not exists ods_didi.t_user_cancel_order(    orderId        string comment &#x27;订单ID&#x27;,    cstm_telephone string comment &#x27;客户联系电话&#x27;,    lng            string comment &#x27;取消订单的经度&#x27;,    lat            string comment &#x27;取消订单的纬度&#x27;,    province       string comment &#x27;所在省份&#x27;,    city           string comment &#x27;所在城市&#x27;,    es_distance    double comment &#x27;预估距离&#x27;,    gender         string comment &#x27;性别&#x27;,    profession     string comment &#x27;行业&#x27;,    age_range      string comment &#x27;年龄段&#x27;,    reason         int comment &#x27;取消订单原因（1 - 选择了其他交通方式、2 - 与司机达成一致，取消订单、3 - 投诉司机没来接我、4 - 已不需要用车、5 - 无理由取消订单）&#x27;,    cancel_time    string comment &#x27;取消时间&#x27;)    partitioned by (dt string comment &#x27;时间分区&#x27;)    ROW FORMAT DELIMITED FIELDS TERMINATED BY &#x27;,&#x27;;-- ods创建订单表支付表create table if not exists ods_didi.t_user_pay_order(    id                         string comment &#x27;支付订单ID&#x27;,    orderId                    string comment &#x27;订单ID&#x27;,    lng                        string comment &#x27;目的地的经度（支付地址）&#x27;,    lat                        string comment &#x27;目的地的纬度（支付地址）&#x27;,    province                   string comment &#x27;省份&#x27;,    city                       string comment &#x27;城市&#x27;,    total_money                double comment &#x27;车费总价&#x27;,    real_pay_money             double comment &#x27;实际支付总额&#x27;,    passenger_additional_money double comment &#x27;乘客额外加价&#x27;,    base_money                 double comment &#x27;车费合计&#x27;,    has_coupon                 int comment &#x27;是否使用优惠券（0 - 不使用、1 - 使用）&#x27;,    coupon_total               double comment &#x27;优惠券合计&#x27;,    pay_way                    int comment &#x27;支付方式（0 - 微信支付、1 - 支付宝支付、3 - QQ钱包支付、4 - 一网通银行卡支付）&#x27;,    mileage                    double comment &#x27;里程（单位公里）&#x27;,    pay_time                   string comment &#x27;支付时间&#x27;)    partitioned by (dt string comment &#x27;时间分区&#x27;)    ROW FORMAT DELIMITED FIELDS TERMINATED BY &#x27;,&#x27;;-- ods创建用户评价表create table if not exists ods_didi.t_user_evaluate(    id                  string comment &#x27;评价日志唯一ID&#x27;,    orderId             string comment &#x27;订单ID&#x27;,    passenger_telephone string comment &#x27;用户电话&#x27;,    passenger_province  string comment &#x27;用户所在省份&#x27;,    passenger_city      string comment &#x27;用户所在城市&#x27;,    eva_level           int comment &#x27;评价等级（1 - 一颗星、... 5 - 五星）&#x27;,    eva_time            string comment &#x27;评价时间&#x27;)    partitioned by (dt string comment &#x27;时间分区&#x27;)    ROW FORMAT DELIMITED FIELDS TERMINATED BY &#x27;,&#x27;;-- 创建数据仓库 导入数据load data local inpath &#x27;/export/data/didi/order.csv&#x27; into table ods_didi.t_user_order partition (dt = &#x27;2020-04-12&#x27;);load data local inpath &#x27;/export/data/didi/cancel_order.csv&#x27; into table ods_didi.t_user_cancel_order partition (dt = &#x27;2020-04-12&#x27;);load data local inpath &#x27;/export/data/didi/pay.csv&#x27; into table ods_didi.t_user_pay_order partition (dt = &#x27;2020-04-12&#x27;);load data local inpath &#x27;/export/data/didi/evaluate.csv&#x27; into table ods_didi.t_user_evaluate partition (dt = &#x27;2020-04-12&#x27;);-- truncate table dw_didi.t_user_pay_order;-- 3.在dw层进行数据预处理use dw_didi;-- 创建宽表语句create table if not exists dw_didi.t_user_order_wide(    orderId          string comment &#x27;订单id&#x27;,    telephone        string comment &#x27;打车用户手机&#x27;,    lng              string comment &#x27;用户发起打车的经度&#x27;,    lat              string comment &#x27;用户发起打车的纬度&#x27;,    province         string comment &#x27;所在省份&#x27;,    city             string comment &#x27;所在城市&#x27;,    es_money         double comment &#x27;预估打车费用&#x27;,    gender           string comment &#x27;用户信息 - 性别&#x27;,    profession       string comment &#x27;用户信息 - 行业&#x27;,    age_range        string comment &#x27;年龄段（70后、80后、...）&#x27;,    tip              double comment &#x27;小费&#x27;,    subscribe        int comment &#x27;是否预约（0 - 非预约、1 - 预约）&#x27;,    subscribe_name   string comment &#x27;是否预约名称&#x27;,    sub_time         string comment &#x27;预约时间&#x27;,    is_agent         int comment &#x27;是否代叫（0 - 本人、1 - 代叫）&#x27;,    is_agent_name    string comment &#x27;是否代缴名称&#x27;,    agent_telephone  string comment &#x27;预约人手机&#x27;,    order_time       string comment &#x27;订单时间&#x27;,    order_date       string comment &#x27;订单时间，yyyy-MM-dd&#x27;,    order_year       string comment &#x27;年&#x27;,    order_month      string comment &#x27;月&#x27;,    order_day        string comment &#x27;日&#x27;,    order_hour       string comment &#x27;小时&#x27;,    order_time_range string comment &#x27;时间段&#x27;)    partitioned by (dt string comment &#x27;2020-04-12&#x27;)    ROW FORMAT DELIMITED FIELDS TERMINATED BY &#x27;,&#x27;;-- 预处理sql语句 用户订单处理insert overwrite table dw_didi.t_user_order_wide partition (dt = &#x27;2020-04-12&#x27;)select orderid,       telephone,       lng,       lat,       province,       city,       es_money,       gender,       profession,       age_range,       tip,       subscribe,--        if(nvl(subscribe, 0) = 0, &#x27;非预约&#x27;, &#x27;预约&#x27;)                   as subscribe_name,       case           when subscribe = 0 or (subscribe is null) then &#x27;非预约&#x27;           when subscribe = 1 then &#x27;预约&#x27;           end                                                             as subscribe_name,       date_format(sub_time, &#x27;yyyy-MM-dd&#x27;)                                 as sub_time,       is_agent,       case           when is_agent = 0 or (subscribe is null) then &#x27;本人&#x27;           when is_agent = 1 then &#x27;代叫&#x27;           end                                                             as is_agent_name,       agent_telephone,--        substr(order_time, 1, 4)                                      as year,       date_format(concat(order_time, &#x27;:00&#x27;), &#x27;yyyy-MM-dd HH:mm:ss&#x27;)       as order_time,       date_format(order_time, &#x27;yyyy-MM-dd&#x27;)                               as order_data,       year(date_format(order_time, &#x27;yyyy-MM-dd&#x27;))                         as order_year,       month(date_format(order_time, &#x27;yyyy-MM-dd&#x27;))                        as order_month,       day(date_format(concat(order_time, &#x27;:00&#x27;), &#x27;yyyy-MM-dd HH:mm:ss&#x27;))  as order_day,       hour(date_format(concat(order_time, &#x27;:00&#x27;), &#x27;yyyy-MM-dd HH:mm:ss&#x27;)) as order_hour,       case           when hour(date_format(concat(order_time, &#x27;:00&#x27;), &#x27;yyyy-MM-dd HH:mm:ss&#x27;)) &gt;= 1 and                hour(date_format(concat(order_time, &#x27;:00&#x27;), &#x27;yyyy-MM-dd HH:mm:ss&#x27;)) &lt; 5 then &#x27;凌晨&#x27;           when hour(date_format(concat(order_time, &#x27;:00&#x27;), &#x27;yyyy-MM-dd HH:mm:ss&#x27;)) &gt;= 5 and                hour(date_format(concat(order_time, &#x27;:00&#x27;), &#x27;yyyy-MM-dd HH:mm:ss&#x27;)) &lt; 8 then &#x27;早上&#x27;           when hour(date_format(concat(order_time, &#x27;:00&#x27;), &#x27;yyyy-MM-dd HH:mm:ss&#x27;)) &gt;= 8 and                hour(date_format(concat(order_time, &#x27;:00&#x27;), &#x27;yyyy-MM-dd HH:mm:ss&#x27;)) &lt; 11 then &#x27;上午&#x27;           when hour(date_format(concat(order_time, &#x27;:00&#x27;), &#x27;yyyy-MM-dd HH:mm:ss&#x27;)) &gt;= 11 and                hour(date_format(concat(order_time, &#x27;:00&#x27;), &#x27;yyyy-MM-dd HH:mm:ss&#x27;)) &lt; 13 then &#x27;中午&#x27;           when hour(date_format(concat(order_time, &#x27;:00&#x27;), &#x27;yyyy-MM-dd HH:mm:ss&#x27;)) &gt;= 13 and                hour(date_format(concat(order_time, &#x27;:00&#x27;), &#x27;yyyy-MM-dd HH:mm:ss&#x27;)) &lt; 17 then &#x27;下午&#x27;           when hour(date_format(concat(order_time, &#x27;:00&#x27;), &#x27;yyyy-MM-dd HH:mm:ss&#x27;)) &gt;= 17 and                hour(date_format(concat(order_time, &#x27;:00&#x27;), &#x27;yyyy-MM-dd HH:mm:ss&#x27;)) &lt; 19 then &#x27;晚上&#x27;           when hour(date_format(concat(order_time, &#x27;:00&#x27;), &#x27;yyyy-MM-dd HH:mm:ss&#x27;)) &gt;= 19 and                hour(date_format(concat(order_time, &#x27;:00&#x27;), &#x27;yyyy-MM-dd HH:mm:ss&#x27;)) &lt; 20 then &#x27;半夜&#x27;           when hour(date_format(concat(order_time, &#x27;:00&#x27;), &#x27;yyyy-MM-dd HH:mm:ss&#x27;)) &gt;= 20 and                hour(date_format(concat(order_time, &#x27;:00&#x27;), &#x27;yyyy-MM-dd HH:mm:ss&#x27;)) &lt; 24 then &#x27;深夜&#x27;           when hour(date_format(concat(order_time, &#x27;:00&#x27;), &#x27;yyyy-MM-dd HH:mm:ss&#x27;)) &gt;= 0 and                hour(date_format(concat(order_time, &#x27;:00&#x27;), &#x27;yyyy-MM-dd HH:mm:ss&#x27;)) &lt; 1 then &#x27;凌晨&#x27;           end--        date_format(order_time, &#x27;yyyy-MM-dd HH:mm:ss&#x27;),from ods_didi.t_user_orderwhere length(order_time) &gt;= 8  and dt = &#x27;2020-04-12&#x27;;create table if not exists dw_didi.t_user_cancel_order(    orderId     string,    Profession  string,    age_range   string,    Reason      string,    cancel_time string)    partitioned by (dt string comment &#x27;2020-04-12&#x27;)    ROW FORMAT DELIMITED FIELDS TERMINATED BY &#x27;,&#x27;;insert overwrite table dw_didi.t_user_cancel_order partition (dt = &#x27;2020-04-12&#x27;)select orderId,       profession,       age_range,       reason,       cancel_timefrom ods_didi.t_user_cancel_orderwhere dt = &#x27;2020-04-12&#x27;;create table if not exists dw_didi.t_user_pay_order(    id             string comment &#x27;支付订单ID&#x27;,    orderId        string comment &#x27;订单ID&#x27;,    real_pay_money double comment &#x27;实际支付总额&#x27;,    has_coupon     int comment &#x27;是否使用优惠券（0 - 不使用、1 - 使用）&#x27;,    pay_way        int comment &#x27;支付方式（0-微信支付、1-支付宝支付、3-QQ钱包支付、4- 一网通银行卡支付）&#x27;,    mileage        double comment &#x27;里程（单位公里）&#x27;,    pay_time       string comment &#x27;支付时间&#x27;)    partitioned by (dt string comment &#x27;2020-04-12&#x27;)    ROW FORMAT DELIMITED FIELDS TERMINATED BY &#x27;,&#x27;;insert overwrite table dw_didi.t_user_pay_order partition (dt = &#x27;2020-04-12&#x27;)select id,       orderId,       real_pay_money,       has_coupon,       pay_way,       mileage,       pay_timefrom ods_didi.t_user_pay_orderwhere dt = &#x27;2020-04-12&#x27;;create table if not exists dw_didi.t_user_evaluate(    id        string comment &#x27;评价日志唯一ID&#x27;,    orderId   string comment &#x27;订单ID&#x27;,    eva_level int comment &#x27;评价等级（1 - 一颗星、... 5 - 五星）&#x27;,    eva_time  string comment &#x27;评价时间&#x27;)    partitioned by (dt string comment &#x27;时间分区&#x27;)    ROW FORMAT DELIMITED FIELDS TERMINATED BY &#x27;,&#x27;;insert overwrite table dw_didi.t_user_evaluate partition (dt = &#x27;2020-04-12&#x27;)select id,       orderId,       eva_level,       eva_timefrom ods_didi.t_user_evaluatewhere dt = &#x27;2020-04-12&#x27;;-- 4.数据处理-- 4.1 总订单笔数分析-- 4.1.1计算4.12的总订单笔数分析select max(dt) as     `时间`,       count(orderid) `订单总笔数`from dw_didi.t_user_order_widewhere dt = &#x27;2020-04-12&#x27;;--建表create table if not exists app_didi.t_order_total(    date_val string comment &#x27;日期(yyyy-MM-dd)&#x27;,    count    int comment &#x27;订单笔数&#x27;) partitioned by (month string comment &#x27;按月分区yyyy-MM&#x27;)    row format delimited fields terminated by &#x27;,&#x27;;--加载数据据insert into table app_didi.t_order_total partition (month = &#x27;2020-04&#x27;)select max(dt)        as `时间`,       count(orderid) as `订单时间`from dw_didi.t_user_order_widewhere dt = &#x27;2020-04-12&#x27;;-- truncate table app_didi.t_order_total;-- 4.2 预约订单/非预约订单占比分析-- sum,avg,max,min-- 预约单/总单*100%select count(*) as cnt_totalfrom dw_didi.t_user_order_widewhere dt = &#x27;2020-04-12&#x27;;select max(order_date)       as `日期`,       subscribe_name        as `是否预约`,       count(subscribe_name) as cntfrom dw_didi.t_user_order_widewhere dt = &#x27;2020-04-12&#x27;group by subscribe_name;--左连接select *from (select max(order_date)       as `日期`,             subscribe_name        as `是否预约`,             count(subscribe_name) as cnt      from dw_didi.t_user_order_wide      where dt = &#x27;2020-04-12&#x27;      group by subscribe_name) t1         left join (select count(*) as cnt_total                    from dw_didi.t_user_order_wide                    where dt = &#x27;2020-04-12&#x27;) t2;-- 隐式内连接select `日期`,       `是否预约`,       concat(round(cnt / cnt_total * 100, 2), &#x27;%&#x27;) as `百分比`from (select max(order_date)       as `日期`,             subscribe_name        as `是否预约`,             count(subscribe_name) as cnt      from dw_didi.t_user_order_wide      where dt = &#x27;2020-04-12&#x27;      group by subscribe_name) t1,     (select count(*) as cnt_total      from dw_didi.t_user_order_wide      where dt = &#x27;2020-04-12&#x27;) t2;--开窗函数select order_date     as                                        `日期`,       subscribe_name as                                        `是否预约`,       count(subscribe_name) over (partition by subscribe_name) cnt,       count() over ()                                          cnt_totalfrom dw_didi.t_user_order_widewhere dt = &#x27;2020-04-12&#x27;;-- group by subscribe_name;--开窗函数2select max(`日期`) as                                         `日期`,       `是否预约`,       concat(round(max(cnt) / max(cnt_total) * 100, 2), &#x27;%&#x27;) `百分比`from (select order_date     as                                        `日期`,             subscribe_name as                                        `是否预约`,             count(subscribe_name) over (partition by subscribe_name) cnt,             count() over ()                                          cnt_total      from dw_didi.t_user_order_wide      where dt = &#x27;2020-04-12&#x27;) tgroup by `是否预约`;--方法三select `日期`,       `是否预约`,       concat(round((cnt / sum(cnt) over ()) * 100, 2), &#x27;%&#x27;) `百分比`from (select max(order_date)       as `日期`,             subscribe_name        as `是否预约`,             count(subscribe_name) as cnt      from dw_didi.t_user_order_wide      where dt = &#x27;2020-04-12&#x27;      group by subscribe_name) t;create table if not exists app_didi.t_order_subscribe_percent(    date_val       string comment &#x27;日期&#x27;,    subscribe_name string comment &#x27;是否预约&#x27;,    percent_val    string comment &#x27;百分比&#x27;) partitioned by (month string comment &#x27;年月yyyy-MM&#x27;)    row format delimited fields terminated by &#x27;,&#x27;;select `日期`,       `是否预约`,       cnt / sum(cnt) over () * 100from (select max(order_date)       as `日期`,             subscribe_name        as `是否预约`,             count(subscribe_name) as cnt      from dw_didi.t_user_order_wide      where dt = &#x27;2020-04-12&#x27;      group by subscribe_name) t;insert overwrite table app_didi.t_order_subscribe_percent partition (month = &#x27;2020-04&#x27;)select `日期`,       `是否预约`,       concat(round((cnt / sum(cnt) over ()) * 100, 2), &#x27;%&#x27;) `百分比`from (select max(order_date)       as `日期`,             subscribe_name        as `是否预约`,             count(subscribe_name) as cnt      from dw_didi.t_user_order_wide      where dt = &#x27;2020-04-12&#x27;      group by subscribe_name) t;-- 4.3不同时段订单的个数create table if not exists app_didi.t_order_timerange_total(    datetime  string comment &#x27;日期&#x27;,    timerange string comment &#x27;时间段&#x27;,    count     int comment &#x27;订单数量&#x27;)    partitioned by (month string comment &#x27;年月，yyyy-MM&#x27;)    row format delimited fields terminated by &#x27;,&#x27;;--sqlselect max(dt),       order_time_range,       count(*) as order_cntfrom dw_didi.t_user_order_widewhere dt = &#x27;2020-04-12&#x27;group by order_time_range;--加载数据insert overwrite table app_didi.t_order_timerange_total partition (month = &#x27;2020-04&#x27;)select max(dt),       order_time_range,       count(*) as order_cntfrom dw_didi.t_user_order_widewhere dt = &#x27;2020-04-12&#x27;group by order_time_range;--4.4不同年龄段、时段订单个数select max(dt),       age_range,       order_time_range,       count(*) as order_cntfrom dw_didi.t_user_order_widewhere dt = &#x27;2020-04-12&#x27;group by age_range,         order_time_range;create table if not exists app_didi.t_order_age_and_time_range_total(    datetime         string comment &#x27;日期&#x27;,    age_range        string comment &#x27;年龄段&#x27;,    order_time_range string comment &#x27;时段&#x27;,    count            int comment &#x27;订单数量&#x27;)    partitioned by (month string comment &#x27;年月，yyyy-MM&#x27;)    row format delimited fields terminated by &#x27;,&#x27;;insert overwrite table app_didi.t_order_age_and_time_range_total partition (month = &#x27;2020-04&#x27;)select max(dt),       age_range,       order_time_range,       count(*) as order_cntfrom dw_didi.t_user_order_widewhere dt = &#x27;2020-04-12&#x27;group by age_range, order_time_range;--4.4不同地域订单个数select province, count(*) as order_cntfrom dw_didi.t_user_order_widewhere dt = &#x27;2020-04-12&#x27;group by province;--建表create table if not exists app_didi.t_order_province_total(    datetime string comment &#x27;日期&#x27;,    province string comment &#x27;省份&#x27;,    count    int comment &#x27;订单数量&#x27;)    partitioned by (month string comment &#x27;年月，yyyy-MM&#x27;)    row format delimited fields terminated by &#x27;,&#x27;;insert overwrite table app_didi.t_order_province_total partition (month = &#x27;2020-04&#x27;)select &#x27;2020-04-12&#x27;,       province,       count(*) as order_cntfrom dw_didi.t_user_order_widewhere dt = &#x27;2020-04-12&#x27;group by province;-- 4.5求订单客户职业排名top5-- 第一步 ：按职业分组求客户数量select max(dt),       profession,       count(orderId)from dw_didi.t_user_order_widewhere dt = &#x27;2020-04-12&#x27;group by profession;-- 第二部 排名select dt1,       profession,       cnt,       row_number() over (order by cnt desc )from (select max(dt) as     dt1,             profession,             count(orderId) cnt      from dw_didi.t_user_order_wide      where dt = &#x27;2020-04-12&#x27;      group by profession) t;-- 取前五select *from (select dt1,             profession,             cnt,             row_number() over (order by cnt desc ) as rk      from (select max(dt) as     dt1,                   profession,                   count(orderId) cnt            from dw_didi.t_user_order_wide            where dt = &#x27;2020-04-12&#x27;            group by profession) t1) t2where rk &lt;= 5;with t1 as (select max(dt) dt1,                   profession,                   count(orderId) cnt            from dw_didi.t_user_order_wide            where dt = &#x27;2020-04-12&#x27;            group by profession),     t2 as (select dt1,profession,cnt,                   row_number() over (order by cnt desc ) as rk            from t1)select *from t2where rk&lt;=5;select *from (select t.profession,             t.cnt,             rank() over (order by t.cnt desc ) as rk      from (select profession,                   count(*) as cnt            from dw_didi.t_user_order_wide            group by profession) t) ttwhere tt.rk &lt;= 5;--建表create table if not exists app_didi.t_order_profession_total_topn(    profession string comment &#x27;职业&#x27;,    Order_cnt  int comment &#x27;订单数量&#x27;,    rk         int comment &#x27;排名&#x27;)    partitioned by (month string comment &#x27;年月，yyyy-MM&#x27;)    row format delimited fields terminated by &#x27;,&#x27;;--加载数据insert overwrite table app_didi.t_order_profession_total_topn partition (month = &#x27;2020-04&#x27;)select *from (select t.profession,             t.cnt,             rank() over (order by t.cnt desc ) as rk      from (select profession, count(*) as cnt from dw_didi.t_user_order_wide group by profession) t) ttwhere tt.rk &lt;= 5;--4.6用户订单取消占比select &#x27;2020-04-12&#x27;                                                date_val,       concat(round(t1.total_cnt / t2.total_cnt * 100, 2), &#x27;%&#x27;) as cancel_order_percentfrom (select count(orderid) as total_cnt      from ods_didi.t_user_cancel_order      where dt = &#x27;2020-04-12&#x27;) t1        ,     (select count(orderid) as total_cnt      from dw_didi.t_user_order_wide      where dt = &#x27;2020-04-12&#x27;) t2;--创建表create table if not exists app_didi.t_order_cancel_order_percent(    datetime             string comment &#x27;日期&#x27;,    cancel_order_percent string comment &#x27;百分比&#x27;)    partitioned by (month string comment &#x27;年月，yyyy-MM&#x27;)    row format delimited fields terminated by &#x27;,&#x27;;--加载数据insert overwrite table app_didi.t_order_cancel_order_percent partition (month = &#x27;2020-04&#x27;)select &#x27;2020-04-12&#x27;                                                date_val        ,       concat(round(t1.total_cnt / t2.total_cnt * 100, 2), &#x27;%&#x27;) as percent_valfrom (select count(*) total_cnt from ods_didi.t_user_cancel_order where dt = &#x27;2020-04-12&#x27;) t1        ,     (select count(*) total_cnt from dw_didi.t_user_order_wide where dt = &#x27;2020-04-12&#x27;) t2;-- 4.8统计用户取消订单原因top1with t1 as(select               reason,profession,                   count(reason) over() cnt           from dw_didi.t_user_cancel_order           where dt = &#x27;2020-04-12&#x27;         ),     t2 as(select reason,profession,  cnt,                  row_number() over(order by cnt desc) as rk           from t1     )select *from t2where rk&lt;=5;insert overwrite table  app_didi.t_order_cancel_reason partition (month = &#x27;2020-04&#x27;)select *from(        select            t.profession,             t.cnt,             rank() over (order by t.cnt desc ) as rk        from (select                  profession,                  count(*) as cnt              from dw_didi.t_user_cancel_order group by profession) t    ) ttwhere tt.rk &lt;= 5;--建表create table if not exists app_didi.t_order_cancel_reason(    profession string comment &#x27;职业&#x27;,    cancel_cnt  int comment &#x27;订单数量&#x27;,    rk         int comment &#x27;排名&#x27;)partitioned by (month string comment &#x27;年月，yyyy-MM&#x27;)row format delimited fields terminated by &#x27;,&#x27;;--统计每个省订单量最高的城市top3select city,    count(city)from dw_didi.t_user_order_widewhere length(city) &gt; 0group by  city;--建表insert overwrite table  app_didi.t_order_city partition (month = &#x27;2020-04&#x27;)select *from(        select            t.city,            t.cnt,            rank() over (order by t.cnt desc ) as rk        from (select city,                     count(city) as cnt              from dw_didi.t_user_order_wide              where length(city) &gt; 0              group by  city) t    ) ttwhere tt.rk &lt;= 3;create table if not exists app_didi.t_order_city(    city string comment &#x27;城市&#x27;,    order_cnt  int comment &#x27;订单数量&#x27;,    rk         int comment &#x27;排名&#x27;)    partitioned by (month string comment &#x27;年月，yyyy-MM&#x27;)    row format delimited fields terminated by &#x27;,&#x27;;--统计订单支付中使用优惠券的百分比create table if not exists app_didi.t_order_dicount(    isdicount string comment &#x27;是否使用优惠券&#x27;,    order_cnt  string comment &#x27;百分比&#x27;)partitioned by (month string comment &#x27;年月，yyyy-MM&#x27;)    row format delimited fields terminated by &#x27;,&#x27;;insert overwrite table  app_didi.t_order_dicount partition (month = &#x27;2020-04&#x27;)select       `是否使用优惠券`,       concat(round((cnt / sum(cnt) over ()) * 100, 2), &#x27;%&#x27;) `百分比`from (select             has_coupon         as `是否使用优惠券`,             count( has_coupon) as cnt      from dw_didi.t_user_pay_order      where has_coupon!=17      group by  has_coupon) t;--统计用户五星级好评的百分比create table if not exists app_didi.t_order_five_start(    fivestart string comment &#x27;是否是5&#x27;,    order_cnt  string comment &#x27;百分比&#x27;)    partitioned by (month string comment &#x27;年月，yyyy-MM&#x27;)    row format delimited fields terminated by &#x27;,&#x27;;insert overwrite table  app_didi.t_order_five_start partition (month = &#x27;2020-04&#x27;)select    `是否是5`,    concat(round((cnt / sum(cnt) over ()) * 100, 2), &#x27;%&#x27;) `百分比`from (select          eva_level         as `是否是5`,          count(eva_level ) as cnt      from dw_didi.t_user_evaluate      where length(eva_level)&gt;0      group by  eva_level ) t;</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_didi.t_order_subscribe_percent</span><br><span class="line">(</span><br><span class="line">    date_val     <span class="type">date</span>,</span><br><span class="line">    subscribe_name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    percent_val <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#创建不同时段订单统计目标表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_didi.t_order_timerange_total</span><br><span class="line">(</span><br><span class="line">    order_date <span class="type">date</span>,</span><br><span class="line">    timerange  <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    count      <span class="type">int</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#创建不同地域订单统计目标表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_didi.t_order_province_total</span><br><span class="line">(</span><br><span class="line">    order_date <span class="type">date</span>,</span><br><span class="line">    province   <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    count      <span class="type">int</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_didi.t_order_profession_total_topn(</span><br><span class="line">    profession <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    order_cnt <span class="type">int</span>,</span><br><span class="line">    rk <span class="type">int</span></span><br><span class="line">);</span><br><span class="line"><span class="operator">/</span>export<span class="operator">/</span>server<span class="operator">/</span>sqoop<span class="number">-1.4</span><span class="number">.6</span><span class="operator">/</span>bin<span class="operator">/</span>sqoop export \</span><br><span class="line"><span class="comment">--connect jdbc:mysql://192.168.52.161:3306/app_didi \</span></span><br><span class="line"><span class="comment">--username root \</span></span><br><span class="line"><span class="comment">--password 123456 \</span></span><br><span class="line"><span class="comment">--table t_order_profession_total_topn \</span></span><br><span class="line"><span class="comment">--export-dir /user/hive/warehouse/app_didi.db/t_order_profession_total_topn/month=2020-04;</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_didi.t_order_cancel_order_percent</span><br><span class="line">(</span><br><span class="line">    datetime             string comment <span class="string">&#x27;日期&#x27;</span>,</span><br><span class="line">    cancel_order_percent string comment <span class="string">&#x27;百分比&#x27;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_didi.t_order_cancel_order_percent(</span><br><span class="line">        datatime <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">        cancel_order_percent <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_didi.t_detail</span><br><span class="line">(</span><br><span class="line">    datetime <span class="type">varchar</span>(<span class="number">20</span>) comment <span class="string">&#x27;日期&#x27;</span>,</span><br><span class="line">    province <span class="type">varchar</span>(<span class="number">20</span>) comment <span class="string">&#x27;省份&#x27;</span>,</span><br><span class="line">    count    <span class="type">int</span> comment <span class="string">&#x27;订单数量&#x27;</span>,</span><br><span class="line">    lng <span class="type">varchar</span>(<span class="number">50</span>) comment <span class="string">&#x27;经度&#x27;</span> ,</span><br><span class="line">    lat <span class="type">varchar</span>(<span class="number">50</span>) comment <span class="string">&#x27;纬度&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="operator">/</span>export<span class="operator">/</span>server<span class="operator">/</span>sqoop<span class="number">-1.4</span><span class="number">.6</span><span class="operator">/</span>bin<span class="operator">/</span>sqoop export \</span><br><span class="line"><span class="comment">--connect jdbc:mysql://192.168.52.161:3306/app_didi \</span></span><br><span class="line"><span class="comment">--username root \</span></span><br><span class="line"><span class="comment">--password 123456 \</span></span><br><span class="line"><span class="comment">--table t_detail \</span></span><br><span class="line"><span class="comment">--export-dir /user/hive/warehouse/app_didi.db/t_detail/month=2020-04;</span></span><br><span class="line"></span><br><span class="line">#创建不同年龄段，不同时段订单目标表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_didi.t_order_age_and_time_range_total</span><br><span class="line">(</span><br><span class="line">    order_date       <span class="type">date</span>,</span><br><span class="line">    age_range        <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    order_time_range <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    count            <span class="type">int</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="operator">/</span>export<span class="operator">/</span>server<span class="operator">/</span>sqoop<span class="number">-1.4</span><span class="number">.6</span><span class="operator">/</span>bin<span class="operator">/</span>sqoop export \</span><br><span class="line"><span class="comment">--connect jdbc:mysql://192.168.52.161:3306/app_didi \</span></span><br><span class="line"><span class="comment">--username root \</span></span><br><span class="line"><span class="comment">--password 123456 \</span></span><br><span class="line"><span class="comment">--table t_order_subscribe_percent \</span></span><br><span class="line"><span class="comment">--export-dir /user/hive/warehouse/app_didi.db/t_order_subscribe_percent/month=2020-04;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="operator">/</span>export<span class="operator">/</span>server<span class="operator">/</span>sqoop<span class="number">-1.4</span><span class="number">.6</span><span class="operator">/</span>bin<span class="operator">/</span>sqoop export \</span><br><span class="line"><span class="comment">--connect jdbc:mysql://192.168.52.161:3306/app_didi \</span></span><br><span class="line"><span class="comment">--username root \</span></span><br><span class="line"><span class="comment">--password 123456 \</span></span><br><span class="line"><span class="comment">--table t_order_timerange_total \</span></span><br><span class="line"><span class="comment">--export-dir /user/hive/warehouse/app_didi.db/t_order_timerange_total/month=2020-04</span></span><br><span class="line"></span><br><span class="line"><span class="operator">/</span>export<span class="operator">/</span>server<span class="operator">/</span>sqoop<span class="number">-1.4</span><span class="number">.6</span><span class="operator">/</span>bin<span class="operator">/</span>sqoop export \</span><br><span class="line"><span class="comment">--connect jdbc:mysql://192.168.52.161:3306/app_didi \</span></span><br><span class="line"><span class="comment">--username root \</span></span><br><span class="line"><span class="comment">--password 123456 \</span></span><br><span class="line"><span class="comment">--table t_order_province_total  \</span></span><br><span class="line"><span class="comment">--export-dir /user/hive/warehouse/app_didi.db/t_order_province_total/month=2020-04</span></span><br><span class="line"></span><br><span class="line"><span class="operator">/</span>export<span class="operator">/</span>server<span class="operator">/</span>sqoop<span class="number">-1.4</span><span class="number">.6</span><span class="operator">/</span>bin<span class="operator">/</span>sqoop export \</span><br><span class="line"><span class="comment">--connect jdbc:mysql://192.168.52.161:3306/app_didi \</span></span><br><span class="line"><span class="comment">--username root \</span></span><br><span class="line"><span class="comment">--password 123456 \</span></span><br><span class="line"><span class="comment">--table t_order_age_and_time_range_total  \</span></span><br><span class="line"><span class="comment">--export-dir /user/hive/warehouse/app_didi.db/t_order_age_and_time_range_total/month=2020-04</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_didi.t_order_cancel_reason</span><br><span class="line">(</span><br><span class="line">    profession <span class="type">varchar</span>(<span class="number">20</span>) comment <span class="string">&#x27;职业&#x27;</span>,</span><br><span class="line">    cancel_cnt  <span class="type">int</span> comment <span class="string">&#x27;订单数量&#x27;</span>,</span><br><span class="line">    rk         <span class="type">int</span> comment <span class="string">&#x27;排名&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="operator">/</span>export<span class="operator">/</span>server<span class="operator">/</span>sqoop<span class="number">-1.4</span><span class="number">.6</span><span class="operator">/</span>bin<span class="operator">/</span>sqoop export \</span><br><span class="line"><span class="comment">--connect jdbc:mysql://192.168.52.161:3306/app_didi \</span></span><br><span class="line"><span class="comment">--username root \</span></span><br><span class="line"><span class="comment">--password 123456 \</span></span><br><span class="line"><span class="comment">--table t_order_cancel_reason  \</span></span><br><span class="line"><span class="comment">--export-dir /user/hive/warehouse/app_didi.db/t_order_cancel_reason/month=2020-04</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_didi.t_order_city</span><br><span class="line">(</span><br><span class="line">    city <span class="type">varchar</span>(<span class="number">20</span>) comment <span class="string">&#x27;城市&#x27;</span>,</span><br><span class="line">    order_cnt  <span class="type">int</span> comment <span class="string">&#x27;订单数量&#x27;</span>,</span><br><span class="line">    rk         <span class="type">int</span> comment <span class="string">&#x27;排名&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="operator">/</span>export<span class="operator">/</span>server<span class="operator">/</span>sqoop<span class="number">-1.4</span><span class="number">.6</span><span class="operator">/</span>bin<span class="operator">/</span>sqoop export \</span><br><span class="line"><span class="comment">--connect jdbc:mysql://192.168.52.161:3306/app_didi \</span></span><br><span class="line"><span class="comment">--username root \</span></span><br><span class="line"><span class="comment">--password 123456 \</span></span><br><span class="line"><span class="comment">--table t_order_city  \</span></span><br><span class="line"><span class="comment">--export-dir /user/hive/warehouse/app_didi.db/t_order_city/month=2020-04</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_didi.t_order_dicount</span><br><span class="line">(</span><br><span class="line">    isdicount <span class="type">varchar</span>(<span class="number">20</span>) comment <span class="string">&#x27;是否使用优惠券&#x27;</span>,</span><br><span class="line">    order_cnt  <span class="type">varchar</span>(<span class="number">20</span>)comment <span class="string">&#x27;百分比&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="operator">/</span>export<span class="operator">/</span>server<span class="operator">/</span>sqoop<span class="number">-1.4</span><span class="number">.6</span><span class="operator">/</span>bin<span class="operator">/</span>sqoop export \</span><br><span class="line"><span class="comment">--connect jdbc:mysql://192.168.52.161:3306/app_didi \</span></span><br><span class="line"><span class="comment">--username root \</span></span><br><span class="line"><span class="comment">--password 123456 \</span></span><br><span class="line"><span class="comment">--table t_order_dicount \</span></span><br><span class="line"><span class="comment">--export-dir /user/hive/warehouse/app_didi.db/t_order_dicount/month=2020-04</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_didi.t_order_five_start</span><br><span class="line">(</span><br><span class="line">    fivestart <span class="type">varchar</span>(<span class="number">20</span>) comment <span class="string">&#x27;是否是5&#x27;</span>,</span><br><span class="line">    order_cnt  <span class="type">varchar</span>(<span class="number">20</span>) comment <span class="string">&#x27;百分比&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="operator">/</span>export<span class="operator">/</span>server<span class="operator">/</span>sqoop<span class="number">-1.4</span><span class="number">.6</span><span class="operator">/</span>bin<span class="operator">/</span>sqoop export \</span><br><span class="line"><span class="comment">--connect jdbc:mysql://192.168.52.161:3306/app_didi \</span></span><br><span class="line"><span class="comment">--username root \</span></span><br><span class="line"><span class="comment">--password 123456 \</span></span><br><span class="line"><span class="comment">--table t_order_five_start \</span></span><br><span class="line"><span class="comment">--export-dir /user/hive/warehouse/app_didi.db/t_order_five_start/month=2020-04</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1.数据仓库构建</span></span><br><span class="line"><span class="comment">-- 1.1创建ods库</span></span><br><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> ods_didi;</span><br><span class="line"><span class="comment">-- 1.2创建dw数据库</span></span><br><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> dw_didi;</span><br><span class="line"><span class="comment">-- 1.3创建app数据库</span></span><br><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> app_didi;</span><br><span class="line">use ods_didi;</span><br><span class="line"><span class="comment">-- 2.在ods层创建表</span></span><br><span class="line"><span class="comment">-- 2.1创建订单结构表</span></span><br><span class="line"><span class="comment">-- 创建用户订单表结构</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> ods_didi.t_user_order</span><br><span class="line">(</span><br><span class="line">    orderId         string comment <span class="string">&#x27;订单id&#x27;</span>,</span><br><span class="line">    telephone       string comment <span class="string">&#x27;打车用户手机&#x27;</span>,</span><br><span class="line">    lng             string comment <span class="string">&#x27;用户发起打车的经度&#x27;</span>,</span><br><span class="line">    lat             string comment <span class="string">&#x27;用户发起打车的纬度&#x27;</span>,</span><br><span class="line">    province        string comment <span class="string">&#x27;所在省份&#x27;</span>,</span><br><span class="line">    city            string comment <span class="string">&#x27;所在城市&#x27;</span>,</span><br><span class="line">    es_money        <span class="keyword">double</span> comment <span class="string">&#x27;预估打车费用&#x27;</span>,</span><br><span class="line">    gender          string comment <span class="string">&#x27;用户信息 - 性别&#x27;</span>,</span><br><span class="line">    profession      string comment <span class="string">&#x27;用户信息 - 行业&#x27;</span>,</span><br><span class="line">    age_range       string comment <span class="string">&#x27;年龄段（70后、80后、...）&#x27;</span>,</span><br><span class="line">    tip             <span class="keyword">double</span> comment <span class="string">&#x27;小费&#x27;</span>,</span><br><span class="line">    subscribe       <span class="type">int</span> comment <span class="string">&#x27;是否预约（0 - 非预约、1 - 预约）&#x27;</span>,</span><br><span class="line">    sub_time        string comment <span class="string">&#x27;预约时间&#x27;</span>,</span><br><span class="line">    is_agent        <span class="type">int</span> comment <span class="string">&#x27;是否代叫（0 - 本人、1 - 代叫）&#x27;</span>,</span><br><span class="line">    agent_telephone string comment <span class="string">&#x27;预约人手机&#x27;</span>,</span><br><span class="line">    order_time      string comment <span class="string">&#x27;订单时间&#x27;</span></span><br><span class="line">) partitioned <span class="keyword">by</span> (dt string comment <span class="string">&#x27;时间分区&#x27;</span>)</span><br><span class="line">    <span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"><span class="comment">-- ods创建取消订单表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> ods_didi.t_user_cancel_order</span><br><span class="line">(</span><br><span class="line">    orderId        string comment <span class="string">&#x27;订单ID&#x27;</span>,</span><br><span class="line">    cstm_telephone string comment <span class="string">&#x27;客户联系电话&#x27;</span>,</span><br><span class="line">    lng            string comment <span class="string">&#x27;取消订单的经度&#x27;</span>,</span><br><span class="line">    lat            string comment <span class="string">&#x27;取消订单的纬度&#x27;</span>,</span><br><span class="line">    province       string comment <span class="string">&#x27;所在省份&#x27;</span>,</span><br><span class="line">    city           string comment <span class="string">&#x27;所在城市&#x27;</span>,</span><br><span class="line">    es_distance    <span class="keyword">double</span> comment <span class="string">&#x27;预估距离&#x27;</span>,</span><br><span class="line">    gender         string comment <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">    profession     string comment <span class="string">&#x27;行业&#x27;</span>,</span><br><span class="line">    age_range      string comment <span class="string">&#x27;年龄段&#x27;</span>,</span><br><span class="line">    reason         <span class="type">int</span> comment <span class="string">&#x27;取消订单原因（1 - 选择了其他交通方式、2 - 与司机达成一致，取消订单、3 - 投诉司机没来接我、4 - 已不需要用车、5 - 无理由取消订单）&#x27;</span>,</span><br><span class="line">    cancel_time    string comment <span class="string">&#x27;取消时间&#x27;</span></span><br><span class="line">) partitioned <span class="keyword">by</span> (dt string comment <span class="string">&#x27;时间分区&#x27;</span>)</span><br><span class="line">    <span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"><span class="comment">-- ods创建订单表支付表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> ods_didi.t_user_pay_order</span><br><span class="line">(</span><br><span class="line">    id                         string comment <span class="string">&#x27;支付订单ID&#x27;</span>,</span><br><span class="line">    orderId                    string comment <span class="string">&#x27;订单ID&#x27;</span>,</span><br><span class="line">    lng                        string comment <span class="string">&#x27;目的地的经度（支付地址）&#x27;</span>,</span><br><span class="line">    lat                        string comment <span class="string">&#x27;目的地的纬度（支付地址）&#x27;</span>,</span><br><span class="line">    province                   string comment <span class="string">&#x27;省份&#x27;</span>,</span><br><span class="line">    city                       string comment <span class="string">&#x27;城市&#x27;</span>,</span><br><span class="line">    total_money                <span class="keyword">double</span> comment <span class="string">&#x27;车费总价&#x27;</span>,</span><br><span class="line">    real_pay_money             <span class="keyword">double</span> comment <span class="string">&#x27;实际支付总额&#x27;</span>,</span><br><span class="line">    passenger_additional_money <span class="keyword">double</span> comment <span class="string">&#x27;乘客额外加价&#x27;</span>,</span><br><span class="line">    base_money                 <span class="keyword">double</span> comment <span class="string">&#x27;车费合计&#x27;</span>,</span><br><span class="line">    has_coupon                 <span class="type">int</span> comment <span class="string">&#x27;是否使用优惠券（0 - 不使用、1 - 使用）&#x27;</span>,</span><br><span class="line">    coupon_total               <span class="keyword">double</span> comment <span class="string">&#x27;优惠券合计&#x27;</span>,</span><br><span class="line">    pay_way                    <span class="type">int</span> comment <span class="string">&#x27;支付方式（0 - 微信支付、1 - 支付宝支付、3 - QQ钱包支付、4 - 一网通银行卡支付）&#x27;</span>,</span><br><span class="line">    mileage                    <span class="keyword">double</span> comment <span class="string">&#x27;里程（单位公里）&#x27;</span>,</span><br><span class="line">    pay_time                   string comment <span class="string">&#x27;支付时间&#x27;</span></span><br><span class="line">) partitioned <span class="keyword">by</span> (dt string comment <span class="string">&#x27;时间分区&#x27;</span>)</span><br><span class="line">    <span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"><span class="comment">-- ods创建用户评价表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> ods_didi.t_user_evaluate</span><br><span class="line">(</span><br><span class="line">    id                  string comment <span class="string">&#x27;评价日志唯一ID&#x27;</span>,</span><br><span class="line">    orderId             string comment <span class="string">&#x27;订单ID&#x27;</span>,</span><br><span class="line">    passenger_telephone string comment <span class="string">&#x27;用户电话&#x27;</span>,</span><br><span class="line">    passenger_province  string comment <span class="string">&#x27;用户所在省份&#x27;</span>,</span><br><span class="line">    passenger_city      string comment <span class="string">&#x27;用户所在城市&#x27;</span>,</span><br><span class="line">    eva_level           <span class="type">int</span> comment <span class="string">&#x27;评价等级（1 - 一颗星、... 5 - 五星）&#x27;</span>,</span><br><span class="line">    eva_time            string comment <span class="string">&#x27;评价时间&#x27;</span></span><br><span class="line">) partitioned <span class="keyword">by</span> (dt string comment <span class="string">&#x27;时间分区&#x27;</span>)</span><br><span class="line">    <span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"><span class="comment">-- 创建数据仓库 导入数据</span></span><br><span class="line">load data <span class="keyword">local</span> inpath <span class="string">&#x27;/export/data/didi/order.csv&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> ods_didi.t_user_order <span class="keyword">partition</span> (dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>);</span><br><span class="line">load data <span class="keyword">local</span> inpath <span class="string">&#x27;/export/data/didi/cancel_order.csv&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> ods_didi.t_user_cancel_order <span class="keyword">partition</span> (dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>);</span><br><span class="line">load data <span class="keyword">local</span> inpath <span class="string">&#x27;/export/data/didi/pay.csv&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> ods_didi.t_user_pay_order <span class="keyword">partition</span> (dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>);</span><br><span class="line">load data <span class="keyword">local</span> inpath <span class="string">&#x27;/export/data/didi/evaluate.csv&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> ods_didi.t_user_evaluate <span class="keyword">partition</span> (dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>);</span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> dw_didi.t_user_pay_order;</span><br><span class="line"><span class="comment">-- 3.在dw层进行数据预处理use dw_didi;</span></span><br><span class="line"><span class="comment">-- 创建宽表语句</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> dw_didi.t_user_order_wide</span><br><span class="line">(</span><br><span class="line">    orderId          string comment <span class="string">&#x27;订单id&#x27;</span>,</span><br><span class="line">    telephone        string comment <span class="string">&#x27;打车用户手机&#x27;</span>,</span><br><span class="line">    lng              string comment <span class="string">&#x27;用户发起打车的经度&#x27;</span>,</span><br><span class="line">    lat              string comment <span class="string">&#x27;用户发起打车的纬度&#x27;</span>,</span><br><span class="line">    province         string comment <span class="string">&#x27;所在省份&#x27;</span>,</span><br><span class="line">    city             string comment <span class="string">&#x27;所在城市&#x27;</span>,</span><br><span class="line">    es_money         <span class="keyword">double</span> comment <span class="string">&#x27;预估打车费用&#x27;</span>,</span><br><span class="line">    gender           string comment <span class="string">&#x27;用户信息 - 性别&#x27;</span>,</span><br><span class="line">    profession       string comment <span class="string">&#x27;用户信息 - 行业&#x27;</span>,</span><br><span class="line">    age_range        string comment <span class="string">&#x27;年龄段（70后、80后、...）&#x27;</span>,</span><br><span class="line">    tip              <span class="keyword">double</span> comment <span class="string">&#x27;小费&#x27;</span>,</span><br><span class="line">    subscribe        <span class="type">int</span> comment <span class="string">&#x27;是否预约（0 - 非预约、1 - 预约）&#x27;</span>,</span><br><span class="line">    subscribe_name   string comment <span class="string">&#x27;是否预约名称&#x27;</span>,</span><br><span class="line">    sub_time         string comment <span class="string">&#x27;预约时间&#x27;</span>,</span><br><span class="line">    is_agent         <span class="type">int</span> comment <span class="string">&#x27;是否代叫（0 - 本人、1 - 代叫）&#x27;</span>,</span><br><span class="line">    is_agent_name    string comment <span class="string">&#x27;是否代缴名称&#x27;</span>,</span><br><span class="line">    agent_telephone  string comment <span class="string">&#x27;预约人手机&#x27;</span>,</span><br><span class="line">    order_time       string comment <span class="string">&#x27;订单时间&#x27;</span>,</span><br><span class="line">    order_date       string comment <span class="string">&#x27;订单时间，yyyy-MM-dd&#x27;</span>,</span><br><span class="line">    order_year       string comment <span class="string">&#x27;年&#x27;</span>,</span><br><span class="line">    order_month      string comment <span class="string">&#x27;月&#x27;</span>,</span><br><span class="line">    order_day        string comment <span class="string">&#x27;日&#x27;</span>,</span><br><span class="line">    order_hour       string comment <span class="string">&#x27;小时&#x27;</span>,</span><br><span class="line">    order_time_range string comment <span class="string">&#x27;时间段&#x27;</span></span><br><span class="line">) partitioned <span class="keyword">by</span> (dt string comment <span class="string">&#x27;2020-04-12&#x27;</span>)</span><br><span class="line">    <span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"><span class="comment">-- 预处理sql语句 用户订单处理</span></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> dw_didi.t_user_order_wide <span class="keyword">partition</span> (dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>)</span><br><span class="line"><span class="keyword">select</span> orderid,</span><br><span class="line">       telephone,</span><br><span class="line">       lng,</span><br><span class="line">       lat,</span><br><span class="line">       province,</span><br><span class="line">       city,</span><br><span class="line">       es_money,</span><br><span class="line">       gender,</span><br><span class="line">       profession,</span><br><span class="line">       age_range,</span><br><span class="line">       tip,</span><br><span class="line">       subscribe,</span><br><span class="line">       if(nvl(subscribe, <span class="number">0</span>) <span class="operator">=</span> <span class="number">0</span>, <span class="string">&#x27;非预约&#x27;</span>, <span class="string">&#x27;预约&#x27;</span>)                                                 <span class="keyword">as</span> subscribe_name,</span><br><span class="line">       <span class="keyword">case</span></span><br><span class="line">           <span class="keyword">when</span> subscribe <span class="operator">=</span> <span class="number">0</span> <span class="keyword">or</span> (subscribe <span class="keyword">is</span> <span class="keyword">null</span>) <span class="keyword">then</span> <span class="string">&#x27;非预约&#x27;</span></span><br><span class="line">           <span class="keyword">when</span> subscribe <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">               <span class="keyword">then</span> <span class="string">&#x27;预约&#x27;</span> <span class="keyword">end</span>                                                                     <span class="keyword">as</span> subscribe_name,</span><br><span class="line">       date_format(sub_time, <span class="string">&#x27;yyyy-MM-dd&#x27;</span>)                                                         <span class="keyword">as</span> sub_time,</span><br><span class="line">       is_agent,</span><br><span class="line">       <span class="keyword">case</span> <span class="keyword">when</span> is_agent <span class="operator">=</span> <span class="number">0</span> <span class="keyword">or</span> (subscribe <span class="keyword">is</span> <span class="keyword">null</span>) <span class="keyword">then</span> <span class="string">&#x27;本人&#x27;</span> <span class="keyword">when</span> is_agent <span class="operator">=</span> <span class="number">1</span> <span class="keyword">then</span> <span class="string">&#x27;代叫&#x27;</span> <span class="keyword">end</span> <span class="keyword">as</span> is_agent_name,</span><br><span class="line">       agent_telephone,</span><br><span class="line">       substr(order_time, <span class="number">1</span>, <span class="number">4</span>)                                                                    <span class="keyword">as</span> <span class="keyword">year</span>,</span><br><span class="line">       date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)                               <span class="keyword">as</span> order_time,</span><br><span class="line">       date_format(order_time, <span class="string">&#x27;yyyy-MM-dd&#x27;</span>)                                                       <span class="keyword">as</span> order_data,</span><br><span class="line">       <span class="keyword">year</span>(date_format(order_time, <span class="string">&#x27;yyyy-MM-dd&#x27;</span>))                                                 <span class="keyword">as</span> order_year,</span><br><span class="line">       <span class="keyword">month</span>(date_format(order_time, <span class="string">&#x27;yyyy-MM-dd&#x27;</span>))                                                <span class="keyword">as</span> order_month,</span><br><span class="line">       <span class="keyword">day</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>))                          <span class="keyword">as</span> order_day,</span><br><span class="line">       <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>))                         <span class="keyword">as</span> order_hour,</span><br><span class="line">       <span class="keyword">case</span></span><br><span class="line">           <span class="keyword">when</span> <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&gt;=</span> <span class="number">1</span> <span class="keyword">and</span></span><br><span class="line">                <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&lt;</span> <span class="number">5</span> <span class="keyword">then</span> <span class="string">&#x27;凌晨&#x27;</span></span><br><span class="line">           <span class="keyword">when</span> <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&gt;=</span> <span class="number">5</span> <span class="keyword">and</span></span><br><span class="line">                <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&lt;</span> <span class="number">8</span> <span class="keyword">then</span> <span class="string">&#x27;早上&#x27;</span></span><br><span class="line">           <span class="keyword">when</span> <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&gt;=</span> <span class="number">8</span> <span class="keyword">and</span></span><br><span class="line">                <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&lt;</span> <span class="number">11</span> <span class="keyword">then</span> <span class="string">&#x27;上午&#x27;</span></span><br><span class="line">           <span class="keyword">when</span> <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&gt;=</span> <span class="number">11</span> <span class="keyword">and</span></span><br><span class="line">                <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&lt;</span> <span class="number">13</span> <span class="keyword">then</span> <span class="string">&#x27;中午&#x27;</span></span><br><span class="line">           <span class="keyword">when</span> <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&gt;=</span> <span class="number">13</span> <span class="keyword">and</span></span><br><span class="line">                <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&lt;</span> <span class="number">17</span> <span class="keyword">then</span> <span class="string">&#x27;下午&#x27;</span></span><br><span class="line">           <span class="keyword">when</span> <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&gt;=</span> <span class="number">17</span> <span class="keyword">and</span></span><br><span class="line">                <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&lt;</span> <span class="number">19</span> <span class="keyword">then</span> <span class="string">&#x27;晚上&#x27;</span></span><br><span class="line">           <span class="keyword">when</span> <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&gt;=</span> <span class="number">19</span> <span class="keyword">and</span></span><br><span class="line">                <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&lt;</span> <span class="number">20</span> <span class="keyword">then</span> <span class="string">&#x27;半夜&#x27;</span></span><br><span class="line">           <span class="keyword">when</span> <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&gt;=</span> <span class="number">20</span> <span class="keyword">and</span></span><br><span class="line">                <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&lt;</span> <span class="number">24</span> <span class="keyword">then</span> <span class="string">&#x27;深夜&#x27;</span></span><br><span class="line">           <span class="keyword">when</span> <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&gt;=</span> <span class="number">0</span> <span class="keyword">and</span></span><br><span class="line">                <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&lt;</span> <span class="number">1</span> <span class="keyword">then</span> <span class="string">&#x27;凌晨&#x27;</span> <span class="keyword">end</span>,</span><br><span class="line">       date_format(order_time, <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)</span><br><span class="line"><span class="keyword">from</span> ods_didi.t_user_orderwhere length(order_time) <span class="operator">&gt;=</span> <span class="number">8</span>  <span class="keyword">and</span> dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> dw_didi.t_user_cancel_order</span><br><span class="line">(</span><br><span class="line">    orderId     string,</span><br><span class="line">    Profession  string,</span><br><span class="line">    age_range   string,</span><br><span class="line">    Reason      string,</span><br><span class="line">    cancel_time string</span><br><span class="line">) partitioned <span class="keyword">by</span> (dt string comment <span class="string">&#x27;2020-04-12&#x27;</span>)</span><br><span class="line">    <span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> dw_didi.t_user_cancel_order <span class="keyword">partition</span> (dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>)</span><br><span class="line"><span class="keyword">select</span> orderId, profession, age_range, reason, cancel_timefrom ods_didi.t_user_cancel_orderwhere dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> dw_didi.t_user_pay_order</span><br><span class="line">(</span><br><span class="line">    id             string comment <span class="string">&#x27;支付订单ID&#x27;</span>,</span><br><span class="line">    orderId        string comment <span class="string">&#x27;订单ID&#x27;</span>,</span><br><span class="line">    real_pay_money <span class="keyword">double</span> comment <span class="string">&#x27;实际支付总额&#x27;</span>,</span><br><span class="line">    has_coupon     <span class="type">int</span> comment <span class="string">&#x27;是否使用优惠券（0 - 不使用、1 - 使用）&#x27;</span>,</span><br><span class="line">    pay_way        <span class="type">int</span> comment <span class="string">&#x27;支付方式（0-微信支付、1-支付宝支付、3-QQ钱包支付、4- 一网通银行卡支付）&#x27;</span>,</span><br><span class="line">    mileage        <span class="keyword">double</span> comment <span class="string">&#x27;里程（单位公里）&#x27;</span>,</span><br><span class="line">    pay_time       string comment <span class="string">&#x27;支付时间&#x27;</span></span><br><span class="line">) partitioned <span class="keyword">by</span> (dt string comment <span class="string">&#x27;2020-04-12&#x27;</span>) <span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> dw_didi.t_user_pay_order <span class="keyword">partition</span> (dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>)</span><br><span class="line"><span class="keyword">select</span> id,</span><br><span class="line">       orderId,</span><br><span class="line">       real_pay_money,</span><br><span class="line">       has_coupon,</span><br><span class="line">       pay_way,</span><br><span class="line">       mileage,</span><br><span class="line">       pay_timefrom ods_didi.t_user_pay_orderwhere dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> dw_didi.t_user_evaluate</span><br><span class="line">(</span><br><span class="line">    id        string comment <span class="string">&#x27;评价日志唯一ID&#x27;</span>,</span><br><span class="line">    orderId   string comment <span class="string">&#x27;订单ID&#x27;</span>,</span><br><span class="line">    eva_level <span class="type">int</span> comment <span class="string">&#x27;评价等级（1 - 一颗星、... 5 - 五星）&#x27;</span>,</span><br><span class="line">    eva_time  string comment <span class="string">&#x27;评价时间&#x27;</span></span><br><span class="line">) partitioned <span class="keyword">by</span> (dt string comment <span class="string">&#x27;时间分区&#x27;</span>) <span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> dw_didi.t_user_evaluate <span class="keyword">partition</span> (dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>)</span><br><span class="line"><span class="keyword">select</span> id, orderId, eva_level, eva_timefrom ods_didi.t_user_evaluatewhere dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>;</span><br><span class="line"><span class="comment">-- 4.数据处理</span></span><br><span class="line"><span class="comment">-- 4.1 总订单笔数分析</span></span><br><span class="line"><span class="comment">-- 4.1.1计算4.12的总订单笔数分析</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(dt) <span class="keyword">as</span> `时间`, <span class="built_in">count</span>(orderid) `订单总笔数`</span><br><span class="line"><span class="keyword">from</span> dw_didi.t_user_order_widewhere dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>;</span><br><span class="line"><span class="comment">--建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_didi.t_order_total</span><br><span class="line">(</span><br><span class="line">    date_val string comment <span class="string">&#x27;日期(yyyy-MM-dd)&#x27;</span>,</span><br><span class="line">    count    <span class="type">int</span> comment <span class="string">&#x27;订单笔数&#x27;</span></span><br><span class="line">) partitioned <span class="keyword">by</span> (<span class="keyword">month</span> string comment <span class="string">&#x27;按月分区yyyy-MM&#x27;</span>)</span><br><span class="line">    <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"><span class="comment">--加载数据据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span> app_didi.t_order_total <span class="keyword">partition</span> (<span class="keyword">month</span> <span class="operator">=</span> <span class="string">&#x27;2020-04&#x27;</span>)</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(dt) <span class="keyword">as</span> `时间`, <span class="built_in">count</span>(orderid) <span class="keyword">as</span> `订单时间`</span><br><span class="line"><span class="keyword">from</span> dw_didi.t_user_order_widewhere dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>;</span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> app_didi.t_order_total;</span><br><span class="line"><span class="comment">-- 4.2 预约订单/非预约订单占比分析-- sum,avg,max,min-- 预约单/总单*100%</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> cnt_totalfrom dw_didi.t_user_order_widewhere dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(order_date)       <span class="keyword">as</span> `日期`,</span><br><span class="line">       subscribe_name        <span class="keyword">as</span> `是否预约`,</span><br><span class="line">       <span class="built_in">count</span>(subscribe_name) <span class="keyword">as</span> cntfrom dw_didi.t_user_order_widewhere dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> subscribe_name;</span><br><span class="line"><span class="comment">--左连接</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> <span class="built_in">max</span>(order_date) <span class="keyword">as</span> `日期`, subscribe_name <span class="keyword">as</span> `是否预约`, <span class="built_in">count</span>(subscribe_name) <span class="keyword">as</span> cnt</span><br><span class="line">      <span class="keyword">from</span> dw_didi.t_user_order_wide</span><br><span class="line">      <span class="keyword">where</span> dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span></span><br><span class="line">      <span class="keyword">group</span> <span class="keyword">by</span> subscribe_name) t1</span><br><span class="line">         <span class="keyword">left</span> <span class="keyword">join</span> (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> cnt_total <span class="keyword">from</span> dw_didi.t_user_order_wide <span class="keyword">where</span> dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>) t2;</span><br><span class="line"><span class="comment">-- 隐式内连接</span></span><br><span class="line"><span class="keyword">select</span> `日期`, `是否预约`, concat(round(cnt <span class="operator">/</span> cnt_total <span class="operator">*</span> <span class="number">100</span>, <span class="number">2</span>), <span class="string">&#x27;%&#x27;</span>) <span class="keyword">as</span> `百分比`</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> <span class="built_in">max</span>(order_date) <span class="keyword">as</span> `日期`, subscribe_name <span class="keyword">as</span> `是否预约`, <span class="built_in">count</span>(subscribe_name) <span class="keyword">as</span> cnt</span><br><span class="line">      <span class="keyword">from</span> dw_didi.t_user_order_wide</span><br><span class="line">      <span class="keyword">where</span> dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span></span><br><span class="line">      <span class="keyword">group</span> <span class="keyword">by</span> subscribe_name) t1,</span><br><span class="line">     (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> cnt_total <span class="keyword">from</span> dw_didi.t_user_order_wide <span class="keyword">where</span> dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>) t2;</span><br><span class="line"><span class="comment">--开窗函数</span></span><br><span class="line"><span class="keyword">select</span> order_date     <span class="keyword">as</span>                                        `日期`,</span><br><span class="line">       subscribe_name <span class="keyword">as</span>                                        `是否预约`,</span><br><span class="line">       <span class="built_in">count</span>(subscribe_name) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> subscribe_name) cnt,</span><br><span class="line">       <span class="built_in">count</span>() <span class="keyword">over</span> ()                                          cnt_totalfrom dw_didi.t_user_order_widewhere dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>;</span><br><span class="line"><span class="comment">-- group by subscribe_name;</span></span><br><span class="line"><span class="comment">--开窗函数2</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(`日期`) <span class="keyword">as</span> `日期`, `是否预约`, concat(round(<span class="built_in">max</span>(cnt) <span class="operator">/</span> <span class="built_in">max</span>(cnt_total) <span class="operator">*</span> <span class="number">100</span>, <span class="number">2</span>), <span class="string">&#x27;%&#x27;</span>) `百分比`</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> order_date     <span class="keyword">as</span>                                        `日期`,</span><br><span class="line">             subscribe_name <span class="keyword">as</span>                                        `是否预约`,</span><br><span class="line">             <span class="built_in">count</span>(subscribe_name) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> subscribe_name) cnt,</span><br><span class="line">             <span class="built_in">count</span>() <span class="keyword">over</span> ()                                          cnt_total</span><br><span class="line">      <span class="keyword">from</span> dw_didi.t_user_order_wide</span><br><span class="line">      <span class="keyword">where</span> dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>) tgroup <span class="keyword">by</span> `是否预约`;</span><br><span class="line"><span class="comment">--方法三</span></span><br><span class="line"><span class="keyword">select</span> `日期`, `是否预约`, concat(round((cnt <span class="operator">/</span> <span class="built_in">sum</span>(cnt) <span class="keyword">over</span> ()) <span class="operator">*</span> <span class="number">100</span>, <span class="number">2</span>), <span class="string">&#x27;%&#x27;</span>) `百分比`</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> <span class="built_in">max</span>(order_date) <span class="keyword">as</span> `日期`, subscribe_name <span class="keyword">as</span> `是否预约`, <span class="built_in">count</span>(subscribe_name) <span class="keyword">as</span> cnt</span><br><span class="line">      <span class="keyword">from</span> dw_didi.t_user_order_wide</span><br><span class="line">      <span class="keyword">where</span> dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span></span><br><span class="line">      <span class="keyword">group</span> <span class="keyword">by</span> subscribe_name) t;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_didi.t_order_subscribe_percent</span><br><span class="line">(</span><br><span class="line">    date_val       string comment <span class="string">&#x27;日期&#x27;</span>,</span><br><span class="line">    subscribe_name string comment <span class="string">&#x27;是否预约&#x27;</span>,</span><br><span class="line">    percent_val    string comment <span class="string">&#x27;百分比&#x27;</span></span><br><span class="line">) partitioned <span class="keyword">by</span> (<span class="keyword">month</span> string comment <span class="string">&#x27;年月yyyy-MM&#x27;</span>) <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> `日期`,</span><br><span class="line">       `是否预约`,</span><br><span class="line">       cnt <span class="operator">/</span> <span class="built_in">sum</span>(cnt) <span class="keyword">over</span> () <span class="operator">*</span></span><br><span class="line">       <span class="number">100</span><span class="keyword">from</span>(<span class="keyword">select</span> <span class="built_in">max</span>(order_date)       <span class="keyword">as</span> `日期`, subscribe_name <span class="keyword">as</span> `是否预约`, <span class="built_in">count</span>(subscribe_name) <span class="keyword">as</span> cnt      <span class="keyword">from</span> dw_didi.t_user_order_wide      <span class="keyword">where</span> dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>      <span class="keyword">group</span> <span class="keyword">by</span> subscribe_name) t;</span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> app_didi.t_order_subscribe_percent <span class="keyword">partition</span> (<span class="keyword">month</span> <span class="operator">=</span> <span class="string">&#x27;2020-04&#x27;</span>)</span><br><span class="line"><span class="keyword">select</span> `日期`, `是否预约`, concat(round((cnt <span class="operator">/</span> <span class="built_in">sum</span>(cnt) <span class="keyword">over</span> ()) <span class="operator">*</span> <span class="number">100</span>, <span class="number">2</span>), <span class="string">&#x27;%&#x27;</span>) `百分比`</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> <span class="built_in">max</span>(order_date) <span class="keyword">as</span> `日期`, subscribe_name <span class="keyword">as</span> `是否预约`, <span class="built_in">count</span>(subscribe_name) <span class="keyword">as</span> cnt</span><br><span class="line">      <span class="keyword">from</span> dw_didi.t_user_order_wide</span><br><span class="line">      <span class="keyword">where</span> dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span></span><br><span class="line">      <span class="keyword">group</span> <span class="keyword">by</span> subscribe_name) t;</span><br><span class="line"><span class="comment">-- 4.3不同时段订单的个数</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_didi.t_order_timerange_total</span><br><span class="line">(</span><br><span class="line">    datetime  string comment <span class="string">&#x27;日期&#x27;</span>,</span><br><span class="line">    timerange string comment <span class="string">&#x27;时间段&#x27;</span>,</span><br><span class="line">    count     <span class="type">int</span> comment <span class="string">&#x27;订单数量&#x27;</span></span><br><span class="line">) partitioned <span class="keyword">by</span> (<span class="keyword">month</span> string comment <span class="string">&#x27;年月，yyyy-MM&#x27;</span>)</span><br><span class="line">    <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"><span class="comment">--sql</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(dt), order_time_range, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> order_cntfrom dw_didi.t_user_order_widewhere dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> order_time_range;</span><br><span class="line"><span class="comment">--加载数据</span></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> app_didi.t_order_timerange_total <span class="keyword">partition</span> (<span class="keyword">month</span> <span class="operator">=</span> <span class="string">&#x27;2020-04&#x27;</span>)</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(dt), order_time_range, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> order_cntfrom dw_didi.t_user_order_widewhere dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> order_time_range;</span><br><span class="line"><span class="comment">--4.4不同年龄段、时段订单个数</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(dt),</span><br><span class="line">       age_range,</span><br><span class="line">       order_time_range,</span><br><span class="line">       <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> order_cntfrom dw_didi.t_user_order_widewhere dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> age_range, order_time_range;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_didi.t_order_age_and_time_range_total</span><br><span class="line">(</span><br><span class="line">    datetime         string comment <span class="string">&#x27;日期&#x27;</span>,</span><br><span class="line">    age_range        string comment <span class="string">&#x27;年龄段&#x27;</span>,</span><br><span class="line">    order_time_range string comment <span class="string">&#x27;时段&#x27;</span>,</span><br><span class="line">    count            <span class="type">int</span> comment <span class="string">&#x27;订单数量&#x27;</span></span><br><span class="line">) partitioned <span class="keyword">by</span> (<span class="keyword">month</span> string comment <span class="string">&#x27;年月，yyyy-MM&#x27;</span>) <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> app_didi.t_order_age_and_time_range_total <span class="keyword">partition</span> (<span class="keyword">month</span> <span class="operator">=</span> <span class="string">&#x27;2020-04&#x27;</span>)</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(dt),</span><br><span class="line">       age_range,</span><br><span class="line">       order_time_range,</span><br><span class="line">       <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> order_cntfrom dw_didi.t_user_order_widewhere dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> age_range, order_time_range;</span><br><span class="line"><span class="comment">--4.4不同地域订单个数</span></span><br><span class="line"><span class="keyword">select</span> province, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> order_cntfrom dw_didi.t_user_order_widewhere dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> province;</span><br><span class="line"><span class="comment">--建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_didi.t_order_province_total</span><br><span class="line">(</span><br><span class="line">    datetime string comment <span class="string">&#x27;日期&#x27;</span>,</span><br><span class="line">    province string comment <span class="string">&#x27;省份&#x27;</span>,</span><br><span class="line">    count    <span class="type">int</span> comment <span class="string">&#x27;订单数量&#x27;</span></span><br><span class="line">) partitioned <span class="keyword">by</span> (<span class="keyword">month</span> string comment <span class="string">&#x27;年月，yyyy-MM&#x27;</span>) <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> app_didi.t_order_province_total <span class="keyword">partition</span> (<span class="keyword">month</span> <span class="operator">=</span> <span class="string">&#x27;2020-04&#x27;</span>)</span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;2020-04-12&#x27;</span>, province, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> order_cntfrom dw_didi.t_user_order_widewhere dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> province;</span><br><span class="line"><span class="comment">-- 4.5求订单客户职业排名top5</span></span><br><span class="line"><span class="comment">-- 第一步 ：按职业分组求客户数量</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(dt), profession, <span class="built_in">count</span>(orderId)</span><br><span class="line"><span class="keyword">from</span> dw_didi.t_user_order_widewhere dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> profession;</span><br><span class="line"><span class="comment">-- 第二部 排名</span></span><br><span class="line"><span class="keyword">select</span> dt1, profession, cnt, <span class="built_in">row_number</span>() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> cnt <span class="keyword">desc</span> )</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> <span class="built_in">max</span>(dt) <span class="keyword">as</span> dt1, profession, <span class="built_in">count</span>(orderId) cnt</span><br><span class="line">      <span class="keyword">from</span> dw_didi.t_user_order_wide</span><br><span class="line">      <span class="keyword">where</span> dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span></span><br><span class="line">      <span class="keyword">group</span> <span class="keyword">by</span> profession) t;</span><br><span class="line"><span class="comment">-- 取前五</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> dt1, profession, cnt, <span class="built_in">row_number</span>() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> cnt <span class="keyword">desc</span> ) <span class="keyword">as</span> rk</span><br><span class="line">      <span class="keyword">from</span> (<span class="keyword">select</span> <span class="built_in">max</span>(dt) <span class="keyword">as</span> dt1, profession, <span class="built_in">count</span>(orderId) cnt</span><br><span class="line">            <span class="keyword">from</span> dw_didi.t_user_order_wide</span><br><span class="line">            <span class="keyword">where</span> dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span></span><br><span class="line">            <span class="keyword">group</span> <span class="keyword">by</span> profession) t1) t2where rk <span class="operator">&lt;=</span> <span class="number">5</span>;</span><br><span class="line"><span class="keyword">with</span> t1 <span class="keyword">as</span> (<span class="keyword">select</span> <span class="built_in">max</span>(dt) dt1, profession, <span class="built_in">count</span>(orderId) cnt</span><br><span class="line">            <span class="keyword">from</span> dw_didi.t_user_order_wide</span><br><span class="line">            <span class="keyword">where</span> dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span></span><br><span class="line">            <span class="keyword">group</span> <span class="keyword">by</span> profession),</span><br><span class="line">     t2 <span class="keyword">as</span> (<span class="keyword">select</span> dt1, profession, cnt, <span class="built_in">row_number</span>() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> cnt <span class="keyword">desc</span> ) <span class="keyword">as</span> rk <span class="keyword">from</span> t1)</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> t2where rk<span class="operator">&lt;=</span><span class="number">5</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> t.profession, t.cnt, <span class="built_in">rank</span>() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> t.cnt <span class="keyword">desc</span> ) <span class="keyword">as</span> rk</span><br><span class="line">      <span class="keyword">from</span> (<span class="keyword">select</span> profession, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> cnt</span><br><span class="line">            <span class="keyword">from</span> dw_didi.t_user_order_wide</span><br><span class="line">            <span class="keyword">group</span> <span class="keyword">by</span> profession) t) ttwhere tt.rk <span class="operator">&lt;=</span> <span class="number">5</span>;</span><br><span class="line"><span class="comment">--建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_didi.t_order_profession_total_topn</span><br><span class="line">(</span><br><span class="line">    profession string comment <span class="string">&#x27;职业&#x27;</span>,</span><br><span class="line">    Order_cnt  <span class="type">int</span> comment <span class="string">&#x27;订单数量&#x27;</span>,</span><br><span class="line">    rk         <span class="type">int</span> comment <span class="string">&#x27;排名&#x27;</span></span><br><span class="line">) partitioned <span class="keyword">by</span> (<span class="keyword">month</span> string comment <span class="string">&#x27;年月，yyyy-MM&#x27;</span>) <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"><span class="comment">--加载数据</span></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> app_didi.t_order_profession_total_topn <span class="keyword">partition</span> (<span class="keyword">month</span> <span class="operator">=</span> <span class="string">&#x27;2020-04&#x27;</span>)</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> t.profession, t.cnt, <span class="built_in">rank</span>() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> t.cnt <span class="keyword">desc</span> ) <span class="keyword">as</span> rk</span><br><span class="line">      <span class="keyword">from</span> (<span class="keyword">select</span> profession, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> cnt</span><br><span class="line">            <span class="keyword">from</span> dw_didi.t_user_order_wide</span><br><span class="line">            <span class="keyword">group</span> <span class="keyword">by</span> profession) t) ttwhere tt.rk <span class="operator">&lt;=</span> <span class="number">5</span>;</span><br><span class="line"><span class="comment">--4.6用户订单取消占比</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;2020-04-12&#x27;</span>                                                date_val,</span><br><span class="line">       concat(round(t1.total_cnt <span class="operator">/</span> t2.total_cnt <span class="operator">*</span> <span class="number">100</span>, <span class="number">2</span>), <span class="string">&#x27;%&#x27;</span>) <span class="keyword">as</span> cancel_order_percentfrom (<span class="keyword">select</span> <span class="built_in">count</span>(orderid) <span class="keyword">as</span> total_cnt      <span class="keyword">from</span> ods_didi.t_user_cancel_order      <span class="keyword">where</span> dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>) t1        , (<span class="keyword">select</span> <span class="built_in">count</span>(orderid) <span class="keyword">as</span> total_cnt</span><br><span class="line">                                                                                                                                                                                                                  <span class="keyword">from</span> dw_didi.t_user_order_wide</span><br><span class="line">                                                                                                                                                                                                                  <span class="keyword">where</span> dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>) t2;</span><br><span class="line"><span class="comment">--创建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_didi.t_order_cancel_order_percent</span><br><span class="line">(</span><br><span class="line">    datetime             string comment <span class="string">&#x27;日期&#x27;</span>,</span><br><span class="line">    cancel_order_percent string comment <span class="string">&#x27;百分比&#x27;</span></span><br><span class="line">) partitioned <span class="keyword">by</span> (<span class="keyword">month</span> string comment <span class="string">&#x27;年月，yyyy-MM&#x27;</span>) <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"><span class="comment">--加载数据</span></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> app_didi.t_order_cancel_order_percent <span class="keyword">partition</span> (<span class="keyword">month</span> <span class="operator">=</span> <span class="string">&#x27;2020-04&#x27;</span>)</span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;2020-04-12&#x27;</span>                                                date_val,</span><br><span class="line">       concat(round(t1.total_cnt <span class="operator">/</span> t2.total_cnt <span class="operator">*</span> <span class="number">100</span>, <span class="number">2</span>), <span class="string">&#x27;%&#x27;</span>) <span class="keyword">as</span> percent_valfrom (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) total_cnt <span class="keyword">from</span> ods_didi.t_user_cancel_order <span class="keyword">where</span> dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>) t1        , (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) total_cnt</span><br><span class="line">                                                                                                                                                                                      <span class="keyword">from</span> dw_didi.t_user_order_wide</span><br><span class="line">                                                                                                                                                                                      <span class="keyword">where</span> dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>) t2;</span><br><span class="line"><span class="comment">-- 4.8统计用户取消订单原因top1</span></span><br><span class="line"><span class="keyword">with</span> t1 <span class="keyword">as</span> (<span class="keyword">select</span> reason, profession, <span class="built_in">count</span>(reason) <span class="keyword">over</span> () cnt</span><br><span class="line">            <span class="keyword">from</span> dw_didi.t_user_cancel_order</span><br><span class="line">            <span class="keyword">where</span> dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>),</span><br><span class="line">     t2 <span class="keyword">as</span> (<span class="keyword">select</span> reason, profession, cnt, <span class="built_in">row_number</span>() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> cnt <span class="keyword">desc</span>) <span class="keyword">as</span> rk <span class="keyword">from</span> t1)</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> t2where rk<span class="operator">&lt;=</span><span class="number">5</span>;</span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> app_didi.t_order_cancel_reason <span class="keyword">partition</span> (<span class="keyword">month</span> <span class="operator">=</span> <span class="string">&#x27;2020-04&#x27;</span>)</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> t.profession, t.cnt, <span class="built_in">rank</span>() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> t.cnt <span class="keyword">desc</span> ) <span class="keyword">as</span> rk</span><br><span class="line">      <span class="keyword">from</span> (<span class="keyword">select</span> profession, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> cnt</span><br><span class="line">            <span class="keyword">from</span> dw_didi.t_user_cancel_order</span><br><span class="line">            <span class="keyword">group</span> <span class="keyword">by</span> profession) t) ttwhere tt.rk <span class="operator">&lt;=</span> <span class="number">5</span>;</span><br><span class="line"><span class="comment">--建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_didi.t_order_cancel_reason</span><br><span class="line">(</span><br><span class="line">    profession string comment <span class="string">&#x27;职业&#x27;</span>,</span><br><span class="line">    cancel_cnt <span class="type">int</span> comment <span class="string">&#x27;订单数量&#x27;</span>,</span><br><span class="line">    rk         <span class="type">int</span> comment <span class="string">&#x27;排名&#x27;</span></span><br><span class="line">) partitioned <span class="keyword">by</span> (<span class="keyword">month</span> string comment <span class="string">&#x27;年月，yyyy-MM&#x27;</span>) <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"><span class="comment">--统计每个省订单量最高的城市top3</span></span><br><span class="line"><span class="keyword">select</span> city, <span class="built_in">count</span>(city)</span><br><span class="line"><span class="keyword">from</span> dw_didi.t_user_order_widewhere length(city) <span class="operator">&gt;</span> <span class="number">0</span><span class="keyword">group</span> <span class="keyword">by</span>  city;</span><br><span class="line"><span class="comment">--建表</span></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> app_didi.t_order_city <span class="keyword">partition</span> (<span class="keyword">month</span> <span class="operator">=</span> <span class="string">&#x27;2020-04&#x27;</span>)</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> t.city, t.cnt, <span class="built_in">rank</span>() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> t.cnt <span class="keyword">desc</span> ) <span class="keyword">as</span> rk</span><br><span class="line">      <span class="keyword">from</span> (<span class="keyword">select</span> city, <span class="built_in">count</span>(city) <span class="keyword">as</span> cnt</span><br><span class="line">            <span class="keyword">from</span> dw_didi.t_user_order_wide</span><br><span class="line">            <span class="keyword">where</span> length(city) <span class="operator">&gt;</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">group</span> <span class="keyword">by</span> city) t) ttwhere tt.rk <span class="operator">&lt;=</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_didi.t_order_city</span><br><span class="line">(</span><br><span class="line">    city      string comment <span class="string">&#x27;城市&#x27;</span>,</span><br><span class="line">    order_cnt <span class="type">int</span> comment <span class="string">&#x27;订单数量&#x27;</span>,</span><br><span class="line">    rk        <span class="type">int</span> comment <span class="string">&#x27;排名&#x27;</span></span><br><span class="line">) partitioned <span class="keyword">by</span> (<span class="keyword">month</span> string comment <span class="string">&#x27;年月，yyyy-MM&#x27;</span>)</span><br><span class="line">    <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"><span class="comment">--统计订单支付中使用优惠券的百分比</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_didi.t_order_dicount</span><br><span class="line">(</span><br><span class="line">    isdicount string comment <span class="string">&#x27;是否使用优惠券&#x27;</span>,</span><br><span class="line">    order_cnt string comment <span class="string">&#x27;百分比&#x27;</span></span><br><span class="line">) partitioned <span class="keyword">by</span> (<span class="keyword">month</span> string comment <span class="string">&#x27;年月，yyyy-MM&#x27;</span>) <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> app_didi.t_order_dicount <span class="keyword">partition</span> (<span class="keyword">month</span> <span class="operator">=</span> <span class="string">&#x27;2020-04&#x27;</span>)</span><br><span class="line"><span class="keyword">select</span> `是否使用优惠券`, concat(round((cnt <span class="operator">/</span> <span class="built_in">sum</span>(cnt) <span class="keyword">over</span> ()) <span class="operator">*</span> <span class="number">100</span>, <span class="number">2</span>), <span class="string">&#x27;%&#x27;</span>) `百分比`</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> has_coupon <span class="keyword">as</span> `是否使用优惠券`, <span class="built_in">count</span>(has_coupon) <span class="keyword">as</span> cnt</span><br><span class="line">      <span class="keyword">from</span> dw_didi.t_user_pay_order</span><br><span class="line">      <span class="keyword">where</span> has_coupon <span class="operator">!=</span> <span class="number">17</span></span><br><span class="line">      <span class="keyword">group</span> <span class="keyword">by</span> has_coupon) t;</span><br><span class="line"><span class="comment">--统计用户五星级好评的百分比</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_didi.t_order_five_start</span><br><span class="line">(</span><br><span class="line">    fivestart string comment <span class="string">&#x27;是否是5&#x27;</span>,</span><br><span class="line">    order_cnt string comment <span class="string">&#x27;百分比&#x27;</span></span><br><span class="line">) partitioned <span class="keyword">by</span> (<span class="keyword">month</span> string comment <span class="string">&#x27;年月，yyyy-MM&#x27;</span>) <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> app_didi.t_order_five_start <span class="keyword">partition</span> (<span class="keyword">month</span> <span class="operator">=</span> <span class="string">&#x27;2020-04&#x27;</span>)</span><br><span class="line"><span class="keyword">select</span> `是否是<span class="number">5</span>`, concat(round((cnt <span class="operator">/</span> <span class="built_in">sum</span>(cnt) <span class="keyword">over</span> ()) <span class="operator">*</span> <span class="number">100</span>, <span class="number">2</span>), <span class="string">&#x27;%&#x27;</span>) `百分比`</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> eva_level <span class="keyword">as</span> `是否是<span class="number">5</span>`, <span class="built_in">count</span>(eva_level) <span class="keyword">as</span> cnt</span><br><span class="line">      <span class="keyword">from</span> dw_didi.t_user_evaluate</span><br><span class="line">      <span class="keyword">where</span> length(eva_level) <span class="operator">&gt;</span> <span class="number">0</span></span><br><span class="line">      <span class="keyword">group</span> <span class="keyword">by</span> eva_level) t;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database app_edu_chat;</span><br><span class="line">use app_edu_chat;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_edu_chat.total_year</span><br><span class="line">(</span><br><span class="line">    date_year       <span class="type">varchar</span>(<span class="number">20</span>) comment <span class="string">&#x27;年份&#x27;</span>,</span><br><span class="line">    date_day   <span class="type">varchar</span>(<span class="number">20</span>) comment  <span class="string">&#x27;日&#x27;</span>,</span><br><span class="line">    total_pel  <span class="type">varchar</span>(<span class="number">20</span>) comment  <span class="string">&#x27;访问客户量&#x27;</span></span><br><span class="line">);</span><br><span class="line">sqoop export \</span><br><span class="line"><span class="comment">--connect jdbc:mysql://192.168.52.161:3306/app_edu_chat \</span></span><br><span class="line"><span class="comment">--username root \</span></span><br><span class="line"><span class="comment">--password 123456 \</span></span><br><span class="line"><span class="comment">--table total_year \</span></span><br><span class="line"><span class="comment">--export-dir /user/hive/warehouse/app_edu.db/total_year/dt=2019</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_edu_chat.total_quater</span><br><span class="line">(</span><br><span class="line">    date_year   <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    date_quater <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    date_day    <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    total_pel   <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">)</span><br><span class="line">    sqoop export \</span><br><span class="line"><span class="comment">--connect jdbc:mysql://192.168.52.161:3306/app_edu_chat \</span></span><br><span class="line"><span class="comment">--username root \</span></span><br><span class="line"><span class="comment">--password 123456 \</span></span><br><span class="line"><span class="comment">--table total_quater \</span></span><br><span class="line"><span class="comment">--export-dir /user/hive/warehouse/app_edu.db/total_quater/dt=2019</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_edu_chat.total_month</span><br><span class="line">(</span><br><span class="line">    date_year  <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    date_month <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    date_day   <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    total_pel  <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line">sqoop export \</span><br><span class="line"><span class="comment">--connect jdbc:mysql://192.168.52.161:3306/app_edu_chat \</span></span><br><span class="line"><span class="comment">--username root \</span></span><br><span class="line"><span class="comment">--password 123456 \</span></span><br><span class="line"><span class="comment">--table total_month \</span></span><br><span class="line"><span class="comment">--export-dir /user/hive/warehouse/app_edu.db/total_month/dt=2019</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_edu_chat.area_day</span><br><span class="line">(</span><br><span class="line">    date_year <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    date_day  <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    province  <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    total_pel <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">)</span><br><span class="line">    sqoop export \</span><br><span class="line"><span class="comment">--connect jdbc:mysql://192.168.52.161:3306/app_edu_chat \</span></span><br><span class="line"><span class="comment">--username root \</span></span><br><span class="line"><span class="comment">--password 123456 \</span></span><br><span class="line"><span class="comment">--table area_day \</span></span><br><span class="line"><span class="comment">--export-dir /user/hive/warehouse/app_edu.db/area_day/dt=2019</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_edu_chat.click_tender</span><br><span class="line">(</span><br><span class="line">    date_year     <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    date_month    <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    date_day      <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    province      <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    con_cnt <span class="type">int</span>,</span><br><span class="line">    percent_      <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">) ;</span><br><span class="line">sqoop export \</span><br><span class="line"><span class="comment">--connect jdbc:mysql://192.168.52.161:3306/app_edu_chat \</span></span><br><span class="line"><span class="comment">--username root \</span></span><br><span class="line"><span class="comment">--password 123456 \</span></span><br><span class="line"><span class="comment">--table click_tender \</span></span><br><span class="line"><span class="comment">--export-dir /user/hive/warehouse/app_edu.db/click_tender/dt=2019</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_edu_chat.vis_tender</span><br><span class="line">(</span><br><span class="line">    date_year      <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    date_month     <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    date_day       <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    con_cnt <span class="type">int</span>,</span><br><span class="line">    percent_       <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line">    sqoop export \</span><br><span class="line"><span class="comment">--connect jdbc:mysql://192.168.52.161:3306/app_edu_chat \</span></span><br><span class="line"><span class="comment">--username root \</span></span><br><span class="line"><span class="comment">--password 123456 \</span></span><br><span class="line"><span class="comment">--table vis_tender \</span></span><br><span class="line"><span class="comment">--export-dir /user/hive/warehouse/app_edu.db/vis_tender/dt=2019</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_edu_chat.vis_per_hour</span><br><span class="line">(</span><br><span class="line"></span><br><span class="line">    date_hour <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    con_cnt <span class="type">int</span></span><br><span class="line"></span><br><span class="line">);</span><br><span class="line">    sqoop export \</span><br><span class="line"><span class="comment">--connect jdbc:mysql://192.168.52.161:3306/app_edu_chat \</span></span><br><span class="line"><span class="comment">--username root \</span></span><br><span class="line"><span class="comment">--password 123456 \</span></span><br><span class="line"><span class="comment">--table vis_per_hour \</span></span><br><span class="line"><span class="comment">--export-dir /user/hive/warehouse/app_edu.db/vis_per_hour/dt=2019</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_edu_chat.dif_channel</span><br><span class="line">(</span><br><span class="line">    chennel_c       <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    visiting <span class="type">int</span>,</span><br><span class="line">    percent_        <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line">    sqoop export \</span><br><span class="line"><span class="comment">--connect jdbc:mysql://192.168.52.161:3306/app_edu_chat \</span></span><br><span class="line"><span class="comment">--username root \</span></span><br><span class="line"><span class="comment">--password 123456 \</span></span><br><span class="line"><span class="comment">--table dif_channel \</span></span><br><span class="line"><span class="comment">--export-dir /user/hive/warehouse/app_edu.db/dif_channel/dt=2019</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_edu_chat.dif_source</span><br><span class="line">(</span><br><span class="line">    source_c           <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    visit_count <span class="type">int</span>,</span><br><span class="line">    percent_           <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line">    sqoop export \</span><br><span class="line"><span class="comment">--connect jdbc:mysql://192.168.52.161:3306/app_edu_chat \</span></span><br><span class="line"><span class="comment">--username root \</span></span><br><span class="line"><span class="comment">--password 123456 \</span></span><br><span class="line"><span class="comment">--table dif_source \</span></span><br><span class="line"><span class="comment">--export-dir /user/hive/warehouse/app_edu.db/dif_source/dt=2019</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_edu_chat.top_web</span><br><span class="line">(</span><br><span class="line">    date_year      <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    date_month     <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    date_day       <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    brouse_name    <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    vis_cnt <span class="type">int</span></span><br><span class="line">)</span><br><span class="line">    sqoop export \</span><br><span class="line"><span class="comment">--connect jdbc:mysql://192.168.52.161:3306/app_edu_chat \</span></span><br><span class="line"><span class="comment">--username root \</span></span><br><span class="line"><span class="comment">--password 123456 \</span></span><br><span class="line"><span class="comment">--table top_web \</span></span><br><span class="line"><span class="comment">--export-dir /user/hive/warehouse/app_edu.db/top_web/dt=2019</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database ods_edu;</span><br><span class="line">use ods_edu;</span><br><span class="line"><span class="comment">-- create table if not exists</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> database dw_edu;</span><br><span class="line"><span class="keyword">create</span> database app_edu;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> dw_edu.t_edu_chat</span><br><span class="line">(</span><br><span class="line">    id                           <span class="type">int</span> comment <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">    create_date_time             <span class="type">timestamp</span> comment <span class="string">&#x27;数据创建时间&#x27;</span>,</span><br><span class="line">    sid                          string comment <span class="string">&#x27;访客id&#x27;</span>,</span><br><span class="line">    create_time                  <span class="type">timestamp</span> comment <span class="string">&#x27;会话创建时间&#x27;</span>,</span><br><span class="line">    seo_source                   string comment <span class="string">&#x27;搜索来源&#x27;</span>,</span><br><span class="line">    seo_keywords                 string comment <span class="string">&#x27;关键字&#x27;</span>,</span><br><span class="line">    ip                           string comment <span class="string">&#x27;IP地址&#x27;</span>,</span><br><span class="line">    area                         string comment <span class="string">&#x27;地域&#x27;</span>,</span><br><span class="line">    country                      string comment <span class="string">&#x27;所在国家&#x27;</span>,</span><br><span class="line">    province                     string comment <span class="string">&#x27;省&#x27;</span>,</span><br><span class="line">    city                         string comment <span class="string">&#x27;城市&#x27;</span>,</span><br><span class="line">    origin_channel               string comment <span class="string">&#x27;投放渠道&#x27;</span>,</span><br><span class="line">    `<span class="keyword">user</span>`                       string comment <span class="string">&#x27;所属坐席&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    manual_time                  <span class="type">timestamp</span> comment <span class="string">&#x27;人工开始时间&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    begin_time                   <span class="type">timestamp</span> comment <span class="string">&#x27;坐席领取时间 &#x27;</span>,</span><br><span class="line"></span><br><span class="line">    end_time                     <span class="type">timestamp</span> comment <span class="string">&#x27;会话结束时间&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    last_customer_msg_time_stamp <span class="type">timestamp</span> comment <span class="string">&#x27;客户最后一条消息的时间&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    last_agent_msg_time_stamp    <span class="type">timestamp</span> comment <span class="string">&#x27;坐席最后一下回复的时间&#x27;</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    reply_msg_count              <span class="type">int</span> comment <span class="string">&#x27;客服回复消息数&#x27;</span>,</span><br><span class="line">    msg_count                    <span class="type">int</span> comment <span class="string">&#x27;客户发送消息数&#x27;</span>,</span><br><span class="line">    browser_name                 string comment <span class="string">&#x27;浏览器名称&#x27;</span>,</span><br><span class="line">    os_info                      string comment <span class="string">&#x27;系统名称&#x27;</span></span><br><span class="line">) partitioned <span class="keyword">by</span> (dt string comment <span class="string">&#x27;2019&#x27;</span>)</span><br><span class="line">    <span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> dw_edu.t_edu_chat <span class="keyword">partition</span> (dt <span class="operator">=</span> <span class="string">&#x27;2019&#x27;</span>)</span><br><span class="line"><span class="keyword">select</span> id,</span><br><span class="line">       create_date_time,</span><br><span class="line">       sid,</span><br><span class="line">       create_time,</span><br><span class="line"></span><br><span class="line">       seo_source comment,</span><br><span class="line">       seo_keywords,</span><br><span class="line">       ip,</span><br><span class="line">       area,</span><br><span class="line">       country,</span><br><span class="line">       province,</span><br><span class="line">       city,</span><br><span class="line">       origin_channel,</span><br><span class="line">       `<span class="keyword">user</span>`,</span><br><span class="line">       manual_time,</span><br><span class="line"></span><br><span class="line">       begin_time,</span><br><span class="line"></span><br><span class="line">       end_time,</span><br><span class="line"></span><br><span class="line">       last_customer_msg_time_stamp,</span><br><span class="line"></span><br><span class="line">       last_agent_msg_time_stamp,</span><br><span class="line"></span><br><span class="line">       reply_msg_count,</span><br><span class="line">       msg_count,</span><br><span class="line">       browser_name,</span><br><span class="line">       os_info</span><br><span class="line"><span class="keyword">from</span> web_chat_ems_2019_07;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--1.总访问客户量</span></span><br><span class="line"><span class="comment">-- 1.1年日</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_edu.total_year</span><br><span class="line">(</span><br><span class="line">    date_year       string comment <span class="string">&#x27;年份&#x27;</span>,</span><br><span class="line">    date_day string comment <span class="string">&#x27;日&#x27;</span>,</span><br><span class="line">    total_pel   string comment <span class="string">&#x27;访问客户量&#x27;</span></span><br><span class="line">) partitioned <span class="keyword">by</span> (dt string comment <span class="string">&#x27;2019&#x27;</span>) <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> app_edu.total_year <span class="keyword">partition</span> (dt  <span class="operator">=</span><span class="string">&#x27;2019&#x27;</span>)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">YEAR</span>(create_time)   <span class="keyword">AS</span> `年份`,</span><br><span class="line">       <span class="keyword">DAY</span>(create_time)    <span class="keyword">AS</span> `日`,</span><br><span class="line">       <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> sid) <span class="keyword">AS</span> `访问客户量`</span><br><span class="line"><span class="keyword">FROM</span> dw_edu.t_edu_chat</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">YEAR</span>(create_time) <span class="keyword">BETWEEN</span> <span class="string">&#x27;2019&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;2020&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">YEAR</span>(create_time), <span class="keyword">DAY</span>(create_time)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">YEAR</span>(create_time), <span class="keyword">DAY</span>(create_time);</span><br><span class="line"><span class="comment">--1.2季度日</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_edu.total_quater</span><br><span class="line">(</span><br><span class="line">    date_year       string comment <span class="string">&#x27;年份&#x27;</span>,</span><br><span class="line">    date_quater string comment <span class="string">&#x27;季度&#x27;</span>,</span><br><span class="line">    date_day string comment <span class="string">&#x27;日&#x27;</span>,</span><br><span class="line">    total_pel   string comment <span class="string">&#x27;访问客户量&#x27;</span></span><br><span class="line">) partitioned <span class="keyword">by</span> (dt string comment <span class="string">&#x27;2019&#x27;</span>) <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> app_edu.total_quater <span class="keyword">partition</span> (dt  <span class="operator">=</span><span class="string">&#x27;2019&#x27;</span>)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(create_time)    <span class="keyword">AS</span> `年份`,</span><br><span class="line">       QUARTER(create_time) <span class="keyword">AS</span> `季度`,</span><br><span class="line">       <span class="keyword">DAY</span>(create_time)     <span class="keyword">AS</span> `日期`,</span><br><span class="line">       <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> sid)  <span class="keyword">AS</span> `访问客户量`</span><br><span class="line"><span class="keyword">FROM</span> dw_edu.t_edu_chat</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">YEAR</span>(create_time) <span class="operator">=</span> <span class="string">&#x27;2019&#x27;</span></span><br><span class="line">  <span class="keyword">AND</span> QUARTER(create_time) <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">4</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">YEAR</span>(create_time), QUARTER(create_time), <span class="keyword">DAY</span>(create_time)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">YEAR</span>(create_time), QUARTER(create_time), <span class="keyword">DAY</span>(create_time);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--1.3月日</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_edu.total_month</span><br><span class="line">(</span><br><span class="line">    date_year       string comment <span class="string">&#x27;年份&#x27;</span>,</span><br><span class="line">    date_month string comment <span class="string">&#x27;月份&#x27;</span>,</span><br><span class="line">    date_day string comment <span class="string">&#x27;日&#x27;</span>,</span><br><span class="line">    total_pel   string comment <span class="string">&#x27;访问客户量&#x27;</span></span><br><span class="line">) partitioned <span class="keyword">by</span> (dt string comment <span class="string">&#x27;2019&#x27;</span>) <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> app_edu.total_month <span class="keyword">partition</span> (dt  <span class="operator">=</span><span class="string">&#x27;2019&#x27;</span>)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(create_time)   <span class="keyword">AS</span> `年份`,</span><br><span class="line">       <span class="keyword">MONTH</span>(create_time)  <span class="keyword">AS</span> `月份`,</span><br><span class="line">       <span class="keyword">DAY</span>(create_time)    <span class="keyword">AS</span> `日`,</span><br><span class="line">       <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> sid) <span class="keyword">AS</span> `访问客户量`</span><br><span class="line"><span class="keyword">FROM</span> dw_edu.t_edu_chat</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">YEAR</span>(create_time) <span class="operator">=</span> <span class="string">&#x27;2019&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">YEAR</span>(create_time), <span class="keyword">MONTH</span>(create_time), <span class="keyword">DAY</span>(create_time)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">YEAR</span>(create_time), <span class="keyword">MONTH</span>(create_time), <span class="keyword">DAY</span>(create_time);</span><br><span class="line"><span class="comment">-- 2 地区独立访客热力图</span></span><br><span class="line"><span class="comment">-- 2.1.1 地区日</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_edu.area_day</span><br><span class="line">(</span><br><span class="line">    date_year       string comment <span class="string">&#x27;年份&#x27;</span>,</span><br><span class="line">    date_day string comment <span class="string">&#x27;日&#x27;</span>,</span><br><span class="line">    province string ,</span><br><span class="line">    total_pel   string comment <span class="string">&#x27;访问客户量&#x27;</span></span><br><span class="line">) partitioned <span class="keyword">by</span> (dt string comment <span class="string">&#x27;2019&#x27;</span>) <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> app_edu.area_day <span class="keyword">partition</span> (dt  <span class="operator">=</span><span class="string">&#x27;2019&#x27;</span>)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(create_time)   <span class="keyword">AS</span> `年份`,</span><br><span class="line">       <span class="keyword">DAY</span>(create_time)    <span class="keyword">AS</span> `日`,</span><br><span class="line">       province            <span class="keyword">AS</span> `省份`,</span><br><span class="line">       <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> sid) <span class="keyword">AS</span> `访问量`</span><br><span class="line"><span class="keyword">FROM</span> dw_edu.t_edu_chat</span><br><span class="line"><span class="keyword">WHERE</span> create_time <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">  <span class="keyword">and</span> <span class="keyword">YEAR</span>(create_time) <span class="keyword">BETWEEN</span> <span class="string">&#x27;2019&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;2020&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">YEAR</span>(create_time), <span class="keyword">DAY</span>(create_time), province</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">YEAR</span>(create_time), <span class="keyword">DAY</span>(create_time), province;</span><br><span class="line"><span class="comment">-- 2.2 地区月</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--2.2季度日</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(create_time)    <span class="keyword">AS</span> `年份`,</span><br><span class="line">       QUARTER(create_time) <span class="keyword">AS</span> `季度`,</span><br><span class="line">       <span class="keyword">DAY</span>(create_time)     <span class="keyword">AS</span> `日期`,</span><br><span class="line">       province             <span class="keyword">AS</span> `省份`,</span><br><span class="line">       <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> sid)  <span class="keyword">AS</span> `访问客户量`</span><br><span class="line"><span class="keyword">FROM</span> dw_edu.t_edu_chat</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">YEAR</span>(create_time) <span class="operator">=</span> <span class="string">&#x27;2019&#x27;</span></span><br><span class="line">  <span class="keyword">AND</span> QUARTER(create_time) <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">4</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">YEAR</span>(create_time), QUARTER(create_time), <span class="keyword">DAY</span>(create_time), province</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">YEAR</span>(create_time), QUARTER(create_time), <span class="keyword">DAY</span>(create_time), province;</span><br><span class="line"></span><br><span class="line"><span class="comment">--2.3 month</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(create_time)   <span class="keyword">AS</span> `年份`,</span><br><span class="line">       <span class="keyword">MONTH</span>(create_time)  <span class="keyword">AS</span> `月份`,</span><br><span class="line">       <span class="keyword">DAY</span>(create_time)    <span class="keyword">AS</span> `日期`,</span><br><span class="line">       province,</span><br><span class="line">       <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> sid) <span class="keyword">AS</span> `访问客户量`</span><br><span class="line"><span class="keyword">FROM</span> dw_edu.t_edu_chat</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">YEAR</span>(create_time) <span class="operator">=</span> <span class="string">&#x27;2019&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">YEAR</span>(create_time), <span class="keyword">MONTH</span>(create_time), <span class="keyword">DAY</span>(create_time), province</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">YEAR</span>(create_time), <span class="keyword">MONTH</span>(create_time), <span class="keyword">DAY</span>(create_time), province;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- SELECT province, COUNT(DISTINCT CASE WHEN msg_count &gt; 0 THEN sid END) AS `咨询人数`</span></span><br><span class="line"><span class="comment">-- FROM dw_edu.t_edu_chat</span></span><br><span class="line"><span class="comment">-- GROUP BY province;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3.访客咨询率趋势</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_edu.click_tender</span><br><span class="line">(</span><br><span class="line">    date_year       string comment <span class="string">&#x27;年份&#x27;</span>,</span><br><span class="line">    date_month string ,</span><br><span class="line">    date_day string,</span><br><span class="line">    province string ,</span><br><span class="line">    con_cnt <span class="type">int</span>,</span><br><span class="line">    percent_ string</span><br><span class="line"></span><br><span class="line">) partitioned <span class="keyword">by</span> (dt string comment <span class="string">&#x27;2019&#x27;</span>) <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> app_edu.click_tender <span class="keyword">partition</span> (dt  <span class="operator">=</span><span class="string">&#x27;2019&#x27;</span>)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">YEAR</span>(create_time)   <span class="keyword">AS</span> `年份`,</span><br><span class="line">    <span class="keyword">MONTH</span>(create_time)  <span class="keyword">AS</span> `月份`,</span><br><span class="line">    <span class="keyword">DAY</span>(create_time)    <span class="keyword">AS</span> `日期`,</span><br><span class="line">    province, <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> <span class="keyword">CASE</span> <span class="keyword">WHEN</span> msg_count <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">THEN</span> sid <span class="keyword">END</span>) <span class="keyword">AS</span> `咨询人数`,</span><br><span class="line">       concat(round(<span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> <span class="keyword">CASE</span> <span class="keyword">WHEN</span> msg_count <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">THEN</span> sid <span class="keyword">END</span>) <span class="operator">/</span> total.total_consultations <span class="operator">*</span> <span class="number">100</span>, <span class="number">2</span>), <span class="string">&#x27;%&#x27;</span>) <span class="keyword">as</span> `百分比`</span><br><span class="line"><span class="keyword">FROM</span> dw_edu.t_edu_chat</span><br><span class="line">         <span class="keyword">CROSS</span> <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> <span class="keyword">CASE</span> <span class="keyword">WHEN</span> msg_count <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">THEN</span> sid <span class="keyword">END</span>) <span class="keyword">AS</span> total_consultations <span class="keyword">FROM</span> dw_edu.t_edu_chat) <span class="keyword">AS</span> total</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">YEAR</span>(create_time), <span class="keyword">MONTH</span>(create_time), <span class="keyword">DAY</span>(create_time), province, total.total_consultations;</span><br><span class="line"></span><br><span class="line"><span class="comment">--4.客户访问量和访客咨询率双轴趋势</span></span><br><span class="line"><span class="comment">-- concat(round( COUNT(DISTINCT CASE WHEN msg_count &gt; 0 THEN sid END) / COUNT(DISTINCT sid) * 100, 2), &#x27;%&#x27;) as `百分比`</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_edu.vis_tender</span><br><span class="line">(</span><br><span class="line">    date_year       string comment <span class="string">&#x27;年份&#x27;</span>,</span><br><span class="line">    date_month string ,</span><br><span class="line">    date_day string,</span><br><span class="line">    con_cnt <span class="type">int</span>,</span><br><span class="line">    percent_ string</span><br><span class="line"></span><br><span class="line">) partitioned <span class="keyword">by</span> (dt string comment <span class="string">&#x27;2019&#x27;</span>) <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> app_edu.vis_tender <span class="keyword">partition</span> (dt  <span class="operator">=</span><span class="string">&#x27;2019&#x27;</span>)</span><br><span class="line"><span class="keyword">SELECT</span>     <span class="keyword">YEAR</span>(create_time)   <span class="keyword">AS</span> `年份`,</span><br><span class="line">           <span class="keyword">MONTH</span>(create_time)  <span class="keyword">AS</span> `月份`,</span><br><span class="line">           <span class="keyword">DAY</span>(create_time)    <span class="keyword">AS</span> `日期`,</span><br><span class="line">       <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> sid) <span class="keyword">AS</span> `客户访问量`,</span><br><span class="line">           concat(round( <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> <span class="keyword">CASE</span> <span class="keyword">WHEN</span> msg_count <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">THEN</span> sid <span class="keyword">END</span>) <span class="operator">/</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> sid) <span class="operator">*</span> <span class="number">100</span>, <span class="number">2</span>), <span class="string">&#x27;%&#x27;</span>)  <span class="keyword">AS</span> `咨询率`</span><br><span class="line"><span class="keyword">FROM</span> dw_edu.t_edu_chat</span><br><span class="line"><span class="comment">-- WHERE create_time BETWEEN &#x27;2019-01-01&#x27; AND &#x27;2020&#x27; -- 替换为实际的日期范围</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">YEAR</span>(create_time), <span class="keyword">MONTH</span>(create_time), <span class="keyword">DAY</span>(create_time);</span><br><span class="line"><span class="comment">-- 5.时间段访问客户量趋势</span></span><br><span class="line"><span class="comment">-- 指定时间段的起始日期和结束日期</span></span><br><span class="line"><span class="comment">-- DECLARE @start_date DATE = &#x27;开始日期&#x27;;</span></span><br><span class="line"><span class="comment">-- DECLARE @end_date DATE = &#x27;结束日期&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询指定时间段内每个小时的访问客户量</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_edu.vis_per_hour</span><br><span class="line">(</span><br><span class="line"></span><br><span class="line">    date_hour string,</span><br><span class="line">    con_cnt <span class="type">int</span></span><br><span class="line"></span><br><span class="line">) partitioned <span class="keyword">by</span> (dt string comment <span class="string">&#x27;2019&#x27;</span>) <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> app_edu.vis_per_hour <span class="keyword">partition</span> (dt  <span class="operator">=</span><span class="string">&#x27;2019&#x27;</span>)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">HOUR</span>(create_time) <span class="keyword">AS</span> `小时`,</span><br><span class="line">       <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> sid) <span class="keyword">AS</span> `访问客户量`</span><br><span class="line"><span class="keyword">FROM</span> dw_edu.t_edu_chat</span><br><span class="line"><span class="comment">-- WHERE create_date_time &gt;= @start_date AND create_date_time &lt;= @end_date</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">HOUR</span>(create_time)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">HOUR</span>(create_time);</span><br><span class="line"><span class="comment">-- 6.</span></span><br><span class="line"><span class="comment">-- 查询指定时间段内不同来源渠道和小时的访问客户量</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_edu.dif_channel</span><br><span class="line">(</span><br><span class="line">    chennel_c string,</span><br><span class="line">    visiting <span class="type">int</span>,</span><br><span class="line">    percent_ string</span><br><span class="line"></span><br><span class="line">) partitioned <span class="keyword">by</span> (dt string comment <span class="string">&#x27;2019&#x27;</span>) <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> app_edu.dif_channel <span class="keyword">partition</span> (dt  <span class="operator">=</span><span class="string">&#x27;2019&#x27;</span>)</span><br><span class="line"><span class="keyword">SELECT</span> origin_channel <span class="keyword">AS</span> `来源渠道`,</span><br><span class="line">       <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> sid) <span class="keyword">AS</span> `访问客户量`,</span><br><span class="line">       concat(round(        <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> sid) <span class="operator">*</span> <span class="number">100.0</span> <span class="operator">/</span> (</span><br><span class="line">           <span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> sid)</span><br><span class="line">           <span class="keyword">FROM</span> dw_edu.t_edu_chat</span><br><span class="line"></span><br><span class="line">       ) , <span class="number">2</span>), <span class="string">&#x27;%&#x27;</span>)   <span class="keyword">AS</span> `占比`</span><br><span class="line"><span class="keyword">FROM</span> dw_edu.t_edu_chat</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> origin_channel</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> origin_channel;</span><br><span class="line"><span class="comment">-- 7.</span></span><br><span class="line"><span class="comment">-- 指定时间段的起始日期和结束日期</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_edu.dif_source</span><br><span class="line">(</span><br><span class="line">    source_c string,</span><br><span class="line">visit_count <span class="type">int</span>,</span><br><span class="line">    percent_ string</span><br><span class="line"></span><br><span class="line">) partitioned <span class="keyword">by</span> (dt string comment <span class="string">&#x27;2019&#x27;</span>) <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> app_edu.dif_source <span class="keyword">partition</span> (dt  <span class="operator">=</span><span class="string">&#x27;2019&#x27;</span>)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    seo_source,</span><br><span class="line">    <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> sid) <span class="keyword">AS</span> visitor_count,</span><br><span class="line">    concat(round(    <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> sid) <span class="operator">*</span> <span class="number">100.0</span> <span class="operator">/</span> (</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> sid)</span><br><span class="line">        <span class="keyword">FROM</span> dw_edu.t_edu_chat</span><br><span class="line"></span><br><span class="line">    )  , <span class="number">2</span>), <span class="string">&#x27;%&#x27;</span>)   <span class="keyword">AS</span> visitor_ratio</span><br><span class="line"><span class="keyword">FROM</span> dw_edu.t_edu_chat</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> seo_source;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 8.</span></span><br><span class="line"><span class="comment">-- 查询访问客户量最多的页面排行榜</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_edu.top_web</span><br><span class="line">(</span><br><span class="line">    date_year       string comment <span class="string">&#x27;年份&#x27;</span>,</span><br><span class="line">    date_month string ,</span><br><span class="line">    date_day string,</span><br><span class="line">    brouse_name string,</span><br><span class="line">    vis_cnt <span class="type">int</span></span><br><span class="line"></span><br><span class="line">) partitioned <span class="keyword">by</span> (dt string comment <span class="string">&#x27;2019&#x27;</span>) <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> app_edu.top_web <span class="keyword">partition</span> (dt  <span class="operator">=</span><span class="string">&#x27;2019&#x27;</span>)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(create_time)   <span class="keyword">AS</span> `年份`,</span><br><span class="line">           <span class="keyword">MONTH</span>(create_time)  <span class="keyword">AS</span> `月份`,</span><br><span class="line">           <span class="keyword">DAY</span>(create_time)    <span class="keyword">AS</span> `日期`,</span><br><span class="line">    browser_name,</span><br><span class="line">    <span class="built_in">COUNT</span>(<span class="number">1</span>) <span class="keyword">AS</span> visitor_count</span><br><span class="line"><span class="keyword">FROM</span> ods_edu.web_chat_ems_2019_07</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> browser_name,<span class="keyword">YEAR</span>(create_time),<span class="keyword">MONTH</span>(create_time),<span class="keyword">DAY</span>(create_time)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> visitor_count <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 暑假实训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三、基本sql</title>
      <link href="/2023/07/03/%E4%B8%89%E3%80%81%E5%9F%BA%E6%9C%ACsql/"/>
      <url>/2023/07/03/%E4%B8%89%E3%80%81%E5%9F%BA%E6%9C%ACsql/</url>
      
        <content type="html"><![CDATA[<h3 id="一、数据库创建与删除"><a href="#一、数据库创建与删除" class="headerlink" title="一、数据库创建与删除"></a>一、数据库创建与删除</h3><h5 id="1-强制删除数据库"><a href="#1-强制删除数据库" class="headerlink" title="1.强制删除数据库"></a>1.强制删除数据库</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> database itcast  cascade;</span><br></pre></td></tr></table></figure><h5 id="2-创建数据库"><a href="#2-创建数据库" class="headerlink" title="2.创建数据库"></a>2.创建数据库</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> myhive;</span><br></pre></td></tr></table></figure><h5 id="3-切换使用数据库"><a href="#3-切换使用数据库" class="headerlink" title="3. 切换使用数据库"></a>3. 切换使用数据库</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use  myhive;</span><br></pre></td></tr></table></figure><h5 id="4-查看数据库详细信息"><a href="#4-查看数据库详细信息" class="headerlink" title="4. 查看数据库详细信息"></a>4. 查看数据库详细信息</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">desc</span>  database  myhive;</span><br></pre></td></tr></table></figure><p><img src="/images/heima/57.png" alt="1688351390598"></p><h5 id="5-删除数据库"><a href="#5-删除数据库" class="headerlink" title="5.删除数据库"></a>5.删除数据库</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span>  database  myhive;</span><br></pre></td></tr></table></figure><h5 id="6-查询当前数据库"><a href="#6-查询当前数据库" class="headerlink" title="6.查询当前数据库"></a>6.查询当前数据库</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> current_database();</span><br></pre></td></tr></table></figure><h3 id="二、数据库表"><a href="#二、数据库表" class="headerlink" title="二、数据库表"></a>二、数据库表</h3><h5 id="1-删除表"><a href="#1-删除表" class="headerlink" title="1.删除表"></a>1.删除表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> biao ;</span><br></pre></td></tr></table></figure><h5 id="2-创建表"><a href="#2-创建表" class="headerlink" title="2.创建表"></a>2.创建表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_archer(  id <span class="type">int</span> comment &quot;ID&quot;,</span><br><span class="line">                        name string comment &quot;英雄名称&quot;,</span><br><span class="line">                        hp_max <span class="type">int</span> comment &quot;最大生命&quot;,</span><br><span class="line">                         mp_max <span class="type">int</span> comment &quot;最大法力&quot;,</span><br><span class="line">                         attack_max <span class="type">int</span> comment &quot;最高物攻&quot;,</span><br><span class="line">                          defense_max <span class="type">int</span> comment &quot;最大物防&quot;,</span><br><span class="line">                            attack_range string comment &quot;攻击范围&quot;,</span><br><span class="line">                             role_main string comment &quot;主要定位&quot;,</span><br><span class="line">                             role_assist string comment &quot;次要定位&quot;</span><br><span class="line">) comment &quot;王者荣耀射手信息&quot;  <span class="type">row</span> format delimited</span><br><span class="line">fields terminated <span class="keyword">by</span> &quot;\t&quot;;</span><br></pre></td></tr></table></figure><h5 id="3-Hive建表时候的字段类型"><a href="#3-Hive建表时候的字段类型" class="headerlink" title="3.Hive建表时候的字段类型"></a>3.Hive建表时候的字段类型</h5><table><thead><tr><th><strong>分类</strong></th><th><strong>类型</strong></th><th><strong>描述</strong></th><th><strong>字面量示例</strong></th></tr></thead><tbody><tr><td>原始类型</td><td>BOOLEAN</td><td>true&#x2F;false</td><td>TRUE</td></tr><tr><td></td><td>TINYINT</td><td>1字节的有符号整数 -128~127</td><td>1Y</td></tr><tr><td></td><td>SMALLINT</td><td>2个字节的有符号整数，-32768~32767</td><td>1S</td></tr><tr><td></td><td>INT</td><td>4个字节的带符号整数</td><td>1</td></tr><tr><td></td><td>BIGINT</td><td>8字节带符号整数</td><td>1L</td></tr><tr><td></td><td>FLOAT</td><td>4字节单精度浮点数1.0</td><td></td></tr><tr><td></td><td>DOUBLE</td><td>8字节双精度浮点数</td><td>1.0</td></tr><tr><td></td><td>DEICIMAL</td><td>任意精度的带符号小数</td><td>1.0</td></tr><tr><td></td><td>STRING</td><td>字符串，变长</td><td>“a”,’b’</td></tr><tr><td></td><td>VARCHAR</td><td>变长字符串</td><td>“a”,’b’</td></tr><tr><td></td><td>CHAR</td><td>固定长度字符串</td><td>“a”,’b’</td></tr><tr><td></td><td>BINARY</td><td>字节数组</td><td>无法表示</td></tr><tr><td></td><td>TIMESTAMP</td><td>时间戳，毫秒值精度</td><td>122327493795</td></tr><tr><td></td><td>DATE</td><td>日期</td><td>‘2016-03-29’</td></tr><tr><td></td><td><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Types#LanguageManualTypes-Intervals">INTERVAL</a></td><td>时间频率间隔</td><td></td></tr><tr><td>复杂类型</td><td>ARRAY</td><td>有序的的同类型的集合</td><td>array(1,2)</td></tr><tr><td></td><td>MAP</td><td>key-value,key必须为原始类型，value可以任意类型</td><td>map(‘a’,1,’b’,2)</td></tr><tr><td></td><td>STRUCT</td><td>字段集合,类型可以不同</td><td>struct(‘1’,1,1.0),   named_stract(‘col1’,’1’,’col2’,1,’clo3’,1.0)</td></tr><tr><td></td><td>UNION</td><td>在有限取值范围内的一个值</td><td>create_union(1,’a’,63)</td></tr></tbody></table><h5 id="4-创建内部表"><a href="#4-创建内部表" class="headerlink" title="4.创建内部表"></a>4.创建内部表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">external</span> <span class="keyword">table</span> student_exter(</span><br><span class="line">sid string</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="5-根据查询结果创建表"><a href="#5-根据查询结果创建表" class="headerlink" title="5.根据查询结果创建表"></a>5.根据查询结果创建表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> student;</span><br><span class="line"><span class="keyword">select</span> sid,sname,sbirth,ssex <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure><h5 id="6-去重结果"><a href="#6-去重结果" class="headerlink" title="6.去重结果"></a>6.去重结果</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> ssex</span><br><span class="line"><span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> ssex,sname,sbirth</span><br><span class="line"><span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure><h5 id="7-根据已经存在的表结构创建表"><a href="#7-根据已经存在的表结构创建表" class="headerlink" title="7.根据已经存在的表结构创建表"></a>7.根据已经存在的表结构创建表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu4 <span class="keyword">like</span> stu2;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu4;</span><br><span class="line">注意: 只拷贝指定表的结构, 不拷贝表的数据 </span><br></pre></td></tr></table></figure><h5 id="8-查询表的类型"><a href="#8-查询表的类型" class="headerlink" title="8.查询表的类型"></a>8.查询表的类型</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">desc</span> formatted  stu2;</span><br></pre></td></tr></table></figure><p>显示表的简要信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">desc</span>  stu2;</span><br></pre></td></tr></table></figure><h5 id="9-数据装载载命令Load"><a href="#9-数据装载载命令Load" class="headerlink" title="9.数据装载载命令Load"></a>9.数据装载载命令Load</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load data [<span class="keyword">local</span>] inpath <span class="string">&#x27;/export/data/hive_data/student.txt&#x27;</span> [overwrite] <span class="keyword">into</span> <span class="keyword">table</span> student [<span class="keyword">partition</span> (partcol1<span class="operator">=</span>val1,…)];</span><br></pre></td></tr></table></figure><p>1、load data:表示加载数据</p><p>2、local: 表示从本地加载数据到hive表；否则从HDFS加载数据到hive表</p><p>3、inpath:表示加载数据的路径</p><p>4、overwrite:表示覆盖表中已有数据，否则表示追加</p><p>5、into table:表示加载到哪张表</p><p>6、student:表示具体的表</p><p>7、partition:表示上传到指定分区</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load data <span class="keyword">local</span> inpath <span class="string">&#x27;/export/data/didi/order.csv&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> ods_didi.t_user_order <span class="keyword">partition</span> (dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ssex</span><br><span class="line"><span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">all</span> ssex</span><br><span class="line"><span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 去重结果</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> ssex</span><br><span class="line"><span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> ssex,sname,sbirth</span><br><span class="line"><span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> student <span class="keyword">where</span> <span class="number">1</span><span class="operator">&gt;</span><span class="number">2</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> student <span class="keyword">where</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> student <span class="keyword">where</span> sname<span class="operator">=</span>&quot;李勇&quot;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> student <span class="keyword">where</span>  length(sname)<span class="operator">&gt;</span><span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> sid</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> (sid)<span class="operator">&gt;</span><span class="number">95005</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> sid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--4、聚合操作</span></span><br><span class="line"><span class="comment">--统计美国总共有多少个县county</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(sid) <span class="keyword">from</span> student;</span><br><span class="line"><span class="comment">--统计美国加州有多少个县</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(sid) <span class="keyword">from</span> student <span class="keyword">where</span> sname <span class="operator">=</span> &quot;李峰&quot;;</span><br><span class="line"><span class="comment">--统计德州总死亡病例数</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(sid) <span class="keyword">from</span> student <span class="keyword">where</span> sname <span class="operator">=</span> &quot;李峰&quot;;</span><br><span class="line"><span class="comment">--统计出美国最高确诊病例数是哪个县  select max(cases) from t_usa_covid19;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- --5、GROUP BY</span></span><br><span class="line"><span class="comment">-- --根据state州进行分组 统计每个州有多少个县county</span></span><br><span class="line"><span class="comment">-- select count(county) from student where count_date = &quot;2021-01-28&quot; group by state;</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- --想看一下统计的结果是属于哪一个州的</span></span><br><span class="line"><span class="comment">-- select state,count(county) from student where count_date = &quot;2021-01-28&quot; group by state;</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- --再想看一下每个县的死亡病例数，我们猜想很简单呀把deaths字段加上返回真实情况如何呢？</span></span><br><span class="line"><span class="comment">-- select state,count(county),deaths fromstudent where count_date = &quot;2021-01-28&quot; group by state;</span></span><br><span class="line"><span class="comment">-- --很尴尬 sql报错了org.apache.hadoop.hive.ql.parse.SemanticException:Line 1:27 Expression not in GROUP BY key &#x27;deaths&#x27;</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- --为什么会报错？？group by的语法限制</span></span><br><span class="line"><span class="comment">-- --结论：出现在GROUP BY中select_expr的字段：要么是GROUP BY分组的字段；要么是被聚合函数应用的字段。</span></span><br><span class="line"><span class="comment">-- --deaths不是分组字段 报错</span></span><br><span class="line"><span class="comment">-- --state是分组字段 可以直接出现在select_expr中</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- --被聚合函数应用</span></span><br><span class="line"><span class="comment">-- select state,count(county),sum(deaths) from t_usa_covid19 where count_date = &quot;2021-01-28&quot; group by state;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">------------String Functions 字符串函数------------</span></span><br><span class="line"><span class="keyword">select</span> length(&quot;itcast&quot;);</span><br><span class="line"><span class="keyword">select</span> reverse(&quot;itcast&quot;);</span><br><span class="line"><span class="keyword">select</span> concat(&quot;angela&quot;,&quot;baby&quot;);</span><br><span class="line"><span class="comment">--带分隔符字符串连接函数：concat_ws(separator, [string | array(string)]+)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> concat_ws(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;www&#x27;</span>, <span class="keyword">array</span>(<span class="string">&#x27;itcast&#x27;</span>, <span class="string">&#x27;cn&#x27;</span>));</span><br><span class="line"><span class="comment">--字符串截取函数：substr(str, pos[, len]) 或者 substring(str, pos[, len])</span></span><br><span class="line"><span class="keyword">select</span> substr(&quot;angelababy&quot;,<span class="number">-2</span>); <span class="comment">--pos是从1开始的索引，如果为负数则倒着数</span></span><br><span class="line"><span class="keyword">select</span> substr(&quot;angelababy&quot;,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line"><span class="comment">--分割字符串函数: split(str, regex)</span></span><br><span class="line"><span class="operator">-</span><span class="keyword">select</span> split(<span class="string">&#x27;apache hive&#x27;</span>, <span class="string">&#x27; &#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">----------- Date Functions 日期函数 -----------------</span></span><br><span class="line"><span class="comment">--获取当前日期: current_date</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">current_date</span>();</span><br><span class="line"><span class="comment">--获取当前UNIX时间戳函数: unix_timestamp</span></span><br><span class="line"><span class="keyword">select</span> unix_timestamp();</span><br><span class="line"><span class="comment">--日期转UNIX时间戳函数: unix_timestamp</span></span><br><span class="line"><span class="keyword">select</span> unix_timestamp(&quot;2011-12-07 13:01:03&quot;);</span><br><span class="line"><span class="comment">--指定格式日期转UNIX时间戳函数: unix_timestamp</span></span><br><span class="line"><span class="keyword">select</span> unix_timestamp(<span class="string">&#x27;20111207 13:01:03&#x27;</span>,<span class="string">&#x27;yyyyMMdd HH:mm:ss&#x27;</span>);</span><br><span class="line"><span class="comment">--UNIX时间戳转日期函数: from_unixtime</span></span><br><span class="line"><span class="keyword">select</span> from_unixtime(<span class="number">1618238391</span>);</span><br><span class="line"><span class="keyword">select</span> from_unixtime(<span class="number">0</span>, <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>);</span><br><span class="line"><span class="comment">--日期比较函数: datediff 日期格式要求&#x27;yyyy-MM-dd HH:mm:ss&#x27; or &#x27;yyyy-MM-dd&#x27;</span></span><br><span class="line"><span class="keyword">select</span> datediff(<span class="string">&#x27;2012-12-08&#x27;</span>,<span class="string">&#x27;2012-05-09&#x27;</span>);</span><br><span class="line"><span class="comment">--日期增加函数: date_add</span></span><br><span class="line"><span class="keyword">select</span> date_add(<span class="string">&#x27;2012-02-28&#x27;</span>,<span class="number">10</span>);</span><br><span class="line"><span class="comment">--日期减少函数: date_sub</span></span><br><span class="line"><span class="keyword">select</span> date_sub(<span class="string">&#x27;2012-01-1&#x27;</span>,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">----Mathematical Functions 数学函数-------------</span></span><br><span class="line"><span class="comment">--取整函数: round  返回double类型的整数值部分 （遵循四舍五入）</span></span><br><span class="line"><span class="keyword">select</span> round(<span class="number">3.1415926</span>);</span><br><span class="line"><span class="comment">--指定精度取整函数: round(double a, int d) 返回指定精度d的double类型</span></span><br><span class="line"><span class="keyword">select</span> round(<span class="number">3.1415926</span>,<span class="number">4</span>);</span><br><span class="line"><span class="comment">--取随机数函数: rand 每次执行都不一样 返回一个0到1范围内的随机数</span></span><br><span class="line"><span class="keyword">select</span> rand();</span><br><span class="line"><span class="comment">--指定种子取随机数函数: rand(int seed) 得到一个稳定的随机数序列</span></span><br><span class="line"><span class="keyword">select</span> rand(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-----Conditional Functions 条件函数------------------</span></span><br><span class="line"><span class="comment">--使用之前课程创建好的student表数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student limit <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--if条件判断: if(boolean testCondition, T valueTrue, T valueFalseOrNull)</span></span><br><span class="line"><span class="keyword">select</span> if(<span class="number">1</span><span class="operator">=</span><span class="number">2</span>,<span class="number">100</span>,<span class="number">200</span>);</span><br><span class="line"><span class="keyword">select</span> if(sex <span class="operator">=</span><span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;W&#x27;</span>) <span class="keyword">from</span> student limit <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--空值转换函数: nvl(T value, T default_value)</span></span><br><span class="line"><span class="keyword">select</span> nvl(&quot;allen&quot;,&quot;itcast&quot;);</span><br><span class="line"><span class="keyword">select</span> nvl(<span class="keyword">null</span>,&quot;itcast&quot;);</span><br><span class="line"></span><br><span class="line"><span class="comment">--条件转换函数: CASE a WHEN b THEN c [WHEN d THEN e]* [ELSE f] END</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">case</span> <span class="number">100</span> <span class="keyword">when</span> <span class="number">50</span> <span class="keyword">then</span> <span class="string">&#x27;tom&#x27;</span> <span class="keyword">when</span> <span class="number">100</span> <span class="keyword">then</span> <span class="string">&#x27;mary&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;tim&#x27;</span> <span class="keyword">end</span>;  <span class="keyword">select</span> <span class="keyword">case</span> sex <span class="keyword">when</span> <span class="string">&#x27;男&#x27;</span> <span class="keyword">then</span> <span class="string">&#x27;male&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;female&#x27;</span> <span class="keyword">end</span> <span class="keyword">from</span> student limit <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> user_access (</span><br><span class="line">     group_id string,</span><br><span class="line">     createtime string, <span class="comment">--day</span></span><br><span class="line">     pv <span class="type">int</span></span><br><span class="line">)<span class="type">row</span> format DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line">load data <span class="keyword">local</span> inpath <span class="string">&#x27;/export/data/hivedata/group_access.txt&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> user_access;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> group_id, createtime, pv,</span><br><span class="line">       <span class="built_in">rank</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> createtime <span class="keyword">order</span> <span class="keyword">by</span> pv <span class="keyword">desc</span>) <span class="keyword">AS</span> rn1,</span><br><span class="line">       <span class="built_in">dense_rank</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> createtime <span class="keyword">order</span> <span class="keyword">by</span> pv <span class="keyword">desc</span>) <span class="keyword">as</span> rn2,</span><br><span class="line">       <span class="built_in">row_number</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> createtime <span class="keyword">order</span> <span class="keyword">by</span> pv <span class="keyword">desc</span>) <span class="keyword">as</span> rn3 <span class="keyword">from</span> user_access;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> group_id, createtime, pv,</span><br><span class="line">       <span class="built_in">rank</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> createtime <span class="keyword">order</span> <span class="keyword">by</span> pv <span class="keyword">desc</span>) <span class="keyword">AS</span> rn1,</span><br><span class="line">       <span class="built_in">dense_rank</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> createtime <span class="keyword">order</span> <span class="keyword">by</span> pv <span class="keyword">desc</span>) <span class="keyword">as</span> rn2,</span><br><span class="line">       <span class="built_in">row_number</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> createtime <span class="keyword">order</span> <span class="keyword">by</span> pv <span class="keyword">desc</span>) <span class="keyword">as</span> rn3 <span class="keyword">from</span> user_access;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>sqoop import  <br>–connect jdbc:mysql:&#x2F;&#x2F;node1:3306&#x2F;<br>–username root  <br>–password 123456 <br>–table web_chat_ems_2019_07  <br>–warehouse-dir  &#x2F;user&#x2F;hive&#x2F;warehouse  –hive-database ods_edu  <br>–hive-import  <br>–hive-table web_chat_ems_2019_07</p>]]></content>
      
      
      <categories>
          
          <category> 暑假实训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四、一些sql操作</title>
      <link href="/2023/07/01/2023.7.1/"/>
      <url>/2023/07/01/2023.7.1/</url>
      
        <content type="html"><![CDATA[<p>静态分区</p><p><img src="/images/heima/36.png" alt="1688174613774"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 静态分区</span><br><span class="line">#添加 </span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> t_user_order_wide <span class="keyword">add</span> <span class="keyword">partition</span>(dt<span class="operator">=</span><span class="string">&#x27;2020-04-12&#x27;</span>)</span><br><span class="line">#删除</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> t_user_order_wide <span class="keyword">drop</span> <span class="keyword">partition</span>(dt<span class="operator">=</span><span class="string">&#x27;2020-04-12&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/heima/37.png" alt="1688174904462"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--动态分区</span></span><br><span class="line">load dat <span class="keyword">local</span> inpath <span class="string">&#x27;&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> t_user_order_wide <span class="keyword">partition</span>();</span><br></pre></td></tr></table></figure><p><img src="/images/heima/38.png" alt="1688175021930"></p><p><img src="/images/heima/39.png" alt="1688175061960"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 追加</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span> student2</span><br><span class="line"><span class="keyword">select</span> sid,</span><br><span class="line">name,</span><br><span class="line">if(sage<span class="operator">&gt;=</span><span class="number">19</span>,<span class="string">&#x27;一班&#x27;</span>,<span class="string">&#x27;二班&#x27;</span>)</span><br><span class="line"><span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--复写</span></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> student2</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">sid ,</span><br><span class="line">sname,</span><br><span class="line">if(sage<span class="operator">&gt;=</span><span class="number">19</span>,<span class="string">&#x27;一班&#x27;</span>,<span class="string">&#x27;二班&#x27;</span>)</span><br><span class="line"><span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure><p>例子</p><p><img src="/images/heima/40.png" alt="1688176266372"></p><p><img src="/images/heima/41.png" alt="1688176315289"></p><p><img src="/images/heima/42.png" alt="1688176460796"></p><p><img src="/images/heima/43.png" alt="1688176541640"></p><p><img src="/images/heima/44.png" alt="1688176559583"></p><p>删除数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> score3;</span><br></pre></td></tr></table></figure><p><img src="/images/heima/45.png" alt="1688176710299"></p><p><img src="/images/heima/46.png" alt="1688176812655"></p><p><img src="/images/heima/47.png" alt="1688177060783"></p><p><img src="/images/heima/48.png" alt="1688177088582">复制表结构</p><p><img src="/images/heima/49.png" alt="1688177517555"></p><p>分桶</p><p><img src="/images/heima/50.png" alt="1688177665812"></p><p><img src="/images/heima/51.png" alt="1688180101660"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1.数据仓库构建</span></span><br><span class="line"><span class="comment">-- 1.1创建ods库</span></span><br><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> ods_didi;</span><br><span class="line"><span class="comment">-- 1.2创建dw数据库</span></span><br><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> dw_didi;</span><br><span class="line"><span class="comment">-- 1.3创建app数据库</span></span><br><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> app_didi;</span><br><span class="line"></span><br><span class="line">use ods_didi;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2.在ods层创建表</span></span><br><span class="line"><span class="comment">-- 2.1创建订单结构表</span></span><br><span class="line"><span class="comment">-- 创建用户订单表结构</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> ods_didi.t_user_order</span><br><span class="line">(</span><br><span class="line">    orderId         string comment <span class="string">&#x27;订单id&#x27;</span>,</span><br><span class="line">    telephone       string comment <span class="string">&#x27;打车用户手机&#x27;</span>,</span><br><span class="line">    lng             string comment <span class="string">&#x27;用户发起打车的经度&#x27;</span>,</span><br><span class="line">    lat             string comment <span class="string">&#x27;用户发起打车的纬度&#x27;</span>,</span><br><span class="line">    province        string comment <span class="string">&#x27;所在省份&#x27;</span>,</span><br><span class="line">    city            string comment <span class="string">&#x27;所在城市&#x27;</span>,</span><br><span class="line">    es_money        <span class="keyword">double</span> comment <span class="string">&#x27;预估打车费用&#x27;</span>,</span><br><span class="line">    gender          string comment <span class="string">&#x27;用户信息 - 性别&#x27;</span>,</span><br><span class="line">    profession      string comment <span class="string">&#x27;用户信息 - 行业&#x27;</span>,</span><br><span class="line">    age_range       string comment <span class="string">&#x27;年龄段（70后、80后、...）&#x27;</span>,</span><br><span class="line">    tip             <span class="keyword">double</span> comment <span class="string">&#x27;小费&#x27;</span>,</span><br><span class="line">    subscribe       <span class="type">int</span> comment <span class="string">&#x27;是否预约（0 - 非预约、1 - 预约）&#x27;</span>,</span><br><span class="line">    sub_time        string comment <span class="string">&#x27;预约时间&#x27;</span>,</span><br><span class="line">    is_agent        <span class="type">int</span> comment <span class="string">&#x27;是否代叫（0 - 本人、1 - 代叫）&#x27;</span>,</span><br><span class="line">    agent_telephone string comment <span class="string">&#x27;预约人手机&#x27;</span>,</span><br><span class="line">    order_time      string comment <span class="string">&#x27;订单时间&#x27;</span></span><br><span class="line">)</span><br><span class="line">    partitioned <span class="keyword">by</span> (dt string comment <span class="string">&#x27;时间分区&#x27;</span>)</span><br><span class="line">    <span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ods创建取消订单表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> ods_didi.t_user_cancel_order</span><br><span class="line">(</span><br><span class="line">    orderId        string comment <span class="string">&#x27;订单ID&#x27;</span>,</span><br><span class="line">    cstm_telephone string comment <span class="string">&#x27;客户联系电话&#x27;</span>,</span><br><span class="line">    lng            string comment <span class="string">&#x27;取消订单的经度&#x27;</span>,</span><br><span class="line">    lat            string comment <span class="string">&#x27;取消订单的纬度&#x27;</span>,</span><br><span class="line">    province       string comment <span class="string">&#x27;所在省份&#x27;</span>,</span><br><span class="line">    city           string comment <span class="string">&#x27;所在城市&#x27;</span>,</span><br><span class="line">    es_distance    <span class="keyword">double</span> comment <span class="string">&#x27;预估距离&#x27;</span>,</span><br><span class="line">    gender         string comment <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">    profession     string comment <span class="string">&#x27;行业&#x27;</span>,</span><br><span class="line">    age_range      string comment <span class="string">&#x27;年龄段&#x27;</span>,</span><br><span class="line">    reason         <span class="type">int</span> comment <span class="string">&#x27;取消订单原因（1 - 选择了其他交通方式、2 - 与司机达成一致，取消订单、3 - 投诉司机没来接我、4 - 已不需要用车、5 - 无理由取消订单）&#x27;</span>,</span><br><span class="line">    cancel_time    string comment <span class="string">&#x27;取消时间&#x27;</span></span><br><span class="line">)</span><br><span class="line">    partitioned <span class="keyword">by</span> (dt string comment <span class="string">&#x27;时间分区&#x27;</span>)</span><br><span class="line">    <span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ods创建订单表支付表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> ods_didi.t_user_pay_order</span><br><span class="line">(</span><br><span class="line">    id                         string comment <span class="string">&#x27;支付订单ID&#x27;</span>,</span><br><span class="line">    orderId                    string comment <span class="string">&#x27;订单ID&#x27;</span>,</span><br><span class="line">    lng                        string comment <span class="string">&#x27;目的地的经度（支付地址）&#x27;</span>,</span><br><span class="line">    lat                        string comment <span class="string">&#x27;目的地的纬度（支付地址）&#x27;</span>,</span><br><span class="line">    province                   string comment <span class="string">&#x27;省份&#x27;</span>,</span><br><span class="line">    city                       string comment <span class="string">&#x27;城市&#x27;</span>,</span><br><span class="line">    total_money                <span class="keyword">double</span> comment <span class="string">&#x27;车费总价&#x27;</span>,</span><br><span class="line">    real_pay_money             <span class="keyword">double</span> comment <span class="string">&#x27;实际支付总额&#x27;</span>,</span><br><span class="line">    passenger_additional_money <span class="keyword">double</span> comment <span class="string">&#x27;乘客额外加价&#x27;</span>,</span><br><span class="line">    base_money                 <span class="keyword">double</span> comment <span class="string">&#x27;车费合计&#x27;</span>,</span><br><span class="line">    has_coupon                 <span class="type">int</span> comment <span class="string">&#x27;是否使用优惠券（0 - 不使用、1 - 使用）&#x27;</span>,</span><br><span class="line">    coupon_total               <span class="keyword">double</span> comment <span class="string">&#x27;优惠券合计&#x27;</span>,</span><br><span class="line">    pay_way                    <span class="type">int</span> comment <span class="string">&#x27;支付方式（0 - 微信支付、1 - 支付宝支付、3 - QQ钱包支付、4 - 一网通银行卡支付）&#x27;</span>,</span><br><span class="line">    mileage                    <span class="keyword">double</span> comment <span class="string">&#x27;里程（单位公里）&#x27;</span>,</span><br><span class="line">    pay_time                   string comment <span class="string">&#x27;支付时间&#x27;</span></span><br><span class="line">)</span><br><span class="line">    partitioned <span class="keyword">by</span> (dt string comment <span class="string">&#x27;时间分区&#x27;</span>)</span><br><span class="line">    <span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"><span class="comment">-- ods创建用户评价表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> ods_didi.t_user_evaluate</span><br><span class="line">(</span><br><span class="line">    id                  string comment <span class="string">&#x27;评价日志唯一ID&#x27;</span>,</span><br><span class="line">    orderId             string comment <span class="string">&#x27;订单ID&#x27;</span>,</span><br><span class="line">    passenger_telephone string comment <span class="string">&#x27;用户电话&#x27;</span>,</span><br><span class="line">    passenger_province  string comment <span class="string">&#x27;用户所在省份&#x27;</span>,</span><br><span class="line">    passenger_city      string comment <span class="string">&#x27;用户所在城市&#x27;</span>,</span><br><span class="line">    eva_level           <span class="type">int</span> comment <span class="string">&#x27;评价等级（1 - 一颗星、... 5 - 五星）&#x27;</span>,</span><br><span class="line">    eva_time            string comment <span class="string">&#x27;评价时间&#x27;</span></span><br><span class="line">)</span><br><span class="line">    partitioned <span class="keyword">by</span> (dt string comment <span class="string">&#x27;时间分区&#x27;</span>)</span><br><span class="line">    <span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"><span class="comment">-- 创建数据仓库 导入数据</span></span><br><span class="line">load data <span class="keyword">local</span> inpath <span class="string">&#x27;/export/data/didi/order.csv&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> ods_didi.t_user_order <span class="keyword">partition</span> (dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>);</span><br><span class="line"></span><br><span class="line">load data <span class="keyword">local</span> inpath <span class="string">&#x27;/export/data/didi/cancel_order.csv&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> ods_didi.t_user_cancel_order <span class="keyword">partition</span> (dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>);</span><br><span class="line"></span><br><span class="line">load data <span class="keyword">local</span> inpath <span class="string">&#x27;/export/data/didi/pay.csv&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> ods_didi.t_user_pay_order <span class="keyword">partition</span> (dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>);</span><br><span class="line"></span><br><span class="line">load data <span class="keyword">local</span> inpath <span class="string">&#x27;/export/data/didi/evaluate.csv&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> ods_didi.t_user_evaluate <span class="keyword">partition</span> (dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>);</span><br><span class="line"><span class="comment">-- truncate table dw_didi.t_user_pay_order;</span></span><br><span class="line"><span class="comment">-- 3.在dw层进行数据预处理</span></span><br><span class="line">use dw_didi;</span><br><span class="line"><span class="comment">-- 创建宽表语句</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> dw_didi.t_user_order_wide</span><br><span class="line">(</span><br><span class="line">    orderId          string comment <span class="string">&#x27;订单id&#x27;</span>,</span><br><span class="line">    telephone        string comment <span class="string">&#x27;打车用户手机&#x27;</span>,</span><br><span class="line">    lng              string comment <span class="string">&#x27;用户发起打车的经度&#x27;</span>,</span><br><span class="line">    lat              string comment <span class="string">&#x27;用户发起打车的纬度&#x27;</span>,</span><br><span class="line">    province         string comment <span class="string">&#x27;所在省份&#x27;</span>,</span><br><span class="line">    city             string comment <span class="string">&#x27;所在城市&#x27;</span>,</span><br><span class="line">    es_money         <span class="keyword">double</span> comment <span class="string">&#x27;预估打车费用&#x27;</span>,</span><br><span class="line">    gender           string comment <span class="string">&#x27;用户信息 - 性别&#x27;</span>,</span><br><span class="line">    profession       string comment <span class="string">&#x27;用户信息 - 行业&#x27;</span>,</span><br><span class="line">    age_range        string comment <span class="string">&#x27;年龄段（70后、80后、...）&#x27;</span>,</span><br><span class="line">    tip              <span class="keyword">double</span> comment <span class="string">&#x27;小费&#x27;</span>,</span><br><span class="line">    subscribe        <span class="type">int</span> comment <span class="string">&#x27;是否预约（0 - 非预约、1 - 预约）&#x27;</span>,</span><br><span class="line">    subscribe_name   string comment <span class="string">&#x27;是否预约名称&#x27;</span>,</span><br><span class="line">    sub_time         string comment <span class="string">&#x27;预约时间&#x27;</span>,</span><br><span class="line">    is_agent         <span class="type">int</span> comment <span class="string">&#x27;是否代叫（0 - 本人、1 - 代叫）&#x27;</span>,</span><br><span class="line">    is_agent_name    string comment <span class="string">&#x27;是否代缴名称&#x27;</span>,</span><br><span class="line">    agent_telephone  string comment <span class="string">&#x27;预约人手机&#x27;</span>,</span><br><span class="line">    order_time       string comment <span class="string">&#x27;订单时间&#x27;</span>,</span><br><span class="line">    order_date       string comment <span class="string">&#x27;订单时间，yyyy-MM-dd&#x27;</span>,</span><br><span class="line">    order_year       string comment <span class="string">&#x27;年&#x27;</span>,</span><br><span class="line">    order_month      string comment <span class="string">&#x27;月&#x27;</span>,</span><br><span class="line">    order_day        string comment <span class="string">&#x27;日&#x27;</span>,</span><br><span class="line">    order_hour       string comment <span class="string">&#x27;小时&#x27;</span>,</span><br><span class="line">    order_time_range string comment <span class="string">&#x27;时间段&#x27;</span></span><br><span class="line"></span><br><span class="line">)</span><br><span class="line">    partitioned <span class="keyword">by</span> (dt string comment <span class="string">&#x27;2020-04-12&#x27;</span>)</span><br><span class="line">    <span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 预处理sql语句 用户订单处理</span></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> dw_didi.t_user_order_wide <span class="keyword">partition</span> (dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>)</span><br><span class="line"><span class="keyword">select</span> orderid,</span><br><span class="line">       telephone,</span><br><span class="line">       lng,</span><br><span class="line">       lat,</span><br><span class="line">       province,</span><br><span class="line">       city,</span><br><span class="line">       es_money,</span><br><span class="line">       gender,</span><br><span class="line">       profession,</span><br><span class="line">       age_range,</span><br><span class="line">       tip,</span><br><span class="line">       subscribe,</span><br><span class="line"><span class="comment">--        if(nvl(subscribe, 0) = 0, &#x27;非预约&#x27;, &#x27;预约&#x27;)                   as subscribe_name,</span></span><br><span class="line">       <span class="keyword">case</span></span><br><span class="line">           <span class="keyword">when</span> subscribe <span class="operator">=</span> <span class="number">0</span> <span class="keyword">or</span> (subscribe <span class="keyword">is</span> <span class="keyword">null</span>) <span class="keyword">then</span> <span class="string">&#x27;非预约&#x27;</span></span><br><span class="line">           <span class="keyword">when</span> subscribe <span class="operator">=</span> <span class="number">1</span> <span class="keyword">then</span> <span class="string">&#x27;预约&#x27;</span></span><br><span class="line">           <span class="keyword">end</span>                                                             <span class="keyword">as</span> subscribe_name,</span><br><span class="line">       date_format(sub_time, <span class="string">&#x27;yyyy-MM-dd&#x27;</span>)                                 <span class="keyword">as</span> sub_time,</span><br><span class="line">       is_agent,</span><br><span class="line">       <span class="keyword">case</span></span><br><span class="line">           <span class="keyword">when</span> is_agent <span class="operator">=</span> <span class="number">0</span> <span class="keyword">or</span> (subscribe <span class="keyword">is</span> <span class="keyword">null</span>) <span class="keyword">then</span> <span class="string">&#x27;本人&#x27;</span></span><br><span class="line">           <span class="keyword">when</span> is_agent <span class="operator">=</span> <span class="number">1</span> <span class="keyword">then</span> <span class="string">&#x27;代叫&#x27;</span></span><br><span class="line">           <span class="keyword">end</span>                                                             <span class="keyword">as</span> is_agent_name,</span><br><span class="line">       agent_telephone,</span><br><span class="line"><span class="comment">--        substr(order_time, 1, 4)                                      as year,</span></span><br><span class="line">       date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)       <span class="keyword">as</span> order_time,</span><br><span class="line">       date_format(order_time, <span class="string">&#x27;yyyy-MM-dd&#x27;</span>)                               <span class="keyword">as</span> order_data,</span><br><span class="line">       <span class="keyword">year</span>(date_format(order_time, <span class="string">&#x27;yyyy-MM-dd&#x27;</span>))                         <span class="keyword">as</span> order_year,</span><br><span class="line">       <span class="keyword">month</span>(date_format(order_time, <span class="string">&#x27;yyyy-MM-dd&#x27;</span>))                        <span class="keyword">as</span> order_month,</span><br><span class="line">       <span class="keyword">day</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>))  <span class="keyword">as</span> order_day,</span><br><span class="line">       <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="keyword">as</span> order_hour,</span><br><span class="line">       <span class="keyword">case</span></span><br><span class="line">           <span class="keyword">when</span> <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&gt;=</span> <span class="number">1</span> <span class="keyword">and</span></span><br><span class="line">                <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&lt;</span> <span class="number">5</span> <span class="keyword">then</span> <span class="string">&#x27;凌晨&#x27;</span></span><br><span class="line">           <span class="keyword">when</span> <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&gt;=</span> <span class="number">5</span> <span class="keyword">and</span></span><br><span class="line">                <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&lt;</span> <span class="number">8</span> <span class="keyword">then</span> <span class="string">&#x27;早上&#x27;</span></span><br><span class="line">           <span class="keyword">when</span> <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&gt;=</span> <span class="number">8</span> <span class="keyword">and</span></span><br><span class="line">                <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&lt;</span> <span class="number">11</span> <span class="keyword">then</span> <span class="string">&#x27;上午&#x27;</span></span><br><span class="line">           <span class="keyword">when</span> <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&gt;=</span> <span class="number">11</span> <span class="keyword">and</span></span><br><span class="line">                <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&lt;</span> <span class="number">13</span> <span class="keyword">then</span> <span class="string">&#x27;中午&#x27;</span></span><br><span class="line">           <span class="keyword">when</span> <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&gt;=</span> <span class="number">13</span> <span class="keyword">and</span></span><br><span class="line">                <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&lt;</span> <span class="number">17</span> <span class="keyword">then</span> <span class="string">&#x27;下午&#x27;</span></span><br><span class="line">           <span class="keyword">when</span> <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&gt;=</span> <span class="number">17</span> <span class="keyword">and</span></span><br><span class="line">                <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&lt;</span> <span class="number">19</span> <span class="keyword">then</span> <span class="string">&#x27;晚上&#x27;</span></span><br><span class="line">           <span class="keyword">when</span> <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&gt;=</span> <span class="number">19</span> <span class="keyword">and</span></span><br><span class="line">                <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&lt;</span> <span class="number">20</span> <span class="keyword">then</span> <span class="string">&#x27;半夜&#x27;</span></span><br><span class="line">           <span class="keyword">when</span> <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&gt;=</span> <span class="number">20</span> <span class="keyword">and</span></span><br><span class="line">                <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&lt;</span> <span class="number">24</span> <span class="keyword">then</span> <span class="string">&#x27;深夜&#x27;</span></span><br><span class="line">           <span class="keyword">when</span> <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&gt;=</span> <span class="number">0</span> <span class="keyword">and</span></span><br><span class="line">                <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&lt;</span> <span class="number">1</span> <span class="keyword">then</span> <span class="string">&#x27;凌晨&#x27;</span></span><br><span class="line">           <span class="keyword">end</span></span><br><span class="line"><span class="comment">--        date_format(order_time, &#x27;yyyy-MM-dd HH:mm:ss&#x27;),</span></span><br><span class="line"><span class="keyword">from</span> ods_didi.t_user_order</span><br><span class="line"><span class="keyword">where</span> length(order_time) <span class="operator">&gt;=</span> <span class="number">8</span></span><br><span class="line">  <span class="keyword">and</span> dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> dw_didi.t_user_cancel_order</span><br><span class="line">(</span><br><span class="line">    orderId     string,</span><br><span class="line">    Profession  string,</span><br><span class="line">    age_range   string,</span><br><span class="line">    Reason      string,</span><br><span class="line">    cancel_time string</span><br><span class="line">)</span><br><span class="line">    partitioned <span class="keyword">by</span> (dt string comment <span class="string">&#x27;2020-04-12&#x27;</span>)</span><br><span class="line">    <span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> dw_didi.t_user_cancel_order <span class="keyword">partition</span> (dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>)</span><br><span class="line"><span class="keyword">select</span> orderId,</span><br><span class="line">       profession,</span><br><span class="line">       age_range,</span><br><span class="line">       reason,</span><br><span class="line">       cancel_time</span><br><span class="line"><span class="keyword">from</span> ods_didi.t_user_cancel_order</span><br><span class="line"><span class="keyword">where</span> dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> dw_didi.t_user_pay_order</span><br><span class="line">(</span><br><span class="line">    id             string comment <span class="string">&#x27;支付订单ID&#x27;</span>,</span><br><span class="line">    orderId        string comment <span class="string">&#x27;订单ID&#x27;</span>,</span><br><span class="line">    real_pay_money <span class="keyword">double</span> comment <span class="string">&#x27;实际支付总额&#x27;</span>,</span><br><span class="line">    has_coupon     <span class="type">int</span> comment <span class="string">&#x27;是否使用优惠券（0 - 不使用、1 - 使用）&#x27;</span>,</span><br><span class="line">    pay_way        <span class="type">int</span> comment <span class="string">&#x27;支付方式（0-微信支付、1-支付宝支付、3-QQ钱包支付、4- 一网通银行卡支付）&#x27;</span>,</span><br><span class="line">    mileage        <span class="keyword">double</span> comment <span class="string">&#x27;里程（单位公里）&#x27;</span>,</span><br><span class="line">    pay_time       string comment <span class="string">&#x27;支付时间&#x27;</span></span><br><span class="line">)</span><br><span class="line">    partitioned <span class="keyword">by</span> (dt string comment <span class="string">&#x27;2020-04-12&#x27;</span>)</span><br><span class="line">    <span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> dw_didi.t_user_pay_order <span class="keyword">partition</span> (dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>)</span><br><span class="line"><span class="keyword">select</span> id,</span><br><span class="line">       orderId,</span><br><span class="line">       real_pay_money,</span><br><span class="line">       has_coupon,</span><br><span class="line">       pay_way,</span><br><span class="line">       mileage,</span><br><span class="line">       pay_time</span><br><span class="line"><span class="keyword">from</span> ods_didi.t_user_pay_order</span><br><span class="line"><span class="keyword">where</span> dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> dw_didi.t_user_evaluate</span><br><span class="line">(</span><br><span class="line">    id        string comment <span class="string">&#x27;评价日志唯一ID&#x27;</span>,</span><br><span class="line">    orderId   string comment <span class="string">&#x27;订单ID&#x27;</span>,</span><br><span class="line">    eva_level <span class="type">int</span> comment <span class="string">&#x27;评价等级（1 - 一颗星、... 5 - 五星）&#x27;</span>,</span><br><span class="line">    eva_time  string comment <span class="string">&#x27;评价时间&#x27;</span></span><br><span class="line">)</span><br><span class="line">    partitioned <span class="keyword">by</span> (dt string comment <span class="string">&#x27;时间分区&#x27;</span>)</span><br><span class="line">    <span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> dw_didi.t_user_evaluate <span class="keyword">partition</span> (dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>)</span><br><span class="line"><span class="keyword">select</span> id,</span><br><span class="line">       orderId,</span><br><span class="line">       eva_level,</span><br><span class="line">       eva_time</span><br><span class="line"><span class="keyword">from</span> ods_didi.t_user_evaluate</span><br><span class="line"><span class="keyword">where</span> dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>;</span><br><span class="line"><span class="comment">-- 4.数据处理</span></span><br><span class="line"><span class="comment">-- 4.1 总订单笔数分析</span></span><br><span class="line"><span class="comment">-- 4.1.1计算4.12的总订单笔数分析</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(dt) <span class="keyword">as</span>     `时间`,</span><br><span class="line">       <span class="built_in">count</span>(orderid) `订单总笔数`</span><br><span class="line"><span class="keyword">from</span> dw_didi.t_user_order_wide</span><br><span class="line"><span class="keyword">where</span> dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_didi.t_order_total</span><br><span class="line">(</span><br><span class="line">    date_val string comment <span class="string">&#x27;日期(yyyy-MM-dd)&#x27;</span>,</span><br><span class="line">    count    <span class="type">int</span> comment <span class="string">&#x27;订单笔数&#x27;</span></span><br><span class="line">) partitioned <span class="keyword">by</span> (<span class="keyword">month</span> string comment <span class="string">&#x27;按月分区yyyy-MM&#x27;</span>)</span><br><span class="line">    <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"><span class="comment">--加载数据据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span> app_didi.t_order_total <span class="keyword">partition</span> (<span class="keyword">month</span> <span class="operator">=</span> <span class="string">&#x27;2020-04&#x27;</span>)</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(dt)        <span class="keyword">as</span> `时间`,</span><br><span class="line">       <span class="built_in">count</span>(orderid) <span class="keyword">as</span> `订单时间`</span><br><span class="line"><span class="keyword">from</span> dw_didi.t_user_order_wide</span><br><span class="line"><span class="keyword">where</span> dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>;</span><br><span class="line"><span class="comment">-- truncate table app_didi.t_order_total;</span></span><br><span class="line"><span class="comment">-- 4.2 预约订单/非预约订单占比分析</span></span><br><span class="line"><span class="comment">-- sum,avg,max,min</span></span><br><span class="line"><span class="comment">-- 预约单/总单*100%</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> cnt_total</span><br><span class="line"><span class="keyword">from</span> dw_didi.t_user_order_wide</span><br><span class="line"><span class="keyword">where</span> dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(order_date)       <span class="keyword">as</span> `日期`,</span><br><span class="line">       subscribe_name        <span class="keyword">as</span> `是否预约`,</span><br><span class="line">       <span class="built_in">count</span>(subscribe_name) <span class="keyword">as</span> cnt</span><br><span class="line"><span class="keyword">from</span> dw_didi.t_user_order_wide</span><br><span class="line"><span class="keyword">where</span> dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> subscribe_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">--左连接</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> <span class="built_in">max</span>(order_date)       <span class="keyword">as</span> `日期`,</span><br><span class="line">             subscribe_name        <span class="keyword">as</span> `是否预约`,</span><br><span class="line">             <span class="built_in">count</span>(subscribe_name) <span class="keyword">as</span> cnt</span><br><span class="line">      <span class="keyword">from</span> dw_didi.t_user_order_wide</span><br><span class="line">      <span class="keyword">where</span> dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span></span><br><span class="line">      <span class="keyword">group</span> <span class="keyword">by</span> subscribe_name) t1</span><br><span class="line">         <span class="keyword">left</span> <span class="keyword">join</span> (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> cnt_total</span><br><span class="line">                    <span class="keyword">from</span> dw_didi.t_user_order_wide</span><br><span class="line">                    <span class="keyword">where</span> dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>) t2;</span><br><span class="line"><span class="comment">-- 隐式内连接</span></span><br><span class="line"><span class="keyword">select</span> `日期`,</span><br><span class="line">       `是否预约`,</span><br><span class="line">       concat(round(cnt <span class="operator">/</span> cnt_total <span class="operator">*</span> <span class="number">100</span>, <span class="number">2</span>), <span class="string">&#x27;%&#x27;</span>) <span class="keyword">as</span> `百分比`</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> <span class="built_in">max</span>(order_date)       <span class="keyword">as</span> `日期`,</span><br><span class="line">             subscribe_name        <span class="keyword">as</span> `是否预约`,</span><br><span class="line">             <span class="built_in">count</span>(subscribe_name) <span class="keyword">as</span> cnt</span><br><span class="line">      <span class="keyword">from</span> dw_didi.t_user_order_wide</span><br><span class="line">      <span class="keyword">where</span> dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span></span><br><span class="line">      <span class="keyword">group</span> <span class="keyword">by</span> subscribe_name) t1,</span><br><span class="line">     (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> cnt_total</span><br><span class="line">      <span class="keyword">from</span> dw_didi.t_user_order_wide</span><br><span class="line">      <span class="keyword">where</span> dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>) t2;</span><br><span class="line"><span class="comment">--开窗函数</span></span><br><span class="line"><span class="keyword">select</span> order_date     <span class="keyword">as</span>                                        `日期`,</span><br><span class="line">       subscribe_name <span class="keyword">as</span>                                        `是否预约`,</span><br><span class="line">       <span class="built_in">count</span>(subscribe_name) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> subscribe_name) cnt,</span><br><span class="line">       <span class="built_in">count</span>() <span class="keyword">over</span> ()                                          cnt_total</span><br><span class="line"><span class="keyword">from</span> dw_didi.t_user_order_wide</span><br><span class="line"><span class="keyword">where</span> dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>;</span><br><span class="line"><span class="comment">-- group by subscribe_name;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--开窗函数2</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(`日期`) <span class="keyword">as</span>                                         `日期`,</span><br><span class="line">       `是否预约`,</span><br><span class="line">       concat(round(<span class="built_in">max</span>(cnt) <span class="operator">/</span> <span class="built_in">max</span>(cnt_total) <span class="operator">*</span> <span class="number">100</span>, <span class="number">2</span>), <span class="string">&#x27;%&#x27;</span>) `百分比`</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> order_date     <span class="keyword">as</span>                                        `日期`,</span><br><span class="line">             subscribe_name <span class="keyword">as</span>                                        `是否预约`,</span><br><span class="line">             <span class="built_in">count</span>(subscribe_name) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> subscribe_name) cnt,</span><br><span class="line">             <span class="built_in">count</span>() <span class="keyword">over</span> ()                                          cnt_total</span><br><span class="line">      <span class="keyword">from</span> dw_didi.t_user_order_wide</span><br><span class="line">      <span class="keyword">where</span> dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>) t</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> `是否预约`;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--方法三</span></span><br><span class="line"><span class="keyword">select</span> `日期`,</span><br><span class="line">       `是否预约`,</span><br><span class="line">       concat(round((cnt <span class="operator">/</span> <span class="built_in">sum</span>(cnt) <span class="keyword">over</span> ()) <span class="operator">*</span> <span class="number">100</span>, <span class="number">2</span>), <span class="string">&#x27;%&#x27;</span>) `百分比`</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> <span class="built_in">max</span>(order_date)       <span class="keyword">as</span> `日期`,</span><br><span class="line">             subscribe_name        <span class="keyword">as</span> `是否预约`,</span><br><span class="line">             <span class="built_in">count</span>(subscribe_name) <span class="keyword">as</span> cnt</span><br><span class="line">      <span class="keyword">from</span> dw_didi.t_user_order_wide</span><br><span class="line">      <span class="keyword">where</span> dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span></span><br><span class="line">      <span class="keyword">group</span> <span class="keyword">by</span> subscribe_name) t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_didi.t_order_subscribe_percent</span><br><span class="line">(</span><br><span class="line">    date_val       string comment <span class="string">&#x27;日期&#x27;</span>,</span><br><span class="line">    subscribe_name string comment <span class="string">&#x27;是否预约&#x27;</span>,</span><br><span class="line">    percent_val    string comment <span class="string">&#x27;百分比&#x27;</span></span><br><span class="line">) partitioned <span class="keyword">by</span> (<span class="keyword">month</span> string comment <span class="string">&#x27;年月yyyy-MM&#x27;</span>)</span><br><span class="line">    <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> `日期`,</span><br><span class="line">       `是否预约`,</span><br><span class="line">       cnt <span class="operator">/</span> <span class="built_in">sum</span>(cnt) <span class="keyword">over</span> () <span class="operator">*</span> <span class="number">100</span></span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> <span class="built_in">max</span>(order_date)       <span class="keyword">as</span> `日期`,</span><br><span class="line">             subscribe_name        <span class="keyword">as</span> `是否预约`,</span><br><span class="line">             <span class="built_in">count</span>(subscribe_name) <span class="keyword">as</span> cnt</span><br><span class="line">      <span class="keyword">from</span> dw_didi.t_user_order_wide</span><br><span class="line">      <span class="keyword">where</span> dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span></span><br><span class="line">      <span class="keyword">group</span> <span class="keyword">by</span> subscribe_name) t;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> app_didi.t_order_subscribe_percent <span class="keyword">partition</span> (<span class="keyword">month</span> <span class="operator">=</span> <span class="string">&#x27;2020-04&#x27;</span>)</span><br><span class="line"><span class="keyword">select</span> `日期`,</span><br><span class="line">       `是否预约`,</span><br><span class="line">       concat(round((cnt <span class="operator">/</span> <span class="built_in">sum</span>(cnt) <span class="keyword">over</span> ()) <span class="operator">*</span> <span class="number">100</span>, <span class="number">2</span>), <span class="string">&#x27;%&#x27;</span>) `百分比`</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> <span class="built_in">max</span>(order_date)       <span class="keyword">as</span> `日期`,</span><br><span class="line">             subscribe_name        <span class="keyword">as</span> `是否预约`,</span><br><span class="line">             <span class="built_in">count</span>(subscribe_name) <span class="keyword">as</span> cnt</span><br><span class="line">      <span class="keyword">from</span> dw_didi.t_user_order_wide</span><br><span class="line">      <span class="keyword">where</span> dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span></span><br><span class="line">      <span class="keyword">group</span> <span class="keyword">by</span> subscribe_name) t;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4.3不同时段订单的个数</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_didi.t_order_timerange_total</span><br><span class="line">(</span><br><span class="line">    datetime  string comment <span class="string">&#x27;日期&#x27;</span>,</span><br><span class="line">    timerange string comment <span class="string">&#x27;时间段&#x27;</span>,</span><br><span class="line">    count     <span class="type">int</span> comment <span class="string">&#x27;订单数量&#x27;</span></span><br><span class="line">)</span><br><span class="line">    partitioned <span class="keyword">by</span> (<span class="keyword">month</span> string comment <span class="string">&#x27;年月，yyyy-MM&#x27;</span>)</span><br><span class="line">    <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span></span><br><span class="line">;</span><br><span class="line"><span class="comment">--sql</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(dt),</span><br><span class="line">       order_time_range,</span><br><span class="line">       <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> order_cnt</span><br><span class="line"><span class="keyword">from</span> dw_didi.t_user_order_wide</span><br><span class="line"><span class="keyword">where</span> dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> order_time_range;</span><br><span class="line"><span class="comment">--加载数据</span></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> app_didi.t_order_timerange_total <span class="keyword">partition</span> (<span class="keyword">month</span> <span class="operator">=</span> <span class="string">&#x27;2020-04&#x27;</span>)</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(dt),</span><br><span class="line">       order_time_range,</span><br><span class="line">       <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> order_cnt</span><br><span class="line"><span class="keyword">from</span> dw_didi.t_user_order_wide</span><br><span class="line"><span class="keyword">where</span> dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> order_time_range</span><br><span class="line">;</span><br><span class="line"><span class="comment">--4.4不同年龄段、时段订单个数</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(dt),</span><br><span class="line">       age_range,</span><br><span class="line">       order_time_range,</span><br><span class="line">       <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> order_cnt</span><br><span class="line"><span class="keyword">from</span> dw_didi.t_user_order_wide</span><br><span class="line"><span class="keyword">where</span> dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> age_range,</span><br><span class="line">         order_time_range</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_didi.t_order_age_and_time_range_total</span><br><span class="line">(</span><br><span class="line">    datetime         string comment <span class="string">&#x27;日期&#x27;</span>,</span><br><span class="line">    age_range        string comment <span class="string">&#x27;年龄段&#x27;</span>,</span><br><span class="line">    order_time_range string comment <span class="string">&#x27;时段&#x27;</span>,</span><br><span class="line">    count            <span class="type">int</span> comment <span class="string">&#x27;订单数量&#x27;</span></span><br><span class="line">)</span><br><span class="line">    partitioned <span class="keyword">by</span> (<span class="keyword">month</span> string comment <span class="string">&#x27;年月，yyyy-MM&#x27;</span>)</span><br><span class="line">    <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> app_didi.t_order_age_and_time_range_total <span class="keyword">partition</span> (<span class="keyword">month</span> <span class="operator">=</span> <span class="string">&#x27;2020-04&#x27;</span>)</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(dt),</span><br><span class="line">       age_range,</span><br><span class="line">       order_time_range,</span><br><span class="line">       <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> order_cnt</span><br><span class="line"><span class="keyword">from</span> dw_didi.t_user_order_wide</span><br><span class="line"><span class="keyword">where</span> dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> age_range, order_time_range;</span><br><span class="line"><span class="comment">--4.4不同地域订单个数</span></span><br><span class="line"><span class="keyword">select</span> province, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> order_cnt</span><br><span class="line"><span class="keyword">from</span> dw_didi.t_user_order_wide</span><br><span class="line"><span class="keyword">where</span> dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> province;</span><br><span class="line"><span class="comment">--建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_didi.t_order_province_total</span><br><span class="line">(</span><br><span class="line">    datetime string comment <span class="string">&#x27;日期&#x27;</span>,</span><br><span class="line">    province string comment <span class="string">&#x27;省份&#x27;</span>,</span><br><span class="line">    count    <span class="type">int</span> comment <span class="string">&#x27;订单数量&#x27;</span></span><br><span class="line">)</span><br><span class="line">    partitioned <span class="keyword">by</span> (<span class="keyword">month</span> string comment <span class="string">&#x27;年月，yyyy-MM&#x27;</span>)</span><br><span class="line">    <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span></span><br><span class="line">;</span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> app_didi.t_order_province_total <span class="keyword">partition</span> (<span class="keyword">month</span> <span class="operator">=</span> <span class="string">&#x27;2020-04&#x27;</span>)</span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;2020-04-12&#x27;</span>,</span><br><span class="line">       province,</span><br><span class="line">       <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> order_cnt</span><br><span class="line"><span class="keyword">from</span> dw_didi.t_user_order_wide</span><br><span class="line"><span class="keyword">where</span> dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> province</span><br><span class="line">;</span><br><span class="line"><span class="comment">-- 4.5求订单客户职业排名top5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 第一步 ：按职业分组求客户数量</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(dt),</span><br><span class="line">       profession,</span><br><span class="line">       <span class="built_in">count</span>(orderId)</span><br><span class="line"><span class="keyword">from</span> t_user_order_wide</span><br><span class="line"><span class="keyword">where</span>  dt<span class="operator">=</span><span class="string">&#x27;2020-04-12&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span>  profession;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 第二部 排名</span></span><br><span class="line"><span class="keyword">select</span> dt1,</span><br><span class="line">       profession,</span><br><span class="line">       cnt,</span><br><span class="line">       <span class="built_in">row_number</span>() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span>  cnt <span class="keyword">desc</span> )</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> <span class="built_in">max</span>(dt) <span class="keyword">as</span> dt1,</span><br><span class="line">             profession,</span><br><span class="line">             <span class="built_in">count</span>(orderId) cnt</span><br><span class="line">      <span class="keyword">from</span> t_user_order_wide</span><br><span class="line">      <span class="keyword">where</span>  dt<span class="operator">=</span><span class="string">&#x27;2020-04-12&#x27;</span></span><br><span class="line">      <span class="keyword">group</span> <span class="keyword">by</span>  profession) t</span><br><span class="line"></span><br><span class="line">;</span><br><span class="line"><span class="comment">-- 取前五</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">         <span class="keyword">select</span> dt1,</span><br><span class="line">                profession,</span><br><span class="line">                cnt,</span><br><span class="line">                <span class="built_in">row_number</span>() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span>  cnt <span class="keyword">desc</span> ) <span class="keyword">as</span> rk</span><br><span class="line">         <span class="keyword">from</span> (<span class="keyword">select</span> <span class="built_in">max</span>(dt) <span class="keyword">as</span> dt1,</span><br><span class="line">                      profession,</span><br><span class="line">                      <span class="built_in">count</span>(orderId) cnt</span><br><span class="line">               <span class="keyword">from</span> t_user_order_wide</span><br><span class="line">               <span class="keyword">where</span>  dt<span class="operator">=</span><span class="string">&#x27;2020-04-12&#x27;</span></span><br><span class="line">               <span class="keyword">group</span> <span class="keyword">by</span>  profession) t1</span><br><span class="line"></span><br><span class="line">     )t2</span><br><span class="line"><span class="keyword">where</span> rk<span class="operator">&lt;=</span><span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--with as</span></span><br><span class="line"><span class="keyword">with</span> <span class="keyword">as</span> 表<span class="number">1</span>别名 <span class="keyword">as</span>(</span><br><span class="line"><span class="keyword">select</span> ……</span><br><span class="line"><span class="keyword">from</span> ofs)</span><br><span class="line">),</span><br><span class="line">表<span class="number">2</span>别名 <span class="keyword">as</span>(</span><br><span class="line"><span class="keyword">select</span>……</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> t.profession,</span><br><span class="line">             t.cnt,</span><br><span class="line">             <span class="built_in">rank</span>() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> t.cnt <span class="keyword">desc</span> ) <span class="keyword">as</span> rk</span><br><span class="line">      <span class="keyword">from</span> (<span class="keyword">select</span> profession,</span><br><span class="line">                   <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> cnt</span><br><span class="line">            <span class="keyword">from</span> dw_didi.t_user_order_wide</span><br><span class="line">            <span class="keyword">group</span> <span class="keyword">by</span> profession) t) tt</span><br><span class="line"><span class="keyword">where</span> tt.rk <span class="operator">&lt;=</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_didi.t_order_profession_total_topn</span><br><span class="line">(</span><br><span class="line">    profession string comment <span class="string">&#x27;职业&#x27;</span>,</span><br><span class="line">    Order_cnt  <span class="type">int</span> comment <span class="string">&#x27;订单数量&#x27;</span>,</span><br><span class="line">    rk         <span class="type">int</span> comment <span class="string">&#x27;排名&#x27;</span></span><br><span class="line">)</span><br><span class="line">    partitioned <span class="keyword">by</span> (<span class="keyword">month</span> string comment <span class="string">&#x27;年月，yyyy-MM&#x27;</span>)</span><br><span class="line">    <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"><span class="comment">--加载数据</span></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> app_didi.t_order_profession_total_topn <span class="keyword">partition</span> (<span class="keyword">month</span> <span class="operator">=</span> <span class="string">&#x27;2020-04&#x27;</span>)</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> t.profession,</span><br><span class="line">             t.cnt,</span><br><span class="line">             <span class="built_in">rank</span>() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> t.cnt <span class="keyword">desc</span> ) <span class="keyword">as</span> rk</span><br><span class="line">      <span class="keyword">from</span> (<span class="keyword">select</span> profession, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> cnt <span class="keyword">from</span> dw_didi.t_user_order_wide <span class="keyword">group</span> <span class="keyword">by</span> profession) t) tt</span><br><span class="line"><span class="keyword">where</span> tt.rk <span class="operator">&lt;=</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--4.6用户订单取消占比</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;2020-04-12&#x27;</span>                                                date_val,</span><br><span class="line">       concat(round(t1.total_cnt <span class="operator">/</span> t2.total_cnt <span class="operator">*</span> <span class="number">100</span>, <span class="number">2</span>), <span class="string">&#x27;%&#x27;</span>) <span class="keyword">as</span> cancel_order_percent</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> <span class="built_in">count</span>(orderid) <span class="keyword">as</span> total_cnt</span><br><span class="line">      <span class="keyword">from</span> ods_didi.t_user_cancel_order</span><br><span class="line">      <span class="keyword">where</span> dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>) t1</span><br><span class="line">        ,</span><br><span class="line">     (<span class="keyword">select</span> <span class="built_in">count</span>(orderid) <span class="keyword">as</span> total_cnt</span><br><span class="line">      <span class="keyword">from</span> dw_didi.t_user_order_wide</span><br><span class="line">      <span class="keyword">where</span> dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>) t2;</span><br><span class="line"><span class="comment">--创建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> app_didi.t_order_cancel_order_percent</span><br><span class="line">(</span><br><span class="line">    datetime             string comment <span class="string">&#x27;日期&#x27;</span>,</span><br><span class="line">    cancel_order_percent string comment <span class="string">&#x27;百分比&#x27;</span></span><br><span class="line">)</span><br><span class="line">    partitioned <span class="keyword">by</span> (<span class="keyword">month</span> string comment <span class="string">&#x27;年月，yyyy-MM&#x27;</span>)</span><br><span class="line">    <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"><span class="comment">--加载数据</span></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> app_didi.t_order_cancel_order_percent <span class="keyword">partition</span> (<span class="keyword">month</span> <span class="operator">=</span> <span class="string">&#x27;2020-04&#x27;</span>)</span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;2020-04-12&#x27;</span>                                                date_val</span><br><span class="line">        ,</span><br><span class="line">       concat(round(t1.total_cnt <span class="operator">/</span> t2.total_cnt <span class="operator">*</span> <span class="number">100</span>, <span class="number">2</span>), <span class="string">&#x27;%&#x27;</span>) <span class="keyword">as</span> percent_val</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) total_cnt <span class="keyword">from</span> ods_didi.t_user_cancel_order <span class="keyword">where</span> dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>) t1</span><br><span class="line">        ,</span><br><span class="line">     (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) total_cnt <span class="keyword">from</span> dw_didi.t_user_order_wide <span class="keyword">where</span> dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>) t2</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>with写法</p><p><img src="/images/heima/52.png" alt="1688264309178"></p><p><img src="/images/heima/53.png" alt="1688264355732"></p><p><img src="/images/heima/54.png" alt="1688264376271"></p><p><img src="/images/heima/55.png" alt="1688268664039"></p><p>sqoop list-databases –connect jdbc:mysql:&#x2F;&#x2F;192.168.52.161:3306&#x2F; –username root –password 123456</p><p><img src="/images/heima/56.png" alt="1688282351357"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;node1&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span> <span class="keyword">with</span> <span class="keyword">grant</span> option;</span><br><span class="line">flush privileges;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create database if not exists app_didi;</span><br><span class="line"> create table if not exists app_didi.t_order_total(</span><br><span class="line">    order_date date,</span><br><span class="line">     count int</span><br><span class="line"> );</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table if  not exists app_didi.t_order_subscribe_total(</span><br><span class="line">    order_date date ,</span><br><span class="line">    subscribe_name varchar(20),</span><br><span class="line">     count int</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span>export<span class="operator">/</span>server<span class="operator">/</span>sqoop<span class="number">-1.4</span><span class="number">.6</span><span class="operator">/</span>bin<span class="operator">/</span>sqoop export \</span><br><span class="line"><span class="comment">--connect jdbc:mysql://192.168.52.161:3306/app_didi \</span></span><br><span class="line"><span class="comment">--username root \</span></span><br><span class="line"><span class="comment">--password 123456 \</span></span><br><span class="line"><span class="comment">--table t_order_total \</span></span><br><span class="line"><span class="comment">--export-dir /user/hive/warehouse/app_didi.db/t_order_total/month=2020-04</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/export/server/sqoop-1.4.6/bin/sqoop export \</span><br><span class="line">--connect jdbc:mysql://192.168.52.161:3306/app_didi \</span><br><span class="line">--username root \</span><br><span class="line">--password 123456 \</span><br><span class="line">--table t_order_subscribe_total \</span><br><span class="line">--export-dir /user/hive/warehouse/app_didi.db/t_order_subscribe_total/month=2020-04 </span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#导出不同时段订单统计表</span><br><span class="line"><span class="operator">/</span>export<span class="operator">/</span>server<span class="operator">/</span>sqoop<span class="number">-1.4</span><span class="number">.6</span><span class="operator">/</span>bin<span class="operator">/</span>sqoop export \</span><br><span class="line"><span class="comment">--connect jdbc:mysql://192.168.52.161:3306/app_didi \</span></span><br><span class="line"><span class="comment">--username root \</span></span><br><span class="line"><span class="comment">--password 123456 \</span></span><br><span class="line"><span class="comment">--table t_order_timerange_total \</span></span><br><span class="line"><span class="comment">--export-dir /user/hive/warehouse/app_didi.db/t_order_timerange_total/month=2020-04</span></span><br><span class="line"> </span><br><span class="line">#导出不同地域订单统计表</span><br><span class="line"><span class="operator">/</span>export<span class="operator">/</span>server<span class="operator">/</span>sqoop<span class="number">-1.4</span><span class="number">.6</span><span class="operator">/</span>bin<span class="operator">/</span>sqoop export \</span><br><span class="line"><span class="comment">--connect jdbc:mysql://192.168.52.161:3306/app_didi \</span></span><br><span class="line"><span class="comment">--username root \</span></span><br><span class="line"><span class="comment">--password 123456 \</span></span><br><span class="line"><span class="comment">--table t_order_province_total  \</span></span><br><span class="line"><span class="comment">--export-dir /user/hive/warehouse/app_didi.db/t_order_province_total/month=2020-04</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 暑假实训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二、常用命令（copy）</title>
      <link href="/2023/07/01/%E4%BA%8C%E3%80%81%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%88copy%EF%BC%89/"/>
      <url>/2023/07/01/%E4%BA%8C%E3%80%81%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%88copy%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<ul><li>上传到hdfs</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -put archer.txt /user/hive/warehouse/test.db/t_archer</span><br></pre></td></tr></table></figure><ul><li>关机</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutdown -h now</span><br></pre></td></tr></table></figure><ul><li>重启</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot   </span><br></pre></td></tr></table></figure><ul><li>查看进程</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps </span><br></pre></td></tr></table></figure><ul><li>mysql 活着管道</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef| grep mysql</span><br></pre></td></tr></table></figure><ul><li>jps全称</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java process connect</span><br></pre></td></tr></table></figure><ul><li>查看进程</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jps  java process server</span><br></pre></td></tr></table></figure><ul><li>启动进程脚本（根目录cd ~）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/onekey/my-start-all.sh</span><br></pre></td></tr></table></figure><ul><li>关闭进程脚本</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/onekey/my-stop-all.sh关闭进程脚本</span><br></pre></td></tr></table></figure><ul><li>查看 网关linux</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><ul><li>网关 windows</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig </span><br></pre></td></tr></table></figure><ul><li>进入mysql</li></ul> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><ul><li>查看端口</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isof -f 10000</span><br></pre></td></tr></table></figure><ul><li>杀死端口</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9 xxxx</span><br></pre></td></tr></table></figure><ul><li>查看详细端口运行</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jps -m</span><br></pre></td></tr></table></figure><ul><li>查看指定端口</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i:10000</span><br></pre></td></tr></table></figure><ul><li>展开列表</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alt +enter ctrl+enter</span><br></pre></td></tr></table></figure><ul><li>格式化</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crtl+alt+L</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 暑假实训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/06/30/didi%E5%87%BA%E8%A1%8C/"/>
      <url>/2023/06/30/didi%E5%87%BA%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="滴滴出行"><a href="#滴滴出行" class="headerlink" title="滴滴出行"></a>滴滴出行</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1.数据仓库构建</span></span><br><span class="line"><span class="comment">-- 1.1创建ods库</span></span><br><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> ods_didi;</span><br><span class="line"><span class="comment">-- 1.2创建dw数据库</span></span><br><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> dw_didi;</span><br><span class="line"><span class="comment">-- 1.3创建app数据库</span></span><br><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> app_didi;</span><br><span class="line"></span><br><span class="line">use ods_didi;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2.在ods层创建表</span></span><br><span class="line"><span class="comment">-- 2.1创建订单结构表</span></span><br><span class="line"><span class="comment">-- 创建用户订单表结构</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> ods_didi.t_user_order</span><br><span class="line">(</span><br><span class="line">    orderId         string comment <span class="string">&#x27;订单id&#x27;</span>,</span><br><span class="line">    telephone       string comment <span class="string">&#x27;打车用户手机&#x27;</span>,</span><br><span class="line">    lng             string comment <span class="string">&#x27;用户发起打车的经度&#x27;</span>,</span><br><span class="line">    lat             string comment <span class="string">&#x27;用户发起打车的纬度&#x27;</span>,</span><br><span class="line">    province        string comment <span class="string">&#x27;所在省份&#x27;</span>,</span><br><span class="line">    city            string comment <span class="string">&#x27;所在城市&#x27;</span>,</span><br><span class="line">    es_money        <span class="keyword">double</span> comment <span class="string">&#x27;预估打车费用&#x27;</span>,</span><br><span class="line">    gender          string comment <span class="string">&#x27;用户信息 - 性别&#x27;</span>,</span><br><span class="line">    profession      string comment <span class="string">&#x27;用户信息 - 行业&#x27;</span>,</span><br><span class="line">    age_range       string comment <span class="string">&#x27;年龄段（70后、80后、...）&#x27;</span>,</span><br><span class="line">    tip             <span class="keyword">double</span> comment <span class="string">&#x27;小费&#x27;</span>,</span><br><span class="line">    subscribe       <span class="type">int</span> comment <span class="string">&#x27;是否预约（0 - 非预约、1 - 预约）&#x27;</span>,</span><br><span class="line">    sub_time        string comment <span class="string">&#x27;预约时间&#x27;</span>,</span><br><span class="line">    is_agent        <span class="type">int</span> comment <span class="string">&#x27;是否代叫（0 - 本人、1 - 代叫）&#x27;</span>,</span><br><span class="line">    agent_telephone string comment <span class="string">&#x27;预约人手机&#x27;</span>,</span><br><span class="line">    order_time      string comment <span class="string">&#x27;订单时间&#x27;</span></span><br><span class="line">)</span><br><span class="line">    partitioned <span class="keyword">by</span> (dt string comment <span class="string">&#x27;时间分区&#x27;</span>)</span><br><span class="line">    <span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ods创建取消订单表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> ods_didi.t_user_cancel_order</span><br><span class="line">(</span><br><span class="line">    orderId        string comment <span class="string">&#x27;订单ID&#x27;</span>,</span><br><span class="line">    cstm_telephone string comment <span class="string">&#x27;客户联系电话&#x27;</span>,</span><br><span class="line">    lng            string comment <span class="string">&#x27;取消订单的经度&#x27;</span>,</span><br><span class="line">    lat            string comment <span class="string">&#x27;取消订单的纬度&#x27;</span>,</span><br><span class="line">    province       string comment <span class="string">&#x27;所在省份&#x27;</span>,</span><br><span class="line">    city           string comment <span class="string">&#x27;所在城市&#x27;</span>,</span><br><span class="line">    es_distance    <span class="keyword">double</span> comment <span class="string">&#x27;预估距离&#x27;</span>,</span><br><span class="line">    gender         string comment <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">    profession     string comment <span class="string">&#x27;行业&#x27;</span>,</span><br><span class="line">    age_range      string comment <span class="string">&#x27;年龄段&#x27;</span>,</span><br><span class="line">    reason         <span class="type">int</span> comment <span class="string">&#x27;取消订单原因（1 - 选择了其他交通方式、2 - 与司机达成一致，取消订单、3 - 投诉司机没来接我、4 - 已不需要用车、5 - 无理由取消订单）&#x27;</span>,</span><br><span class="line">    cancel_time    string comment <span class="string">&#x27;取消时间&#x27;</span></span><br><span class="line">)</span><br><span class="line">    partitioned <span class="keyword">by</span> (dt string comment <span class="string">&#x27;时间分区&#x27;</span>)</span><br><span class="line">    <span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ods创建订单表支付表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> ods_didi.t_user_pay_order</span><br><span class="line">(</span><br><span class="line">    id                         string comment <span class="string">&#x27;支付订单ID&#x27;</span>,</span><br><span class="line">    orderId                    string comment <span class="string">&#x27;订单ID&#x27;</span>,</span><br><span class="line">    lng                        string comment <span class="string">&#x27;目的地的经度（支付地址）&#x27;</span>,</span><br><span class="line">    lat                        string comment <span class="string">&#x27;目的地的纬度（支付地址）&#x27;</span>,</span><br><span class="line">    province                   string comment <span class="string">&#x27;省份&#x27;</span>,</span><br><span class="line">    city                       string comment <span class="string">&#x27;城市&#x27;</span>,</span><br><span class="line">    total_money                <span class="keyword">double</span> comment <span class="string">&#x27;车费总价&#x27;</span>,</span><br><span class="line">    real_pay_money             <span class="keyword">double</span> comment <span class="string">&#x27;实际支付总额&#x27;</span>,</span><br><span class="line">    passenger_additional_money <span class="keyword">double</span> comment <span class="string">&#x27;乘客额外加价&#x27;</span>,</span><br><span class="line">    base_money                 <span class="keyword">double</span> comment <span class="string">&#x27;车费合计&#x27;</span>,</span><br><span class="line">    has_coupon                 <span class="type">int</span> comment <span class="string">&#x27;是否使用优惠券（0 - 不使用、1 - 使用）&#x27;</span>,</span><br><span class="line">    coupon_total               <span class="keyword">double</span> comment <span class="string">&#x27;优惠券合计&#x27;</span>,</span><br><span class="line">    pay_way                    <span class="type">int</span> comment <span class="string">&#x27;支付方式（0 - 微信支付、1 - 支付宝支付、3 - QQ钱包支付、4 - 一网通银行卡支付）&#x27;</span>,</span><br><span class="line">    mileage                    <span class="keyword">double</span> comment <span class="string">&#x27;里程（单位公里）&#x27;</span>,</span><br><span class="line">    pay_time                   string comment <span class="string">&#x27;支付时间&#x27;</span></span><br><span class="line">)</span><br><span class="line">    partitioned <span class="keyword">by</span> (dt string comment <span class="string">&#x27;时间分区&#x27;</span>)</span><br><span class="line">    <span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"><span class="comment">-- ods创建用户评价表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> ods_didi.t_user_evaluate</span><br><span class="line">(</span><br><span class="line">    id                  string comment <span class="string">&#x27;评价日志唯一ID&#x27;</span>,</span><br><span class="line">    orderId             string comment <span class="string">&#x27;订单ID&#x27;</span>,</span><br><span class="line">    passenger_telephone string comment <span class="string">&#x27;用户电话&#x27;</span>,</span><br><span class="line">    passenger_province  string comment <span class="string">&#x27;用户所在省份&#x27;</span>,</span><br><span class="line">    passenger_city      string comment <span class="string">&#x27;用户所在城市&#x27;</span>,</span><br><span class="line">    eva_level           <span class="type">int</span> comment <span class="string">&#x27;评价等级（1 - 一颗星、... 5 - 五星）&#x27;</span>,</span><br><span class="line">    eva_time            string comment <span class="string">&#x27;评价时间&#x27;</span></span><br><span class="line">)</span><br><span class="line">    partitioned <span class="keyword">by</span> (dt string comment <span class="string">&#x27;时间分区&#x27;</span>)</span><br><span class="line">    <span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"><span class="comment">-- 创建数据仓库 导入数据</span></span><br><span class="line">load data <span class="keyword">local</span> inpath <span class="string">&#x27;/export/data/didi/order.csv&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> ods_didi.t_user_order <span class="keyword">partition</span> (dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>);</span><br><span class="line"></span><br><span class="line">load data <span class="keyword">local</span> inpath <span class="string">&#x27;/export/data/didi/cancel_order.csv&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> ods_didi.t_user_cancel_order <span class="keyword">partition</span> (dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>);</span><br><span class="line"></span><br><span class="line">load data <span class="keyword">local</span> inpath <span class="string">&#x27;/export/data/didi/pay.csv&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> ods_didi.t_user_pay_order <span class="keyword">partition</span> (dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>);</span><br><span class="line"></span><br><span class="line">load data <span class="keyword">local</span> inpath <span class="string">&#x27;/export/data/didi/evaluate.csv&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> ods_didi.t_user_evaluate <span class="keyword">partition</span> (dt <span class="operator">=</span> <span class="string">&#x27;2020-04-12&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3.在dw层进行数据预处理</span></span><br><span class="line">use dw_didi;</span><br><span class="line"><span class="comment">-- 创建宽表语句</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> dw_didi.t_user_order_wide</span><br><span class="line">(</span><br><span class="line">    orderId          string comment <span class="string">&#x27;订单id&#x27;</span>,</span><br><span class="line">    telephone        string comment <span class="string">&#x27;打车用户手机&#x27;</span>,</span><br><span class="line">    lng              string comment <span class="string">&#x27;用户发起打车的经度&#x27;</span>,</span><br><span class="line">    lat              string comment <span class="string">&#x27;用户发起打车的纬度&#x27;</span>,</span><br><span class="line">    province         string comment <span class="string">&#x27;所在省份&#x27;</span>,</span><br><span class="line">    city             string comment <span class="string">&#x27;所在城市&#x27;</span>,</span><br><span class="line">    es_money         <span class="keyword">double</span> comment <span class="string">&#x27;预估打车费用&#x27;</span>,</span><br><span class="line">    gender           string comment <span class="string">&#x27;用户信息 - 性别&#x27;</span>,</span><br><span class="line">    profession       string comment <span class="string">&#x27;用户信息 - 行业&#x27;</span>,</span><br><span class="line">    age_range        string comment <span class="string">&#x27;年龄段（70后、80后、...）&#x27;</span>,</span><br><span class="line">    tip              <span class="keyword">double</span> comment <span class="string">&#x27;小费&#x27;</span>,</span><br><span class="line">    subscribe        <span class="type">int</span> comment <span class="string">&#x27;是否预约（0 - 非预约、1 - 预约）&#x27;</span>,</span><br><span class="line">    subscribe_name   string comment <span class="string">&#x27;是否预约名称&#x27;</span>,</span><br><span class="line">    sub_time         string comment <span class="string">&#x27;预约时间&#x27;</span>,</span><br><span class="line">    is_agent         <span class="type">int</span> comment <span class="string">&#x27;是否代叫（0 - 本人、1 - 代叫）&#x27;</span>,</span><br><span class="line">    is_agent_name    string comment <span class="string">&#x27;是否代缴名称&#x27;</span>,</span><br><span class="line">    agent_telephone  string comment <span class="string">&#x27;预约人手机&#x27;</span>,</span><br><span class="line">    order_time       string comment <span class="string">&#x27;订单时间&#x27;</span>,</span><br><span class="line">    order_date       string comment <span class="string">&#x27;订单时间，yyyy-MM-dd&#x27;</span>,</span><br><span class="line">    order_year       string comment <span class="string">&#x27;年&#x27;</span>,</span><br><span class="line">    order_month      string comment <span class="string">&#x27;月&#x27;</span>,</span><br><span class="line">    order_day        string comment <span class="string">&#x27;日&#x27;</span>,</span><br><span class="line">    order_hour       string comment <span class="string">&#x27;小时&#x27;</span>,</span><br><span class="line">    order_time_range string comment <span class="string">&#x27;时间段&#x27;</span></span><br><span class="line"></span><br><span class="line">)</span><br><span class="line">    partitioned <span class="keyword">by</span> (dt string comment <span class="string">&#x27;2020-04-12&#x27;</span>)</span><br><span class="line">    <span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 预处理sql语句 用户订单处理</span></span><br><span class="line"><span class="keyword">insert</span> overwrite  <span class="keyword">table</span>  dw_didi.t_user_order_wide <span class="keyword">partition</span> (dt<span class="operator">=</span><span class="string">&#x27;2020-04-12&#x27;</span>)</span><br><span class="line"><span class="keyword">select</span> orderid,</span><br><span class="line">       telephone,</span><br><span class="line">       lng,</span><br><span class="line">       lat,</span><br><span class="line">       province,</span><br><span class="line">       city,</span><br><span class="line">       es_money,</span><br><span class="line">       gender,</span><br><span class="line">       profession,</span><br><span class="line">       age_range,</span><br><span class="line">       tip,</span><br><span class="line">       subscribe,</span><br><span class="line"><span class="comment">--        if(nvl(subscribe, 0) = 0, &#x27;非预约&#x27;, &#x27;预约&#x27;)                   as subscribe_name,</span></span><br><span class="line">       <span class="keyword">case</span></span><br><span class="line">           <span class="keyword">when</span> subscribe <span class="operator">=</span> <span class="number">0</span> <span class="keyword">or</span> (subscribe <span class="keyword">is</span> <span class="keyword">null</span>) <span class="keyword">then</span> <span class="string">&#x27;非预约&#x27;</span></span><br><span class="line">           <span class="keyword">when</span> subscribe <span class="operator">=</span> <span class="number">1</span> <span class="keyword">then</span> <span class="string">&#x27;预约&#x27;</span></span><br><span class="line">           <span class="keyword">end</span>                                                             <span class="keyword">as</span> subscribe_name,</span><br><span class="line">       date_format(sub_time, <span class="string">&#x27;yyyy-MM-dd&#x27;</span>)                                 <span class="keyword">as</span> sub_time,</span><br><span class="line">       is_agent,</span><br><span class="line">       <span class="keyword">case</span></span><br><span class="line">           <span class="keyword">when</span> is_agent <span class="operator">=</span> <span class="number">0</span> <span class="keyword">or</span> (subscribe <span class="keyword">is</span> <span class="keyword">null</span>) <span class="keyword">then</span> <span class="string">&#x27;本人&#x27;</span></span><br><span class="line">           <span class="keyword">when</span> is_agent <span class="operator">=</span> <span class="number">1</span> <span class="keyword">then</span> <span class="string">&#x27;代叫&#x27;</span></span><br><span class="line">           <span class="keyword">end</span>                                                             <span class="keyword">as</span> is_agent_name,</span><br><span class="line">       agent_telephone,</span><br><span class="line"><span class="comment">--        substr(order_time, 1, 4)                                      as year,</span></span><br><span class="line">       date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)       <span class="keyword">as</span> order_time,</span><br><span class="line">       date_format(order_time, <span class="string">&#x27;yyyy-MM-dd&#x27;</span>)                               <span class="keyword">as</span> order_data,</span><br><span class="line">       <span class="keyword">year</span>(date_format(order_time, <span class="string">&#x27;yyyy-MM-dd&#x27;</span>))                         <span class="keyword">as</span> order_year,</span><br><span class="line">       <span class="keyword">month</span>(date_format(order_time, <span class="string">&#x27;yyyy-MM-dd&#x27;</span>))                        <span class="keyword">as</span> order_month,</span><br><span class="line">       <span class="keyword">day</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>))  <span class="keyword">as</span> order_day,</span><br><span class="line">       <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="keyword">as</span> order_hour,</span><br><span class="line">       <span class="keyword">case</span></span><br><span class="line">           <span class="keyword">when</span> <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&gt;=</span> <span class="number">1</span> <span class="keyword">and</span></span><br><span class="line">                <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&lt;</span> <span class="number">5</span> <span class="keyword">then</span> <span class="string">&#x27;凌晨&#x27;</span></span><br><span class="line">           <span class="keyword">when</span> <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&gt;=</span> <span class="number">5</span> <span class="keyword">and</span></span><br><span class="line">                <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&lt;</span> <span class="number">8</span> <span class="keyword">then</span> <span class="string">&#x27;早上&#x27;</span></span><br><span class="line">           <span class="keyword">when</span> <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&gt;=</span> <span class="number">8</span> <span class="keyword">and</span></span><br><span class="line">                <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&lt;</span> <span class="number">11</span> <span class="keyword">then</span> <span class="string">&#x27;上午&#x27;</span></span><br><span class="line">           <span class="keyword">when</span> <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&gt;=</span> <span class="number">11</span> <span class="keyword">and</span></span><br><span class="line">                <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&lt;</span> <span class="number">13</span> <span class="keyword">then</span> <span class="string">&#x27;中午&#x27;</span></span><br><span class="line">           <span class="keyword">when</span> <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&gt;=</span> <span class="number">13</span> <span class="keyword">and</span></span><br><span class="line">                <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&lt;</span> <span class="number">17</span> <span class="keyword">then</span> <span class="string">&#x27;下午&#x27;</span></span><br><span class="line">           <span class="keyword">when</span> <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&gt;=</span> <span class="number">17</span> <span class="keyword">and</span></span><br><span class="line">                <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&lt;</span> <span class="number">19</span> <span class="keyword">then</span> <span class="string">&#x27;晚上&#x27;</span></span><br><span class="line">           <span class="keyword">when</span> <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&gt;=</span> <span class="number">19</span> <span class="keyword">and</span></span><br><span class="line">                <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&lt;</span> <span class="number">20</span> <span class="keyword">then</span> <span class="string">&#x27;半夜&#x27;</span></span><br><span class="line">           <span class="keyword">when</span> <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&gt;=</span> <span class="number">20</span> <span class="keyword">and</span></span><br><span class="line">                <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&lt;</span> <span class="number">24</span> <span class="keyword">then</span> <span class="string">&#x27;深夜&#x27;</span></span><br><span class="line">           <span class="keyword">when</span> <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&gt;=</span> <span class="number">0</span> <span class="keyword">and</span></span><br><span class="line">                <span class="keyword">hour</span>(date_format(concat(order_time, <span class="string">&#x27;:00&#x27;</span>), <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)) <span class="operator">&lt;</span> <span class="number">1</span> <span class="keyword">then</span> <span class="string">&#x27;凌晨&#x27;</span></span><br><span class="line">           <span class="keyword">end</span></span><br><span class="line"><span class="comment">--        date_format(order_time, &#x27;yyyy-MM-dd HH:mm:ss&#x27;),</span></span><br><span class="line"><span class="keyword">from</span> ods_didi.t_user_order</span><br><span class="line"><span class="keyword">where</span> length(order_time) <span class="operator">&gt;=</span> <span class="number">8</span></span><br><span class="line"><span class="keyword">and</span> dt<span class="operator">=</span><span class="string">&#x27;2020-04-12&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> dw_didi.t_user_cancel_order(</span><br><span class="line">    orderId string,</span><br><span class="line">    Profession string,</span><br><span class="line">    age_range string,</span><br><span class="line">    Reason string,</span><br><span class="line">    cancel_time string</span><br><span class="line">)</span><br><span class="line">partitioned <span class="keyword">by</span> (dt string comment <span class="string">&#x27;2020-04-12&#x27;</span>)</span><br><span class="line"><span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> dw_didi.t_user_cancel_order <span class="keyword">partition</span>(dt<span class="operator">=</span><span class="string">&#x27;2020-04-12&#x27;</span>)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    orderId,</span><br><span class="line">    profession,</span><br><span class="line">    age_range,</span><br><span class="line">    reason,</span><br><span class="line">    cancel_time</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    ods_didi.t_user_cancel_order</span><br><span class="line"><span class="keyword">where</span> dt<span class="operator">=</span><span class="string">&#x27;2020-04-12&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> dw_didi.t_user_pay_order(</span><br><span class="line">   id string comment <span class="string">&#x27;支付订单ID&#x27;</span>,</span><br><span class="line">   orderId string comment <span class="string">&#x27;订单ID&#x27;</span>,</span><br><span class="line">   real_pay_money <span class="keyword">double</span> comment <span class="string">&#x27;实际支付总额&#x27;</span>,</span><br><span class="line">   has_coupon <span class="type">int</span> comment <span class="string">&#x27;是否使用优惠券（0 - 不使用、1 - 使用）&#x27;</span>,</span><br><span class="line">   pay_way <span class="type">int</span> comment <span class="string">&#x27;支付方式（0-微信支付、1-支付宝支付、3-QQ钱包支付、4- 一网通银行卡支付）&#x27;</span>,</span><br><span class="line">   mileage <span class="keyword">double</span> comment <span class="string">&#x27;里程（单位公里）&#x27;</span>,</span><br><span class="line">   pay_time string comment <span class="string">&#x27;支付时间&#x27;</span></span><br><span class="line">)</span><br><span class="line">    partitioned <span class="keyword">by</span> (dt string comment <span class="string">&#x27;2020-04-12&#x27;</span>)</span><br><span class="line">    <span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> dw_didi.t_user_pay_order <span class="keyword">partition</span>(dt<span class="operator">=</span><span class="string">&#x27;2020-04-12&#x27;</span>)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    id  ,</span><br><span class="line">    orderId ,</span><br><span class="line">    real_pay_money ,</span><br><span class="line">    has_coupon ,</span><br><span class="line">    pay_way  ,</span><br><span class="line">    mileage ,</span><br><span class="line">    pay_time</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    ods_didi.t_user_pay_order</span><br><span class="line"><span class="keyword">where</span> dt<span class="operator">=</span><span class="string">&#x27;2020-04-12&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> dw_didi.t_user_evaluate(</span><br><span class="line">     id string comment <span class="string">&#x27;评价日志唯一ID&#x27;</span>,</span><br><span class="line">     orderId string comment <span class="string">&#x27;订单ID&#x27;</span>,</span><br><span class="line">     eva_level <span class="type">int</span> comment <span class="string">&#x27;评价等级（1 - 一颗星、... 5 - 五星）&#x27;</span>,</span><br><span class="line">     eva_time string comment <span class="string">&#x27;评价时间&#x27;</span></span><br><span class="line">)</span><br><span class="line">    partitioned <span class="keyword">by</span> (dt string comment <span class="string">&#x27;时间分区&#x27;</span>)</span><br><span class="line">    <span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> dw_didi.t_user_evaluate <span class="keyword">partition</span>(dt<span class="operator">=</span><span class="string">&#x27;2020-04-12&#x27;</span>)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    id,</span><br><span class="line">    orderId,</span><br><span class="line">    eva_level,</span><br><span class="line">    eva_time</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    ods_didi.t_user_evaluate</span><br><span class="line"><span class="keyword">where</span> dt<span class="operator">=</span><span class="string">&#x27;2020-04-12&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>一、集群</title>
      <link href="/2023/06/26/%E6%9A%91%E5%81%87%E9%BB%91%E9%A9%AC%E5%9F%B9%E8%AE%AD/"/>
      <url>/2023/06/26/%E6%9A%91%E5%81%87%E9%BB%91%E9%A9%AC%E5%9F%B9%E8%AE%AD/</url>
      
        <content type="html"><![CDATA[<p>root</p><p>123456</p><p>shutdown -h now 关机</p><h1 id="第一章-集群"><a href="#第一章-集群" class="headerlink" title="第一章 集群"></a>第一章 集群</h1><h2 id="1-1-安装集群"><a href="#1-1-安装集群" class="headerlink" title="1.1.      安装集群"></a>1.1.      安装集群</h2><p>将集群目录 复制 d:&#x2F;opt&#x2F;shixun2 目录中 </p><p>​      <img src="/images/heima/1.png" alt="1687748471325">                                            </p><p>双击 node1.vmx 文件即可启动</p><p>   <img src="/images/heima/2.png" alt="1687748508498"></p><p>   <img src="/images/heima/3.png" alt="1687748518653"></p><p>   <img src="/images/heima/4.png" alt="1687748531073"></p><p><img src="/images/heima/5.png" alt="1687748548614"></p><h2 id="1-2-配置网卡-每天开机后都需要配置"><a href="#1-2-配置网卡-每天开机后都需要配置" class="headerlink" title="1.2.      配置网卡(每天开机后都需要配置)"></a>1.2.      配置网卡(每天开机后都需要配置)</h2><h3 id="1-2-1-配置vmware的网卡"><a href="#1-2-1-配置vmware的网卡" class="headerlink" title="1.2.1. 配置vmware的网卡"></a>1.2.1. 配置vmware的网卡</h3><p>   <img src="/images/heima/6.png" alt="1687748565238"></p><h3 id="1-2-2-配置windows系统的网卡信息"><a href="#1-2-2-配置windows系统的网卡信息" class="headerlink" title="1.2.2. 配置windows系统的网卡信息"></a>1.2.2. 配置windows系统的网卡信息</h3><p>   <img src="/images/heima/7.png" alt="1687748593434"></p><p>   <img src="/images/heima/8.png" alt="1687748608390"></p><p>   <img src="/images/heima/9.png" alt="1687748619013"></p><p>   <img src="/images/heima/10.png" alt="1687748633118"></p><p><img src="/images/heima/11.png" alt="1687748644122"></p><h3 id="1-2-3-测试是否可以连上互联网"><a href="#1-2-3-测试是否可以连上互联网" class="headerlink" title="1.2.3. 测试是否可以连上互联网?"></a>1.2.3. 测试是否可以连上互联网?</h3><p>   <img src="/images/heima/12.png" alt="1687748664326"></p><h2 id="1-3-通过crt客户端操作linux"><a href="#1-3-通过crt客户端操作linux" class="headerlink" title="1.3.      通过crt客户端操作linux"></a>1.3.      通过crt客户端操作linux</h2><h3 id="1-3-1-通过在windows中是否可以连上linux系统"><a href="#1-3-1-通过在windows中是否可以连上linux系统" class="headerlink" title="1.3.1. 通过在windows中是否可以连上linux系统"></a>1.3.1. 通过在windows中是否可以连上linux系统</h3><p>   <img src="/images/heima/13.png" alt="1687748674646"></p><p>   <img src="/images/heima/14.png" alt="1687748687033"></p><h3 id="1-3-2-通过客户端操作linux系统"><a href="#1-3-2-通过客户端操作linux系统" class="headerlink" title="1.3.2. 通过客户端操作linux系统"></a>1.3.2. 通过客户端操作linux系统</h3><p>   <img src="/images/heima/15.png" alt="1687748698441"></p><p>   <img src="/images/heima/16.png" alt="1687748713608"></p><p>   <img src="/images/heima/17.png" alt="1688173003549"></p><p>   <img src="/images/heima/18.png" alt="1688173023806"></p><h2 id="1-4-一键启动集群"><a href="#1-4-一键启动集群" class="headerlink" title="1.4.      一键启动集群"></a>1.4.      一键启动集群</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/onekey/my-start-all.sh </span><br></pre></td></tr></table></figure><p><img src="/images/heima/19.png" alt="1688173047593"></p><h2 id="1-5-一键启动hive"><a href="#1-5-一键启动hive" class="headerlink" title="1.5.      一键启动hive"></a>1.5.      一键启动hive</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /export/server/hive-2.1.0/bin</span><br><span class="line">expect beeline.exp</span><br></pre></td></tr></table></figure><p><img src="/images/heima/20.png" alt="1688173083306"></p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure><p><img src="/images/heima/21.png" alt="1688173101979"></p><h2 id="1-6-查看进程"><a href="#1-6-查看进程" class="headerlink" title="1.6.      查看进程"></a>1.6.      查看进程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jps</span><br></pre></td></tr></table></figure><p><img src="/images/heima/22.png" alt="1688173114789"></p><h2 id="1-7-集群的页面访问"><a href="#1-7-集群的页面访问" class="headerlink" title="1.7.      集群的页面访问"></a>1.7.      集群的页面访问</h2><h3 id="1-7-1-IP访问"><a href="#1-7-1-IP访问" class="headerlink" title="1.7.1. IP访问"></a>1.7.1. IP访问</h3><p>一旦Hadoop集群启动并运行，可以通过web-ui进行集群查看，如下所述：</p><p>查看NameNode页面地址:</p><p><a href="#/"><strong>http:&#x2F;&#x2F;<strong><strong>192.168.52.161</strong></strong>:50070&#x2F;</strong></a> </p><p>​           <img src="/images/heima/23.png" alt="1688173127109"></p><p>查看Yarn集群页面地址:</p><p><a href="http://node01:8088/cluster"><strong>http:&#x2F;&#x2F;<strong><strong>192.168.52.161</strong></strong>:8088&#x2F;cluster</strong></a> </p><p> <img src="/images/heima/24.png" alt="1688173139364"></p><p>​           </p><p>查看MapReduce历史任务页面地址:</p><p><a href="http://node01:19888/jobhistory"><strong>http:&#x2F;&#x2F;<strong><strong>192.168.52.161</strong></strong>:19888&#x2F;jobhistory</strong></a></p><p> <img src="/images/heima/25.png" alt="1688173148887"></p><p>​           </p><h3 id="1-7-2-主机名访问"><a href="#1-7-2-主机名访问" class="headerlink" title="1.7.2. 主机名访问"></a>1.7.2. 主机名访问</h3><p>请注意，以上的访问地址只能使用IP地址，如果想要使用主机名，则对Windows进行配置。</p><p>配置方式:</p><p>1、打开Windows的C:\Windows\System32\drivers\etc目录下hosts文件</p><p>2、在hosts文件中添加以下域名映射</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.52.161  node1  node1.itcast.cn</span><br><span class="line">192.168.52.162  node2  node2.itcast.cn</span><br><span class="line">192.168.52.163  node3  node3.itcast.cn</span><br></pre></td></tr></table></figure><p>配置完之后，可以将以上地址中的IP替换为主机名即可访问，如果还不能访问，则需要重启Windows电脑，比如访问NameNode，可以使用<strong><a href="http://node1:50070/">http://node1:50070/</a></strong> 。</p><h2 id="1-8-Hadoop初体验-HDFS使用"><a href="#1-8-Hadoop初体验-HDFS使用" class="headerlink" title="1.8.      Hadoop初体验: HDFS使用"></a>1.8.      Hadoop初体验: HDFS使用</h2><p>   <img src="/images/heima/26.png" alt="1688173174570"></p><p>1、从Linux本地上传一个文本文件到hdfs的&#x2F;目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#在/export/data/目录中创建a.txt文件，并写入数据</span><br><span class="line">cd /export/data/</span><br><span class="line">touch a.txt</span><br><span class="line">echo &quot;hello&quot; &gt; a.txt </span><br><span class="line"></span><br><span class="line">#将a.txt上传到HDFS的根目录</span><br><span class="line">hadoop fs -put a.txt  /</span><br></pre></td></tr></table></figure><p>1、通过页面查看</p><p> 通过NameNode页面.进入HDFS：<strong><a href="http://node1:50070/">http://node1:50070/</a></strong> </p><p><img src="/images/heima/27.png" alt="1688173245402"></p><p> 查看文件是否创建成功.</p><p><img src="/images/heima/28.png" alt="1688173258225"></p><p>​            </p><h2 id="1-9-一键关闭集群"><a href="#1-9-一键关闭集群" class="headerlink" title="1.9.      一键关闭集群"></a>1.9.      一键关闭集群</h2><h3 id="1-9-1-关闭-hdfs-和-yarn-和-historyserver"><a href="#1-9-1-关闭-hdfs-和-yarn-和-historyserver" class="headerlink" title="1.9.1. 关闭 hdfs 和 yarn 和 historyserver"></a>1.9.1. 关闭 hdfs 和 yarn 和 historyserver</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/onekey/my-stop-all.sh</span><br></pre></td></tr></table></figure><p><img src="/images/heima/29.png" alt="1688173295113"></p><h3 id="1-9-2-关闭跟hive相关的服务"><a href="#1-9-2-关闭跟hive相关的服务" class="headerlink" title="1.9.2. 关闭跟hive相关的服务"></a>1.9.2. 关闭跟hive相关的服务</h3><p>查询进程号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jps</span><br></pre></td></tr></table></figure><p><img src="/images/heima/30.png" alt="1688173335397"></p><p>杀掉 RunJar 对应的进程号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9 xxxx</span><br></pre></td></tr></table></figure><p><img src="/images/heima/31.png" alt="1688173354052"></p><h3 id="1-9-3-关闭系统"><a href="#1-9-3-关闭系统" class="headerlink" title="1.9.3. 关闭系统"></a>1.9.3. 关闭系统</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutdown -h now</span><br></pre></td></tr></table></figure><p><img src="/images/heima/32.png" alt="1688173371537"></p><h2 id="1-10-给集群拍摄快照"><a href="#1-10-给集群拍摄快照" class="headerlink" title="1.10.   给集群拍摄快照"></a>1.10.   给集群拍摄快照</h2><p>   <img src="/images/heima/33.png" alt="1688173381373"></p><p>   <img src="/images/heima/34.png" alt="1688173391188"></p><p>   <img src="/images/heima/35.png" alt="1688173399743"></p><p><strong>注意</strong>: <strong>一定要在关机的状态下拍摄快照!</strong></p>]]></content>
      
      
      <categories>
          
          <category> 暑假实训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟机网关 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux安装一些软件</title>
      <link href="/2023/06/01/python%E7%94%B5%E5%BD%B1/"/>
      <url>/2023/06/01/python%E7%94%B5%E5%BD%B1/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/257.png" alt="1685630139372"></p><ol><li><p>开终端或 Anaconda Prompt。</p></li><li><p>创建一个新的环境（可选）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">codeconda create --name mypysparkenv</span><br><span class="line">conda activate mypysparkenv</span><br></pre></td></tr></table></figure></li><li><p>安装 PySpark：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codeconda install -c conda-forge pyspark</span><br></pre></td></tr></table></figure></li><li><p>输入以下命令，以退出 Anaconda 环境：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Copy codeconda deactivate</span><br></pre></td></tr></table></figure></li></ol><p>激活</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate  mypysparkenv</span><br></pre></td></tr></table></figure><p>查看版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import pyspark</span><br><span class="line">&gt;&gt;&gt; print(pyspark.__version__)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install -n mypysparkenv ipykernel --update-deps --force-reinstall</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install -n mypysparkenv ipykernel --update-deps --force-reinstall</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export SPARK_HOME=/path/to/spark/installation/in/anaconda/envs/myenv/lib/pythonX.X/site-packages/pyspark</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export PYSPARK_HOME=/usr/local/spark</span><br><span class="line">export PYTHONPATH=$PYSPARK_HOME/python:$PYTHONPATH</span><br><span class="line">export PYTHONPATH=$PYSPARK_HOME/python/lib/py4j-0.10.4-src.zip:$PYTHONPATH</span><br></pre></td></tr></table></figure><p>有关deb文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i mysql-connector-j_8.0.33-1ubuntu22.04_all.deb</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark &amp; Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电影推荐系统</title>
      <link href="/2023/05/26/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/05/26/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p>1.创建新的虚拟机</p><h1 id="一、创建虚拟机"><a href="#一、创建虚拟机" class="headerlink" title="一、创建虚拟机"></a>一、创建虚拟机</h1><p>1.<img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/1.png" alt="1685109929770"></p><p>2.<img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/2.png" alt="1685109980203"></p><p>3.官网下载iso文件</p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/3.png" alt="1685110006853"></p><ol start="4"><li></li></ol><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/4.png" alt="1685110041330"></p><ol start="5"><li></li></ol><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/5.png" alt="1685110066266"></p><p>6.随变取（maduit 密码：123）</p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/6.png" alt="1685110292223"></p><p>7.<img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/7.png" alt="1685110316214"></p><p>8.自定义文件</p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/8.png" alt="1685110352421"></p><p>9.内存至少需要4GB</p><p>4核也够了</p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/9.png" alt="1685110486547"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/10.png" alt="1685110513052"></p><p>10.自动初始化</p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/11.png" alt="1685110546985"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/12.png" alt="1685110595550"></p><p>11.初始化完成，点击bigdata用户</p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/13.png" alt="1685110913251"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/78.png" alt="1685255418151"></p><ol start="12"><li></li></ol><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/14.png" alt="1685110980025"></p><p>然后虚拟机的安装就完成了</p><p>emmm ，但是书上说要</p><h5 id="创建一个hadoop用户"><a href="#创建一个hadoop用户" class="headerlink" title="创建一个hadoop用户"></a>创建一个hadoop用户</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd -m hadoop -s /bin/bash</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/16.png" alt="1685111598023"></p><p>设置密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd hadoop</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/17.png" alt="1685111720754"></p><p>切换用户</p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/18.png" alt="1685111770370"></p><h5 id="切换下载源"><a href="#切换下载源" class="headerlink" title="切换下载源"></a>切换下载源</h5><p><img src="C:\Users\GJQ\AppData\Roaming\Typora\typora-user-images\1685171531582.png" alt="1685171531582"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/34.png" alt="1685171458820"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/35.png" alt="1685171599429"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/36.png" alt="1685171618432"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/37.png" alt="1685171647360"></p><h1 id="二、安装vim"><a href="#二、安装vim" class="headerlink" title="二、安装vim"></a>二、安装vim</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get  install vim</span><br></pre></td></tr></table></figure><p>这边得切换到一开始创建的用户（bigdata）那边安装</p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/23.png" alt="1685119947481"></p><p>不然会报这个错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop is not in the sudoers file. This incident will be reported.</span><br></pre></td></tr></table></figure><p>显示了这个说明hadoop用户没有root权限</p><p>然后在bigdata的用户里面打开这个命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo visudo </span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/25.png" alt="1685168070062"></p><p>在最后一行加上</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop  ALL=(ALL:ALL) ALL</span><br></pre></td></tr></table></figure><p>保存关闭之后再切换回hadoop用户</p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/24.png" alt="1685167949585"></p><p>然后再执行安装命令就行了</p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/26.png" alt="1685169097189"></p><p>如果还是报错，在hadoop用户继续输入<code>sudo visudo </code>这命令 然后保存在执行（我不知到空格有没有影响，反正保持和上面代码命令行一样的空格就好）然后Hadoop用户就可以使用sudo命令了</p><h1 id="三、安装JDK环境"><a href="#三、安装JDK环境" class="headerlink" title="三、安装JDK环境"></a>三、安装JDK环境</h1><p>从百度网盘里的东西直接移动到downloads里面</p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/19.png" alt="1685111974555"></p><p>如果不行的话，自己查找vmware tool的东西</p><p>复制完成</p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/21.png" alt="1685112959995"></p><p>切换到管理员模式可以减少很多麻烦</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/27.png" alt="1685170106349"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/lib</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir jvm #创建jvm文件夹用来放JDK文件</span><br><span class="line">cd /home/hadoop/Downloads</span><br><span class="line">tar -zxvf ./jdk-8u162-linux-x64.tar.gz #解压</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/28.png" alt="1685170197086"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/29.png" alt="1685170290984"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv jdk1.8.0_162 /usr/lib/jvm #移动到jvm里</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/30.png" alt="1685170386914"></p><p>回到jvm文件那么发现多了一个</p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/31.png" alt="1685170435438"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~ #用于将当前工作目录切换到当前用户的主目录（home directory）</span><br><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure><p>在最后输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=&quot;/usr/lib/jvm/jdk1.8.0_162&quot;</span><br><span class="line">CLASSPATH=.:$JAVA_HOME/lib/tools.jar</span><br><span class="line">PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">export JAVA_HOME CLASSPATH PATH</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_162</span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib</span><br><span class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/32.png" alt="1685170892887"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/33.png" alt="1685170968110"></p><p>返回这个就是好的</p><h1 id="四、下载Hadoop"><a href="#四、下载Hadoop" class="headerlink" title="四、下载Hadoop"></a>四、下载Hadoop</h1><h4 id="安装ssh"><a href="#安装ssh" class="headerlink" title="安装ssh"></a>安装ssh</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install openssh-server</span><br><span class="line">ssh localhost</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh/</span><br><span class="line">ssh-keygen -t rsa  #全回车</span><br><span class="line">cat ./id_rsa.pub &gt;&gt; ./authorized_keys</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/39.png" alt="1685175855423"></p><h4 id="安装hadoop"><a href="#安装hadoop" class="headerlink" title="安装hadoop"></a>安装hadoop</h4><p>找到原本下载hadoop安装包的文件夹解压</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf hadoop-2.7.1.tar.gz</span><br><span class="line">sudo mv hadoop-2.7.1 /usr/local #移动</span><br><span class="line">sudo mv hadoop-2.7.1 ./hadoop #改名</span><br><span class="line">sudo chown -R hadoop ./hadoop #修改文件夹权限</span><br></pre></td></tr></table></figure><p>看单机版hadoop信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/hadoop</span><br><span class="line">./bin/hadoop version</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/40.png" alt="1685190557505"></p><p>因为需要伪分布式，继续伪分布式的配置</p><h5 id="core-site-xml"><a href="#core-site-xml" class="headerlink" title="core-site.xml"></a>core-site.xml</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/hadoop/etc/hadoop</span><br><span class="line">vim core-site.xml</span><br></pre></td></tr></table></figure><p>复制这个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;file:/usr/local/hadoop/tmp&lt;/value&gt;</span><br><span class="line">        &lt;description&gt;Abase for other temporary directories.&lt;/description&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;hdfs://localhost:9000&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="hdfs-site-xml"><a href="#hdfs-site-xml" class="headerlink" title="hdfs-site.xml"></a>hdfs-site.xml</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/hadoop/etc/hadoop</span><br><span class="line">vim hdfs-site.xml</span><br></pre></td></tr></table></figure><p>复制这个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;1&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;file:/usr/local/hadoop/tmp/dfs/name&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;file:/usr/local/hadoop/tmp/dfs/data&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="hadoop-env-sh"><a href="#hadoop-env-sh" class="headerlink" title="hadoop-env.sh"></a>hadoop-env.sh</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/hadoop/etc/hadoop</span><br><span class="line">vim hadoop-env.sh</span><br></pre></td></tr></table></figure><p>找到这边添加一个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># The java implementation to use.</span><br><span class="line">export JAVA_HOME=$&#123;JAVA_HOME&#125;</span><br><span class="line">export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_162</span><br></pre></td></tr></table></figure><h5 id="yarn-env-sh"><a href="#yarn-env-sh" class="headerlink" title="yarn-env.sh"></a>yarn-env.sh</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/hadoop/etc/hadoop</span><br><span class="line">vim yarn-env.sh</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">插入如下代码：</span><br><span class="line">export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_162</span><br></pre></td></tr></table></figure><h5 id="mapred-site-xml文件配置"><a href="#mapred-site-xml文件配置" class="headerlink" title="mapred-site.xml文件配置"></a>mapred-site.xml文件配置</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/hadoop/etc/hadoop</span><br><span class="line">vim mapred-site.xml</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h5 id="yarn-site-xml配置"><a href="#yarn-site-xml配置" class="headerlink" title="yarn-site.xml配置"></a>yarn-site.xml配置</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/hadoop/etc/hadoop</span><br><span class="line">vim yarn-site.xml</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;  </span><br><span class="line">&lt;property&gt;  </span><br><span class="line">        &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;  </span><br><span class="line">        &lt;value&gt;mapreduce_shuffle&lt;/value&gt;  </span><br><span class="line">&lt;/property&gt;  </span><br><span class="line">&lt;property&gt;  </span><br><span class="line">        &lt;name&gt;yarn.resourcemanager.webapp.address&lt;/name&gt;  </span><br><span class="line">        &lt;value&gt;192.168.2.10:8099&lt;/value&gt;  </span><br><span class="line">        &lt;description&gt;这个地址是mr管理界面的&lt;/description&gt;  </span><br><span class="line">&lt;/property&gt;  </span><br><span class="line">&lt;/configuration&gt;  </span><br></pre></td></tr></table></figure><p>执行名称结点格式化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/hadoop</span><br><span class="line">./bin/hdfs namenode -format</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/41.png" alt="1685192609644"></p><p>显示这个就是成功</p><p>ps：如果显示没有java啥的，重新看看<code>vim ~/.bashrc</code>里面的东西在不在，然后<code>source</code></p><h4 id="启动hadoop"><a href="#启动hadoop" class="headerlink" title="启动hadoop"></a>启动hadoop</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/hadoop/</span><br><span class="line">./sbin/start-dfs.sh</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/42.png" alt="1685192760524"></p><p>打yes</p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/43.png" alt="1685194525156"></p><p>再打</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jps</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/44.png" alt="1685195119670"></p><p>成功</p><p>但是还要干点东西，不知道为啥书上没看懂</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">我们在配置文件中配置了一些文件夹路径，现在我们来创建他们，在/usr/local/hadoop/目录下使用hadoop用户操作，建立tmp、hdfs/name、hdfs/data目录，执行如下命令：</span><br><span class="line">mkdir -p /usr/local/hadoop/tmp </span><br><span class="line">mkdir /usr/local/hadoop/hdfs </span><br><span class="line">mkdir /usr/local/hadoop/hdfs/data </span><br><span class="line">mkdir /usr//localhadoop/hdfs/name</span><br></pre></td></tr></table></figure><h5 id="将Hadoop添加到环境变量中"><a href="#将Hadoop添加到环境变量中" class="headerlink" title="将Hadoop添加到环境变量中"></a>将Hadoop添加到环境变量中</h5><p>切换到root用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>插入</p><figure class="highlight plaintext"><figcaption><span>HADOOP_HOME</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin</span><br></pre></td></tr></table></figure><p>使之生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>确保 <code>bin</code> 目录已添加到 <code>PATH</code> 环境变量中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export PATH=/usr/local/hadoop/bin:$PATH</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>现在配置工作已经基本搞定，接下来只需要完成：1.格式化<code>HDFS</code>文件、2.启动<code>hadoop</code>、3.验证<code>Hadoop</code> 即可。</p><h5 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h5><p>在使用<code>Hadoop</code>之前我们需要格式化一些<code>hadoop</code>的基本信息。 使用如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop namenode -format</span><br></pre></td></tr></table></figure><p>出现如下界面代表成功：</p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/45.png" alt="1685196452276"></p><h5 id="启动Hadoop"><a href="#启动Hadoop" class="headerlink" title="启动Hadoop"></a>启动Hadoop</h5><p>接下来我们启动<code>Hadoop</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start-dfs.sh</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/46.png" alt="预览大图"></p><p>这个是表示启动没成功，是因为<code>root</code>用户现在还不能启动<code>hadoop</code>，我们来设置一下就可以了。</p><p>在<code>/hadoop/sbin</code>路径下： <code>cd /usr/local/hadoop/sbin</code>。</p><p> 将<code>start-dfs.sh</code>，<code>stop-dfs.sh</code>两个文件顶部添加以下参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env bash</span><br><span class="line">HDFS_DATANODE_USER=root</span><br><span class="line">HADOOP_SECURE_DN_USER=hdfs</span><br><span class="line">HDFS_NAMENODE_USER=root</span><br><span class="line">HDFS_SECONDARYNAMENODE_USER=root</span><br></pre></td></tr></table></figure><p>还有，<code>start-yarn.sh</code>，<code>stop-yarn.sh</code>顶部也需添加以下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env bash</span><br><span class="line">YARN_RESOURCEMANAGER_USER=root</span><br><span class="line">HADOOP_SECURE_DN_USER=yarn</span><br><span class="line">YARN_NODEMANAGER_USER=root</span><br></pre></td></tr></table></figure><p>再次启动<code>start-dfs.sh</code>，最后输入命令 <code>jps</code> 验证,出现如下界面代表启动成功：</p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/44.png" alt="1685195119670"></p><p><em><strong>下次启动就不要再执行namenode -format那个命令了！！！！</strong></em></p><h1 id="五、HDFS操作常用Shell命令"><a href="#五、HDFS操作常用Shell命令" class="headerlink" title="五、HDFS操作常用Shell命令"></a>五、HDFS操作常用Shell命令</h1><h4 id="1-1-启动HDFS服务"><a href="#1-1-启动HDFS服务" class="headerlink" title="1.1 启动HDFS服务"></a>1.1 启动HDFS服务</h4><p>1.使用start-dfs.sh命令启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start-dfs.sh</span><br></pre></td></tr></table></figure><p>2.使用JPS命令查看是否启动成功<br><strong>jps</strong></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/44.png" alt="1685195119670"></p><h4 id="1-2-help-命令"><a href="#1-2-help-命令" class="headerlink" title="1.2 help 命令"></a>1.2 help 命令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs  dfs  -help</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/47.png" alt="1685198775065"></p><h4 id="1-3-ls-命令"><a href="#1-3-ls-命令" class="headerlink" title="1.3 ls 命令"></a>1.3 ls 命令</h4><p>功能：显示目录信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -ls /</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/48.png" alt="1685198866616"></p><p><em>可以看到找到一个&#x2F;user文件</em></p><h4 id="1-4-mkdir-命令"><a href="#1-4-mkdir-命令" class="headerlink" title="1.4 mkdir 命令"></a>1.4 mkdir 命令</h4><p>功能：在 hdfs 上创建目录</p><p>1.在根目录的 user 文件夹下创建 hadoop 文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/hadoop</span><br><span class="line">hdfs dfs -mkdir  /user/hadoop</span><br></pre></td></tr></table></figure><p>2.使用 ls 命令查看，可以看到出现了hadoop 文件夹：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs  dfs -ls  /user</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/49.png" alt="1685199066453"></p><h4 id="1-5-put-命令"><a href="#1-5-put-命令" class="headerlink" title="1.5 put 命令"></a>1.5 put 命令</h4><p>功能：上传 Linux 系统中的文件到 HDFS 文件系统的指定目录</p><p>1.首先使用 vi 命令在 linux本地编辑一份数据文件 输入命令：vi stu01.txt </p><p><strong>vi stu01.txt</strong></p><p>按 <strong>i键</strong>进入编辑模式，左下角出现–INSERT–字符后，输入以下内容，</p><p> <strong>234</strong></p><p> <strong>5678</strong> </p><p><strong>Hadoop</strong> </p><p>然后按<strong>ESC 键</strong>，左下角–INSERT–字符消失后，在英文输入状态下输入 <strong>:wq</strong> ，回车保存退出文件。</p><p>2.将刚刚创建的stu01.txt文件上传到HDFS上面 </p><p> <strong>hdfs  dfs  -put  stu01.txt  &#x2F;user&#x2F;hadoop</strong></p><p>3.使用 ls 命令查看，可以看到出现了stu01.txt文件</p><p><strong>hdfs  dfs  -ls  &#x2F;user&#x2F;hadoop</strong></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/50.png" alt="1685202619219"></p><h4 id="1-6-cat-命令"><a href="#1-6-cat-命令" class="headerlink" title="1.6 cat 命令"></a>1.6 cat 命令</h4><p>功能：显示文件内容 </p><p> <strong>hdfs  dfs  -cat  &#x2F;user&#x2F;hadoop&#x2F;stu01.txt</strong></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/51.png" alt="1685202707851"></p><h4 id="1-7-text-命令"><a href="#1-7-text-命令" class="headerlink" title="1.7 text 命令"></a>1.7 text 命令</h4><p>功能：以字符形式打印一个文件的内容 </p><p> <strong>hdfs  dfs -text  &#x2F;user&#x2F;hadoop&#x2F;stu01.txt</strong></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/52.png" alt="1685202765362"></p><h4 id="1-8-cp-命令"><a href="#1-8-cp-命令" class="headerlink" title="1.8 cp 命令"></a>1.8 cp 命令</h4><p>功能：从 hdfs 的一个路径拷贝 hdfs 的另一个路径</p><p> 1.查看HDFS上的根目录下的内容 </p><p> <strong>hdfs  dfs  -ls  &#x2F;</strong></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/53.png" alt="1685202832771"></p><p>2.查看HDFS上的&#x2F;user&#x2F;hadoop下的内容<br> <strong>hdfs  dfs  -ls  &#x2F;user&#x2F;hadoop</strong></p><p>3.将&#x2F;user&#x2F;hadoop下的stu01.txt拷贝到根目录下 </p><p><strong>hdfs  dfs  -cp  &#x2F;user&#x2F;hadoop&#x2F;stu01.txt  &#x2F;</strong></p><p>4.再次查看HDFS上的根目录下的内容</p><p><strong>hdfs  dfs  -ls  &#x2F;</strong></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/54.png" alt="1685202983534"></p><p><em>从上面的图中可以看出文件已经被复制到了HDFS的根目录下。</em></p><h4 id="1-9-mv-命令"><a href="#1-9-mv-命令" class="headerlink" title="1.9 mv 命令"></a>1.9 mv 命令</h4><p>功能：从 hdfs 的一个路径拷贝 hdfs 的另一个路径</p><p>1.在HDFS上面创建一个新的目录<br> <strong>hdfs  dfs  -mkdir  &#x2F;user&#x2F;hadoop2</strong><br> <strong>hdfs  dfs  -ls  &#x2F;user</strong></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/55.png" alt="1685203093936"></p><p>2.查看HDFS上的根目录下的内容<br><strong>hdfs  dfs  -ls  &#x2F;</strong></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/56.png" alt="1685203176090"></p><p>3.将跟目录下的stu01.txt移动到&#x2F;user&#x2F;hadoop2下</p><p> <strong>hdfs  dfs  -mv  &#x2F;stu01.txt  &#x2F;user&#x2F;hadoop2</strong></p><p>4.再次查看HDFS上的根目录下的内容</p><p><strong>hdfs  dfs  -ls  &#x2F;</strong></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/57.png" alt="1685203297506"></p><p>5.查看&#x2F;user&#x2F;stu02下的内容<br> <strong>hdfs  dfs  -ls  &#x2F;user&#x2F;hadoop2</strong></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/58.png" alt="1685203353082"></p><p><em>从上面的图中可以看出文件已经被移动到了&#x2F;user&#x2F;stu02的根目录下。</em></p><h4 id="1-10-rm-命令"><a href="#1-10-rm-命令" class="headerlink" title="1.10 rm 命令"></a>1.10 rm 命令</h4><p>功能：删除 hdfs 文件或文件夹</p><p>1.将HDFS上面的&#x2F;user&#x2F;hadoop&#x2F;stu01.txt文件删除</p><p> <strong>hdfs  dfs  -rm  &#x2F;user&#x2F;hadoop&#x2F;stu01.txt</strong></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/59.png" alt="1685203456655"></p><p> <strong>hdfs  dfs  -ls  &#x2F;user&#x2F;hadoop</strong><br><em>没有显示stu01.txt结果，则正确。</em></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/60.png" alt="1685203653530"></p><p>2.将HDFS上面的&#x2F;user&#x2F;hadoop&#x2F;input&#x2F;文件夹删除<br><strong>hdfs  dfs  -rm  -r  &#x2F;user&#x2F;hadoop&#x2F;input</strong></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/61.png" alt="1685203722917"></p><p><strong>hdfs  dfs  -ls  &#x2F;user&#x2F;hadoop</strong></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/62.png" alt="1685203775061"></p><p>删除成功</p><h4 id="2-1-moveFromLocal命令"><a href="#2-1-moveFromLocal命令" class="headerlink" title="2.1 moveFromLocal命令"></a>2.1 moveFromLocal命令</h4><p>功能：从本地剪切粘贴到 hdfs</p><p>1.使用 vi 命令在 linux 本地先创建一个数据文件，stu01_2.txt </p><p> <strong>vi stu01_2.txt</strong> 按 i 进入编辑模式，输入内容，</p><p> **hadoop **</p><p><strong>hive</strong> </p><p>然后按 esc 键，再同时按下 shift 和冒号键，输入 wq，保存退出。</p><p>2.查看本地目录中的文件 </p><p> <strong>ls</strong> </p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/63.png" alt="1685204261895"></p><p>3.将该文件从本地剪切粘贴到 hdfs</p><p> <strong>hdfs  dfs  -mkdir &#x2F;user&#x2F;hadoop&#x2F;</strong></p><p> <strong>hdfs  dfs  -moveFromLocal  stu01-2.txt &#x2F;user&#x2F;hadoop&#x2F;</strong></p><p>4.查看本地文件 </p><p><strong>ls</strong> </p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/64.png" alt="1685204419455"></p><p>5.查看HDFS上面的文件</p><p><strong>hdfs  dfs  -ls  &#x2F;user&#x2F;hadoop&#x2F;</strong></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/65.png" alt="1685204477195"></p><p>6.查看文件的内容</p><p><strong>hdfs  dfs  -cat  &#x2F;user&#x2F;hadoop&#x2F;stu01-2.txt</strong> </p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/66.png" alt="1685204545062"></p><p><em>可以看到和我们写入的内容一致，而且本地中也没有了该文件，该文件已经被剪切到了HDFS上面。</em></p><h4 id="2-2-appendToFile-命令"><a href="#2-2-appendToFile-命令" class="headerlink" title="2.2 appendToFile 命令"></a>2.2 appendToFile 命令</h4><p>功能：追加一个文件到已经存在的文件末尾</p><p>1.创建本地stu01.txt文件的内容</p><p><strong>vi stu01.txt</strong></p><p> 按下<strong>i</strong>键进入编辑模式，左下角出现–INSERT–后，将以下内容输入</p><p> <strong>234</strong> </p><p><strong>5678</strong> </p><p><strong>Hadoop</strong> </p><p>输入完成后，按下<strong>ESC键</strong>，左下角–INSERT–消失后，在英文状态下输入 <strong>:wq</strong> ，回车保存退出文件。</p><p>2.查看HDFS上面的stu01-2.txt文件的内容 </p><p> <strong>hdfs  dfs  -cat  &#x2F;user&#x2F;hadoop&#x2F;stu01-2.txt</strong> </p><p><code>234</code> </p><p><code>5678</code></p><p><code>hadoop</code></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/67.png" alt="1685204861869"></p><p>3.将本地stu01.txt文件的内容追加写到HDFS上面的stu01_2.txt文件中 </p><p> <strong>hdfs  dfs  -appendToFile  stu01.txt  &#x2F;user&#x2F;hadoop&#x2F;stu01-2.txt</strong></p><p>4.再次查看HDFS上面的stu01-2.txt文件的内容 </p><p> <strong>hdfs  dfs  -cat  &#x2F;user&#x2F;hadoop&#x2F;stu01-2.txt</strong></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/68.png" alt="1685204947959"></p><h4 id="2-3-get-命令"><a href="#2-3-get-命令" class="headerlink" title="2.3 get 命令"></a>2.3 get 命令</h4><p>功能：等同于 copyToLocal，就是从 hdfs 下载文件到本地</p><p>1.查看本地目录中的文件 </p><p> <strong>ls</strong> </p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/69.png" alt="1685205045298"></p><p>2.将stu01_2.txt文件下载到本地</p><p>**hdfs  dfs  -get  &#x2F;user&#x2F;hadoop&#x2F;stu01-2.txt **</p><p>3.查看本地目录中的文件 </p><p> <strong>ls</strong> </p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/70.png" alt="1685205084641"></p><p>4.查看stu01-2.txt中的内容 </p><p> <strong>cat  stu01_2.txt</strong> </p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/71.png" alt="1685205126650"></p><h1 id="六、Spark下载"><a href="#六、Spark下载" class="headerlink" title="六、Spark下载"></a>六、Spark下载</h1><p>进入</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /home/hadoop/Downloads</span><br><span class="line">tar -zxvf spark-2.1.0-bin-without-hadoop.tgz</span><br><span class="line">mv spark-2.1.0-bin-without-hadoop  spark #改名</span><br><span class="line">sudo spark /usr/local </span><br></pre></td></tr></table></figure><p>加上权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R hadoop:hadoop ./spark</span><br></pre></td></tr></table></figure><p>复制一份</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp ./conf/spark-env.sh.template  ./conf/spark-env.sh</span><br></pre></td></tr></table></figure><p>编辑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim spark-env.sh</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export SPARK_DIST_CLASSPATH=$(/usr/local/hadoop/bin/hadoop classpath)</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/79.png" alt="1685260995121"></p><p>检验是否成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/spark</span><br><span class="line">bin/run-example SparkPi</span><br></pre></td></tr></table></figure><p>过滤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/run-example  SparkPi 2&gt;&amp;1 | grep &quot;Pi is roughly&quot;</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/80.png" alt="1685261139576"></p><h1 id="七、在spark-shell中运行"><a href="#七、在spark-shell中运行" class="headerlink" title="七、在spark-shell中运行"></a>七、在spark-shell中运行</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/spark</span><br><span class="line"> ./bin/spark-shell</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/81.png" alt="1685262195916"></p><h1 id="八、安装MySQL"><a href="#八、安装MySQL" class="headerlink" title="八、安装MySQL"></a>八、安装MySQL</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server</span><br></pre></td></tr></table></figure><p>启动mysql服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service mysql stop 先手动关</span><br><span class="line">service mysql start再手动开</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/82.png" alt="1685262504893"></p><p>看是否成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo netstat -tap | grep mysql</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/83.png" alt="1685262547044"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/84.png" alt="1685262954690"></p><p>没有权限</p><p>用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql -u root -p</span><br></pre></td></tr></table></figure><p>然后输入这个 密码输入是’123’</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123&#x27;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/85.png" alt="1685263053475"></p><p>好了</p><p>修改乱码问题</p><p><code>atin1</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &quot;char%&quot;;</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/86.png" alt="1685263155580"></p><p>修改配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/mysql/mysql.conf.d/</span><br><span class="line">vim mysqlb.cnf</span><br></pre></td></tr></table></figure><p>在mysqld.cnf添加</p><p><code>character_set_server=utf8</code></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/87.png" alt="1685263422570"></p><p>重启mysql</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql restart</span><br></pre></td></tr></table></figure><p>再进去mysql</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>再查看编码方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &quot;char%&quot;;</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/88.png" alt="1685263835946"></p><p>好了</p><h3 id="mysql常用操作"><a href="#mysql常用操作" class="headerlink" title="mysql常用操作"></a>mysql常用操作</h3><h6 id="1-1显示数据库"><a href="#1-1显示数据库" class="headerlink" title="1.1显示数据库"></a>1.1显示数据库</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/89.png" alt="1685263940575"></p><h5 id="2-2显示数据库中的表"><a href="#2-2显示数据库中的表" class="headerlink" title="2.2显示数据库中的表"></a>2.2显示数据库中的表</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">show tables;</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/90.png" alt="1685264067018"></p><h5 id="3-3显示数据表的结构"><a href="#3-3显示数据表的结构" class="headerlink" title="3.3显示数据表的结构"></a>3.3显示数据表的结构</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">describe user(表名);</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/91.png" alt="1685264110204"></p><h5 id="3-4查询表中的记录"><a href="#3-4查询表中的记录" class="headerlink" title="3.4查询表中的记录"></a>3.4查询表中的记录</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user(表名);</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/92.png" alt="1685264219643"></p><h5 id="3-5创建数据库"><a href="#3-5创建数据库" class="headerlink" title="3.5创建数据库"></a>3.5创建数据库</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database 库名;</span><br></pre></td></tr></table></figure><p>创建一个名称为aaa</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database aaa;</span><br></pre></td></tr></table></figure><h5 id="3-6创建表"><a href="#3-6创建表" class="headerlink" title="3.6创建表"></a>3.6创建表</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use 库名;</span><br><span class="line">create table 表名(字段设定列表);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use aaa;</span><br><span class="line">create table person (id int(3) auto_increment not null primary key,xm varchar(10),xb varchar(2),csny date);</span><br></pre></td></tr></table></figure><p>显示person表的结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">describe person;</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/93.png" alt="1685264596457"></p><h5 id="3-7增加记录"><a href="#3-7增加记录" class="headerlink" title="3.7增加记录"></a>3.7增加记录</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into person values(null,&#x27;张三&#x27;,&#x27;男&#x27;,&#x27;1997-01-02&#x27;);</span><br><span class="line">insert into person values(null,&#x27;李四&#x27;,&#x27;女&#x27;,&#x27;1998-05-04&#x27;);</span><br></pre></td></tr></table></figure><p>用select查询person表的记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from person;</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/94.png" alt="1685264874151"></p><h5 id="3-8修改记录"><a href="#3-8修改记录" class="headerlink" title="3.8修改记录"></a>3.8修改记录</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update person set csny=&#x27;1971-01-10&#x27; where xm=&#x27;张三&#x27;;</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/95.png" alt="1685264965167"></p><h5 id="3-9删除记录"><a href="#3-9删除记录" class="headerlink" title="3.9删除记录"></a>3.9删除记录</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from person where xm=&#x27;张三&#x27;;</span><br></pre></td></tr></table></figure><h5 id="3-10删除数据库和表"><a href="#3-10删除数据库和表" class="headerlink" title="3.10删除数据库和表"></a>3.10删除数据库和表</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">drop database 库名;</span><br><span class="line">drop table 表名;</span><br></pre></td></tr></table></figure><h5 id="3-11看mysql版本"><a href="#3-11看mysql版本" class="headerlink" title="3.11看mysql版本"></a>3.11看mysql版本</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#x27;version&#x27;;</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/96.png" alt="1685265089600"></p><h1 id="九、Scala安装"><a href="#九、Scala安装" class="headerlink" title="九、Scala安装"></a>九、Scala安装</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /home/hadoop/Downloads</span><br><span class="line">tar -zxvf scala-2.11.8.tgz</span><br><span class="line">mv scala-2.11.8  scala #改名</span><br><span class="line">sudo scala /usr/local </span><br><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$PATH:/usr/local/scala/bin</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>检查scala是否安装成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scala</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/97.png" alt="1685269159574"></p><h1 id="十、IntelliJ-IDEA开发工具的安装和使用方法"><a href="#十、IntelliJ-IDEA开发工具的安装和使用方法" class="headerlink" title="十、IntelliJ IDEA开发工具的安装和使用方法"></a>十、IntelliJ IDEA开发工具的安装和使用方法</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /home/hadoop/Downloads</span><br><span class="line">tar -zxvf ideaIU-2017.3.5.tar.gz</span><br><span class="line">mv idea-IU-173.4674.33 idea  #改名</span><br><span class="line">sudo mv idea /usr/local </span><br></pre></td></tr></table></figure><h1 id="十一、启动IDEA"><a href="#十一、启动IDEA" class="headerlink" title="十一、启动IDEA"></a>十一、启动IDEA</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/idea</span><br><span class="line">./bin/idea.sh</span><br></pre></td></tr></table></figure><p>会显示</p><p>一个界面忘记截图了</p><p>然后</p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/98.png" alt="1685270925380"></p><p>我选的evaluate for free</p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/99.png" alt="1685271025736"></p><h4 id="1-为IDEA安装Scala插件"><a href="#1-为IDEA安装Scala插件" class="headerlink" title="1.为IDEA安装Scala插件"></a>1.为IDEA安装Scala插件</h4><p>点plugins</p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/100.png" alt="1685271144033"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/101.png" alt="1685271268655"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/102.png" alt="1685271312332"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/103.png" alt="1685271339540"></p><h4 id="2-配置JDK"><a href="#2-配置JDK" class="headerlink" title="2.配置JDK"></a>2.配置JDK</h4><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/104.png" alt="1685271410325"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/105.png" alt="1685271441447"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/106.png" alt="1685271471890"></p><h4 id="3-创建一个新项目WordCount"><a href="#3-创建一个新项目WordCount" class="headerlink" title="3.创建一个新项目WordCount"></a>3.创建一个新项目WordCount</h4><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/107.png" alt="1685271523118"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/108.png" alt="1685271563074"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/109.png" alt="1685271626948"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/110.png" alt="1685271651301"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/111.png" alt="1685271769565"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/112.png" alt="1685271806997"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/113.png" alt="1685271836024"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/114.png" alt="1685271870252"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/115.png" alt="1685271886513"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/116.png" alt="1685271905730"></p><h4 id="4-设置目录"><a href="#4-设置目录" class="headerlink" title="4.设置目录"></a>4.设置目录</h4><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/117.png" alt="1685271994038"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/118.png" alt="1685272015590"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/119.png" alt="1685272055139"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/120.png" alt="1685272092519"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/121.png" alt="1685272125104"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/122.png" alt="1685272147217"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/123.png" alt="1685272271767"></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkContext</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkContext</span>._</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">WordCount</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</span><br><span class="line">    <span class="keyword">val</span> inputFile =  <span class="string">&quot;file:///usr/local/spark/mycode/wordcount/word.txt&quot;</span></span><br><span class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">&quot;WordCount&quot;</span>).setMaster(<span class="string">&quot;local&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line">    <span class="keyword">val</span> textFile = sc.textFile(inputFile)</span><br><span class="line">    <span class="keyword">val</span> wordCount = textFile.flatMap(line =&gt; line.split(<span class="string">&quot; &quot;</span>)).map(word =&gt; (word, <span class="number">1</span>)).reduceByKey((a, b) =&gt; a + b)</span><br><span class="line">    wordCount.foreach(println)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记得去mycode里面船舰一个wordcount</p><h4 id="5-配置pom-xml文件"><a href="#5-配置pom-xml文件" class="headerlink" title="5.配置pom.xml文件"></a>5.配置pom.xml文件</h4><p> <img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/124.png" alt="1685272480099"></p><p>输入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>dblab<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>WordCount<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spark.version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">spark.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scala.version</span>&gt;</span>2.11<span class="tag">&lt;/<span class="name">scala.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-core_$&#123;scala.version&#125;<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spark.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-streaming_$&#123;scala.version&#125;<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spark.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-sql_$&#123;scala.version&#125;<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spark.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-hive_$&#123;scala.version&#125;<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spark.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-mllib_$&#123;scala.version&#125;<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spark.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.scala-tools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-scala-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.15.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>testCompile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.19<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">skip</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skip</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/125.png" alt="1685272619864"></p><p>emm….因为前面没有安装maven所以，压根九不能自动生成</p><p>首先装一下maven</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install maven</span><br></pre></td></tr></table></figure><p>命令检查 Maven 是否已安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -v</span><br></pre></td></tr></table></figure><p>然后在terminal里面输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean install</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/126.png" alt="1685274127953"></p><p>然后就自动安装依赖环境了，有点久</p><p>然后</p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/127.png" alt="1685278544534"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/129.png" alt="1685282343457"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/128.png" alt="1685282309762"></p><p>搞定了</p><h4 id="6-打包WordCount程序生成JAR包"><a href="#6-打包WordCount程序生成JAR包" class="headerlink" title="6.打包WordCount程序生成JAR包"></a>6.打包WordCount程序生成JAR包</h4><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/130.png" alt="1685282444814"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/131.png" alt="1685282485542"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/132.png" alt="1685282560600"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/133.png" alt="1685282626558"></p><p>只保留这两个</p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/134.png" alt="1685282715895"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/135.png" alt="1685283580402"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/136.png" alt="1685283604818"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/137.png" alt="1685283626589"></p><p>生成的JAR在~&#x2F;IdeaProjects&#x2F;WordCount&#x2F;out&#x2F;artifacts&#x2F;WordCount_jar&#x2F;WordCount.jar</p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/138.png" alt="1685283743535"></p><h4 id="7-把JAR包提交到Spark中运行"><a href="#7-把JAR包提交到Spark中运行" class="headerlink" title="7.把JAR包提交到Spark中运行"></a>7.把JAR包提交到Spark中运行</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/spark</span><br><span class="line">./bin/spark-submit --class &quot;WordCount&quot; ~/IdeaProjects/WordCount/out/artifacts/WordCount_jar/WordCount.jar</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/139.png" alt="1685284011953"></p><h1 id="十二、安装Kettle"><a href="#十二、安装Kettle" class="headerlink" title="十二、安装Kettle"></a>十二、安装Kettle</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local</span><br><span class="line">sudo mkdir kettle</span><br><span class="line">sudo chown -R hadoop ./kettle #用用户赋予针对kettle目录的操作权限</span><br></pre></td></tr></table></figure><p>把安装包data-integration.zip解压到安装目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">sudo unzip ~/Downloads/data-integration.zip</span><br><span class="line">sudo mv data-integration /usr/local/kettle</span><br></pre></td></tr></table></figure><h4 id="1-复制MySQL数据库驱动程序JAR包"><a href="#1-复制MySQL数据库驱动程序JAR包" class="headerlink" title="1.复制MySQL数据库驱动程序JAR包"></a>1.复制MySQL数据库驱动程序JAR包</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/Downloads</span><br><span class="line">sudo unzip mysql-connector-java-5.1.40.zip</span><br><span class="line">sudo cp ./mysql-connector-java-5.1.40/mysql-connector-java-5.1.40 /usr/local/kettle/data-integration/lib</span><br></pre></td></tr></table></figure><h4 id="2-启动Kettle中的Spoon"><a href="#2-启动Kettle中的Spoon" class="headerlink" title="2.启动Kettle中的Spoon"></a>2.启动Kettle中的Spoon</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/kettle/data-integration</span><br><span class="line">chmod +x spoon.sh #设置权限</span><br><span class="line">sudo ./spoon.sh</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/140.png" alt="1685285957893"></p><h4 id="3-使用Kettle把数据加载到HDFS中"><a href="#3-使用Kettle把数据加载到HDFS中" class="headerlink" title="3.使用Kettle把数据加载到HDFS中"></a>3.使用Kettle把数据加载到HDFS中</h4><ul><li>配置Kettle</li></ul><p>先创建一个word.txt文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">vim word.txt</span><br></pre></td></tr></table></figure><p>随便输入一点英文</p><p>然后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/kettle/data-integration/plugins/pentaho-big-data-plugin/hadoop-configurations/cdh55/</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim config.properties </span><br></pre></td></tr></table></figure><p>最后一行输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">authentication.superuser.provider=NO_AUTH</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mv core-site.xml ./core-site.xml.bak</span><br><span class="line">mv mapred-site.xml ./mapred-site.xml.bak</span><br><span class="line">mv yarn-site.xml ./yarn-site.xml.bak</span><br><span class="line">cp /usr/local/hadoop/etc/hadoop/mapred-site.xml ./mapred-site.xml</span><br><span class="line">cp /usr/local/hadoop/etc/hadoop/yarn-site.xml ./</span><br><span class="line">cp /usr/local/hadoop/etc/hadoop/core-site.xml ./</span><br></pre></td></tr></table></figure><ul><li>新建作业</li></ul><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/141.png" alt="1685334227311"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/142.png" alt="1685334262155"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/143.png" alt="1685334291930"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/144.png" alt="1685334370303"></p><p>这边的post端口必须和之前配置的core-site.xml的设置一样，其他参数可以不改动</p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/145.png" alt="1685334394578"></p><p>点击测试后就是下面三×，其他全勾才对。得保证hadoop开启了。<img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/147.png" alt="1685334916654"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/146.png" alt="1685334574781"></p><ul><li>添加START组件</li></ul><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/148.png" alt="1685335309177"></p><p>拖拽一个START到右侧</p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/149.png" alt="1685335404082"></p><p>然后去JHDFS创建目录input_spark</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/hadoop</span><br><span class="line">hdfs dfs -mkdir /input_spark</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/150.png" alt="1685335697903"></p><p>建立连接（按住shift和鼠标左键）</p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/152.png" alt="1685336425475"></p><p>双击 Hadoop Copy File 那么设置</p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/151.png" alt="1685335750060"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/153.png" alt="1685336517970"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/154.png" alt="1685336542756"></p><p>执行成功</p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/155.png" alt="1685336580568"></p><p>然后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/hadoop</span><br><span class="line">hdfs dfs -ls /input_spark</span><br></pre></td></tr></table></figure><p>就能看到信息</p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/156.png" alt="1685336783168"></p><p><em><strong>那么做的意义是用工具kettle把数据从本地文件加载到HDFS中</strong></em></p><h1 id="十三、使用Spark-SQL读写MySQL数据库的方法"><a href="#十三、使用Spark-SQL读写MySQL数据库的方法" class="headerlink" title="十三、使用Spark SQL读写MySQL数据库的方法"></a>十三、使用Spark SQL读写MySQL数据库的方法</h1><h4 id="1-创建MySQL数据库"><a href="#1-创建MySQL数据库" class="headerlink" title="1.创建MySQL数据库"></a>1.创建MySQL数据库</h4><p>启动数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service mysql start</span><br><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>创建数据库和表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create database spark;</span><br><span class="line">use spark;</span><br><span class="line">create table student (id int(4), name char(20),gender char(4),age int (4));</span><br><span class="line">insert into student values(1,&#x27;Xueqian&#x27;,&#x27;F&#x27;,23);</span><br><span class="line">insert into student values(2,&#x27;Weiliang&#x27;,&#x27;M&#x27;,24);</span><br><span class="line">select * from student;</span><br></pre></td></tr></table></figure><h4 id="2-在spark-shell中读写mysql数据库"><a href="#2-在spark-shell中读写mysql数据库" class="headerlink" title="2.在spark-shell中读写mysql数据库"></a>2.在spark-shell中读写mysql数据库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/Downloads</span><br><span class="line"> cp ./mysql-connector-java-5.1.40/mysql-connector-java-5.1.40-bin.jar /usr/local/spark/jars/</span><br></pre></td></tr></table></figure><p>启动spark shell 时，必须指定MySQL连接驱动JAR包，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/spark</span><br><span class="line">./bin/spark-shell --jars /usr/local/spark/jars/mysql-connector-java-5.1.40-bin.jar  --driver-class-path /usr/local/spark/jars/mysql-connector-java-5.1.40-bin.jar </span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/157.png" alt="1685338120883"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; val jdbcDF= spark.read.format(&quot;jdbc&quot;).</span><br><span class="line">     option(&quot;url&quot;,&quot;jdbc:mysql://localhost:3306/spark&quot;).</span><br><span class="line">     option(&quot;driver&quot;,&quot;com.mysql.jdbc.Driver&quot;).</span><br><span class="line">     option(&quot;dbtable&quot;,&quot;student&quot;).</span><br><span class="line">     option(&quot;user&quot;,&quot;root&quot;).</span><br><span class="line">     option(&quot;password&quot;,&quot;123&quot;).</span><br><span class="line">     option(&quot;useSSL&quot;, &quot;false&quot;).</span><br><span class="line">     load()</span><br></pre></td></tr></table></figure><p>如果出现了，不用在意，好像对下面操作影响不大</p><hr><p>Sun May 28 22:52:36 PDT 2023 WARN: Establishing SSL connection without server’s identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn’t set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to ‘false’. You need either to explicitly disable SSL by setting useSSL&#x3D;false, or set useSSL&#x3D;true and provide truststore for server certificate verification.<br>jdbcDF: org.apache.spark.sql.DataFrame &#x3D; [id: int, name: string … 2 more fields]</p><hr><p>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbcDF.show()</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/158.png" alt="1685340272475"></p><h4 id="3-向MySQL数据库写入数据"><a href="#3-向MySQL数据库写入数据" class="headerlink" title="3.向MySQL数据库写入数据"></a>3.向MySQL数据库写入数据</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以下代码需要一行一行地输入到spark-shell交互式环境中执行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.<span class="type">Properties</span> </span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.types._</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.<span class="type">Row</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//下面设置两条数据，表示两个学生的信息</span></span><br><span class="line"><span class="keyword">val</span> studentRDD = spark.sparkContext.parallelize(<span class="type">Array</span>(<span class="string">&quot;3 Rongcheng M 26&quot;</span>,<span class="string">&quot;4 Guanhua M 27&quot;</span>)).map(_.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line"> </span><br><span class="line"><span class="comment">//下面设置模式信息</span></span><br><span class="line"><span class="keyword">val</span> schema = <span class="type">StructType</span>(<span class="type">List</span>(<span class="type">StructField</span>(<span class="string">&quot;id&quot;</span>, <span class="type">IntegerType</span>, <span class="literal">true</span>),<span class="type">StructField</span>(<span class="string">&quot;name&quot;</span>, <span class="type">StringType</span>, <span class="literal">true</span>),<span class="type">StructField</span>(<span class="string">&quot;gender&quot;</span>, <span class="type">StringType</span>, <span class="literal">true</span>),<span class="type">StructField</span>(<span class="string">&quot;age&quot;</span>, <span class="type">IntegerType</span>, <span class="literal">true</span>)))</span><br><span class="line"> </span><br><span class="line"><span class="comment">//下面创建Row对象，每个Row对象都是rowRDD中的一行</span></span><br><span class="line"><span class="keyword">val</span> rowRDD = studentRDD.map(p =&gt; <span class="type">Row</span>(p(<span class="number">0</span>).toInt, p(<span class="number">1</span>).trim, p(<span class="number">2</span>).trim, p(<span class="number">3</span>).toInt))</span><br><span class="line"> </span><br><span class="line"><span class="comment">//建立起Row对象和模式之间的对应关系，也就是把数据和模式对应起来</span></span><br><span class="line"><span class="keyword">val</span> studentDF = spark.createDataFrame(rowRDD, schema)</span><br><span class="line"> </span><br><span class="line"><span class="comment">//下面创建一个prop变量用来保存JDBC连接参数</span></span><br><span class="line"><span class="keyword">val</span> prop = <span class="keyword">new</span> <span class="type">Properties</span>()</span><br><span class="line">prop.put(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;root&quot;</span>) <span class="comment">//表示用户名是root</span></span><br><span class="line">prop.put(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123&quot;</span>) <span class="comment">//表示密码是123</span></span><br><span class="line">prop.put(<span class="string">&quot;driver&quot;</span>,<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>) <span class="comment">//表示驱动程序是com.mysql.jdbc.Driver</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//下面连接数据库，采用append模式，表示追加记录到数据库spark的student表中</span></span><br><span class="line">studentDF.write.mode(<span class="string">&quot;append&quot;</span>).jdbc(<span class="string">&quot;jdbc:mysql://localhost:3306/spark&quot;</span>,<span class="string">&quot;spark.student&quot;</span>,prop)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbcDF.show()</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/159.png" alt="1685353146978"></p><h4 id="4-编写独立应用程序读写MySQL数据库"><a href="#4-编写独立应用程序读写MySQL数据库" class="headerlink" title="4.编写独立应用程序读写MySQL数据库"></a>4.编写独立应用程序读写MySQL数据库</h4><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/160.png" alt="1685353875195"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/161.png" alt="1685353929474"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/162.png" alt="1685353976875"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/163.png" alt="1685354043177"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/164.png" alt="1685354118424"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/165.png" alt="1685354165755"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/166.png" alt="1685354350410"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/167.png" alt="1685354421083"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/119.png" alt="1685272055139"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/120.png" alt="1685272092519"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/121.png" alt="1685272125104"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/168.png" alt="1685354538874"></p><p>在SparkOperateMySQL写入</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.<span class="type">Properties</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.types._</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.&#123;<span class="type">Row</span>, <span class="type">SparkSession</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SparkOperateMySQL</span></span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> spark= <span class="type">SparkSession</span>.builder().appName(<span class="string">&quot;sqltest&quot;</span>).master(<span class="string">&quot;local[2]&quot;</span>).getOrCreate()</span><br><span class="line">    <span class="keyword">val</span> jdbcDF = spark.</span><br><span class="line">      read.format(<span class="string">&quot;jdbc&quot;</span>).</span><br><span class="line">      option(<span class="string">&quot;url&quot;</span>, <span class="string">&quot;jdbc:mysql://localhost:3306/spark&quot;</span>).</span><br><span class="line">      option(<span class="string">&quot;driver&quot;</span>,<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>).</span><br><span class="line">      option(<span class="string">&quot;dbtable&quot;</span>, <span class="string">&quot;student&quot;</span>).</span><br><span class="line">      option(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>).</span><br><span class="line">      option(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;123&quot;</span>).load()</span><br><span class="line">    jdbcDF.show()</span><br><span class="line">    <span class="keyword">val</span> studentRDD = spark.sparkContext.parallelize(<span class="type">Array</span>(<span class="string">&quot;5 Chenglu F 22&quot;</span>,<span class="string">&quot;6 Linzhe M 23&quot;</span>)).map(_.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">    <span class="keyword">val</span> rowRDD = studentRDD.map(p =&gt; <span class="type">Row</span>(p(<span class="number">0</span>).toInt, p(<span class="number">1</span>).trim, p(<span class="number">2</span>).trim, p(<span class="number">3</span>).toInt))</span><br><span class="line">    rowRDD.foreach(println)</span><br><span class="line">    <span class="keyword">val</span> schema = <span class="type">StructType</span>(<span class="type">List</span>(</span><br><span class="line">      <span class="type">StructField</span>(<span class="string">&quot;id&quot;</span>, <span class="type">IntegerType</span>, <span class="literal">true</span>),</span><br><span class="line">      <span class="type">StructField</span>(<span class="string">&quot;name&quot;</span>, <span class="type">StringType</span>, <span class="literal">true</span>),</span><br><span class="line">      <span class="type">StructField</span>(<span class="string">&quot;gender&quot;</span>, <span class="type">StringType</span>, <span class="literal">true</span>),</span><br><span class="line">      <span class="type">StructField</span>(<span class="string">&quot;age&quot;</span>, <span class="type">IntegerType</span>, <span class="literal">true</span>)))</span><br><span class="line">    <span class="keyword">val</span> studentDF=spark.createDataFrame(rowRDD,schema)</span><br><span class="line">    <span class="keyword">val</span> prop = <span class="keyword">new</span> <span class="type">Properties</span>()</span><br><span class="line">    prop.put(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>)</span><br><span class="line">    prop.put(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;123&quot;</span>)</span><br><span class="line">    prop.put(<span class="string">&quot;driver&quot;</span>,<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>)</span><br><span class="line">    studentDF.write.mode(<span class="string">&quot;append&quot;</span>).jdbc(<span class="string">&quot;jdbc:mysql://localhost:3306/spark&quot;</span>, <span class="string">&quot;spark.student&quot;</span>, prop)</span><br><span class="line">    jdbcDF.show()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在pom.xml中添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>dblab<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-mysql<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-core_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-sql_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.40<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/125.png" alt="1685272619864"></p><p>看到下面有这个就是在下载</p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/169.png" alt="1685355010668"></p><p>run一下</p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/170.png" alt="1685355401632"></p><h4 id="5-生成应用程序JAR包"><a href="#5-生成应用程序JAR包" class="headerlink" title="5.生成应用程序JAR包"></a>5.生成应用程序JAR包</h4><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/130.png" alt="1685282444814"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/131.png" alt="1685282485542"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/171.png" alt="1685355576293"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/172.png" alt="1685355685885"></p><p>同之前的一样</p><p>只删剩</p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/173.png" alt="1685355764997"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/136.png" alt="1685283604818"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/137.png" alt="1685283626589"></p><p>生成的在~&#x2F;IdeaProjects&#x2F;SparkMySQL&#x2F;out&#x2F;artifacts&#x2F;SparkMySQL_jar&#x2F;SparkMySQL.jar中</p><h4 id="6-把JAR包提交到Spark中运行"><a href="#6-把JAR包提交到Spark中运行" class="headerlink" title="6.把JAR包提交到Spark中运行"></a>6.把JAR包提交到Spark中运行</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> cd /usr/local/spark/</span><br><span class="line">./bin/spark-submit --class &quot;SparkOperateMySQL&quot; ~/IdeaProjects/SparkMySQL/out/artifacts/SparkMySQL_jar/SparkMySQL.jar</span><br></pre></td></tr></table></figure><p>成功后如下图</p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/174.png" alt="1685356210586"></p><h1 id="十四、使用Spark-MLlib实现协同过滤算法"><a href="#十四、使用Spark-MLlib实现协同过滤算法" class="headerlink" title="十四、使用Spark MLlib实现协同过滤算法"></a>十四、使用Spark MLlib实现协同过滤算法</h1><h4 id="1-在spark-shell中运行ALS算法"><a href="#1-在spark-shell中运行ALS算法" class="headerlink" title="1.在spark-shell中运行ALS算法"></a>1.在spark-shell中运行ALS算法</h4><p>找到Saprk自带的MoveLens数据集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/spark/data/mllib/als/sample_movielens_data.txt</span><br></pre></td></tr></table></figure><p>使用ALS.train()方法来构建</p><ul><li>引入包</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  org.apache.spark.ml.evaluation.<span class="type">RegressionEvaluator</span></span><br><span class="line"><span class="keyword">import</span>  org.apache.spark.ml.recommendation.<span class="type">ALS</span></span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/175.png" alt="1685360157793"></p><ul><li>创建一个Rating类和parseRating函数。</li></ul><p>parseRating函数读取MovieLens数据集中的每一行，并转化成Rating类的对象</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span>  <span class="class"><span class="keyword">class</span>  <span class="title">Rating</span>(<span class="params">userId: <span class="type">Int</span>, movieId: <span class="type">Int</span>, rating: <span class="type">Float</span>, timestamp: <span class="type">Long</span></span>)</span></span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/176.png" alt="1685360184128"></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">parseRating</span></span>(str: <span class="type">String</span>): <span class="type">Rating</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span>  fields = str.split(<span class="string">&quot;::&quot;</span>)</span><br><span class="line">    assert(fields.size == <span class="number">4</span>)</span><br><span class="line">    <span class="type">Rating</span>(fields(<span class="number">0</span>).toInt, fields(<span class="number">1</span>).toInt, fields(<span class="number">2</span>).toFloat, fields(<span class="number">3</span>).toLong)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/177.png" alt="1685360292549"></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span>  ratings = spark.sparkContext.textFile(<span class="string">&quot;file:///usr/local/spark/data/mllib/als/sample_movielens_ratings.txt&quot;</span>).map(parseRating).toDF()</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/178.png" alt="1685360452458"></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ratings.show()</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/179.png" alt="1685360494208"></p><ul><li>把MovieLens数据集划分训练集和测试集，训练集80%，测试集20%</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span>  <span class="type">Array</span>(training,test) = ratings.randomSplit(<span class="type">Array</span>(<span class="number">0.8</span>,<span class="number">0.2</span>))</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/180.png" alt="1685360696050"></p><ul><li>使用ALS来建立推荐模型。</li></ul><p>这里构建两个模型，一个是显性反馈，另一个是隐性反馈。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span>  alsExplicit = <span class="keyword">new</span> <span class="type">ALS</span>().setMaxIter(<span class="number">5</span>).setRegParam(<span class="number">0.01</span>).setUserCol(<span class="string">&quot;userId&quot;</span>).setItemCol(<span class="string">&quot;movieId&quot;</span>).setRatingCol(<span class="string">&quot;rating&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/181.png" alt="1685360872033"></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span>  alsImplicit = <span class="keyword">new</span> <span class="type">ALS</span>().setMaxIter(<span class="number">5</span>).setRegParam(<span class="number">0.01</span>).setImplicitPrefs(<span class="literal">true</span>).setUserCol(<span class="string">&quot;userId&quot;</span>).setItemCol(<span class="string">&quot;movieId&quot;</span>).setRatingCol(<span class="string">&quot;rating&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/182.png" alt="1685360920841"></p><ul><li>使用训练数据训练推荐模型</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span>  modelExplicit = alsExplicit.fit(training)</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/183.png" alt="1685361134803"></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span>  modelImplicit = alsImplicit.fit(training)</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/184.png" alt="1685361165242"></p><ul><li>对测试集中的用户-电影进行预测，的到预测评分的数据集</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span>  predictionsExplicit= modelExplicit.transform(test).na.drop()</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/185.png" alt="1685361468018"></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span>  predictionsImplicit= modelImplicit.transform(test).na.drop()</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/186.png" alt="1685361488969"></p><ul><li>输出，对比一下真实结果与预测结果</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">predictionsExplicit.show()</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/187.png" alt="1685361695118"></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">predictionsImplicit.show()</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/188.png" alt="1685361738211"></p><ul><li>通过计算模型的均方根误差，来对模型进行评估。均匀方根差越小，模型越准确</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span>  evaluator = <span class="keyword">new</span> <span class="type">RegressionEvaluator</span>().setMetricName(<span class="string">&quot;rmse&quot;</span>).setLabelCol(<span class="string">&quot;rating&quot;</span>).setPredictionCol(<span class="string">&quot;prediction&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/189.png" alt="1685361898480"></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span>  rmseExplicit = evaluator.evaluate(predictionsExplicit)</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/190.png" alt="1685361952024"></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span>  rmseImplicit = evaluator.evaluate(predictionsImplicit)</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/191.png" alt="1685361984946"></p><p>&#x2F;&#x2F;打出两个模型的均方根误差</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">println(<span class="string">s&quot;Explicit:Root-mean-square error = <span class="subst">$rmseExplicit</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/192.png" alt="1685362065744"></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">println(<span class="string">s&quot;Implicit:Root-mean-square error = <span class="subst">$rmseImplicit</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/193.png" alt="1685362121407"></p><h4 id="2-编写独立应用程序运行ALS算法"><a href="#2-编写独立应用程序运行ALS算法" class="headerlink" title="2.编写独立应用程序运行ALS算法"></a>2.编写独立应用程序运行ALS算法</h4><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/194.png" alt="1685366342990"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/195.png" alt="1685375243537"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/117.png" alt="1685271994038"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/118.png" alt="1685272015590"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/119.png" alt="1685272055139"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/120.png" alt="1685272092519"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/121.png" alt="1685272125104"></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.spark.sql.<span class="type">SparkSession</span></span><br><span class="line"><span class="keyword">import</span>  org.apache.spark.ml.evaluation.<span class="type">RegressionEvaluator</span></span><br><span class="line"><span class="keyword">import</span>  org.apache.spark.ml.recommendation.<span class="type">ALS</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">MovieLensALS</span> </span>&#123;</span><br><span class="line">  <span class="keyword">case</span>  <span class="class"><span class="keyword">class</span>  <span class="title">Rating</span>(<span class="params">userId: <span class="type">Int</span>, movieId: <span class="type">Int</span>, rating: <span class="type">Float</span>, timestamp: <span class="type">Long</span></span>)</span>;</span><br><span class="line">  <span class="function"><span class="keyword">def</span>  <span class="title">parseRating</span></span>(str: <span class="type">String</span>): <span class="type">Rating</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span>  fields = str.split(<span class="string">&quot;::&quot;</span>)</span><br><span class="line">    <span class="type">Rating</span>(fields(<span class="number">0</span>).toInt, fields(<span class="number">1</span>).toInt, fields(<span class="number">2</span>).toFloat, fields(<span class="number">3</span>).toLong)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">val</span> spark=<span class="type">SparkSession</span>.builder().appName(<span class="string">&quot;sparkmllibtest&quot;</span>).master(<span class="string">&quot;local[2]&quot;</span>).getOrCreate()</span><br><span class="line">      <span class="keyword">import</span> spark.implicits._</span><br><span class="line">      <span class="keyword">val</span>  ratings = spark.sparkContext.textFile(<span class="string">&quot;file:///usr/local/spark/data/mllib/als/sample_movielens_ratings.txt&quot;</span>).</span><br><span class="line">         map(parseRating).toDF()</span><br><span class="line">          ratings.show()</span><br><span class="line">      <span class="keyword">val</span>  <span class="type">Array</span>(training,test) = ratings.randomSplit(<span class="type">Array</span>(<span class="number">0.8</span>,<span class="number">0.2</span>))</span><br><span class="line">      <span class="keyword">val</span>  alsExplicit = <span class="keyword">new</span> <span class="type">ALS</span>().setMaxIter(<span class="number">5</span>).setRegParam(<span class="number">0.01</span>).setUserCol(<span class="string">&quot;userId&quot;</span>).setItemCol(<span class="string">&quot;movieId&quot;</span>).setRatingCol(<span class="string">&quot;rating&quot;</span>)</span><br><span class="line">      <span class="keyword">val</span>  alsImplicit = <span class="keyword">new</span> <span class="type">ALS</span>().setMaxIter(<span class="number">5</span>).setRegParam(<span class="number">0.01</span>).setImplicitPrefs(<span class="literal">true</span>).setUserCol(<span class="string">&quot;userId&quot;</span>).setItemCol(<span class="string">&quot;movieId&quot;</span>).setRatingCol(<span class="string">&quot;rating&quot;</span>)</span><br><span class="line">      <span class="keyword">val</span>  modelExplicit = alsExplicit.fit(training)</span><br><span class="line">      <span class="keyword">val</span>  modelImplicit = alsImplicit.fit(training)</span><br><span class="line">      <span class="keyword">val</span>  predictionsExplicit= modelExplicit.transform(test).na.drop()</span><br><span class="line">      <span class="keyword">val</span>  predictionsImplicit= modelImplicit.transform(test).na.drop()</span><br><span class="line">      predictionsExplicit.show()</span><br><span class="line">      predictionsImplicit.show()</span><br><span class="line">      <span class="keyword">val</span>  evaluator = <span class="keyword">new</span> <span class="type">RegressionEvaluator</span>().setMetricName(<span class="string">&quot;rmse&quot;</span>).setLabelCol(<span class="string">&quot;rating&quot;</span>).setPredictionCol(<span class="string">&quot;prediction&quot;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">val</span>  rmseExplicit = evaluator.evaluate(predictionsExplicit)</span><br><span class="line">      <span class="keyword">val</span>  rmseImplicit = evaluator.evaluate(predictionsImplicit)</span><br><span class="line">      println(<span class="string">s&quot;Explicit:Root-mean-square error = <span class="subst">$rmseExplicit</span>&quot;</span>)</span><br><span class="line">      println(<span class="string">s&quot;Implicit:Root-mean-square error = <span class="subst">$rmseImplicit</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/196.png" alt="1685375773432"></p><p>然后搞pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>dblab<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SparkALS<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spark.version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">spark.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.spark/spark-sql_2.11 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-sql_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.spark/spark-mllib_2.11 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-mllib_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spark.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.spark/spark-core_2.11 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-core_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spark.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.alchim31.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scala-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>compile-scala<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>add-source<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>test-compile-scala<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>test-compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>add-source<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>testCompile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">scalaVersion</span>&gt;</span>2.11.8<span class="tag">&lt;/<span class="name">scalaVersion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>自己参照前面的把maven运行一下</p><p>然后</p><p>run那个class文件</p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/197+.png" alt="1685376988299"></p><p>成功！</p><p>导出jar文件，参考上面的</p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/198.png" alt="1685377096140"></p><p>把jar提交到spark中运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/spark</span><br><span class="line">./bin/spark-submit --class &quot;MovieLensALS&quot; ~/IdeaProjects/SparkALS/out/artifacts/SparkALS_jar/SparkALS.jar</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/199.png" alt="1685377694946"></p><p>搞定！</p><h1 id="十五、Node-js的安装和使用方法"><a href="#十五、Node-js的安装和使用方法" class="headerlink" title="十五、Node.js的安装和使用方法"></a>十五、Node.js的安装和使用方法</h1><h5 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/Downloads</span><br><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.33.8/install.sh | bash</span><br></pre></td></tr></table></figure><p>这边需要配置一下host 因为某些不可抗拒因素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed to connect to raw.githubusercontent.com port 443</span><br></pre></td></tr></table></figure><p><strong>查询真实IP</strong></p><p>在<a href="https://links.jianshu.com/go?to=https://www.ipaddress.com/">https://www.ipaddress.com/</a>查询raw.githubusercontent.com的真实IP。</p><p><strong>修改hosts</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/hosts</span><br></pre></td></tr></table></figure><p>添加如下内容：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">199.232</span>.<span class="number">96.133</span> raw<span class="selector-class">.githubusercontent</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">上面curl的下载完成后</span><br><span class="line">sudo  vim ~/.bashrc</span><br></pre></td></tr></table></figure><p>把下面的写进去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR/nvm.sh&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>然后下一步</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvm install --lts</span><br><span class="line">node -v</span><br></pre></td></tr></table></figure><p>会出现这个，因为Ubuntu命令太古老了</p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/200.png" alt="1685443698497"></p><p>所以另辟蹊径</p><p>nvm install v12.22.6</p><p>nvm use v12.22.6</p><p>node -v</p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/201.png" alt="1685443838168"></p><h4 id="2-应用"><a href="#2-应用" class="headerlink" title="2.应用"></a>2.应用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">mkdir mynodeapp</span><br><span class="line">cd mynodeapp</span><br><span class="line">vim server.js</span><br></pre></td></tr></table></figure><p>输入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http=<span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="keyword">function</span> (<span class="params">request,response</span>)&#123;</span><br><span class="line">response.<span class="title function_">writeHead</span>(<span class="number">200</span>,&#123;<span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&#x27;text/plain&#x27;</span>&#125;);</span><br><span class="line">response.<span class="title function_">end</span>(<span class="string">&#x27;Hello World\n&#x27;</span>);</span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server running at http://127.0.0.1:3000/&#x27;</span>);</span><br></pre></td></tr></table></figure><p>保存之后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node server.js</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/202.png" alt="1685444371625"></p><h4 id="3-安装express和Jade"><a href="#3-安装express和Jade" class="headerlink" title="3.安装express和Jade"></a>3.安装express和Jade</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">mkdir expressjadeapp</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd expressjadeapp</span><br><span class="line">npm init</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd expressjadeapp</span><br><span class="line">npm install express --save</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd expressjadeapp</span><br><span class="line">npm install jade --save</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim expressjade.js</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> http=<span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 Pug（Jade）作为模板引擎</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;jade&#x27;</span>);</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, __dirname);</span><br><span class="line"><span class="comment">// 定义路由和处理程序</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;test&#x27;</span>, &#123; <span class="attr">title</span>: <span class="string">&#x27;Jade test&#x27;</span>,<span class="attr">message</span>:<span class="string">&#x27;Database Lab&#x27;</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> servser=http.<span class="title function_">createServer</span>(app);</span><br><span class="line">servser.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server running at http://127.0.0.1:3000/&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim test.jade</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">html</span><br><span class="line">head</span><br><span class="line">tittle!=tittle</span><br><span class="line">body</span><br><span class="line">h1!=message</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node expressjade.js</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/203.png" alt="1685446545268"></p><h4 id="实例1-登陆注册"><a href="#实例1-登陆注册" class="headerlink" title="实例1 登陆注册"></a>实例1 登陆注册</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create database userlogin;</span><br><span class="line">use userlogin;</span><br><span class="line">create table user (userid int(20) not null auto_increment,username char(50),password char(50),primary key(userid));</span><br><span class="line">desc user;</span><br><span class="line">select * from user;</span><br></pre></td></tr></table></figure><p>创建项目目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">mkdir userloginapp</span><br><span class="line">cd userloginapp</span><br><span class="line">npm init</span><br></pre></td></tr></table></figure><p>要apt install npm</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install express -save</span><br><span class="line">npm install jade --save</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mysql --save</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim userlogin.js</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by linziyu on 2018/7/3.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * sexpress接收html传递的参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span>  express=<span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span>  app=<span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">var</span> mysql=<span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置MySQL</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> connection = mysql.<span class="title function_">createConnection</span>(&#123;</span><br><span class="line">    host     : <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    user     : <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    password : <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">    database : <span class="string">&#x27;userlogin&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>:<span class="string">&#x27;3306&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line">connection.<span class="title function_">connect</span>();</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="keyword">function</span> (<span class="params">req,res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">sendfile</span>(__dirname + <span class="string">&quot;/&quot;</span> + <span class="string">&quot;index.html&quot;</span> );</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现登录验证功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/login&#x27;</span>,<span class="keyword">function</span> (<span class="params">req,res</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span>  name=req.<span class="property">query</span>.<span class="property">name</span>;</span><br><span class="line">    <span class="keyword">var</span> pwd=req.<span class="property">query</span>.<span class="property">pwd</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">var</span> selectSQL = <span class="string">&quot;select * from user where username = &#x27;&quot;</span>+name+<span class="string">&quot;&#x27; and password = &#x27;&quot;</span>+pwd+<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">    connection.<span class="title function_">query</span>(selectSQL,<span class="keyword">function</span> (<span class="params">err,rs</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span>  err;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(rs);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">        res.<span class="title function_">sendfile</span>(__dirname + <span class="string">&quot;/&quot;</span> + <span class="string">&quot;ok.html&quot;</span> );</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/register.html&#x27;</span>,<span class="keyword">function</span> (<span class="params">req,res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">sendfile</span>(__dirname+<span class="string">&quot;/&quot;</span>+<span class="string">&quot;register.html&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现注册功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/register&#x27;</span>,<span class="keyword">function</span> (<span class="params">req,res</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span>  name=req.<span class="property">query</span>.<span class="property">name</span>;</span><br><span class="line">    <span class="keyword">var</span>  pwd=req.<span class="property">query</span>.<span class="property">pwd</span>;</span><br><span class="line">    <span class="keyword">var</span>  user=&#123;<span class="attr">username</span>:name,<span class="attr">password</span>:pwd&#125;;</span><br><span class="line">    connection.<span class="title function_">query</span>(<span class="string">&#x27;insert into user set ?&#x27;</span>,user,<span class="keyword">function</span> (<span class="params">err,rs</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span>  err;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ok&#x27;</span>);</span><br><span class="line">        res.<span class="title function_">sendfile</span>(__dirname + <span class="string">&quot;/&quot;</span> + <span class="string">&quot;index.html&quot;</span> );</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">     </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span>  server=app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;userlogin server starts......&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim index.html</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>用户登录</span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span>  <span class="attr">action</span>=<span class="string">&quot;http://127.0.0.1:3000/login&quot;</span>&gt;</span></span><br><span class="line">                User Name:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">                Password:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;register.html&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim register.html</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>用户注册</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>  <span class="attr">action</span>=<span class="string">&quot;http://127.0.0.1:3000/register&quot;</span>&gt;</span></span><br><span class="line">   User Name:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    Password:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ok.html</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">login success!</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node userlogin.js</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/206.png" alt="1685448718411"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/205.png" alt="1685448694065"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/204.png" alt="1685448654349"></p><h4 id="实例2-用jade实现"><a href="#实例2-用jade实现" class="headerlink" title="实例2 用jade实现"></a>实例2 用jade实现</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">mkdir userloginjadeapp</span><br><span class="line">cd userloginjadeapp</span><br><span class="line">npm init</span><br><span class="line">npm install express -save</span><br><span class="line">npm install jade --save</span><br><span class="line">npm install mysql --save</span><br><span class="line">npm install body-parser --save</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim userloginjade.js</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Created by linziyu on 2018/7/3.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * express接收html传递的参数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">   <span class="keyword">var</span>  express=<span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line">   <span class="keyword">var</span>  bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line">   <span class="keyword">var</span>  app=<span class="title function_">express</span>();</span><br><span class="line">   <span class="keyword">var</span> mysql=<span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>);</span><br><span class="line">   app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;jade&#x27;</span>); </span><br><span class="line">   app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, __dirname);</span><br><span class="line">   app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;))</span><br><span class="line">   app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>())</span><br><span class="line">    </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 配置MySQL</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">var</span> connection = mysql.<span class="title function_">createConnection</span>(&#123;</span><br><span class="line">       host     : <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">       user     : <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">       password : <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">       database : <span class="string">&#x27;movierecommend&#x27;</span>,</span><br><span class="line">       <span class="attr">port</span>:<span class="string">&#x27;3306&#x27;</span></span><br><span class="line">   &#125;);</span><br><span class="line">   connection.<span class="title function_">connect</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 跳转到网站首页，也就是用户登录页面</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="keyword">function</span> (<span class="params">req,res</span>) &#123;</span><br><span class="line">       res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>);</span><br><span class="line">   &#125;)</span><br><span class="line">    </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 实现登录验证功能</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   app.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>,<span class="keyword">function</span> (<span class="params">req,res</span>) &#123;</span><br><span class="line">       <span class="keyword">var</span>  name=req.<span class="property">body</span>.<span class="property">username</span>.<span class="title function_">trim</span>();</span><br><span class="line">       <span class="keyword">var</span> pwd=req.<span class="property">body</span>.<span class="property">pwd</span>.<span class="title function_">trim</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;username:&#x27;</span>+name+<span class="string">&#x27;password:&#x27;</span>+pwd);</span><br><span class="line">    </span><br><span class="line">       <span class="keyword">var</span> selectSQL = <span class="string">&quot;select * from user where username = &#x27;&quot;</span>+name+<span class="string">&quot;&#x27; and password = &#x27;&quot;</span>+pwd+<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">       connection.<span class="title function_">query</span>(selectSQL,<span class="keyword">function</span> (<span class="params">err,rs</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (err) <span class="keyword">throw</span>  err;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(rs);</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ok&#x27;</span>);</span><br><span class="line">           res.<span class="title function_">render</span>(<span class="string">&#x27;ok&#x27;</span>,&#123;<span class="attr">title</span>:<span class="string">&#x27;Welcome User&#x27;</span>,<span class="attr">message</span>:name&#125;);</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 跳转到注册页面</span></span><br><span class="line"><span class="comment">    */</span>     </span><br><span class="line">   app.<span class="title function_">get</span>(<span class="string">&#x27;/registerpage&#x27;</span>,<span class="keyword">function</span> (<span class="params">req,res</span>) &#123;</span><br><span class="line">     res.<span class="title function_">render</span>(<span class="string">&#x27;registerpage&#x27;</span>,&#123;<span class="attr">title</span>:<span class="string">&#x27;注册&#x27;</span>&#125;);</span><br><span class="line">   &#125;)</span><br><span class="line">    </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 实现注册功能</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   app.<span class="title function_">post</span>(<span class="string">&#x27;/register&#x27;</span>,<span class="keyword">function</span> (<span class="params">req,res</span>) &#123;</span><br><span class="line">       <span class="keyword">var</span>  name=req.<span class="property">body</span>.<span class="property">username</span>.<span class="title function_">trim</span>();</span><br><span class="line">       <span class="keyword">var</span>  pwd=req.<span class="property">body</span>.<span class="property">pwd</span>.<span class="title function_">trim</span>();</span><br><span class="line">       <span class="keyword">var</span>  user=&#123;<span class="attr">username</span>:name,<span class="attr">password</span>:pwd&#125;;</span><br><span class="line">       connection.<span class="title function_">query</span>(<span class="string">&#x27;insert into user set ?&#x27;</span>,user,<span class="keyword">function</span> (<span class="params">err,rs</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (err) <span class="keyword">throw</span>  err;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ok&#x27;</span>);</span><br><span class="line">          res.<span class="title function_">render</span>(<span class="string">&#x27;ok&#x27;</span>,&#123;<span class="attr">title</span>:<span class="string">&#x27;Welcome User&#x27;</span>,<span class="attr">message</span>:name&#125;);</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">   <span class="keyword">var</span>  server=app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;userloginjade server start......&quot;</span>);</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim index.jade</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">html</span><br><span class="line">  head</span><br><span class="line">    title!= title</span><br><span class="line">  body</span><br><span class="line">      </span><br><span class="line">    form(action=&#x27;/login&#x27;, method=&#x27;post&#x27;)</span><br><span class="line"></span><br><span class="line">      p 用户登录</span><br><span class="line">      input(type=&#x27;text&#x27;,name=&#x27;username&#x27;)</span><br><span class="line">      input(type=&#x27;text&#x27;,name=&#x27;pwd&#x27;)</span><br><span class="line">      input(type=&#x27;submit&#x27;,value=&#x27;登录&#x27;)</span><br><span class="line">      br</span><br><span class="line">    a(href=&#x27;/registerpage&#x27;, title=&#x27;注册&#x27;) 注册</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim registerpage.jade</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">html</span><br><span class="line">  head</span><br><span class="line">    title!= title</span><br><span class="line">  body</span><br><span class="line"></span><br><span class="line">    form(action=&#x27;/register&#x27;, method=&#x27;post&#x27;)</span><br><span class="line"></span><br><span class="line">      p 用户注册</span><br><span class="line">      input(type=&#x27;text&#x27;,name=&#x27;username&#x27;)</span><br><span class="line">      input(type=&#x27;text&#x27;,name=&#x27;pwd&#x27;)</span><br><span class="line">      input(type=&#x27;submit&#x27;,value=&#x27;注册&#x27;)</span><br><span class="line">      </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ok.jade</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">html</span><br><span class="line">  head</span><br><span class="line">    title!= title</span><br><span class="line">  body</span><br><span class="line">    h1 热烈欢迎用户: #&#123;message&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>先去mysql里面创建一个movierecommend数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database movierecommend;</span><br><span class="line">use movierecommend;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span> (userid <span class="type">int</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> auto_increment,username <span class="type">char</span>(<span class="number">50</span>),password <span class="type">char</span>(<span class="number">50</span>),<span class="keyword">primary</span> key(userid));</span><br><span class="line"><span class="keyword">desc</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><p>然后再</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node userloginjade.js  </span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/207.png" alt="1685449367685"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/208.png" alt="1685449532848"></p><h4 id="通过网页调用词频统计程序"><a href="#通过网页调用词频统计程序" class="headerlink" title="通过网页调用词频统计程序"></a>通过网页调用词频统计程序</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">mkdir myapp</span><br><span class="line">cd myapp</span><br><span class="line">npm init</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ~/myapp</span><br><span class="line">npm install express -save</span><br><span class="line">npm install jade --save</span><br><span class="line">npm install body-parser --save</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim index.js</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义路由和处理程序</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> servser=app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> host=servser.<span class="title function_">address</span>().<span class="property">address</span>;</span><br><span class="line">    <span class="keyword">const</span> port=servser.<span class="title function_">address</span>().<span class="property">port</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Listening at http://%:%&#x27;</span>,host,port);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/209.png" alt="1685450260367"></p><p><code>vim index.jade</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">html</span><br><span class="line">head</span><br><span class="line">tittle!=tittle</span><br><span class="line">body</span><br><span class="line">h1!=message</span><br></pre></td></tr></table></figure><p>再次修改index.js文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> exec = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="property">exec</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 设置模板引擎</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>,<span class="string">&#x27;./views&#x27;</span>)</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;jade&#x27;</span>)</span><br><span class="line"><span class="comment">// 添加body-parser解析post过来的数据</span></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;))</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>())</span><br><span class="line"> </span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>, &#123;<span class="attr">title</span>: <span class="string">&#x27;WordCount测试&#x27;</span>, <span class="attr">message</span>: <span class="string">&#x27;厦门大学数据库实验室!&#x27;</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>,<span class="keyword">function</span>(<span class="params">req, res</span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> path = req.<span class="property">body</span>.<span class="property">path</span>.<span class="title function_">trim</span>()</span><br><span class="line">  <span class="keyword">const</span> jarStr = <span class="string">&#x27;/usr/local/spark/bin/spark-submit --class WordCount ~/IdeaProjects/WordCount/out/artifacts/WordCount_jar/WordCount.jar &#x27;</span>+path+<span class="string">&#x27; /output&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> rmrStr = <span class="string">&#x27;/usr/local/hadoop/bin/hdfs dfs -rmr /output&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> catStr = <span class="string">&#x27;/usr/local/hadoop/bin/hdfs dfs -cat /output/*&#x27;</span></span><br><span class="line">  <span class="title function_">exec</span>(rmrStr,<span class="keyword">function</span>(<span class="params">err, stdout, stderr</span>)&#123;</span><br><span class="line">    <span class="title function_">exec</span>(jarStr, <span class="keyword">function</span>(<span class="params">err, stdout, stderr</span>)&#123;</span><br><span class="line">      <span class="comment">// 判断路径是否存在,如果路径不存在，则显示错误信息</span></span><br><span class="line">      <span class="keyword">if</span>(stderr)&#123;</span><br><span class="line">        res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>, &#123;<span class="attr">title</span>: <span class="string">&#x27;WordCount测试&#x27;</span>, <span class="attr">message</span>: <span class="string">&#x27;厦门大学数据库实验室!&#x27;</span>, <span class="attr">result</span>: stderr&#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//执行成功后，显示统计结果。</span></span><br><span class="line">      <span class="title function_">exec</span>(catStr,<span class="keyword">function</span>(<span class="params">err, stdout, stderr</span>)&#123;</span><br><span class="line">        res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>, &#123;<span class="attr">title</span>: <span class="string">&#x27;WordCount测试&#x27;</span>, <span class="attr">message</span>: <span class="string">&#x27;厦门大学数据库实验室!&#x27;</span>, <span class="attr">result</span>: stdout&#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> server = app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> host = server.<span class="title function_">address</span>().<span class="property">address</span>;</span><br><span class="line">  <span class="keyword">const</span> port = server.<span class="title function_">address</span>().<span class="property">port</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Example app listening at http://%s:%s&#x27;</span>, host, port);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再改index.jade,并且创建一个views的目录把index.jade移动进去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir views</span><br><span class="line">mv index.jade ~/myapp/views</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">html</span><br><span class="line">  head</span><br><span class="line">    title!= title</span><br><span class="line">  body</span><br><span class="line">    h1!= message  </span><br><span class="line">    form(action=&#x27;/&#x27;, method=&#x27;post&#x27;)</span><br><span class="line">      p 请在下面输入所需要进行词频统计文件的路径</span><br><span class="line">      p HDFS文件路径示例：hdfs://localhost:9000/user/hadoop/word.txt</span><br><span class="line">      p 本地文件路径示例：file:///home/hadoop/word.txt</span><br><span class="line">      br</span><br><span class="line">      input(name=&#x27;path&#x27;)</span><br><span class="line">      input(type=&#x27;submit&#x27;)</span><br><span class="line">      br</span><br><span class="line">      textarea(rows=&#x27;40&#x27;, cols=&#x27;40&#x27;)!=result</span><br></pre></td></tr></table></figure><p>搞完之后开启hadoop，hdfs，然后修改WirdCount.jar的内容</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkContext</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkContext</span>._</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">WordCount</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</span><br><span class="line">    <span class="keyword">val</span> inputFile = args(<span class="number">0</span>)  <span class="comment">//第1个参数是输入文件路径</span></span><br><span class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">&quot;WordCount&quot;</span>).setMaster(<span class="string">&quot;local&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line">    <span class="keyword">val</span> textFile = sc.textFile(inputFile)</span><br><span class="line">    <span class="keyword">val</span> wordCount = textFile.flatMap(line =&gt; line.split(<span class="string">&quot; &quot;</span>)).map(word =&gt; (word, <span class="number">1</span>)).reduceByKey((a, b) =&gt; a + b)</span><br><span class="line">wordCount.foreach(println)</span><br><span class="line">wordCount.saveAsTextFile(args(<span class="number">1</span>))  <span class="comment">//第2个参数是输出文件路径</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/myapp</span><br><span class="line">node index.js</span><br></pre></td></tr></table></figure><p>这边建议修改一下index.js代码，因为报错包括WARN，所以很难没错</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> exec = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="property">exec</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 设置模板引擎</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>,<span class="string">&#x27;./views&#x27;</span>)</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;jade&#x27;</span>)</span><br><span class="line"><span class="comment">// 添加body-parser解析post过来的数据</span></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;))</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>())</span><br><span class="line"> </span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>, &#123;<span class="attr">title</span>: <span class="string">&#x27;WordCount测试&#x27;</span>, <span class="attr">message</span>: <span class="string">&#x27;厦门大学数据库实验室!&#x27;</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>,<span class="keyword">function</span>(<span class="params">req, res</span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> path = req.<span class="property">body</span>.<span class="property">path</span>.<span class="title function_">trim</span>()</span><br><span class="line">  <span class="keyword">const</span> jarStr = <span class="string">&#x27;/usr/local/spark/bin/spark-submit --class WordCount ~/IdeaProjects/WordCount/out/artifacts/WordCount_jar/WordCount.jar &#x27;</span>+path+<span class="string">&#x27; /output&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> rmrStr = <span class="string">&#x27;/usr/local/hadoop/bin/hdfs dfs -rmr /output&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> catStr = <span class="string">&#x27;/usr/local/hadoop/bin/hdfs dfs -cat /output/*&#x27;</span></span><br><span class="line">  <span class="title function_">exec</span>(rmrStr,<span class="keyword">function</span>(<span class="params">err, stdout, stderr</span>)&#123;</span><br><span class="line">    <span class="title function_">exec</span>(jarStr, <span class="keyword">function</span>(<span class="params">err, stdout</span>)&#123;</span><br><span class="line">      <span class="comment">// 判断路径是否存在,如果路径不存在，则显示错误信息</span></span><br><span class="line">      <span class="comment">//执行成功后，显示统计结果。</span></span><br><span class="line">      <span class="title function_">exec</span>(catStr,<span class="keyword">function</span>(<span class="params">err, stdout, stderr</span>)&#123;</span><br><span class="line">        res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>, &#123;<span class="attr">title</span>: <span class="string">&#x27;WordCount测试&#x27;</span>, <span class="attr">message</span>: <span class="string">&#x27;厦门大学数据库实验室!&#x27;</span>, <span class="attr">result</span>: stdout&#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> server = app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> host = server.<span class="title function_">address</span>().<span class="property">address</span>;</span><br><span class="line">  <span class="keyword">const</span> port = server.<span class="title function_">address</span>().<span class="property">port</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Example app listening at http://%s:%s&#x27;</span>, host, port);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/210.png" alt="1685452159233"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/211.png" alt="1685463559272"></p><p>这个是测试spark和hdfs连通问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">val data = Seq(&quot;Hello&quot;, &quot;World&quot;, &quot;Spark&quot;, &quot;HDFS&quot;)</span><br><span class="line">val rdd = spark.sparkContext.parallelize(data)</span><br><span class="line">rdd.saveAsTextFile(&quot;hdfs://localhost:9000/usr/hadoop/my.txt&quot;)</span><br><span class="line">val rdd = spark.sparkContext.textFile(&quot;hdfs://localhost:9000/usr/hadoop/my.txt&quot;)</span><br><span class="line">rdd.foreach(println)</span><br><span class="line">有输出就是联通的</span><br></pre></td></tr></table></figure><p>解决一个warn警告</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform” warning</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">配置一下</span><br><span class="line">HADOOP_HOME</span><br><span class="line">检测命令</span><br><span class="line">echo $HADOOP_HOME</span><br></pre></td></tr></table></figure><h1 id="十六、电影推荐系统（基础版）实现过程"><a href="#十六、电影推荐系统（基础版）实现过程" class="headerlink" title="十六、电影推荐系统（基础版）实现过程"></a>十六、电影推荐系统（基础版）实现过程</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/Downloads</span><br><span class="line">sudo unzip movie_recommend.zip</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/212.png" alt="1685464042286"></p><h4 id="1-清洗数据"><a href="#1-清洗数据" class="headerlink" title="1.清洗数据"></a>1.清洗数据</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/hadoop</span><br><span class="line">./sbin/start-dfs.sh#启动</span><br><span class="line">#建立一个数据集HDFS目录input_spark</span><br><span class="line">hdfs dfs -mkdir /input_spark</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/213.png" alt="1685464195081"></p><p>把下面俩个导入进hdfs里面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file:///home/hadoop/Downloads/movie_recommend/personalRatings.dat </span><br><span class="line">file:///home/hadoop/Downloads/movie_recommend/ratings.dat</span><br></pre></td></tr></table></figure><p>对movie.dat清洗</p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/214.png" alt="1685466452270"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/215.png" alt="1685466504655"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/216.png" alt="1685466561456"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/217.png" alt="1685466642348"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/218.png" alt="1685466699402"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/219.png" alt="1685466790159"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/245.png" alt="1685498131672"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/246.png" alt="1685498172429"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/220.png" alt="1685466822014"></p><p>提娜佳剪切字符串控件</p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/221.png" alt="1685491556477"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/222.png" alt="1685491610432"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/223.png" alt="1685491657365"></p><p>我打错了应该是dat</p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/226.png" alt="1685491922035"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/227.png" alt="1685492017446"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/228.png" alt="1685492061793"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/229.png" alt="1685492351484"></p><p>good game</p><p>查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -cat /input_spark/movies.dat | head -5</span><br></pre></td></tr></table></figure><p>乱码也不知道为什么，因为后面不用清洗过的呵呵呵</p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/230.png" alt="1685492776500"></p><h4 id="2-编写Spark程序"><a href="#2-编写Spark程序" class="headerlink" title="2.编写Spark程序"></a>2.编写Spark程序</h4><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/160.png" alt="1685353875195"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/161.png" alt="1685353929474"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/231.png" alt="1685493647131"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/164.png" alt="1685354118424"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/165.png" alt="1685354165755"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/166.png" alt="1685354350410"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/167.png" alt="1685354421083"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/233.png" alt="1685494006879"></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> recommend</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">File</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.&#123;<span class="type">Level</span>, <span class="type">Logger</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.ml.recommendation.&#123;<span class="type">ALS</span>, <span class="type">ALSModel</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.&#123;<span class="type">DataFrame</span>, <span class="type">Row</span>, <span class="type">SparkSession</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.io.<span class="type">Source</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">MovieLensALS</span> </span>&#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Rating</span>(<span class="params">user : <span class="type">Int</span>, product : <span class="type">Int</span>, rating : <span class="type">Double</span></span>)</span></span><br><span class="line">  <span class="keyword">val</span> spark=<span class="type">SparkSession</span>.builder().appName(<span class="string">&quot;MovieLensALS&quot;</span>).master(<span class="string">&quot;local[2]&quot;</span>).getOrCreate()</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</span><br><span class="line">    <span class="comment">// 屏蔽不必要的日志显示在终端上</span></span><br><span class="line">    <span class="type">Logger</span>.getLogger(<span class="string">&quot;org.apache.spark&quot;</span>).setLevel(<span class="type">Level</span>.<span class="type">ERROR</span>)</span><br><span class="line">    <span class="type">Logger</span>.getLogger(<span class="string">&quot;org.eclipse.jetty.server&quot;</span>).setLevel(<span class="type">Level</span>.<span class="type">OFF</span>)</span><br><span class="line">    <span class="keyword">if</span> (args.length != <span class="number">5</span>) &#123;</span><br><span class="line">      println(<span class="string">&quot;Usage: /usr/local/spark/bin/spark-submit --class recommend.MovieLensALS &quot;</span> +</span><br><span class="line">        <span class="string">&quot;Spark_Recommend_Dataframe.jar movieLensHomeDir personalRatingsFile bestRank bestLambda bestNumiter&quot;</span>)</span><br><span class="line">      sys.exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置运行环境</span></span><br><span class="line">    <span class="keyword">import</span> spark.implicits._</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 装载参数二,即用户评分,该评分由评分器生成</span></span><br><span class="line">    <span class="keyword">val</span> myRatings = loadRatings(args(<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">val</span> myRatingsRDD = spark.sparkContext.parallelize(myRatings, <span class="number">1</span>)</span><br><span class="line">    <span class="comment">// 样本数据目录</span></span><br><span class="line">    <span class="keyword">val</span> movieLensHomeDir = args(<span class="number">0</span>)</span><br><span class="line">    <span class="comment">// 装载样本评分数据,其中最后一列 Timestamp 取除 10 的余数作为 key,Rating 为值,即(Int,Rating)</span></span><br><span class="line">    <span class="comment">//ratings.dat 原始数据:用户编号、电影编号、评分、评分时间戳</span></span><br><span class="line">    <span class="keyword">val</span> ratings = spark.sparkContext.textFile(<span class="keyword">new</span> <span class="type">File</span>(movieLensHomeDir,</span><br><span class="line">      <span class="string">&quot;ratings.dat&quot;</span>).toString).map &#123; line =&gt;</span><br><span class="line">      <span class="keyword">val</span> fields = line.split(<span class="string">&quot;::&quot;</span>)</span><br><span class="line">      (fields(<span class="number">3</span>).toLong % <span class="number">10</span>, <span class="type">Rating</span>(fields(<span class="number">0</span>).toInt, fields(<span class="number">1</span>).toInt,</span><br><span class="line">        fields(<span class="number">2</span>).toDouble))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//装载电影目录对照表(电影 ID-&gt;电影标题)</span></span><br><span class="line">    <span class="comment">//movies.dat 原始数据:电影编号、电影名称、电影类别</span></span><br><span class="line">    <span class="keyword">val</span> movies = spark.sparkContext.textFile(<span class="keyword">new</span> <span class="type">File</span>(movieLensHomeDir,</span><br><span class="line">      <span class="string">&quot;movies.dat&quot;</span>).toString).map &#123; line =&gt;</span><br><span class="line">      <span class="keyword">val</span> fields = line.split(<span class="string">&quot;::&quot;</span>)</span><br><span class="line">      (fields(<span class="number">0</span>).toInt, fields(<span class="number">1</span>).toString())</span><br><span class="line">    &#125;.collect().toMap</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> numRatings = ratings.count()</span><br><span class="line">    <span class="keyword">val</span> numUsers = ratings.map(_._2.user).distinct().count()</span><br><span class="line">    <span class="keyword">val</span> numMovies = ratings.map(_._2.product).distinct().count()</span><br><span class="line">    <span class="comment">// 将样本评分表以 key 值切分成 3 个部分,分别用于训练 (60%,并加入用户评分), 校验 (20%), and 测试 (20%)</span></span><br><span class="line">    <span class="comment">// 该数据在计算过程中要多次应用到,所以 cache 到内存</span></span><br><span class="line">    <span class="keyword">val</span> numPartitions = <span class="number">4</span></span><br><span class="line">    <span class="comment">// training 训练样本数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> trainingDF = ratings.filter(x =&gt; x._1 &lt; <span class="number">6</span>) <span class="comment">//取评分时间除 10 的余数后值小于 6 的作为训练样本</span></span><br><span class="line">      .values</span><br><span class="line">      .union(myRatingsRDD) <span class="comment">//注意 ratings 是(Int,Rating),取 value 即可</span></span><br><span class="line">      .toDF()</span><br><span class="line">      .repartition(numPartitions)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// validation 校验样本数据</span></span><br><span class="line">    <span class="keyword">val</span> validationDF = ratings.filter(x =&gt; x._1 &gt;= <span class="number">6</span> &amp;&amp; x._1 &lt; <span class="number">8</span>) <span class="comment">//取评分时间除 10 的余数后值大于等于 6 且小于 8 分的作为校验样本</span></span><br><span class="line">      .values</span><br><span class="line">      .toDF()</span><br><span class="line">      .repartition(numPartitions)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// test 测试样本数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> testDF = ratings.filter(x =&gt; x._1 &gt;= <span class="number">8</span>).values.toDF() <span class="comment">//取评分时间除 10 的余数后值大于等于 8 分的作为测试样本</span></span><br><span class="line">    <span class="keyword">val</span> numTraining = trainingDF.count()</span><br><span class="line">    <span class="keyword">val</span> numValidation = validationDF.count()</span><br><span class="line">    <span class="keyword">val</span> numTest = testDF.count()</span><br><span class="line">    <span class="comment">// 训练不同参数下的模型,并在校验集中验证,获取最佳参数下的模型</span></span><br><span class="line">    <span class="keyword">val</span> ranks = <span class="type">List</span>(<span class="number">8</span>, <span class="number">12</span>) <span class="comment">//模型中隐语义因子的个数</span></span><br><span class="line">    <span class="keyword">val</span> lambdas = <span class="type">List</span>(<span class="number">0.1</span>, <span class="number">10.0</span>) <span class="comment">//是 ALS 的正则化参数</span></span><br><span class="line">    <span class="keyword">val</span> numIters = <span class="type">List</span>(<span class="number">10</span>, <span class="number">20</span>) <span class="comment">//迭代次数</span></span><br><span class="line">    <span class="keyword">var</span> bestModel: <span class="type">Option</span>[<span class="type">ALSModel</span>] = <span class="type">None</span> <span class="comment">//最好的模型</span></span><br><span class="line">    <span class="keyword">var</span> bestValidationRmse = <span class="type">Double</span>.<span class="type">MaxValue</span> <span class="comment">//最好的校验均方根误差</span></span><br><span class="line">    <span class="keyword">var</span> bestRank = args(<span class="number">2</span>).toInt <span class="comment">//最好的隐语义因子的个数</span></span><br><span class="line">    <span class="keyword">var</span> bestLambda = args(<span class="number">3</span>).toDouble  <span class="comment">//最好的ALS正则化参数</span></span><br><span class="line">    <span class="keyword">var</span> bestNumIter = args(<span class="number">4</span>).toInt  <span class="comment">//最好的迭代次数</span></span><br><span class="line">    <span class="comment">//val model = ALS.train(training, bestRank, bestNumIter, bestLambda) //如果是从外部传入参数，则使用该语句训练模型</span></span><br><span class="line">    <span class="comment">//如果不使用外部传入的参数，而是使用上面定义的ranks、lambdas和numIters的列表值进行模型训练，则使用下面的for循环语句训练模型</span></span><br><span class="line">    <span class="keyword">for</span> (rank &lt;- ranks; lambda &lt;- lambdas; numIter &lt;- numIters) &#123;</span><br><span class="line">      <span class="keyword">val</span> als = <span class="keyword">new</span> <span class="type">ALS</span>().setMaxIter(numIter).setRank(rank).setRegParam(lambda).setUserCol(<span class="string">&quot;user&quot;</span>).setItemCol(<span class="string">&quot;product&quot;</span>).setRatingCol(<span class="string">&quot;rating&quot;</span>)</span><br><span class="line">      <span class="keyword">val</span> model = als.fit(trainingDF)<span class="comment">//训练样本、隐语义因子的个数、迭代次数、ALS 的正则化参数</span></span><br><span class="line">      <span class="comment">// model 训练模型</span></span><br><span class="line">      <span class="comment">//输入训练模型、校验样本、校验个数</span></span><br><span class="line">      <span class="keyword">val</span> validationRmse = computeRmse(model, validationDF, numValidation) <span class="comment">// 校验模型结果</span></span><br><span class="line">      <span class="keyword">if</span> (validationRmse &lt; bestValidationRmse) &#123;</span><br><span class="line">        bestModel = <span class="type">Some</span>(model)</span><br><span class="line">        bestValidationRmse = validationRmse</span><br><span class="line">        bestRank = rank</span><br><span class="line">        bestLambda = lambda</span><br><span class="line">        bestNumIter = numIter</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 用最佳模型预测测试集的评分,并计算和实际评分之间的均方根误差</span></span><br><span class="line">    <span class="keyword">val</span> testRmse = computeRmse(bestModel.get, testDF, numTest)</span><br><span class="line">    <span class="comment">//创建一个基准(Naïve Baseline),并把它和最好的模型进行比较</span></span><br><span class="line">    <span class="keyword">val</span> meanRating = trainingDF.union(validationDF).select(<span class="string">&quot;rating&quot;</span>).rdd.map&#123;<span class="keyword">case</span> <span class="type">Row</span>(v : <span class="type">Double</span>) =&gt; v&#125;.mean</span><br><span class="line">    <span class="keyword">val</span> baselineRmse = math.sqrt(testDF.select(<span class="string">&quot;rating&quot;</span>).rdd.map&#123;<span class="keyword">case</span> <span class="type">Row</span>(v : <span class="type">Double</span>) =&gt; v&#125;.map(x =&gt; (meanRating - x) * (meanRating - x)).mean)</span><br><span class="line">    <span class="comment">//改进了基准的最佳模型</span></span><br><span class="line">    <span class="keyword">val</span> improvement = (baselineRmse - testRmse) / baselineRmse * <span class="number">100</span></span><br><span class="line">    <span class="comment">// 推荐前十部最感兴趣的电影,注意要剔除用户已经评分的电影</span></span><br><span class="line">    <span class="keyword">val</span> myRatedMovieIds = myRatings.map(_.product).toSet</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> candidates = spark.sparkContext.parallelize(movies.keys.filter(!myRatedMovieIds.contains(_)).toSeq).map(<span class="type">Rating</span>(<span class="number">1</span>,_,<span class="number">0.0</span>))</span><br><span class="line">      .toDF().select(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;product&quot;</span>)</span><br><span class="line">    <span class="comment">//上面的Rating(1,_,0.0)中，1表示用户的userid，0.0是赋予的初始评分值，如果为userid为2的用户预测评分值，则需要修改为Rating(2,_,0.0)</span></span><br><span class="line">    <span class="keyword">val</span> recommendations = bestModel.get</span><br><span class="line">      .transform(candidates).select(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;product&quot;</span>,<span class="string">&quot;prediction&quot;</span>).rdd</span><br><span class="line">      .map(x =&gt; <span class="type">Rating</span>(x(<span class="number">0</span>).toString.toInt,x(<span class="number">1</span>).toString.toInt,x(<span class="number">2</span>).toString.toDouble))</span><br><span class="line">      .sortBy(-_.rating)</span><br><span class="line">      .take(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">1</span></span><br><span class="line">    println(<span class="string">&quot;Movies recommended for you(用户 ID:推荐电影 ID:推荐分数:推荐电影名称):&quot;</span>)</span><br><span class="line">    recommendations.foreach &#123; r =&gt;</span><br><span class="line">      println(r.user + <span class="string">&quot;:&quot;</span> + r.product + <span class="string">&quot;:&quot;</span> + r.rating + <span class="string">&quot;:&quot;</span> + movies(r.product))</span><br><span class="line">      i += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    spark.sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 校验集预测数据和实际数据之间的均方根误差 **/</span></span><br><span class="line">  <span class="comment">//输入训练模型、校验样本、校验个数</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">computeRmse</span></span>(model: <span class="type">ALSModel</span>, df: <span class="type">DataFrame</span>, n: <span class="type">Long</span>): <span class="type">Double</span> = &#123;</span><br><span class="line">    <span class="keyword">import</span> spark.implicits._</span><br><span class="line">    <span class="keyword">val</span> predictions = model.transform(df.select(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;product&quot;</span>)) <span class="comment">//调用预测的函数</span></span><br><span class="line">    <span class="comment">// 输出 predictionsAndRatings 预测和评分</span></span><br><span class="line">    <span class="keyword">val</span> predictionsAndRatings = predictions.select(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;product&quot;</span>,<span class="string">&quot;prediction&quot;</span>).rdd.map(x =&gt; ((x(<span class="number">0</span>),x(<span class="number">1</span>)),x(<span class="number">2</span>)))</span><br><span class="line">      .join(df.select(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;product&quot;</span>,<span class="string">&quot;rating&quot;</span>).rdd.map(x =&gt; ((x(<span class="number">0</span>),x(<span class="number">1</span>)),x(<span class="number">2</span>))))</span><br><span class="line">      .values</span><br><span class="line">      .take(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    math.sqrt(predictionsAndRatings.map(x =&gt; (x._1.toString.toDouble  - x._2.toString.toDouble) * (x._1.toString.toDouble - x._2.toString.toDouble)).reduce(_ + _) / n)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 装载用户评分文件 **/</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">loadRatings</span></span>(path: <span class="type">String</span>): <span class="type">Seq</span>[<span class="type">Rating</span>] = &#123;</span><br><span class="line">    <span class="keyword">val</span> lines = <span class="type">Source</span>.fromFile(path).getLines()</span><br><span class="line">    <span class="keyword">val</span> ratings = lines.map &#123; line =&gt;</span><br><span class="line">      <span class="keyword">val</span> fields = line.split(<span class="string">&quot;::&quot;</span>)</span><br><span class="line">      <span class="type">Rating</span>(fields(<span class="number">0</span>).toInt, fields(<span class="number">1</span>).toInt, fields(<span class="number">2</span>).toDouble)</span><br><span class="line">    &#125;.filter(_.rating &gt; <span class="number">0.0</span>)</span><br><span class="line">    <span class="keyword">if</span> (ratings.isEmpty) &#123;</span><br><span class="line">      sys.error(<span class="string">&quot;No ratings provided.&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      ratings.toSeq</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>Spark_Recommend_Dataframe<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Spark_Recommend_Dataframe<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spark.version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">spark.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.spark/spark-sql_2.11 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-sql_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.spark/spark-mllib_2.11 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-mllib_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spark.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.spark/spark-core_2.11 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-core_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spark.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.alchim31.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scala-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>compile-scala<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>add-source<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>test-compile-scala<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>test-compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>add-source<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>testCompile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scalaVersion</span>&gt;</span>2.11.8<span class="tag">&lt;/<span class="name">scalaVersion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/234.png" alt="1685494206333"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/235.png" alt="1685494554534"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/236.png" alt="1685494602636"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/237.png" alt="1685494852399"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/240.png" alt="1685495480155"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/238.png" alt="1685494906503"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/241.png" alt="1685495635526"></p><p>运行成功</p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/130.png" alt="1685282444814"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/131.png" alt="1685282485542"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/242.png" alt="1685495693374"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/244.png" alt="1685495849116"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/243.png" alt="1685495731256"></p><p>用老图示意一下</p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/136.png" alt="1685283604818"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/137.png" alt="1685283626589"></p><p>jar放入spark中运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/spark/</span><br><span class="line"> ./bin/spark-submit --class recommend.MovieLensALS ~/IdeaProjects/Spark_Recommend_Dataframe/out/artifacts/Spark_Recommend_Dataframe_jar/Spark_Recommend_Dataframe.jar  /input_spark ~/Downloads/personalRatings.dat 10 5 10</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/247.png" alt="1685498468383"></p><p>运行完成</p><h4 id="3-node-js中展示"><a href="#3-node-js中展示" class="headerlink" title="3.node.js中展示"></a>3.node.js中展示</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">mkdir mysparkapp</span><br><span class="line">cd mysparkapp</span><br><span class="line">npm init</span><br><span class="line"></span><br><span class="line">npm install express -save</span><br><span class="line">npm install jade --save</span><br><span class="line">npm install body-parser --save</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir views</span><br><span class="line">vim index.js</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> spawnSync = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="property">spawnSync</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 设置模板引擎</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>,<span class="string">&#x27;./views&#x27;</span>)</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;jade&#x27;</span>)</span><br><span class="line"><span class="comment">// 添加body-parser解析post过来的数据</span></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;))</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>())</span><br><span class="line"> </span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>, &#123;<span class="attr">title</span>: <span class="string">&#x27;电影推荐系统&#x27;</span>, <span class="attr">message</span>: <span class="string">&#x27;厦门大学数据库实验室电影推荐系统&#x27;</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>,<span class="keyword">function</span>(<span class="params">req, res</span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> path = req.<span class="property">body</span>.<span class="property">path</span>.<span class="title function_">trim</span>() || <span class="string">&#x27;/input_spark&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> myRatings = req.<span class="property">body</span>.<span class="property">myRatings</span>.<span class="title function_">trim</span>() || <span class="string">&#x27;~/Downloads/personalRatings.dat&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> bestRank = req.<span class="property">body</span>.<span class="property">bestRank</span>.<span class="title function_">trim</span>() || <span class="number">10</span></span><br><span class="line">  <span class="keyword">const</span> bestLambda = req.<span class="property">body</span>.<span class="property">bestLambda</span>.<span class="title function_">trim</span>() || <span class="number">5</span></span><br><span class="line">  <span class="keyword">const</span> bestNumIter = req.<span class="property">body</span>.<span class="property">bestNumIter</span>.<span class="title function_">trim</span>() || <span class="number">10</span></span><br><span class="line">  <span class="keyword">let</span> spark_submit = <span class="title function_">spawnSync</span>(<span class="string">&#x27;/usr/local/spark/bin/spark-submit&#x27;</span>,[<span class="string">&#x27;--class&#x27;</span>, <span class="string">&#x27;recommend.MovieLensALS&#x27;</span>,<span class="string">&#x27; ~/IdeaProjects/Spark_Recommend_Dataframe/out/artifacts/Spark_Recommend_Dataframe_jar/Spark_Recommend_Dataframe.jar&#x27;</span>, path, myRatings, bestRank, bestLambda, bestNumIter],&#123; <span class="attr">shell</span>:<span class="literal">true</span>, <span class="attr">encoding</span>: <span class="string">&#x27;utf8&#x27;</span> &#125;)</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>, &#123;<span class="attr">title</span>: <span class="string">&#x27;电影推荐系统&#x27;</span>, <span class="attr">message</span>: <span class="string">&#x27;厦门大学数据库实验室电影推荐系统&#x27;</span>, <span class="attr">result</span>: spark_submit.<span class="property">stdout</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> server = app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> host = server.<span class="title function_">address</span>().<span class="property">address</span>;</span><br><span class="line">  <span class="keyword">const</span> port = server.<span class="title function_">address</span>().<span class="property">port</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Example app listening at http://%s:%s&#x27;</span>, host, port);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd views</span><br><span class="line">vim index.<span class="property">jade</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">html</span><br><span class="line">  head</span><br><span class="line">    title!= title</span><br><span class="line">  body</span><br><span class="line">    h1!= message  </span><br><span class="line">    <span class="title function_">form</span>(action=<span class="string">&#x27;/&#x27;</span>, method=<span class="string">&#x27;post&#x27;</span>)</span><br><span class="line">      p 请输入建模的相关信息</span><br><span class="line">      <span class="title function_">table</span>(border=<span class="number">0</span>)</span><br><span class="line">        tr</span><br><span class="line">          td 样本数据的路径(默认为/input_spark)</span><br><span class="line">          td </span><br><span class="line">            <span class="title function_">input</span>(style=<span class="string">&#x27;width:350px&#x27;</span>,placeholder=<span class="string">&#x27;/input_spark&#x27;</span>,name=<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line">        tr</span><br><span class="line">          td 用户评分数据的路径(默认为~<span class="regexp">/Downloads/</span>personalRatings.<span class="property">dat</span>)</span><br><span class="line">          td </span><br><span class="line">            <span class="title function_">input</span>(style=<span class="string">&#x27;width:350px&#x27;</span>,placeholder=<span class="string">&#x27;~/Downloads/personalRatings.dat &#x27;</span>,name=<span class="string">&#x27;myRatings&#x27;</span>)    </span><br><span class="line">        tr</span><br><span class="line">          td 隐语义因子的个数：</span><br><span class="line">          td </span><br><span class="line">            <span class="title function_">input</span>(placeholder=<span class="string">&#x27;10&#x27;</span>,type=<span class="string">&#x27;number&#x27;</span>,min=<span class="string">&#x27;8&#x27;</span>,max=<span class="string">&#x27;12&#x27;</span>,name=<span class="string">&#x27;bestRank&#x27;</span>)</span><br><span class="line">        tr</span><br><span class="line">          td 正则化参数：</span><br><span class="line">          td </span><br><span class="line">            <span class="title function_">input</span>(placeholder=<span class="string">&#x27;5&#x27;</span>,type=<span class="string">&#x27;number&#x27;</span>,min=<span class="string">&#x27;0&#x27;</span>,max=<span class="string">&#x27;10&#x27;</span>,step=<span class="string">&#x27;0.1&#x27;</span>,name=<span class="string">&#x27;bestLambda&#x27;</span>)</span><br><span class="line">        tr</span><br><span class="line">          td 迭代次数：</span><br><span class="line">          td </span><br><span class="line">            <span class="title function_">input</span>(placeholder=<span class="string">&#x27;10&#x27;</span>,type=<span class="string">&#x27;number&#x27;</span>,min=<span class="string">&#x27;10&#x27;</span>,max=<span class="string">&#x27;20&#x27;</span>,name=<span class="string">&#x27;bestNumIter&#x27;</span>)            </span><br><span class="line">      <span class="title function_">input</span>(type=<span class="string">&#x27;submit&#x27;</span>)</span><br><span class="line">      br      </span><br><span class="line">      <span class="title function_">textarea</span>(rows=<span class="string">&#x27;20&#x27;</span>, cols=<span class="string">&#x27;40&#x27;</span>)!=result</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd mysparkapp</span><br><span class="line">node index.js</span><br></pre></td></tr></table></figure><h1 id="十七、update"><a href="#十七、update" class="headerlink" title="十七、update"></a>十七、update</h1><p>数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">service mysql start</span><br><span class="line">mysql -u root -p</span><br><span class="line">source ~/Downloads/MovieRecommendDatabase.sql</span><br><span class="line">select count(*) from movieinfo;use movierecommend ;</span><br></pre></td></tr></table></figure><p>idea</p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/248.png" alt="1685500057215"></p><p>和之前步骤一样，最后创建一个recomme文件</p><p>在文件里面创建四个文件</p><p>MovieLensALS</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line">package recommend</span><br><span class="line"></span><br><span class="line">import java.io.File</span><br><span class="line">import org.apache.log4j.&#123;Level, Logger&#125;</span><br><span class="line">import org.apache.spark.ml.recommendation.&#123;ALS, ALSModel&#125;</span><br><span class="line">import org.apache.spark.mllib.recommendation.Rating</span><br><span class="line">import org.apache.spark.rdd.RDD</span><br><span class="line">import org.apache.spark.sql.&#123;DataFrame, Row, SparkSession&#125;</span><br><span class="line">import org.apache.spark.&#123;SparkConf, SparkContext&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">object MovieLensALS &#123;</span><br><span class="line">  case class Rating(user : Int, product : Int, rating : Double)</span><br><span class="line">  val spark=SparkSession.builder().appName(&quot;MovieLensALS&quot;).master(&quot;local[2]&quot;).getOrCreate()</span><br><span class="line"></span><br><span class="line">  def main(args: Array[String]) &#123;</span><br><span class="line">    // 屏蔽不必要的日志显示在终端上</span><br><span class="line">    Logger.getLogger(&quot;org.apache.spark&quot;).setLevel(Level.ERROR)</span><br><span class="line">    Logger.getLogger(&quot;org.eclipse.jetty.server&quot;).setLevel(Level.OFF)</span><br><span class="line">    if (args.length != 2) &#123;</span><br><span class="line">      println(&quot;Usage: /usr/local/spark/bin/spark-submit --class recommend.MovieLensALS &quot; +</span><br><span class="line">        &quot;Spark_Recommend_Dataframe.jar movieLensHomeDir userid&quot;)</span><br><span class="line">      sys.exit(1)</span><br><span class="line">    &#125;</span><br><span class="line">    // 设置运行环境</span><br><span class="line">    import spark.implicits._</span><br><span class="line"></span><br><span class="line">    // 装载参数二,即用户评分,该评分由评分器生成</span><br><span class="line">    val userid=args(1).toInt;</span><br><span class="line">    //删除该用户之前已经存在的电影推荐结果，为本次写入最新的推荐结果做准备</span><br><span class="line">    DeleteFromMySQL.delete(userid)</span><br><span class="line">    //从关系数据库中读取该用户对一些电影的个性化评分数据</span><br><span class="line">    val personalRatingsLines:Array[String]=ReadFromMySQL.read(userid)</span><br><span class="line">    val myRatings = loadRatings(personalRatingsLines)</span><br><span class="line">    val myRatingsRDD = spark.sparkContext.parallelize(myRatings, 1)</span><br><span class="line"></span><br><span class="line">    // 样本数据目录</span><br><span class="line">    val movieLensHomeDir = args(0)</span><br><span class="line">    // 装载样本评分数据,其中最后一列 Timestamp 取除 10 的余数作为 key,Rating 为值,即(Int,Rating)</span><br><span class="line">    //ratings.dat 原始数据:用户编号、电影编号、评分、评分时间戳</span><br><span class="line">    val ratings = spark.sparkContext.textFile(new File(movieLensHomeDir,</span><br><span class="line">      &quot;ratings.dat&quot;).toString).map &#123; line =&gt;</span><br><span class="line">      val fields = line.split(&quot;::&quot;)</span><br><span class="line">      (fields(3).toLong % 10, Rating(fields(0).toInt, fields(1).toInt,</span><br><span class="line">        fields(2).toDouble))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //装载电影目录对照表(电影 ID-&gt;电影标题)</span><br><span class="line">    //movies.dat 原始数据:电影编号、电影名称、电影类别</span><br><span class="line">    val movies = spark.sparkContext.textFile(new File(movieLensHomeDir,</span><br><span class="line">      &quot;movies.dat&quot;).toString).map &#123; line =&gt;</span><br><span class="line">      val fields = line.split(&quot;::&quot;)</span><br><span class="line">      (fields(0).toInt, fields(1).toString())</span><br><span class="line">    &#125;.collect().toMap</span><br><span class="line"></span><br><span class="line">    val numRatings = ratings.count()</span><br><span class="line">    val numUsers = ratings.map(_._2.user).distinct().count()</span><br><span class="line">    val numMovies = ratings.map(_._2.product).distinct().count()</span><br><span class="line">    // 将样本评分表以 key 值切分成 3 个部分,分别用于训练 (60%,并加入用户评分), 校验 (20%), and 测试 (20%)</span><br><span class="line">    // 该数据在计算过程中要多次应用到,所以 cache 到内存</span><br><span class="line">    val numPartitions = 4</span><br><span class="line">    // training 训练样本数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    val trainingDF = ratings.filter(x =&gt; x._1 &lt; 6) //取评分时间除 10 的余数后值小于 6 的作为训练样本</span><br><span class="line">      .values</span><br><span class="line">      .union(myRatingsRDD) //注意 ratings 是(Int,Rating),取 value 即可</span><br><span class="line">      .toDF()</span><br><span class="line">      .repartition(numPartitions)</span><br><span class="line"></span><br><span class="line">    // validation 校验样本数据</span><br><span class="line">    val validationDF = ratings.filter(x =&gt; x._1 &gt;= 6 &amp;&amp; x._1 &lt; 8) //取评分时间除 10 的余数后值大于等于 6 且小于 8 分的作为校验样本</span><br><span class="line">      .values</span><br><span class="line">      .toDF()</span><br><span class="line">      .repartition(numPartitions)</span><br><span class="line"></span><br><span class="line">    // test 测试样本数据</span><br><span class="line"></span><br><span class="line">    val testDF = ratings.filter(x =&gt; x._1 &gt;= 8).values.toDF() //取评分时间除 10 的余数后值大于等于 8 分的作为测试样本</span><br><span class="line">    val numTraining = trainingDF.count()</span><br><span class="line">    val numValidation = validationDF.count()</span><br><span class="line">    val numTest = testDF.count()</span><br><span class="line">    // 训练不同参数下的模型,并在校验集中验证,获取最佳参数下的模型</span><br><span class="line">    val ranks = List(8, 12) //模型中隐语义因子的个数</span><br><span class="line">    val lambdas = List(0.1, 10.0) //是 ALS 的正则化参数</span><br><span class="line">    val numIters = List(10, 20) //迭代次数</span><br><span class="line">    var bestModel: Option[ALSModel] = None //最好的模型</span><br><span class="line">    var bestValidationRmse = Double.MaxValue //最好的校验均方根误差</span><br><span class="line">    var bestRank = 0 //最好的隐语义因子的个数</span><br><span class="line">    var bestLambda = 0.0  //最好的ALS正则化参数</span><br><span class="line">    var bestNumIter = 0  //最好的迭代次数</span><br><span class="line">    for (rank &lt;- ranks; lambda &lt;- lambdas; numIter &lt;- numIters) &#123;</span><br><span class="line">      println(&quot;正在执行循环训练模型&quot;)</span><br><span class="line">      val als = new ALS().setMaxIter(numIter).setRank(rank).setRegParam(lambda).setUserCol(&quot;user&quot;).setItemCol(&quot;product&quot;).setRatingCol(&quot;rating&quot;)</span><br><span class="line">      val model = als.fit(trainingDF)//训练样本、隐语义因子的个数、迭代次数、ALS 的正则化参数</span><br><span class="line">      // model 训练模型</span><br><span class="line">      //输入训练模型、校验样本、校验个数</span><br><span class="line">      val validationRmse = computeRmse(model, validationDF, numValidation) // 校验模型结果</span><br><span class="line">      if (validationRmse &lt; bestValidationRmse) &#123;</span><br><span class="line">        bestModel = Some(model)</span><br><span class="line">        bestValidationRmse = validationRmse</span><br><span class="line">        bestRank = rank</span><br><span class="line">        bestLambda = lambda</span><br><span class="line">        bestNumIter = numIter</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 用最佳模型预测测试集的评分,并计算和实际评分之间的均方根误差</span><br><span class="line">    val testRmse = computeRmse(bestModel.get, testDF, numTest)</span><br><span class="line">    //创建一个基准(Naïve Baseline),并把它和最好的模型进行比较</span><br><span class="line">    val meanRating = trainingDF.union(validationDF).select(&quot;rating&quot;).rdd.map&#123;case Row(v : Double) =&gt; v&#125;.mean</span><br><span class="line">    val baselineRmse = math.sqrt(testDF.select(&quot;rating&quot;).rdd.map&#123;case Row(v : Double) =&gt; v&#125;.map(x =&gt; (meanRating - x) * (meanRating - x)).mean)</span><br><span class="line">    //改进了基准的最佳模型</span><br><span class="line">    val improvement = (baselineRmse - testRmse) / baselineRmse * 100</span><br><span class="line">    // 推荐前十部最感兴趣的电影,注意要剔除用户已经评分的电影</span><br><span class="line">    val myRatedMovieIds = myRatings.map(_.product).toSet</span><br><span class="line"></span><br><span class="line">    val candidates = spark.sparkContext.parallelize(movies.keys.filter(!myRatedMovieIds.contains(_)).toSeq).map(Rating(userid,_,0.0))</span><br><span class="line">      .toDF().select(&quot;user&quot;,&quot;product&quot;)</span><br><span class="line">    //上面的Rating(userid,_,0.0)中，0.0是赋予的初始评分值</span><br><span class="line">    val recommendations = bestModel.get</span><br><span class="line">      .transform(candidates).select(&quot;user&quot;,&quot;product&quot;,&quot;prediction&quot;).rdd</span><br><span class="line">      .map(x =&gt; Rating(x(0).toString.toInt,x(1).toString.toInt,x(2).toString.toDouble))</span><br><span class="line">      .sortBy(-_.rating)</span><br><span class="line">      .take(10)</span><br><span class="line">    //把推荐结果写入数据库</span><br><span class="line">    val rddForMySQL=recommendations.map(r=&gt;r.user + &quot;::&quot;+ r.product + &quot;::&quot;+ r.rating+&quot;::&quot; + movies(r.product))</span><br><span class="line">    InsertIntoMySQL.insert(rddForMySQL)</span><br><span class="line">    var i = 1</span><br><span class="line">    println(&quot;Movies recommended for you(用户 ID:推荐电影 ID:推荐分数:推荐电影名称):&quot;)</span><br><span class="line">    recommendations.foreach &#123; r =&gt;</span><br><span class="line">      println(r.user + &quot;:&quot; + r.product + &quot;:&quot; + r.rating + &quot;:&quot; + movies(r.product))</span><br><span class="line">      i += 1</span><br><span class="line">    &#125;</span><br><span class="line">    spark.sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /** 校验集预测数据和实际数据之间的均方根误差 **/</span><br><span class="line">  //输入训练模型、校验样本、校验个数</span><br><span class="line">  def computeRmse(model: ALSModel, df: DataFrame, n: Long): Double = &#123;</span><br><span class="line">    import spark.implicits._</span><br><span class="line">    val predictions = model.transform(df.select(&quot;user&quot;,&quot;product&quot;)) //调用预测的函数</span><br><span class="line">    // 输出 predictionsAndRatings 预测和评分</span><br><span class="line">    val predictionsAndRatings = predictions.select(&quot;user&quot;,&quot;product&quot;,&quot;prediction&quot;).rdd.map(x =&gt; ((x(0),x(1)),x(2)))</span><br><span class="line">      .join(df.select(&quot;user&quot;,&quot;product&quot;,&quot;rating&quot;).rdd.map(x =&gt; ((x(0),x(1)),x(2))))</span><br><span class="line">      .values</span><br><span class="line">      .take(10)</span><br><span class="line"></span><br><span class="line">    math.sqrt(predictionsAndRatings.map(x =&gt; (x._1.toString.toDouble  - x._2.toString.toDouble) * (x._1.toString.toDouble - x._2.toString.toDouble)).reduce(_ + _) / n)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /** 装载用户评分文件 **/</span><br><span class="line">  def loadRatings(lines: Array[String]): Seq[Rating] = &#123;</span><br><span class="line">    val ratings = lines.map &#123; line =&gt;</span><br><span class="line">      val fields = line.split(&quot;::&quot;)</span><br><span class="line">      Rating(fields(0).toInt, fields(1).toInt, fields(2).toDouble)</span><br><span class="line">    &#125;.filter(_.rating &gt; 0.0)</span><br><span class="line">    if (ratings.isEmpty) &#123;</span><br><span class="line">      sys.error(&quot;No ratings provided.&quot;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      ratings.toSeq</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DeleteFromMySQL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package recommend</span><br><span class="line">import java.sql.&#123;Connection, DriverManager, PreparedStatement&#125;</span><br><span class="line">import org.apache.spark.sql.&#123;DataFrame, Row, SQLContext&#125;</span><br><span class="line"></span><br><span class="line">object DeleteFromMySQL &#123;</span><br><span class="line"></span><br><span class="line">  val url = &quot;jdbc:mysql://localhost:3306/movierecommend?useUnicode=true&amp;characterEncoding=UTF-8&quot;</span><br><span class="line">  val prop = new java.util.Properties</span><br><span class="line">  prop.setProperty(&quot;user&quot;, &quot;root&quot;)</span><br><span class="line">  prop.setProperty(&quot;password&quot;, &quot;123&quot;)</span><br><span class="line">  def delete(userid:Int): Unit = &#123;</span><br><span class="line">    var conn: Connection = null</span><br><span class="line">    var ps: PreparedStatement = null</span><br><span class="line">    val sql = &quot;delete from recommendresult where userid=&quot;+userid</span><br><span class="line">    conn = DriverManager.getConnection(url,prop)</span><br><span class="line">    ps = conn.prepareStatement(sql)</span><br><span class="line">    ps.executeUpdate()</span><br><span class="line"></span><br><span class="line">    if (ps != null) &#123;</span><br><span class="line">      ps.close()</span><br><span class="line">    &#125;</span><br><span class="line">    if (conn != null) &#123;</span><br><span class="line">      conn.close()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>InsertIntoMySQL</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> recommend</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="type">Properties</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.types._</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.&#123;<span class="type">Row</span>, <span class="type">SparkSession</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">InsertIntoMySQL</span></span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">insert</span></span>(array:<span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> spark= <span class="type">SparkSession</span>.builder().appName(<span class="string">&quot;InsertIntoMySQL&quot;</span>).master(<span class="string">&quot;local[2]&quot;</span>).getOrCreate()</span><br><span class="line">    <span class="keyword">val</span> movieRDD = spark.sparkContext.parallelize(array).map(_.split(<span class="string">&quot;::&quot;</span>))</span><br><span class="line">    <span class="keyword">val</span> rowRDD = movieRDD.map(p =&gt; <span class="type">Row</span>(p(<span class="number">0</span>).trim.toInt, p(<span class="number">1</span>).trim.toInt, p(<span class="number">2</span>).trim.toFloat, p(<span class="number">3</span>).trim))</span><br><span class="line">    rowRDD.foreach(println)</span><br><span class="line">    <span class="keyword">val</span> schema = <span class="type">StructType</span>(<span class="type">List</span>(</span><br><span class="line">      <span class="type">StructField</span>(<span class="string">&quot;userid&quot;</span>, <span class="type">IntegerType</span>, <span class="literal">true</span>),</span><br><span class="line">      <span class="type">StructField</span>(<span class="string">&quot;movieid&quot;</span>, <span class="type">IntegerType</span>, <span class="literal">true</span>),</span><br><span class="line">      <span class="type">StructField</span>(<span class="string">&quot;rating&quot;</span>, <span class="type">FloatType</span>, <span class="literal">true</span>),</span><br><span class="line">      <span class="type">StructField</span>(<span class="string">&quot;moviename&quot;</span>, <span class="type">StringType</span>, <span class="literal">true</span>)))</span><br><span class="line">    <span class="keyword">val</span> movieDF=spark.createDataFrame(rowRDD,schema)</span><br><span class="line">    <span class="keyword">val</span> prop = <span class="keyword">new</span> <span class="type">Properties</span>()</span><br><span class="line">    prop.put(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>)</span><br><span class="line">    prop.put(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;123&quot;</span>)</span><br><span class="line">    prop.put(<span class="string">&quot;driver&quot;</span>,<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>)</span><br><span class="line">    movieDF.write.mode(<span class="string">&quot;append&quot;</span>).jdbc(<span class="string">&quot;jdbc:mysql://localhost:3306/movierecommend&quot;</span>, <span class="string">&quot;movierecommend.recommendresult&quot;</span>, prop)</span><br><span class="line">    movieDF.show()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ReadFromMySQL</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> recommend</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="type">Properties</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.types._</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.&#123;<span class="type">Row</span>, <span class="type">SparkSession</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.collection.mutable.<span class="type">ArrayBuffer</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ReadFromMySQL</span></span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">read</span></span>(userid:<span class="type">Int</span>): <span class="type">Array</span>[<span class="type">String</span>] = &#123;</span><br><span class="line">    <span class="keyword">val</span> spark= <span class="type">SparkSession</span>.builder().appName(<span class="string">&quot;ReadFromMySQL&quot;</span>).master(<span class="string">&quot;local[2]&quot;</span>).getOrCreate()</span><br><span class="line">    <span class="keyword">import</span> spark.implicits._</span><br><span class="line">    <span class="keyword">val</span> personalRatingsDF = spark.</span><br><span class="line">      read.format(<span class="string">&quot;jdbc&quot;</span>).</span><br><span class="line">      option(<span class="string">&quot;url&quot;</span>, <span class="string">&quot;jdbc:mysql://localhost:3306/movierecommend&quot;</span>).</span><br><span class="line">      option(<span class="string">&quot;driver&quot;</span>,<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>).</span><br><span class="line">      option(<span class="string">&quot;dbtable&quot;</span>, <span class="string">&quot;personalratings&quot;</span>).</span><br><span class="line">      option(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>).</span><br><span class="line">      option(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;123&quot;</span>).load()</span><br><span class="line">    personalRatingsDF.show()</span><br><span class="line">    personalRatingsDF.createOrReplaceTempView(<span class="string">&quot;personalratings&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> prDF=spark.sql(<span class="string">&quot;select * from personalratings where userid=&quot;</span>+userid)</span><br><span class="line">    <span class="keyword">val</span> myrdd=prDF.rdd.map(r=&gt;&#123;r(<span class="number">0</span>).toString+<span class="string">&quot;::&quot;</span>+r(<span class="number">1</span>).toString+<span class="string">&quot;::&quot;</span>+r(<span class="number">2</span>).toString+<span class="string">&quot;::&quot;</span>+r(<span class="number">3</span>).toString&#125;)</span><br><span class="line">    <span class="keyword">val</span> array=<span class="type">ArrayBuffer</span>[<span class="type">String</span>]()</span><br><span class="line">    array++=myrdd.collect();</span><br><span class="line">    println(array.length)</span><br><span class="line">    <span class="keyword">val</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until array.length)&#123;println(array(i))&#125;</span><br><span class="line">    array.toArray</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>Film_Recommend_Dataframe<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Film_Recommend_Dataframe<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spark.version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">spark.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.spark/spark-mllib_2.11 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-mllib_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spark.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.spark/spark-core_2.11 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-core_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spark.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-sql_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.40<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-yarn-common --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-yarn-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.alchim31.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scala-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>compile-scala<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>add-source<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>test-compile-scala<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>test-compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>add-source<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>testCompile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">scalaVersion</span>&gt;</span>2.11.8<span class="tag">&lt;/<span class="name">scalaVersion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/249.png" alt="1685501301214"></p><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/250.png" alt="1685501677945"></p><p>打包jar</p><p> 运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/spark/</span><br><span class="line">./bin/spark-submit --class recommend.MovieLensALS ~/IdeaProjects/Film_Recommend_Dataframe/out/artifacts/Film_Recommend_Dataframe_jar/Film_Recommend_Dataframe.jar /input_spark 1</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/256.png" alt="1685502183115"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">mkdir movierecommendapp</span><br><span class="line">cd  movierecommendapp</span><br><span class="line">npm install express -save</span><br><span class="line">npm install jade --save</span><br><span class="line">npm install body-parser --save</span><br><span class="line">npm install mysql --save</span><br></pre></td></tr></table></figure><p>vim movierecommend.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Created by linziyu on 2018/7/3.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * express接收html传递的参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     </span><br><span class="line">    <span class="keyword">var</span>  express=<span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span>  bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> spawnSync = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="property">spawnSync</span>;</span><br><span class="line">    <span class="keyword">var</span>  app=<span class="title function_">express</span>();</span><br><span class="line">    <span class="keyword">var</span> mysql=<span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line">    app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;jade&#x27;</span>); </span><br><span class="line">    app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, <span class="string">&#x27;./views&#x27;</span>);</span><br><span class="line">    app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;))</span><br><span class="line">    app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>())</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置MySQL</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">var</span> connection = mysql.<span class="title function_">createConnection</span>(&#123;</span><br><span class="line">        host     : <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        user     : <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        password : <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">        database : <span class="string">&#x27;movierecommend&#x27;</span>,</span><br><span class="line">        <span class="attr">port</span>:<span class="string">&#x27;3306&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    connection.<span class="title function_">connect</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跳转到网站首页</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="keyword">function</span> (<span class="params">req,res</span>) &#123;</span><br><span class="line">        res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跳转到登录页面</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    app.<span class="title function_">get</span>(<span class="string">&#x27;/loginpage&#x27;</span>,<span class="keyword">function</span> (<span class="params">req,res</span>) &#123;</span><br><span class="line">      res.<span class="title function_">render</span>(<span class="string">&#x27;loginpage&#x27;</span>,&#123;<span class="attr">title</span>:<span class="string">&#x27;登录&#x27;</span>&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现登录验证功能</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    app.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>,<span class="keyword">function</span> (<span class="params">req,res</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span>  name=req.<span class="property">body</span>.<span class="property">username</span>.<span class="title function_">trim</span>();</span><br><span class="line">        <span class="keyword">var</span> pwd=req.<span class="property">body</span>.<span class="property">pwd</span>.<span class="title function_">trim</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;username:&#x27;</span>+name+<span class="string">&#x27;password:&#x27;</span>+pwd);</span><br><span class="line">        <span class="keyword">var</span> selectMovieInfoSQL=<span class="string">&quot;select movieid,moviename,picture from movieinfo limit 1000&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> movieinfolist=[];</span><br><span class="line">connection.<span class="title function_">query</span>(selectMovieInfoSQL,<span class="keyword">function</span>(<span class="params">err,rows,fields</span>)&#123;</span><br><span class="line">   <span class="keyword">if</span> (err) <span class="keyword">throw</span>  err;</span><br><span class="line">   <span class="comment">//console.log(&#x27;movieids length is:&#x27;+rows.length);</span></span><br><span class="line">   <span class="comment">//console.log(&#x27;movieid is:&#x27;+rows[0].movieid);</span></span><br><span class="line">           <span class="comment">//console.log(&#x27;moviename is:&#x27;+rows[0].moviename);</span></span><br><span class="line">           movieinfolist=rows;</span><br><span class="line">           &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> selectSQL = <span class="string">&quot;select * from user where username = &#x27;&quot;</span>+name+<span class="string">&quot;&#x27; and password = &#x27;&quot;</span>+pwd+<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">        connection.<span class="title function_">query</span>(selectSQL,<span class="keyword">function</span> (<span class="params">err,rows,fields</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) <span class="keyword">throw</span>  err;</span><br><span class="line">            <span class="keyword">function</span> <span class="title function_">randomFrom</span>(<span class="params">lowerValue,upperValue</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (upperValue - lowerValue + <span class="number">1</span>) + lowerValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//console.log(&#x27;userid is:&#x27;+rows[0].userid);</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> lowerValue=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">var</span> upperValue=movieinfolist.<span class="property">length</span>;</span><br><span class="line">            <span class="keyword">var</span> index=<span class="title function_">randomFrom</span>(lowerValue,upperValue);</span><br><span class="line">            <span class="comment">//console.log(&#x27;movieid random is:&#x27;+movieinfolist[index].movieid);</span></span><br><span class="line">            <span class="comment">//console.log(&#x27;moviename random is:&#x27;+movieinfolist[index].moviename);</span></span><br><span class="line">            <span class="keyword">var</span> movielist=[];</span><br><span class="line">            <span class="keyword">var</span> movieNumbers=<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;movieNumbers;i++)&#123;</span><br><span class="line">              index=<span class="title function_">randomFrom</span>(lowerValue,upperValue);</span><br><span class="line">              movielist.<span class="title function_">push</span>(&#123;<span class="attr">movieid</span>:movieinfolist[index].<span class="property">movieid</span>,<span class="attr">moviename</span>:movieinfolist[index].<span class="property">moviename</span>,<span class="attr">picture</span>:movieinfolist[index].<span class="property">picture</span>&#125;);</span><br><span class="line">              </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//for(var item in movielist)&#123;</span></span><br><span class="line">            <span class="comment">//  console.log(&#x27;item is:&#x27;+item);</span></span><br><span class="line">            <span class="comment">//  console.log(&#x27;movieid is:&#x27;+movielist[item].movieid);</span></span><br><span class="line">            <span class="comment">//  console.log(&#x27;moviename is:&#x27;+movielist[item].moviename);</span></span><br><span class="line">            <span class="comment">//&#125;</span></span><br><span class="line">                       </span><br><span class="line">            res.<span class="title function_">render</span>(<span class="string">&#x27;personalratings&#x27;</span>,&#123;<span class="attr">title</span>:<span class="string">&#x27;Welcome User&#x27;</span>,<span class="attr">userid</span>:rows[<span class="number">0</span>].<span class="property">userid</span>,<span class="attr">username</span>:rows[<span class="number">0</span>].<span class="property">username</span>,<span class="attr">movieforpage</span>:movielist&#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跳转到注册页面</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     </span><br><span class="line">    app.<span class="title function_">get</span>(<span class="string">&#x27;/registerpage&#x27;</span>,<span class="keyword">function</span> (<span class="params">req,res</span>) &#123;</span><br><span class="line">      res.<span class="title function_">render</span>(<span class="string">&#x27;registerpage&#x27;</span>,&#123;<span class="attr">title</span>:<span class="string">&#x27;注册&#x27;</span>&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现注册功能</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    app.<span class="title function_">post</span>(<span class="string">&#x27;/register&#x27;</span>,<span class="keyword">function</span> (<span class="params">req,res</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span>  name=req.<span class="property">body</span>.<span class="property">username</span>.<span class="title function_">trim</span>();</span><br><span class="line">        <span class="keyword">var</span>  pwd=req.<span class="property">body</span>.<span class="property">pwd</span>.<span class="title function_">trim</span>();</span><br><span class="line">        <span class="keyword">var</span>  user=&#123;<span class="attr">username</span>:name,<span class="attr">password</span>:pwd&#125;;</span><br><span class="line">        connection.<span class="title function_">query</span>(<span class="string">&#x27;insert into user set ?&#x27;</span>,user,<span class="keyword">function</span> (<span class="params">err,rs</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) <span class="keyword">throw</span>  err;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;register success&#x27;</span>);</span><br><span class="line">           res.<span class="title function_">render</span>(<span class="string">&#x27;registersuccess&#x27;</span>,&#123;<span class="attr">title</span>:<span class="string">&#x27;注册成功&#x27;</span>,<span class="attr">message</span>:name&#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把用户评分写入数据库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     </span><br><span class="line">    app.<span class="title function_">post</span>(<span class="string">&#x27;/submituserscore&#x27;</span>,<span class="keyword">function</span> (<span class="params">req,res</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span>  userid=req.<span class="property">body</span>.<span class="property">userid</span>;</span><br><span class="line">        <span class="keyword">var</span> moviescores=[];</span><br><span class="line">        <span class="keyword">var</span> movieids=[];</span><br><span class="line">        req.<span class="property">body</span>.<span class="property">moviescore</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">score</span>)&#123;</span><br><span class="line">            <span class="comment">//console.log(&#x27;the score is:&#x27;+score);</span></span><br><span class="line">            moviescores.<span class="title function_">push</span>(&#123;<span class="attr">moviescore</span>:score&#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        req.<span class="property">body</span>.<span class="property">movieid</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">id</span>)&#123;</span><br><span class="line">            <span class="comment">//console.log(&#x27;the id is:&#x27;+id);</span></span><br><span class="line">            movieids.<span class="title function_">push</span>(&#123;<span class="attr">movieid</span>:id&#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//for(var item in movieids)&#123;</span></span><br><span class="line">        <span class="comment">//   console.log(&#x27;item is:&#x27;+item);</span></span><br><span class="line">        <span class="comment">//   console.log(&#x27;movieid is:&#x27;+movieids[item].movieid);</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        <span class="comment">//for(var item in moviescores)&#123;</span></span><br><span class="line">        <span class="comment">//   console.log(&#x27;item is:&#x27;+item);</span></span><br><span class="line">        <span class="comment">//   console.log(&#x27;moviescore is:&#x27;+moviescores[item].moviescore);</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        <span class="comment">//删除该用户历史评分数据，为写入本次最新评分数据做准备</span></span><br><span class="line">        connection.<span class="title function_">query</span>(<span class="string">&#x27;delete from  personalratings where userid=&#x27;</span>+userid, <span class="keyword">function</span>(<span class="params">err, result</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;deleted&#x27;</span>);</span><br><span class="line">            <span class="comment">//console.log(result);</span></span><br><span class="line">            <span class="comment">//console.log(&#x27;\n&#x27;);</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//生成评分时间戳</span></span><br><span class="line">        <span class="keyword">var</span> mytimestamp =<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>().<span class="title function_">toString</span>().<span class="title function_">slice</span>(<span class="number">1</span>,<span class="number">10</span>);        </span><br><span class="line">        <span class="comment">//console.log(&#x27;mytimestamp2 is:&#x27;+mytimestamp);</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> item <span class="keyword">in</span> movieids)&#123;</span><br><span class="line">           <span class="comment">//把每条评分记录(userid,movieid,rating,timestamp)插入数据库  </span></span><br><span class="line">           <span class="keyword">var</span> personalratings=&#123;<span class="attr">userid</span>:userid,<span class="attr">movieid</span>:movieids[item].<span class="property">movieid</span>,<span class="attr">rating</span>:moviescores[item].<span class="property">moviescore</span>,<span class="attr">timestamp</span>:mytimestamp&#125;;</span><br><span class="line">           connection.<span class="title function_">query</span>(<span class="string">&#x27;insert into personalratings set ?&#x27;</span>,personalratings,<span class="keyword">function</span> (<span class="params">err,rs</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) <span class="keyword">throw</span>  err;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;insert into personalrating success&#x27;</span>);          </span><br><span class="line">           &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> selectUserIdNameSQL=<span class="string">&#x27;select userid,username from user where userid=&#x27;</span>+userid;</span><br><span class="line">        connection.<span class="title function_">query</span>(selectUserIdNameSQL,<span class="keyword">function</span>(<span class="params">err,rows,fields</span>)&#123;</span><br><span class="line">           <span class="keyword">if</span> (err) <span class="keyword">throw</span>  err;</span><br><span class="line">           res.<span class="title function_">render</span>(<span class="string">&#x27;userscoresuccess&#x27;</span>,&#123;<span class="attr">title</span>:<span class="string">&#x27;Personal Rating Success&#x27;</span>,<span class="attr">user</span>:rows[<span class="number">0</span>]&#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    </span><br><span class="line">    &#125;); </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用Spark程序为用户推荐电影并把推荐结果写入数据库,把推荐结果显示到网页</span></span><br><span class="line"><span class="comment">     */</span>     </span><br><span class="line">    app.<span class="title function_">get</span>(<span class="string">&#x27;/recommendmovieforuser&#x27;</span>,<span class="keyword">function</span> (<span class="params">req,res</span>) &#123;</span><br><span class="line"><span class="comment">//console.log(&#x27;result point 1&#x27;);</span></span><br><span class="line">        <span class="keyword">const</span> userid=req.<span class="property">query</span>.<span class="property">userid</span>;</span><br><span class="line">        <span class="keyword">const</span> username=req.<span class="property">query</span>.<span class="property">username</span>;</span><br><span class="line">        <span class="comment">//console.log(&#x27;recommendation userid is:&#x27;+userid);      </span></span><br><span class="line">        <span class="keyword">const</span> path = <span class="string">&#x27;/input_spark&#x27;</span>;</span><br><span class="line">        <span class="comment">//调用Spark程序为用户推荐电影并把推荐结果写入数据库</span></span><br><span class="line">        <span class="keyword">let</span> spark_submit = <span class="title function_">spawnSync</span>(<span class="string">&#x27;/usr/local/spark/bin/spark-submit&#x27;</span>,[<span class="string">&#x27;--class&#x27;</span>, <span class="string">&#x27;recommend.MovieLensALS&#x27;</span>,<span class="string">&#x27; ~/IdeaProjects/Film_Recommend/out/artifacts/Film_Recommend_jar/Film_Recommend.jar&#x27;</span>, path, userid],&#123; <span class="attr">shell</span>:<span class="literal">true</span>, <span class="attr">encoding</span>: <span class="string">&#x27;utf8&#x27;</span> &#125;);</span><br><span class="line">        <span class="comment">//console.log(&#x27;spark running result is:&#x27;+spark_submit.stdout);</span></span><br><span class="line">        <span class="comment">//从数据库中读取推荐结果,把推荐结果显示到网页</span></span><br><span class="line">        <span class="keyword">var</span> selectRecommendResultSQL=<span class="string">&quot;select recommendresult.userid,recommendresult.movieid,recommendresult.rating,recommendresult.moviename,movieinfo.picture from recommendresult inner join movieinfo on recommendresult.movieid=movieinfo.movieid where recommendresult.userid=&quot;</span>+userid;</span><br><span class="line">        <span class="keyword">var</span> movieinfolist=[];</span><br><span class="line">        connection.<span class="title function_">query</span>(selectRecommendResultSQL,<span class="keyword">function</span>(<span class="params">err,rows,fields</span>)&#123;</span><br><span class="line">           <span class="keyword">if</span> (err) <span class="keyword">throw</span>  err;</span><br><span class="line">           <span class="comment">//console.log(&#x27;result point 3&#x27;);</span></span><br><span class="line">           <span class="comment">//console.log(&#x27;movieids length is:&#x27;+rows.length);</span></span><br><span class="line">           <span class="comment">//console.log(&#x27;movieid is:&#x27;+rows[0].movieid);</span></span><br><span class="line">           <span class="comment">//console.log(&#x27;moviename is:&#x27;+rows[0].moviename);</span></span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;read recommend result from database&#x27;</span>);</span><br><span class="line">           </span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;rows.<span class="property">length</span>;i++)&#123;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;forxunhuan:i=&#x27;</span>+i);</span><br><span class="line">              movieinfolist.<span class="title function_">push</span>(&#123;<span class="attr">userid</span>:rows[i].<span class="property">userid</span>,<span class="attr">movieid</span>:rows[i].<span class="property">movieid</span>,<span class="attr">rating</span>:rows[i].<span class="property">rating</span>,<span class="attr">moviename</span>:rows[i].<span class="property">moviename</span>,<span class="attr">picture</span>:rows[i].<span class="property">picture</span>&#125;);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//for(var item in movieinfolist)&#123;</span></span><br><span class="line">           <span class="comment">//   console.log(&#x27;result point 6&#x27;);</span></span><br><span class="line">           <span class="comment">//   console.log(&#x27;item is:&#x27;+item);</span></span><br><span class="line">           <span class="comment">//   console.log(&#x27;userid is:&#x27;+movieinfolist[item].userid);</span></span><br><span class="line">           <span class="comment">//   console.log(&#x27;movieid is:&#x27;+movieinfolist[item].movieid);</span></span><br><span class="line">           <span class="comment">//   console.log(&#x27;moviename is:&#x27;+movieinfolist[item].moviename);</span></span><br><span class="line">           <span class="comment">//   console.log(&#x27;rating is:&#x27;+movieinfolist[item].rating);</span></span><br><span class="line">           <span class="comment">//   console.log(&#x27;picture is:&#x27;+movieinfolist[item].picture);</span></span><br><span class="line">           <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">           res.<span class="title function_">render</span>(<span class="string">&#x27;recommendresult&#x27;</span>, &#123;<span class="attr">title</span>: <span class="string">&#x27;Recommend Result&#x27;</span>, <span class="attr">message</span>: <span class="string">&#x27;this is recommend for you&#x27;</span>,<span class="attr">username</span>:username,<span class="attr">movieinfo</span>:movieinfolist&#125;)</span><br><span class="line">           &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;)    </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">var</span>  server=app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;movierecommend server start......&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir views</span><br><span class="line">cd views</span><br></pre></td></tr></table></figure><p>vim index.jade</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">html</span><br><span class="line">  head</span><br><span class="line">    title!=title    </span><br><span class="line">    meta(charset=&#x27;utf-8&#x27;)</span><br><span class="line">    meta(name=&#x27;description&#x27;)</span><br><span class="line">    meta(name=&#x27;keywords&#x27;)</span><br><span class="line">    meta(name=&#x27;author&#x27;)</span><br><span class="line">    link(rel=&#x27;shortcut icon&#x27;, href=&#x27;http://eduppp.cn/images/logo4.gif&#x27;)</span><br><span class="line">    link(rel=&#x27;apple-touch-icon&#x27;, href=&#x27;http://eduppp.cn/images/logo.gif&#x27;)</span><br><span class="line">    style</span><br><span class="line">      include css/index.css</span><br><span class="line">    style(type=&#x27;text/css&#x27;).</span><br><span class="line">      #frame &#123;/*----------图片轮播相框容器----------*/</span><br><span class="line">      position: absolute; /*--绝对定位，方便子元素的定位*/</span><br><span class="line">      width: 1500px;</span><br><span class="line">      height: 75%;</span><br><span class="line">      overflow: hidden;/*--相框作用，只显示一个图片---*/</span><br><span class="line">      border-radius:5px;</span><br><span class="line">      &#125;</span><br><span class="line">      #dis &#123;/*--绝对定位方便li图片简介的自动分布定位---*/</span><br><span class="line">      position: absolute;</span><br><span class="line">      left: -50px;</span><br><span class="line">      top: -10px;</span><br><span class="line">      opacity: 0.5;</span><br><span class="line">      &#125;</span><br><span class="line">      #dis li &#123;</span><br><span class="line">      display: inline-block;</span><br><span class="line">      width: 200px;</span><br><span class="line">      height: 20px;</span><br><span class="line">      margin: 0 650px;</span><br><span class="line">      float: left;</span><br><span class="line">      text-align: center;</span><br><span class="line">      color: #fff;</span><br><span class="line">      border-radius: 10px;</span><br><span class="line">      background: #000;</span><br><span class="line">      &#125;</span><br><span class="line">      #photos img &#123;</span><br><span class="line">      float: left;</span><br><span class="line">      width:1500px;</span><br><span class="line">      height:75%;</span><br><span class="line">      &#125;</span><br><span class="line">      #photos &#123;/*---设置总的图片宽度--通过位移来达到轮播效果----*/</span><br><span class="line">      position: absolute;z-index:9px;</span><br><span class="line">      width: calc(1500px * 5);/*---修改图片数量的话需要修改下面的动画参数*/</span><br><span class="line">      &#125;</span><br><span class="line">      .play&#123;</span><br><span class="line">      animation: ma 20s ease-out infinite alternate;/**/</span><br><span class="line">      &#125;</span><br><span class="line">      @keyframes ma &#123;/*---每图片切换有两个阶段：位移切换和静置。中间的效果可以任意定制----*/</span><br><span class="line">      0%,20% &#123;margin-left: 0px;&#125;</span><br><span class="line">      25%,40% &#123;margin-left: -1500px;&#125;</span><br><span class="line">      45%,60% &#123;margin-left: -3000px;&#125;</span><br><span class="line">      65%,80% &#123;margin-left: -4500px;&#125;</span><br><span class="line">      85%,100% &#123;margin-left: -6000px;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">      .num&#123;</span><br><span class="line">      position:absolute;z-index:10;</span><br><span class="line">      display:inline-block;</span><br><span class="line">      right:10px;top:550px;</span><br><span class="line">      border-radius:100%;</span><br><span class="line">      background:#778899;</span><br><span class="line">      width:50px;height:50px;</span><br><span class="line">      line-height:50px;</span><br><span class="line">      cursor:pointer;</span><br><span class="line">      color:#fff;</span><br><span class="line">      background-clor:rgba(0,0,0,0.5);</span><br><span class="line">      text-align:center;</span><br><span class="line">      opacity:0.8;</span><br><span class="line">      &#125;</span><br><span class="line">      .num:hover&#123;background:#000;&#125;</span><br><span class="line">      .num:hover,#photos:hover&#123;animation-play-state:paused;&#125;</span><br><span class="line">      .num:nth-child(2)&#123;margin-right:60px&#125;</span><br><span class="line">      .num:nth-child(3)&#123;margin-right:120px&#125;</span><br><span class="line">      .num:nth-child(4)&#123;margin-right:180px&#125;</span><br><span class="line">      .num:nth-child(5)&#123;margin-right:240px&#125;</span><br><span class="line">      #a1:hover ~ #photos&#123;animation: ma1 .5s ease-out forwards;&#125;</span><br><span class="line">      #a2:hover ~ #photos&#123;animation: ma2 .5s ease-out forwards;&#125;</span><br><span class="line">      #a3:hover ~ #photos&#123;animation: ma3 .5s ease-out forwards;&#125;</span><br><span class="line">      #a4:hover ~ #photos&#123;animation: ma4 .5s ease-out forwards;&#125;</span><br><span class="line">      #a5:hover ~ #photos &#123;animation: ma5 .5s ease-out forwards;&#125;</span><br><span class="line">      @keyframes ma1 &#123;0%&#123;margin-left:-1200px;&#125;100%&#123;margin-left:-0px;&#125;&#125;</span><br><span class="line">      @keyframes ma2 &#123;0%&#123;margin-left:-1200px;&#125;100%&#123;margin-left:-1500px;&#125;&#125;</span><br><span class="line">      @keyframes ma3 &#123;100%&#123;margin-left:-3000px;&#125;&#125;</span><br><span class="line">      @keyframes ma4 &#123;100%&#123;margin-left:-4500px;&#125;&#125;</span><br><span class="line">      @keyframes ma5 &#123;100%&#123;margin-left:-6000px;&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  body</span><br><span class="line">    div#navigation 欢迎访问厦门大学数据库实验室电影推荐系统</span><br><span class="line">      div#logreg</span><br><span class="line">        input(type=&#x27;submit&#x27;,value=&#x27;登录&#x27;,onclick=&quot;window.location=&#x27;/loginpage&#x27;&quot;)</span><br><span class="line">        input(type=&#x27;submit&#x27;, value=&#x27;注册&#x27;,onclick=&quot;window.location=&#x27;/registerpage&#x27;&quot;) </span><br><span class="line">    div#mid</span><br><span class="line">      #frame</span><br><span class="line">        a#a5.num 5</span><br><span class="line">        a#a4.num 4</span><br><span class="line">        a#a3.num 3</span><br><span class="line">        a#a2.num 2</span><br><span class="line">        a#a1.num 1</span><br><span class="line">        #photos.play</span><br><span class="line">          img(src=&#x27;http://img05.tooopen.com/products/20150130/44128217.jpg&#x27;)</span><br><span class="line">          img(src=&#x27;http://image.17173.com/bbs/v1/2012/11/14/1352873759491.jpg&#x27;)</span><br><span class="line">          img(src=&#x27;http://t1.27270.com/uploads/tu/201502/103/5.jpg&#x27;)</span><br><span class="line">          img(src=&#x27;http://img.doooor.com/img/forum/201507/15/171203xowepc3ju9n9br9z.jpg&#x27;)</span><br><span class="line">          img(src=&#x27;http://4493bz.1985t.com/uploads/allimg/170503/5-1F503140J0.jpg&#x27;)</span><br><span class="line">          ul#dis</span><br><span class="line">            li 魔戒：霍比特人</span><br><span class="line">            li 魔境仙踪</span><br><span class="line">            li 阿凡达</span><br><span class="line">            li 大圣归来</span><br><span class="line">            li 拆弹专家</span><br><span class="line">      </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>vim loginpage.jade</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">html</span><br><span class="line">  head</span><br><span class="line">    title!= title</span><br><span class="line">    style.</span><br><span class="line">      body&#123;</span><br><span class="line">        background-image:url(https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1537261291133&amp;di=c04553d39f158272a36be6e3ec0c8071&amp;imgtype=0&amp;src=http%3A%2F%2Fh.hiphotos.baidu.com%2Fzhidao%2Fpic%2Fitem%2Fc2fdfc039245d6885bc3be94a2c27d1ed21b2438.jpg);</span><br><span class="line">      &#125;</span><br><span class="line">      #log&#123;</span><br><span class="line">        padding-top: 2px;</span><br><span class="line">        margin-top: 10%;</span><br><span class="line">        margin-left: 37%;</span><br><span class="line">        background: white;</span><br><span class="line">        width: 25%;</span><br><span class="line">        height: 40%;</span><br><span class="line">        text-align: center;</span><br><span class="line">      &#125;</span><br><span class="line">  body</span><br><span class="line">    div#log</span><br><span class="line">      form(action=&#x27;/login&#x27;, method=&#x27;post&#x27;)</span><br><span class="line">        h1 用户登录</span><br><span class="line">        br</span><br><span class="line">        span 帐号:</span><br><span class="line">        input(type=&#x27;text&#x27;,name=&#x27;username&#x27;)</span><br><span class="line">        br</span><br><span class="line">        span 密码:</span><br><span class="line">        input(type=&#x27;password&#x27;,name=&#x27;pwd&#x27;)</span><br><span class="line">        br</span><br><span class="line">        br</span><br><span class="line">        input(type=&#x27;submit&#x27;,value=&#x27;登录&#x27;)</span><br><span class="line">        br</span><br><span class="line">        a(href=&#x27;/registerpage&#x27;, title=&#x27;注册&#x27;)注册</span><br><span class="line">        br</span><br><span class="line">        a(href=&#x27;/&#x27;,title=&#x27;主页&#x27;)返回主页</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>vim personalratings.jade</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">html</span><br><span class="line">  head</span><br><span class="line">    title!= title</span><br><span class="line">  body</span><br><span class="line">    h1 热烈欢迎用户: #&#123;username&#125;,请您为以下电影打分:</span><br><span class="line">    form(action=&#x27;/submituserscore&#x27;, method=&#x27;post&#x27;)</span><br><span class="line">       input(type=&#x27;text&#x27;,style=&quot;visibility: hidden;width:0px; height:0px;&quot;,name=&#x27;userid&#x27;, value=userid)</span><br><span class="line">       table( cellpadding=&quot;5&quot; cellspacing=&quot;5&quot;)</span><br><span class="line">         tr</span><br><span class="line">           -for(var i=0;i&lt;movieforpage.length;i++)</span><br><span class="line">            td</span><br><span class="line">              //p 电影名称:#&#123;movieforpage[i].moviename&#125;</span><br><span class="line">              input(type=&#x27;text&#x27;,style=&quot;visibility: hidden;width:0px; height:0px;&quot;,name=&#x27;movieid&#x27;, value=movieforpage[i].movieid)</span><br><span class="line">              img(src=movieforpage[i].picture)</span><br><span class="line">              br</span><br><span class="line">              select(name=&#x27;moviescore&#x27;)</span><br><span class="line">                option(value=1) 1</span><br><span class="line">                option(value=2) 2</span><br><span class="line">                option(value=3) 3</span><br><span class="line">                option(value=4) 4</span><br><span class="line">                option(value=5) 5</span><br><span class="line">             -if((i+1)%5==0)</span><br><span class="line">              tr</span><br><span class="line">        input(type=&#x27;submit&#x27;,value=&#x27;提交&#x27;)</span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>vim recommendresult.jade</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">html</span><br><span class="line">  head</span><br><span class="line">    title!= title</span><br><span class="line">  body</span><br><span class="line">    h1 亲爱的用户:#&#123;username&#125;,猜你喜欢电影:</span><br><span class="line">    table( cellpadding=&quot;5&quot; cellspacing=&quot;5&quot;)</span><br><span class="line">         tr</span><br><span class="line">           -for(var i=0;i&lt;movieinfo.length;i++)</span><br><span class="line">            td</span><br><span class="line">              p #&#123;movieinfo[i].moviename&#125;</span><br><span class="line">              img(src=movieinfo[i].picture)</span><br><span class="line">            -if((i+1)%5==0)</span><br><span class="line">             tr</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>vim registerpage.jade</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">html</span><br><span class="line">  head</span><br><span class="line">    title!= title</span><br><span class="line">    style.</span><br><span class="line">      body&#123;</span><br><span class="line">        background-image:url(https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1537261291133&amp;di=c04553d39f158272a36be6e3ec0c8071&amp;imgtype=0&amp;src=http%3A%2F%2Fh.hiphotos.baidu.com%2Fzhidao%2Fpic%2Fitem%2Fc2fdfc039245d6885bc3be94a2c27d1ed21b2438.jpg);</span><br><span class="line">      &#125;</span><br><span class="line">      #reg&#123;</span><br><span class="line">        padding-top: 2px;</span><br><span class="line">        margin-top: 10%;</span><br><span class="line">        margin-left: 37%;</span><br><span class="line">        background: white;</span><br><span class="line">        width: 25%;</span><br><span class="line">        height: 40%;</span><br><span class="line">        text-align: center;</span><br><span class="line">      &#125;</span><br><span class="line">  body</span><br><span class="line">    div#reg</span><br><span class="line">      form(action=&#x27;/register&#x27;, method=&#x27;post&#x27;)</span><br><span class="line">        h1 用户注册</span><br><span class="line">        br</span><br><span class="line">        span 帐号:</span><br><span class="line">        input(type=&#x27;text&#x27;,name=&#x27;username&#x27;)</span><br><span class="line">        br</span><br><span class="line">        span 密码:</span><br><span class="line">        input(type=&#x27;password&#x27;,name=&#x27;pwd&#x27;)</span><br><span class="line">        br</span><br><span class="line">        br</span><br><span class="line">        input(type=&#x27;submit&#x27;,value=&#x27;注册&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>vim registersuccess.jade</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">html</span><br><span class="line">  head</span><br><span class="line">    title!= title</span><br><span class="line">  body</span><br><span class="line">    h1 热烈欢迎用户: #&#123;message&#125;</span><br><span class="line">    a(href=&#x27;loginpage&#x27; tile=&#x27;请点击这里登录&#x27;)请点击这里登录</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>vim userscoresuccess.jade</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">html</span><br><span class="line">  head</span><br><span class="line">    title!= title</span><br><span class="line">  body</span><br><span class="line">    h1 亲爱的用户:#&#123;user.username&#125;,祝贺评分成功!</span><br><span class="line">    a(href=&#x27;/recommendmovieforuser?userid=#&#123;user.userid&#125;&amp;username=#&#123;user.username&#125;&#x27;) 点击这里为您推荐电影</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir css</span><br><span class="line">cd css</span><br><span class="line">vim index.css</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1537261291133&amp;di=c04553d39f158272a36be6e3ec0c8071&amp;imgtype=0&amp;src=http%3A%2F%2Fh.hiphotos.baidu.com%2Fzhidao%2Fpic%2Fitem%2Fc2fdfc039245d6885bc3be94a2c27d1ed21b2438.jpg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#navigation</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#888888</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">50px</span>;  </span><br><span class="line">  <span class="attribute">margin-bottom</span>:<span class="number">5px</span>;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#logreg</span>&#123;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">2%</span>;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#FFF</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#mid</span>&#123;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">75%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1500px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#picchange</span>&#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">75%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#contain</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">font-family</span>: Arial;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#FFF</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#contain</span> <span class="selector-tag">ul</span>&#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1800px</span>;</span><br><span class="line">  <span class="attribute">transition</span>:all <span class="number">0.5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#contain</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">36px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#one</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#9fa8ef</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#two</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ef9fb1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#three</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#9fefc3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> marginLeft&#123;</span><br><span class="line">  <span class="number">0%</span>&#123;<span class="attribute">margin-left</span>: <span class="number">0</span>;&#125;</span><br><span class="line">  <span class="number">28.5%</span>&#123;<span class="attribute">margin-left</span>: <span class="number">0</span>;&#125;</span><br><span class="line">  <span class="number">33.3%</span>&#123;<span class="attribute">margin-left</span>: -<span class="number">600px</span>;&#125;</span><br><span class="line">  <span class="number">62%</span>&#123;<span class="attribute">margin-left</span>: -<span class="number">600px</span>;&#125;</span><br><span class="line">  <span class="number">66.7%</span>&#123;<span class="attribute">margin-left</span>: -<span class="number">1200px</span>;&#125;</span><br><span class="line">  <span class="number">95.2%</span>&#123;<span class="attribute">margin-left</span>: -<span class="number">1200px</span>;&#125;</span><br><span class="line">  <span class="number">100%</span>&#123;<span class="attribute">margin-left</span>: <span class="number">0</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#slide-auto</span>&#123;</span><br><span class="line">  <span class="attribute">animation</span>:marginLeft <span class="number">10.5s</span>infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后 node js</p><p>完成</p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>queue</title>
      <link href="/2023/05/20/queue/"/>
      <url>/2023/05/20/queue/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="type">int</span>&gt; a;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>;i++)&#123;</span><br><span class="line">        a.push(i);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!a.empty())&#123;</span><br><span class="line">        <span class="type">int</span> element = a.front();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; element;</span><br><span class="line">        a.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下是queue容器中常用的成员函数：</p><ol><li>push(element)：将元素element压入队列的末尾。</li><li>pop()：弹出队首元素。</li><li>front()：返回队首元素的引用。</li><li>back()：返回队尾元素的引用。</li><li>empty()：判断队列是否为空，如果队列为空则返回true，否则返回false。</li><li>size()：返回队列中元素的个数。</li><li>swap(other)：交换当前队列的元素和另一个队列（other）的元素。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈和队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stack</title>
      <link href="/2023/05/20/stack/"/>
      <url>/2023/05/20/stack/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="type">int</span>,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&gt; third;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="type">int</span>&gt; stIn;</span><br><span class="line"><span class="comment">// void push(int x)&#123;</span></span><br><span class="line"><span class="comment">//     stIn.push(x);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>;i++)&#123;</span><br><span class="line">        stIn.push(i);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">while</span>(!stIn.empty())&#123;</span><br><span class="line">        <span class="type">int</span> element = stIn.top();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; element;</span><br><span class="line">        stIn.pop();</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>push(element)：将元素element压入栈的顶部。</li><li>pop()：弹出栈顶元素。</li><li>top()：返回栈顶元素的引用。</li><li>empty()：判断栈是否为空，如果栈为空则返回true，否则返回false。</li><li>size()：返回栈中元素的个数。</li><li>swap(other)：交换当前栈的元素和另一个栈（other）的元素。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈和队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>459. 重复的子字符串</title>
      <link href="/2023/05/17/459.-%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2023/05/17/459.-%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/repeated-substring-pattern/">459. 重复的子字符串</a></p><h2 id="移动匹配"><a href="#移动匹配" class="headerlink" title="移动匹配"></a>移动匹配</h2><p>当一个字符串s：abcabc，内部由重复的子串组成，那么这个字符串的结构一定是这样的：</p><p><img src="/images/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E7%A7%BB%E5%8A%A8%E5%8C%B9%E9%85%8D.png" alt="移动匹配"></p><p>也就是由前后相同的子串组成。</p><p>那么既然前面有相同的子串，后面有相同的子串，用 s + s，这样组成的字符串中，后面的子串做前串，前后的子串做后串，就一定还能组成一个s，如图：</p><p><img src="/images/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E7%A7%BB%E5%8A%A8%E5%8C%B9%E9%85%8D2.png" alt="移动匹配2"></p><p>所以判断字符串s是否由重复子串组成，只要两个s拼接在一起，里面还出现一个s的话，就说明是由重复子串组成。</p><p>当然，我们在判断 s + s 拼接的字符串里是否出现一个s的的时候，<strong>要刨除 s + s 的首字符和尾字符</strong>，这样避免在s+s中搜索出原来的s，我们要搜索的是中间拼接出来的s。</p><p>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line">public:</span><br><span class="line"><span class="type">bool</span> <span class="title function_">repeatedSubstringPattern</span><span class="params">(<span class="built_in">string</span> s)</span>&#123;</span><br><span class="line">        <span class="built_in">string</span> t=s+s;</span><br><span class="line">        t.erase(t.begin());</span><br><span class="line">        t.erase(t.end()<span class="number">-1</span>);<span class="comment">//掐头去尾</span></span><br><span class="line">        <span class="keyword">if</span>(t.find(s)!=<span class="built_in">std</span>::<span class="built_in">string</span>::npos)<span class="comment">//比如在 find() 函数中查找一个子串未找到时，会返回 std::string::npos</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">比如在 find() 函数中查找一个子串未找到时，会返回 <span class="built_in">std</span>::<span class="built_in">string</span>::npos</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>232. 用栈实现队列</title>
      <link href="/2023/05/16/232.%20%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
      <url>/2023/05/16/232.%20%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/implement-queue-using-stacks/">232. 用栈实现队列</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public:</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="type">int</span>&gt; stIn;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="type">int</span>&gt; stOut;</span><br><span class="line">MyQueue()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line">        stIn.push(x);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span>&#123;</span><br><span class="line">         <span class="comment">// 只有当stOut为空的时候，再从stIn里导入数据（导入stIn全部数据）</span></span><br><span class="line">        <span class="keyword">if</span>(stOut.empty())&#123;</span><br><span class="line">            <span class="comment">//从stIn导入数据直到stIn为空</span></span><br><span class="line">            <span class="keyword">while</span>(!stIn.empty())&#123;</span><br><span class="line">                <span class="comment">//stl中的stIn.top()是一个用于获取栈顶元素的函数</span></span><br><span class="line">                stOut.push(stIn.top());<span class="comment">//把栈顶元素放入OUt里面</span></span><br><span class="line">                stIn.pop();<span class="comment">//删除栈顶元素</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> result=stOut.top();</span><br><span class="line">        stOut.pop();</span><br><span class="line">        <span class="keyword">return</span> reseult;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈和队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5月中旬</title>
      <link href="/2023/05/16/5%E6%9C%88%E4%B8%AD%E6%97%AC/"/>
      <url>/2023/05/16/5%E6%9C%88%E4%B8%AD%E6%97%AC/</url>
      
        <content type="html"><![CDATA[<p>1.背单词太难了</p><img src="\images\dayliy_image\5.16.jpg" alt="drawing" width="200"/><p>2.数学要保持自我成就感</p><img src="\images\dayliy_image\notebook.jpg" alt="drawing" width="200"/><p>3.刷题保持自我成就感&amp;&amp;kmp学了三天明天继续</p><img src="\images\dayliy_image\codepng.png" alt="drawing" width="200"/><p>4.专业课感觉不能拉下，有点兴趣</p><p>5.鞭策自己的目标</p><p>tag1:考完西雅图看虎鲸！</p><p>tag2:考完买仿赛摩托！</p><p>ps:想润去阿美读研工作&amp;&amp;先考，考不上gap</p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> casual_talk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMP算法</title>
      <link href="/2023/05/16/KMP%E7%AE%97%E6%B3%95/"/>
      <url>/2023/05/16/KMP%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="KMP有什么用"><a href="#KMP有什么用" class="headerlink" title="KMP有什么用"></a>KMP有什么用</h1><p>KMP的主要思想是<strong>当出现字符串不匹配时，可以知道一部分之前已经匹配的文本内容，可以利用这些信息避免从头再去做匹配了。</strong></p><p><img src="/images/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/kmp2.png" alt="1684239097493"></p><p>说人话就是上面第二行的<code>f</code>那边不相等</p><p>然后会跳到b那边</p><p>为什么直接跳到b那边了呢？</p><p>那么就往前看它的子字符串：<code>aabaa</code></p><p>子字符串的前缀是<code>aa</code></p><p>子字符串的后缀也是<code>aa</code></p><p>那么就找到这个后缀(aa)与之相等的前缀(aa)的后面(b)重新开始匹配</p><p>(找最长相等前后缀)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line">a a b a a f</span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">0</span> </span><br><span class="line">因为 f 不同 就找到前面冲突的前一位 <span class="number">2</span></span><br><span class="line">所以再从b开始</span><br></pre></td></tr></table></figure><p><img src="/images/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/KMP%E7%B2%BE%E8%AE%B22.gif" alt="KMP精讲"></p><h1 id="什么是前缀表"><a href="#什么是前缀表" class="headerlink" title="什么是前缀表"></a>什么是前缀表</h1><h3 id="什么是前缀"><a href="#什么是前缀" class="headerlink" title="什么是前缀"></a>什么是前缀</h3><p>A:只包含首字母不包含尾字母的<strong>所有</strong>字串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">EX:字符串aabaaf</span><br><span class="line">它的前缀为：</span><br><span class="line">a</span><br><span class="line">aa</span><br><span class="line">aab</span><br><span class="line">aaba</span><br><span class="line">aabaa</span><br></pre></td></tr></table></figure><h3 id="什么是后缀"><a href="#什么是后缀" class="headerlink" title="什么是后缀"></a>什么是后缀</h3><p>A:只包含尾字母不包含首字母的<strong>所有</strong>字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">EX:字符串aabaaf</span><br><span class="line">它的后缀为：</span><br><span class="line">f</span><br><span class="line">af</span><br><span class="line">aaf</span><br><span class="line">baaf</span><br><span class="line">avaaf</span><br></pre></td></tr></table></figure><p>next数组就是一个前缀表（prefix table）</p><p><strong>前缀表是用来回退的，它记录了模式串与主串(文本串)不匹配的时候，模式串应该从哪里开始重新匹配。</strong></p><p>什么是前缀表：<strong>记录下标i之前（包括i）的字符串中，有多大长度的相同前缀后缀。</strong></p><p>要在文本串：aabaabaafa 中查找</p><p>是否出现过一个模式串：aabaaf。</p><p>​   a a  b a a f</p><p>前缀表就是【0,1,0,1,2,0】</p><h1 id="最长公共前后缀？"><a href="#最长公共前后缀？" class="headerlink" title="最长公共前后缀？"></a>最长公共前后缀？</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a  0</span><br><span class="line">aa 1</span><br><span class="line">aab0</span><br><span class="line">aaba 1</span><br><span class="line">aabaa2</span><br><span class="line">aabaaf  0</span><br></pre></td></tr></table></figure><p><img src="/images/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/kmp2.png" alt="1684239097493"></p><h1 id="用next数组表示前缀表"><a href="#用next数组表示前缀表" class="headerlink" title="用next数组表示前缀表"></a>用next数组表示前缀表</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">getNext</span><span class="params">(<span class="type">int</span>* next,<span class="type">const</span> <span class="built_in">string</span>&amp; s)</span>&#123;</span><br><span class="line">    <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">    next[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;s.size();i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;s[i]!=s[j])&#123;</span><br><span class="line">            j=next[j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==s[j])&#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        next[i]=j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/">28. 找出字符串中第一个匹配项的下标</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line">public:</span><br><span class="line">    <span class="type">void</span> <span class="title function_">getNext</span><span class="params">(<span class="type">int</span>* next,<span class="type">const</span> <span class="built_in">string</span>&amp; s)</span>&#123;</span><br><span class="line">        <span class="type">int</span> j=<span class="number">-1</span>;</span><br><span class="line">        next[<span class="number">0</span>]=j;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;s.size();i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(j&gt;=<span class="number">0</span>&amp;&amp;s[i]!=s[j+<span class="number">1</span>])&#123; <span class="comment">//</span></span><br><span class="line">                j=next[j];  <span class="comment">//一旦不一样，就直接往前回退</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==s[j+<span class="number">1</span>])&#123; <span class="comment">//找到相同的</span></span><br><span class="line">                j++；</span><br><span class="line">            &#125;</span><br><span class="line">            next[i]=j;<span class="comment">//将j(前缀的长度)赋值给next[i]</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">strStr</span><span class="params">(<span class="built_in">string</span> haystack,<span class="built_in">string</span> needle)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(needle.size()==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> next[needle.size()];<span class="comment">//定义了一个名为next的整数数组</span></span><br><span class="line">        getNext(next,needle);</span><br><span class="line">        <span class="type">int</span> j=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;haystack.size();i++)&#123;<span class="comment">//注意i从0开始</span></span><br><span class="line">            <span class="keyword">while</span>(j&gt;=<span class="number">0</span> &amp;&amp; haystack[i]!=needle[j+<span class="number">1</span>])&#123; <span class="comment">//不匹配</span></span><br><span class="line">                j=next[j]; <span class="comment">//j寻找之前匹配的位置</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(haysyack[i]==needle[j+<span class="number">1</span>])&#123;<span class="comment">//匹配，j和i同时向后移动</span></span><br><span class="line">                j++;  <span class="comment">//i的增加在foe循环里</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j==(needle.size()<span class="number">-1</span>))&#123;<span class="comment">//文本串里s出现了模式串t</span></span><br><span class="line">                <span class="keyword">return</span>  (i-needle.size()+<span class="number">1</span>);  </span><br><span class="line">                <span class="comment">// aabbaaaf</span></span><br><span class="line">                <span class="comment">// baa   5-3+1=3</span></span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>aabaaf</p><p>s[j+1]  j  s[i]       s[j+1]s[i] next[0]&#x3D;-1       now_j</p><p>0    -1   1         (a,a)    next[1]&#x3D;now_j&#x3D;0       0</p><p>1     0   2  (a,b)   next[2]&#x3D;next[0]&#x3D;-1 j&#x3D;next[0]&#x3D;-1</p><p>0     -1   3         (a,a)   next[3]&#x3D;0 j&#x3D;j++&#x3D;0</p><p>1 04        (a,a)    next[4]&#x3D;1 j++&#x3D;1</p><p>2 1            5         (b,f)    next[5]&#x3D;  j&#x3D;next[1]&#x3D;0   </p><p>1                 0             5      （a,f）              next[5]&#x3D;-1                               j&#x3D;next[0]&#x3D;-1</p><p>-1 0 -1 0 1 -1  </p><p>建议手动模拟一边</p><p><img src="/images/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/KMP%E7%B2%BE%E8%AE%B23.gif" alt="KMP精讲"></p>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>28. 找出字符串中第一个匹配项的下标</title>
      <link href="/2023/05/13/28.-%E6%89%BE%E5%87%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8C%B9%E9%85%8D%E9%A1%B9%E7%9A%84%E4%B8%8B%E6%A0%87/"/>
      <url>/2023/05/13/28.-%E6%89%BE%E5%87%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8C%B9%E9%85%8D%E9%A1%B9%E7%9A%84%E4%B8%8B%E6%A0%87/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/">28. 找出字符串中第一个匹配项的下标</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line">    <span class="type">void</span> <span class="title function_">getNext</span><span class="params">(<span class="type">int</span>* next,<span class="type">const</span> <span class="built_in">string</span> &amp;s)</span>&#123;</span><br><span class="line">        <span class="type">int</span> j=<span class="number">-1</span>;</span><br><span class="line">        next[<span class="number">0</span>]=j;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;s.size();i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(j&gt;=<span class="number">0</span>&amp;&amp;s[i]!=s[j+<span class="number">1</span>])&#123;</span><br><span class="line">                j=next[j];<span class="comment">//回退</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==s[j+<span class="number">1</span>])&#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">                next[i]=j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">strStr</span><span class="params">(<span class="built_in">string</span> haystack, <span class="built_in">string</span> needle)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(needle.size()==<span class="number">0</span>)&#123;  <span class="comment">//当needle的size为0</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> next[needle.size()];<span class="comment">//初始化数组</span></span><br><span class="line">        getNext(next,needle);<span class="comment">//get next数组</span></span><br><span class="line">        <span class="type">int</span> j=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;haystack.size();i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(j&gt;=<span class="number">0</span>&amp;&amp;haystack[i]!=needle[j+<span class="number">1</span>])&#123;</span><br><span class="line">                j=next[j];<span class="comment">//回退</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(haystack[i]==needle[j+<span class="number">1</span>])&#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j==(needle.size()<span class="number">-1</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> (i-needle.size()+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 58 - II. 左旋转字符串</title>
      <link href="/2023/05/13/%E5%89%91%E6%8C%87-Offer-58---II.-%E5%B7%A6%E6%97%8B%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2023/05/13/%E5%89%91%E6%8C%87-Offer-58---II.-%E5%B7%A6%E6%97%8B%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/">剑指 Offer 58 - II. 左旋转字符串</a></p><p>花里胡哨的，真无语</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line">    <span class="built_in">string</span> <span class="title function_">reverseLeftWords</span><span class="params">(<span class="built_in">string</span> s, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="type">char</span>&gt; a;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i&lt;s.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;=n)  a.push_back(s[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i&lt;s.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;n)  a.push_back(s[i]);</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        <span class="built_in">string</span> <span class="title function_">result</span><span class="params">(a.begin(),a.end())</span>;</span><br><span class="line">        <span class="keyword">return</span>  result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class <span class="title function_">Solution</span><span class="params">()</span>&#123;</span><br><span class="line">public:</span><br><span class="line">    <span class="built_in">string</span> <span class="title function_">reverseLeftWords</span><span class="params">(<span class="built_in">string</span> s,<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        reverse(s.begin(),s.begin()+n)</span><br><span class="line">        reverse(s.begin()+n,s.end())</span><br><span class="line">        reverse(s.begin(),s.end())</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>151. 反转字符串中的单词</title>
      <link href="/2023/05/12/151.-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%8D%95%E8%AF%8D/"/>
      <url>/2023/05/12/151.-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%8D%95%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/reverse-words-in-a-string/">151. 反转字符串中的单词</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">reverse</span><span class="params">(<span class="built_in">string</span>&amp; s,<span class="type">int</span> start,<span class="type">int</span> end)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=start,j=end;i&lt;j;i++,j--)&#123;</span><br><span class="line">        swap(s[i],s[j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">removeExtraSpaces</span><span class="params">(<span class="built_in">string</span>&amp; s)</span>&#123;</span><br><span class="line">    <span class="type">int</span> slow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.size();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]!=<span class="string">&#x27; &#x27;</span>)&#123;<span class="comment">//遇到非空格就处理，即删除所有空格</span></span><br><span class="line">            <span class="keyword">if</span>(slow!=<span class="number">0</span>) s[slow++] =<span class="string">&#x27; &#x27;</span>;<span class="comment">//当slow不是第一个 补一个空格</span></span><br><span class="line">            <span class="keyword">while</span>(i&lt;s.size()&amp;&amp;s[i]!=<span class="string">&#x27; &#x27;</span>)&#123;<span class="comment">//补上单词，遇到空格说明单词结束</span></span><br><span class="line">                s[slow++]=[i++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    s.resize(slow);<span class="comment">//重新搞s的大小</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> <span class="title function_">reverseWords</span><span class="params">(<span class="built_in">string</span> s)</span>&#123;</span><br><span class="line">removeExtraSpaces(s);</span><br><span class="line">    reverse(s,<span class="number">0</span>,s.size()<span class="number">-1</span>)<span class="comment">//左闭右闭</span></span><br><span class="line">    <span class="type">int</span> start=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=s.size();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i=s.size() || s[i]==<span class="string">&#x27; &#x27;</span>)&#123;<span class="comment">//一个单词结束</span></span><br><span class="line">            reverse(s,start,i<span class="number">-1</span>);<span class="comment">//反转</span></span><br><span class="line">            start=i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 05. 替换空格</title>
      <link href="/2023/05/12/%E5%89%91%E6%8C%87-Offer-05.-%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/"/>
      <url>/2023/05/12/%E5%89%91%E6%8C%87-Offer-05.-%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/ti-huan-kong-ge-lcof/">剑指 Offer 05. 替换空格</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> <span class="title function_">replaceSpace</span><span class="params">(<span class="built_in">string</span> s)</span>&#123;</span><br><span class="line"><span class="type">int</span> count=<span class="number">0</span>;<span class="comment">//统计空格的个数</span></span><br><span class="line"><span class="type">int</span> sOldSize = s.size();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.size();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//扩充字符串s的大小,也就是每个空格替换成&quot;%20&quot;之后的大小</span></span><br><span class="line">    s.resize(s.size()+count*<span class="number">2</span>);</span><br><span class="line">    <span class="type">int</span> sNewSize=s.size();</span><br><span class="line">    <span class="comment">//从后向前将空格替换成&quot;%20&quot;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=sNewSize<span class="number">-1</span>,j=sOldSize<span class="number">-1</span>;j&lt;i;i--,j--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[j]!=<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">            s[i]=s[j];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            s[i]=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            s[i<span class="number">-1</span>]=<span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">            s[i<span class="number">-2</span>]=<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">            i-=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>541.反转字符串 II</title>
      <link href="/2023/05/11/541.%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2-II/"/>
      <url>/2023/05/11/541.%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2-II/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/reverse-string-ii/">541. 反转字符串 II</a></p><p>reverse is 左闭右开  每隔k个就反转</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> <span class="title function_">reverseStr</span><span class="params">(<span class="built_in">string</span> s,<span class="type">int</span> k)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;s.size();i+=(<span class="number">2</span>*k))&#123;</span><br><span class="line">        <span class="comment">//每隔2k个字符的前k个字符进行反转</span></span><br><span class="line">        <span class="comment">//剩余字符小于2k 但大于或等于k个,则反转前k个字符</span></span><br><span class="line">       <span class="comment">// abcdefg</span></span><br><span class="line">       <span class="comment">// bacdfeg     </span></span><br><span class="line">       <span class="comment">//0+2&lt;7</span></span><br><span class="line">       <span class="comment">//  reverse 0,2  ba</span></span><br><span class="line">        <span class="comment">// i=4</span></span><br><span class="line">       <span class="comment">//   4+2&lt;=7</span></span><br><span class="line">           <span class="comment">// reverse 4,6 ef</span></span><br><span class="line">        <span class="keyword">if</span>(i+k&lt;=s.size())&#123;</span><br><span class="line">            reverse(s.begin()+i,s.begin()+i+k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//剩余字符串少于k个,则将剩余字符全部反转</span></span><br><span class="line">            reverse(s.begin()+i,s.end());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自己写一个左闭右闭的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">reverse</span><span class="params">(<span class="built_in">string</span>&amp; s,<span class="type">int</span> start,<span class="type">int</span> end)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=start,j=end;i&lt;j;i++,j--)&#123;</span><br><span class="line">swap(s[i],s[j]);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">string</span> <span class="title function_">reverseStr</span><span class="params">(<span class="built_in">string</span> s,<span class="type">int</span> k )</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;s.size();i+=(<span class="number">2</span>*k))&#123;</span><br><span class="line">            <span class="keyword">if</span>(i+k&lt;=s.size())&#123;</span><br><span class="line">                reverse(s,i,i+k<span class="number">-1</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            reverse(s,i,s.size()<span class="number">-1</span>;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line"><span class="type">void</span> <span class="title function_">reverse</span><span class="params">(<span class="built_in">string</span>&amp; s,<span class="type">int</span> start,<span class="type">int</span> end)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=start,j=end;i&lt;j;i++,j--)&#123;</span><br><span class="line">swap(s[i],s[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">string</span> <span class="title function_">reverseStr</span><span class="params">(<span class="built_in">string</span> s, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;s.size();i+=(<span class="number">2</span>*k))&#123;</span><br><span class="line">            <span class="keyword">if</span>(i+k&lt;=s.size())&#123;</span><br><span class="line">                reverse(s,i,i+k<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                reverse(s,i,s.size()<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>344. 反转字符串</title>
      <link href="/2023/05/11/344.-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2023/05/11/344.-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/reverse-string/">344. 反转字符串</a></p><p><img src="/images/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/344.%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2.gif" alt="反转字符串"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">void reverseString(vector&lt;char&gt;&amp; s)&#123;</span><br><span class="line">for(int i=0,j=s.size()-1;i&lt;s.size()/2;i++,j--)&#123;</span><br><span class="line">swap(s[i],s[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>18. 四数之和</title>
      <link href="/2023/05/10/18.-%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
      <url>/2023/05/10/18.-%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/4sum/">18. 四数之和</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&gt; fourSum(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&amp; nums,<span class="type">int</span> target)&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&gt; result;</span><br><span class="line">    sort(nums.begin(),nums.end());<span class="comment">//排序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>;k&lt;nums.size();k++)&#123;</span><br><span class="line">        <span class="comment">//剪枝处理</span></span><br><span class="line">        <span class="keyword">if</span>(nums[k]&gt;target&amp;&amp;num[k]&gt;=<span class="number">0</span>) <span class="keyword">break</span>; <span class="comment">//你这个数都大于target了(前提是这个玩意儿是&gt;0的)</span></span><br><span class="line">        <span class="comment">//对nums[k]去重复</span></span><br><span class="line">        <span class="keyword">if</span>(k&gt;<span class="number">0</span>&amp;&amp;nums[k]==nums[k<span class="number">-1</span>])&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = k+<span class="number">1</span>;i&lt;nums.size();i++)&#123;</span><br><span class="line">            <span class="comment">//2级剪枝处理</span></span><br><span class="line">            <span class="keyword">if</span>(nums[k]+nums[i]&gt;target&amp;&amp;nums[k]+nums[i]&gt;=<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//对nums[i]去重</span></span><br><span class="line">            <span class="keyword">if</span>(i&gt;k+<span class="number">1</span>&amp;&amp;nums[i]==nums[i<span class="number">-1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> left=i+<span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> right=nums.size()<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span>(right&gt;left)&#123;</span><br><span class="line">                <span class="keyword">if</span>((<span class="type">long</span>)nums[k]+nums[i]+nums[left]+nums[right]&gt;target) right--;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>((<span class="type">long</span>)nums[k]+nums[i]+nums[left]+nums[right]&lt;target) left++;</span><br><span class="line">                <span class="keyword">else</span> result.push_back(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&#123;nums[k],nums[i],nums[left],nums[right]&#125;);</span><br><span class="line">                <span class="keyword">while</span>(right&gt;left&amp;&amp;nums[right]==nums[right<span class="number">-1</span>])right--;</span><br><span class="line">                <span class="keyword">while</span>(right&gt;left&amp;&amp;nums[left]==nums[left+<span class="number">1</span>]) left++;</span><br><span class="line">                right--;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>15. 三数之和</title>
      <link href="/2023/05/09/15.-%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
      <url>/2023/05/09/15.-%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/3sum/">15. 三数之和</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&gt; threeSum(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&amp; nums)&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&gt; result;</span><br><span class="line">sort(nums.begin(),nums.end());</span><br><span class="line"><span class="comment">//找出a+b+c=0</span></span><br><span class="line"><span class="comment">//a=nums[i],b=nums[left],c=nums[right]</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ;i&lt;nums.size();i++)&#123;</span><br><span class="line">        <span class="comment">//排序之后如果第一个元素已经大于0，那么无论如何都不可能组成三元组了</span></span><br><span class="line">        <span class="keyword">if</span>(nums[i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//i去重</span></span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">0</span>&amp;&amp;nums[i]==nums[i<span class="number">-1</span>])&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> left=i+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> right=nums.size()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(right&gt;left)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]+nums[left]+nums[right]&gt;<span class="number">0</span>) right--;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[i]+nums[left]+nums[right]&lt;<span class="number">0</span>) left++;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                result.push_back(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&#123;nums[i],nums[left],nums[right]&#125;);</span><br><span class="line">                <span class="keyword">while</span>(right&gt;left&amp;&amp;nums[right]==nums[right<span class="number">-1</span>]) right--;</span><br><span class="line">                <span class="keyword">while</span>(right&gt;left&amp;&amp;nums[left]==nums[left+<span class="number">1</span>]) left++;</span><br><span class="line">                right--;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>383. 赎金信</title>
      <link href="/2023/05/08/383.-%E8%B5%8E%E9%87%91%E4%BF%A1/"/>
      <url>/2023/05/08/383.-%E8%B5%8E%E9%87%91%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/ransom-note/">383. 赎金信</a></p><p>暴力</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">canConstruct</span><span class="params">(<span class="built_in">string</span> ransomNote,<span class="built_in">string</span> magazine)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;magazine.length();i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;ransomNote.length();j++)&#123;</span><br><span class="line">            <span class="comment">//在ransomNote中找到和magazine相同的字符</span></span><br><span class="line">            <span class="keyword">if</span>(magazine[i]==ransomNote[j])&#123;</span><br><span class="line"> ransomNote.erase(ransomNote.begin()+j);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ransomNote.length()==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>哈希</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">bool canConstruct(string ransomNote,string magazine)&#123;</span><br><span class="line">int record[26]=&#123;0&#125;;</span><br><span class="line">if(ransomNote.size()&gt;magazine.size())&#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">for(int i=0;i&lt;magazine.length();i++)&#123;</span><br><span class="line">record[magazine[i]-&#x27;a&#x27;]++;</span><br><span class="line">&#125;</span><br><span class="line">for(int j =0;j&lt;ransomNote.length();j++)&#123;</span><br><span class="line">record[ransomNote[j]-&#x27;a&#x27;]--;</span><br><span class="line">if(record[ransomNote[j]-&#x27;a&#x27;]&lt;0)&#123;</span><br><span class="line">return flae;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>for(int a :nums1)是什么</title>
      <link href="/2023/05/08/for(int-a-nums1)%E6%98%AF%E4%BB%80%E4%B9%88/"/>
      <url>/2023/05/08/for(int-a-nums1)%E6%98%AF%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<p><code>for(int a :nums1)</code> 是 C++11 中引入的一种新的循环语法，称为范围 for 循环（range-based for loop），用于方便地遍历容器中的元素。</p><p>在这个语法中，<code>nums1</code> 是一个容器，<code>a</code> 是一个变量，表示容器中的每个元素。循环语句会依次遍历容器中的每个元素，并将当前元素赋值给变量 <code>a</code>，然后执行循环体中的语句，直到遍历完所有元素。</p><p>以下是一个使用范围 for 循环遍历 vector 容器中的元素的例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; nums = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，我们定义了一个包含整数的 <code>vector</code> 容器 <code>nums</code>，然后使用范围 for 循环遍历 <code>nums</code> 容器中的每个元素，并将当前元素赋值给 <code>num</code> 变量，然后输出 <code>num</code> 的值。在执行循环语句后，输出结果为：<code>1 2 3 4 5</code>。</p><p>需要注意的是，范围 for 循环可以用于遍历各种类型的容器，包括数组、vector、list、deque、set、map 等容器类型。在实际编程中，我们可以使用范围 for 循环来方便地遍历容器中的元素，以提高代码的可读性和可维护性。</p>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vector容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>454. 四数相加 II</title>
      <link href="/2023/05/08/454.-%E5%9B%9B%E6%95%B0%E7%9B%B8%E5%8A%A0-II/"/>
      <url>/2023/05/08/454.-%E5%9B%9B%E6%95%B0%E7%9B%B8%E5%8A%A0-II/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/4sum-ii/">454. 四数相加 II</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int fourCount(vector&lt;int&gt;&amp; A,vectot&lt;int&gt;&amp; B,vector&lt;int&gt;&amp; C,vector&lt;int&gt;&amp; D)&#123;</span><br><span class="line">unordered_map&lt;int,int&gt; umap;//key:a+b的数值,value:a+b数值出现的次数</span><br><span class="line">//遍历大A和大B数组,统计两个数组元素之和,和出现的次数,放到map中</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有关using</title>
      <link href="/2023/05/07/%E6%9C%89%E5%85%B3using/"/>
      <url>/2023/05/07/%E6%9C%89%E5%85%B3using/</url>
      
        <content type="html"><![CDATA[<h1 id="有关using"><a href="#有关using" class="headerlink" title="有关using"></a>有关using</h1><p><code>using</code> 是 C++ 中的一个关键字，它有多种用途，主要包括以下几个方面：</p><ol><li><p>别名声明：使用 <code>using</code> 关键字可以给一个类型、变量、函数、模板等起一个别名。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">using IntVec = std::vector&lt;int&gt;; // using 别名声明</span><br><span class="line">IntVec vec = &#123;1, 2, 3&#125;; // 使用别名 IntVec 来声明 vector&lt;int&gt; 类型的变量</span><br></pre></td></tr></table></figure><p><strong>上面的代码中，我们使用 <code>using</code> 关键字给 <code>std::vector&lt;int&gt;</code> 类型起了一个别名 <code>IntVec</code>，然后使用别名 <code>IntVec</code> 来声明一个 <code>vector&lt;int&gt;</code> 类型的变量 <code>vec</code>，从而简化了代码。</strong></p></li><li><p>命名空间别名：使用 <code>using namespace</code> 可以给一个命名空间起一个别名。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">namespace my_ns = my_namespace::sub_namespace; // 命名空间别名</span><br></pre></td></tr></table></figure><p><strong>上面的代码中，我们使用 <code>using namespace</code> 关键字给 <code>my_namespace::sub_namespace</code> 命名空间起了一个别名 <code>my_ns</code>，从而在后续的代码中可以使用 <code>my_ns</code> 来代替 <code>my_namespace::sub_namespace</code>。</strong></p></li><li><p>模板别名：使用 <code>using</code> 关键字可以给一个模板类型起一个别名。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">template &lt;typename T&gt;</span><br><span class="line">using MyVec = std::vector&lt;T&gt;; // 模板别名声明</span><br><span class="line">MyVec&lt;int&gt; vec = &#123;1, 2, 3&#125;; // 使用模板别名 MyVec 来声明 vector&lt;int&gt; 类型的变量</span><br></pre></td></tr></table></figure></li></ol><p><strong>上面的代码中，我们使用 <code>using</code> 关键字给 <code>std::vector&lt;T&gt;</code> 类型起了一个模板别名 <code>MyVec&lt;T&gt;</code>，然后使用模板别名 <code>MyVec&lt;int&gt;</code> 来声明一个 <code>vector&lt;int&gt;</code> 类型的变量 <code>vec</code>，从而简化了代码。</strong></p><p>需要注意的是，<code>using</code> 关键字的使用虽然可以简化代码，但过度使用可能会降低代码的可读性和可维护性。在使用 <code>using</code> 关键字时，应该尽量保持别名的清晰和语义明确，以便于代码的理解和维护。</p>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有关于auto</title>
      <link href="/2023/05/07/%E6%9C%89%E5%85%B3%E4%BA%8Eauto/"/>
      <url>/2023/05/07/%E6%9C%89%E5%85%B3%E4%BA%8Eauto/</url>
      
        <content type="html"><![CDATA[<h1 id="有关于auto"><a href="#有关于auto" class="headerlink" title="有关于auto"></a>有关于auto</h1><p><code>auto</code> 是 C++11 中引入的关键字，用于让编译器自动推导变量的类型。通过 <code>auto</code> 关键字，我们可以让编译器根据变量的初始值或表达式推导出变量的类型，从而省略变量类型的显式声明。</p><p>具体来说，<code>auto</code> 关键字可以用于以下几种情况：</p><ol><li><p>自动推导变量类型：在变量声明时使用 <code>auto</code> 关键字，让编译器自动推导变量的类型。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">auto x = 1; // 推导出 x 的类型为 int</span><br><span class="line">auto y = 3.14; // 推导出 y 的类型为 double</span><br><span class="line">auto z = &quot;hello&quot;; // 推导出 z 的类型为 const char*</span><br><span class="line">​```</span><br></pre></td></tr></table></figure></li><li><p>函数返回值类型自动推导：在函数定义时使用 <code>auto</code> 关键字，让编译器自动推导函数的返回值类型。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">auto add(int x, int y) -&gt; int // 推导出函数返回值类型为 int</span><br><span class="line">&#123;</span><br><span class="line">    return x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意，这种用法需要在函数定义时使用尾置返回类型（trailing return type）语法。</strong></p></li><li><p>迭代器类型自动推导：在使用迭代器时使用 <code>auto</code> 关键字，让编译器自动推导迭代器的类型。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for (auto it = vec.begin(); it != vec.end(); ++it)</span><br><span class="line">&#123;</span><br><span class="line">    // do something with *it</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>在这个例子中，<code>auto</code> 关键字让编译器自动推导出 <code>it</code> 的类型为 <code>std::vector&lt;int&gt;::iterator</code>。</strong></p><p>需要注意的是，虽然 <code>auto</code> 关键字可以让代码更加简洁，但过度使用可能会降低代码的可读性和可维护性。在使用 <code>auto</code> 关键字时，应该尽量保持变量名的清晰和语义明确，以便于代码的理解和维护。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = vec.begin(); it != vec.end(); ++it)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// do something with *it</span></span><br><span class="line">&#125;</span><br><span class="line">在这个例子中，`<span class="keyword">auto</span>` 关键字让编译器自动推导出 `it` 的类型为 `<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;::iterator`。</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;::iterator it = vec.begin(); it != vec.end(); ++it)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// do something with *it</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.两数之和</title>
      <link href="/2023/05/06/1.%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
      <url>/2023/05/06/1.%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/two-sum/">1. 两数之和</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>:<span class="built_in">unordered_map</span>&lt;<span class="type">int</span>,<span class="type">int</span>&gt; <span class="built_in">map</span>;</span><br><span class="line"><span class="comment">//key 存数字 value存index</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ;i &lt; nums.size(); i++)&#123;</span><br><span class="line"><span class="keyword">auto</span> iter= <span class="built_in">map</span>.find(target-nums[i]);</span><br><span class="line"><span class="keyword">if</span>(iter!=<span class="built_in">map</span>.end())&#123;</span><br><span class="line"><span class="keyword">return</span>&#123;iter-&gt;second,i&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>.insert(<span class="built_in">pair</span>&lt;<span class="type">int</span>,<span class="type">int</span>&gt;(nums[i],i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &#123;&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="type">int</span>,<span class="type">int</span>&gt; <span class="built_in">map</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt;nums.size();i++)&#123;</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="type">int</span>,<span class="type">int</span>&gt;::iterator iter=<span class="built_in">map</span>.find(target-nums[i]);</span><br><span class="line">    <span class="keyword">if</span>(iter!=<span class="built_in">map</span>.end())&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;iter-&gt;second,i&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">map</span>.insert(<span class="built_in">pair</span>&lt;<span class="type">int</span>,<span class="type">int</span>&gt;(nums[i],i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &#123;&#125;;</span><br></pre></td></tr></table></figure><p>Q: 在这边 map.insert(pair&lt;int,int&gt;(nums[i],i)); 可以换成 map.insert(unordered_map&lt;int,int&gt;(nums[i],i));吗</p><p>A: 不可以，因为 <code>std::unordered_map</code> 是一个关联容器，其中的元素是键值对（key-value pair），而 <code>unordered_map&lt;int,int&gt;(nums[i], i)</code> 是一个无序键值对，不能直接用来插入到 <code>std::unordered_map</code> 容器中。</p><p>在这个例子中，我们需要将每个元素的值 <code>nums[i]</code> 和下标 <code>i</code> 插入到 <code>map</code> 中，以便在后续查找过程中能够快速找到匹配的元素。因此，我们需要使用 <code>std::pair&lt;int, int&gt;</code> 类型来表示每个元素的键值对，然后将其插入到 <code>map</code> 中。</p><p>在代码中，<code>map.insert(pair&lt;int, int&gt;(nums[i], i));</code> 表示将一个由 <code>nums[i]</code> 和 <code>i</code> 组成的键值对插入到 <code>map</code> 中。这里使用了 <code>std::pair&lt;int, int&gt;</code> 类型来表示键值对，从而可以将其作为 <code>map</code> 的元素插入到容器中。</p><p>需要注意的是，C++ 中提供了很多种容器类型，每种容器类型都有其特定的用途和特性。在使用容器时，需要根据具体情况选择合适的容器类型，并了解容器类型的特性和使用方法，以提高代码的效率和可读性。</p>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>202. 快乐数</title>
      <link href="/2023/05/05/202.-%E5%BF%AB%E4%B9%90%E6%95%B0/"/>
      <url>/2023/05/05/202.-%E5%BF%AB%E4%B9%90%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/happy-number/">202. 快乐数</a></p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)&#123;</span><br><span class="line">        sum+=(n%<span class="number">10</span>)*(n%<span class="number">10</span>);</span><br><span class="line">        n/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">isHappy</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="built_in">unordered_set</span>&lt;<span class="type">int</span>&gt; <span class="built_in">set</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="type">int</span> sum=getSum(n);</span><br><span class="line">        <span class="keyword">if</span>(sum==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="comment">// 如果这个sum曾经出现过，说明已经陷入了无限循环了，立刻return false</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">set</span>.find(sum)!=<span class="built_in">set</span>.end())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">set</span>.insert(sum);</span><br><span class="line">        &#125;</span><br><span class="line">        n=sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>349.两个数组的交集</title>
      <link href="/2023/04/29/349.%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86/"/>
      <url>/2023/04/29/349.%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/intersection-of-two-arrays/">349. 两个数组的交集</a></p><p>set</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; <span class="title function_">intersection</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&amp; nums1,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&amp; nums2)</span>&#123;</span><br><span class="line">    <span class="built_in">unordered_set</span>&lt;<span class="type">int</span>&gt; result_set;<span class="comment">//存放结果，给结果去重</span></span><br><span class="line">    <span class="built_in">unordered_set</span>&lt;<span class="type">int</span>&gt; <span class="title function_">nums_set</span><span class="params">(nums1.begin(),nums1.end())</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> num: nums2)&#123;</span><br><span class="line">        <span class="comment">//发现nums2的元素，在nums_set里又出现过</span></span><br><span class="line">        <span class="comment">//nums_set.end() 表示 std::unordered_set 中最后一个元素的下一个位置的迭代器</span></span><br><span class="line">        <span class="keyword">if</span>(nums_set.find(num)!=nums_set.end())&#123;</span><br><span class="line">            result_set.insert(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(result_set.begin(),result.end());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; <span class="title function_">intersection</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&amp; nums1,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&amp; nums2)</span>&#123;</span><br><span class="line">    <span class="built_in">unordered_set</span>&lt;<span class="type">int</span>&gt; result_set; <span class="comment">//save result</span></span><br><span class="line">    <span class="type">int</span> hash[<span class="number">1005</span>]=&#123;<span class="number">0</span>&#125;;<span class="comment">//默认0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> num:nums1)&#123;<span class="comment">//出现过的字母在hash数组中做记录</span></span><br><span class="line">        hash[num]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> num:num2)&#123;<span class="comment">//nums2中出现的话，result记录</span></span><br><span class="line"><span class="keyword">if</span>(hash[num]==<span class="number">1</span>)&#123;</span><br><span class="line">        result_set.inset(num);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(result_set.begin(),result_sey.end());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈希表基础</title>
      <link href="/2023/04/25/%E5%93%88%E5%B8%8C%E8%A1%A8%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/04/25/%E5%93%88%E5%B8%8C%E8%A1%A8%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>首先什么是 哈希表，哈希表（英文名字为Hash table，国内也有一些算法书籍翻译为散列表，大家看到这两个名称知道都是指hash table就可以了）。</p><blockquote><p>哈希表是根据关键码的值而直接进行访问的数据结构。</p></blockquote><p>这么这官方的解释可能有点懵，其实直白来讲其实数组就是一张哈希表。</p><p>哈希表中关键码就是数组的索引下标，然后通过下标直接访问数组中的元素，如下图所示：</p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20210104234805168.png" alt="哈希表1"></p><p>那么哈希表能解决什么问题呢，<strong>一般哈希表都是用来快速判断一个元素是否出现集合里。</strong></p><p>例如要查询一个名字是否在这所学校里。</p><p>要枚举的话时间复杂度是O(n)，但如果使用哈希表的话， 只需要O(1)就可以做到。</p><p>我们只需要初始化把这所学校里学生的名字都存在哈希表里，在查询的时候通过索引直接就可以知道这位同学在不在这所学校里了。</p><p>将学生姓名映射到哈希表上就涉及到了<strong>hash function ，也就是哈希函数</strong>。</p><h2 id="哈希函数"><a href="#哈希函数" class="headerlink" title="#哈希函数"></a><a href="https://www.programmercarl.com/%E5%93%88%E5%B8%8C%E8%A1%A8%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html#%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0">#</a>哈希函数</h2><p>哈希函数，把学生的姓名直接映射为哈希表上的索引，然后就可以通过查询索引下标快速知道这位同学是否在这所学校里了。</p><p>哈希函数如下图所示，通过hashCode把名字转化为数值，一般hashcode是通过特定编码方式，可以将其他数据格式转化为不同的数值，这样就把学生名字映射为哈希表上的索引数字了。</p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/2021010423484818.png" alt="哈希表2"></p><p>如果hashCode得到的数值大于 哈希表的大小了，也就是大于tableSize了，怎么办呢？</p><p>此时为了保证映射出来的索引数值都落在哈希表上，我们会在再次对数值做一个取模的操作，就要我们就保证了学生姓名一定可以映射到哈希表上了。</p><p>此时问题又来了，哈希表我们刚刚说过，就是一个数组。</p><p>如果学生的数量大于哈希表的大小怎么办，此时就算哈希函数计算的再均匀，也避免不了会有几位学生的名字同时映射到哈希表 同一个索引下标的位置。</p><p>接下来<strong>哈希碰撞</strong>登场</p><h3 id="哈希碰撞"><a href="#哈希碰撞" class="headerlink" title="#哈希碰撞"></a><a href="https://www.programmercarl.com/%E5%93%88%E5%B8%8C%E8%A1%A8%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html#%E5%93%88%E5%B8%8C%E7%A2%B0%E6%92%9E">#</a>哈希碰撞</h3><p>如图所示，小李和小王都映射到了索引下标 1 的位置，<strong>这一现象叫做哈希碰撞</strong>。</p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/2021010423494884.png" alt="哈希表3"></p><p>一般哈希碰撞有两种解决方法， 拉链法和线性探测法。</p><h3 id="拉链法"><a href="#拉链法" class="headerlink" title="#拉链法"></a><a href="https://www.programmercarl.com/%E5%93%88%E5%B8%8C%E8%A1%A8%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html#%E6%8B%89%E9%93%BE%E6%B3%95">#</a>拉链法</h3><p>刚刚小李和小王在索引1的位置发生了冲突，发生冲突的元素都被存储在链表中。 这样我们就可以通过索引找到小李和小王了</p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20210104235015226.png" alt="哈希表4"></p><p>（数据规模是dataSize， 哈希表的大小为tableSize）</p><p>其实拉链法就是要选择适当的哈希表的大小，这样既不会因为数组空值而浪费大量内存，也不会因为链表太长而在查找上浪费太多时间。</p><h3 id="线性探测法"><a href="#线性探测法" class="headerlink" title="#线性探测法"></a><a href="https://www.programmercarl.com/%E5%93%88%E5%B8%8C%E8%A1%A8%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html#%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B%E6%B3%95">#</a>线性探测法</h3><p>使用线性探测法，一定要保证tableSize大于dataSize。 我们需要依靠哈希表中的空位来解决碰撞问题。</p><p>例如冲突的位置，放了小李，那么就向下找一个空位放置小王的信息。所以要求tableSize一定要大于dataSize ，要不然哈希表上就没有空置的位置来存放 冲突的数据了。如图所示：</p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20210104235109950.png" alt="哈希表5"></p><p>其实关于哈希碰撞还有非常多的细节，感兴趣的同学可以再好好研究一下，这里我就不再赘述了。</p><h2 id="常见的三种哈希结构"><a href="#常见的三种哈希结构" class="headerlink" title="#常见的三种哈希结构"></a><a href="https://www.programmercarl.com/%E5%93%88%E5%B8%8C%E8%A1%A8%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html#%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%89%E7%A7%8D%E5%93%88%E5%B8%8C%E7%BB%93%E6%9E%84">#</a>常见的三种哈希结构</h2><p>当我们想使用哈希法来解决问题的时候，我们一般会选择如下三种数据结构。</p><ul><li>数组</li><li>set （集合）</li><li>map(映射)</li></ul><p>这里数组就没啥可说的了，我们来看一下set。</p><p>在C++中，set 和 map 分别提供以下三种数据结构，其底层实现以及优劣如下表所示：</p><table><thead><tr><th>集合</th><th>底层实现</th><th>是否有序</th><th>数值是否可以重复</th><th>能否更改数值</th><th>查询效率</th><th>增删效率</th></tr></thead><tbody><tr><td>std::set</td><td>红黑树</td><td>有序</td><td>否</td><td>否</td><td>O(log n)</td><td>O(log n)</td></tr><tr><td>std::multiset</td><td>红黑树</td><td>有序</td><td>是</td><td>否</td><td>O(logn)</td><td>O(logn)</td></tr><tr><td>std::unordered_set</td><td>哈希表</td><td>无序</td><td>否</td><td>否</td><td>O(1)</td><td>O(1)</td></tr></tbody></table><p>std::unordered_set底层实现为哈希表，std::set 和std::multiset 的底层实现是红黑树，红黑树是一种平衡二叉搜索树，所以key值是有序的，但key不可以修改，改动key值会导致整棵树的错乱，所以只能删除和增加。</p><table><thead><tr><th>映射</th><th>底层实现</th><th>是否有序</th><th>数值是否可以重复</th><th>能否更改数值</th><th>查询效率</th><th>增删效率</th></tr></thead><tbody><tr><td>std::map</td><td>红黑树</td><td>key有序</td><td>key不可重复</td><td>key不可修改</td><td>O(logn)</td><td>O(logn)</td></tr><tr><td>std::multimap</td><td>红黑树</td><td>key有序</td><td>key可重复</td><td>key不可修改</td><td>O(log n)</td><td>O(log n)</td></tr><tr><td>std::unordered_map</td><td>哈希表</td><td>key无序</td><td>key不可重复</td><td>key不可修改</td><td>O(1)</td><td>O(1)</td></tr></tbody></table><p>std::unordered_map 底层实现为哈希表，std::map 和std::multimap 的底层实现是红黑树。同理，std::map 和std::multimap 的key也是有序的（这个问题也经常作为面试题，考察对语言容器底层的理解）。</p><p>当我们要使用集合来解决哈希问题的时候，优先使用unordered_set，因为它的查询和增删效率是最优的，如果需要集合是有序的，那么就用set，如果要求不仅有序还要有重复数据的话，那么就用multiset。</p><p>那么再来看一下map ，在map 是一个key value 的数据结构，map中，对key是有限制，对value没有限制的，因为key的存储方式使用红黑树实现的。</p><p>其他语言例如：java里的HashMap ，TreeMap 都是一样的原理。可以灵活贯通。</p><p>虽然std::set、std::multiset 的底层实现是红黑树，不是哈希表，std::set、std::multiset 使用红黑树来索引和存储，不过给我们的使用方式，还是哈希法的使用方式，即key和value。所以使用这些数据结构来解决映射问题的方法，我们依然称之为哈希法。 map也是一样的道理。</p><p>这里在说一下，一些C++的经典书籍上 例如STL源码剖析，说到了hash_set hash_map，这个与unordered_set，unordered_map又有什么关系呢？</p><p>实际上功能都是一样一样的， 但是unordered_set在C++11的时候被引入标准库了，而hash_set并没有，所以建议还是使用unordered_set比较好，这就好比一个是官方认证的，hash_set，hash_map 是C++11标准之前民间高手自发造的轮子。</p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20210104235134572.png" alt="哈希表6"></p><h2 id="总结"><a href="#总结" class="headerlink" title="#总结"></a><a href="https://www.programmercarl.com/%E5%93%88%E5%B8%8C%E8%A1%A8%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html#%E6%80%BB%E7%BB%93">#</a>总结</h2><p>总结一下，<strong>当我们遇到了要快速判断一个元素是否出现集合里的时候，就要考虑哈希法</strong>。</p><p>但是哈希法也是<strong>牺牲了空间换取了时间</strong>，因为我们要使用额外的数组，set或者是map来存放数据，才能实现快速的查找。</p><p>如果在做面试题目的时候遇到需要判断一个元素是否出现过的场景也应该第一时间想到哈希法！</p>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>242. 有效的字母异位词</title>
      <link href="/2023/04/25/242.-%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/"/>
      <url>/2023/04/25/242.-%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/valid-anagram/">242. 有效的字母异位词</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">isAnagram</span><span class="params">(<span class="built_in">string</span> s,<span class="built_in">string</span> t)</span>&#123;</span><br><span class="line"><span class="type">int</span> record[<span class="number">26</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ;i&lt;s.size();i++)&#123;</span><br><span class="line"> <span class="comment">// 并不需要记住字符a的ASCII，只要c求出一个相对数值就可以了</span></span><br><span class="line">record[s[i]-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span> ;i &lt;t.size();i++)&#123;</span><br><span class="line">record[t[i]-<span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ;i &lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(record[i]!=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> flase;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line">    <span class="type">bool</span> <span class="title function_">isAnagram</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> t)</span> &#123;</span><br><span class="line">            <span class="type">int</span> record[<span class="number">26</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.size();i++)&#123;</span><br><span class="line">                record[s[i]-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i&lt;t.size();i++)&#123;</span><br><span class="line">                record[t[i]-<span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(record[i]!=<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>丢人现眼的暴力(原来之前的这种思维题算是哈希法0.0)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="built_in">string</span> a,b;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;b;</span><br><span class="line"><span class="type">int</span> A[<span class="number">60000</span>];</span><br><span class="line"><span class="type">int</span> B[<span class="number">60000</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; a.size();i++)&#123;</span><br><span class="line">A[a[i]]=A[a[i]]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; b.size();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(A[b[i]]==A[a[i]])&#123;</span><br><span class="line">A[a[i]]--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt;a.size();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(A[a[i]]!=<span class="number">0</span>)&#123;</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;niubi&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;goushi&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>142. 环形链表 II</title>
      <link href="/2023/04/24/142.-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8-II/"/>
      <url>/2023/04/24/142.-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8-II/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/linked-list-cycle-ii/">142. 环形链表 II</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ListNode* fast =head;</span><br><span class="line">ListNode* slow=head;</span><br><span class="line"><span class="keyword">while</span>(fast!=<span class="literal">NULL</span>&amp;&amp;fast-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    slow=slow-&gt;next;</span><br><span class="line">    fast=fast-&gt;next-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(slow==fast)&#123;</span><br><span class="line">        ListNode* index1=fast;</span><br><span class="line">        ListNode* index2=head;</span><br><span class="line">        <span class="keyword">while</span>(index1!=index2)&#123;</span><br><span class="line">            index1=index1-&gt;next;</span><br><span class="line">            index2=index2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> inedx2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line">    ListNode *<span class="title function_">detectCycle</span><span class="params">(ListNode *head)</span> &#123;</span><br><span class="line">        ListNode *fast=head;</span><br><span class="line">        ListNode *slow=head;</span><br><span class="line">        <span class="keyword">while</span>(fast!=<span class="literal">NULL</span>&amp;&amp;fast-&gt;next!=<span class="literal">NULL</span>)&#123; </span><br><span class="line">            fast=fast-&gt;next-&gt;next;<span class="comment">//走两部</span></span><br><span class="line">            slow=slow-&gt;next;<span class="comment">//走一步</span></span><br><span class="line">            <span class="keyword">if</span>(fast==slow)&#123; <span class="comment">//当快==慢时候(为什么不直返回slow呢？因为fast 不只走了一圈)</span></span><br><span class="line">                ListNode* index1=fast;  <span class="comment">//所以直接找它的地址再的地方</span></span><br><span class="line">                ListNode* index2=head;  <span class="comment">//从头数fast在哪</span></span><br><span class="line">                <span class="keyword">while</span>(index1!=index2)&#123;</span><br><span class="line">                    index1=index1-&gt;next;</span><br><span class="line">                    index2=index2-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> index2;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02.07. 链表相交</title>
      <link href="/2023/04/22/02.07.-%E9%93%BE%E8%A1%A8%E7%9B%B8%E4%BA%A4/"/>
      <url>/2023/04/22/02.07.-%E9%93%BE%E8%A1%A8%E7%9B%B8%E4%BA%A4/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/">02.07. 链表相交</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">ListNode* curA=headA;</span><br><span class="line">ListNode* curB=headB;</span><br><span class="line"><span class="type">int</span> lenA=<span class="number">0</span>,lenB=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(curA!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    lenA++;<span class="comment">//A长度</span></span><br><span class="line">    curA=curA-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(curB!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    lenB++;<span class="comment">//B长度</span></span><br><span class="line">    curB=curB-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">curA=headA;</span><br><span class="line">curB=headB;</span><br><span class="line"><span class="comment">//curA become max ,lenA is its length</span></span><br><span class="line"><span class="keyword">if</span>(lenB&gt;lenA)&#123;</span><br><span class="line">    swap(lenA,lenB);</span><br><span class="line">    swap(curA,curB);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求长度差</span></span><br><span class="line"><span class="type">int</span> gap= lenA-lenB;</span><br><span class="line"><span class="keyword">while</span>(gap--)&#123;</span><br><span class="line">    curA=curA-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历curA和curB 遇到相同则直接返回</span></span><br><span class="line"><span class="keyword">while</span>(curA!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(curA==curB)&#123;</span><br><span class="line"><span class="keyword">return</span> curA;</span><br><span class="line">    &#125;</span><br><span class="line">    curA=curA-&gt;next;</span><br><span class="line">    curB=curB-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line">    ListNode *<span class="title function_">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span> &#123;</span><br><span class="line">        ListNode* curA=headA;</span><br><span class="line">        ListNode* curB=headB;</span><br><span class="line">        <span class="type">int</span> lenA=<span class="number">0</span>,lenB=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(curA!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            lenA++;</span><br><span class="line">            curA=curA-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(curB!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            lenB++;</span><br><span class="line">            curB=curB-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//为什么还要再次赋值，因为上面next到了NULL，懂否，傻子</span></span><br><span class="line">        curA = headA;</span><br><span class="line">        curB = headB;</span><br><span class="line">        <span class="keyword">if</span>(lenB&gt;lenA)&#123;</span><br><span class="line">            swap(lenA,lenB);</span><br><span class="line">            swap(curA,curB);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> gap=lenA-lenB;</span><br><span class="line">        <span class="comment">//移动</span></span><br><span class="line">        <span class="keyword">while</span>(gap)&#123;</span><br><span class="line">            curA=curA-&gt;next;</span><br><span class="line">            gap--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(curA!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(curA==curB)&#123;</span><br><span class="line">                <span class="keyword">return</span> curA;</span><br><span class="line">            &#125;</span><br><span class="line">            curA=curA-&gt;next;</span><br><span class="line">            curB=curB-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>19.删除链表的倒数第 N 个结点</title>
      <link href="/2023/04/21/19.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%AC-N-%E4%B8%AA%E7%BB%93%E7%82%B9/"/>
      <url>/2023/04/21/19.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%AC-N-%E4%B8%AA%E7%BB%93%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">19. 删除链表的倒数第 N 个结点</a></p><p><img src="/images/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%88%A0%E9%99%A4%E5%80%92%E6%95%B0%E7%AC%ACn%E4%B8%AA%E7%BB%93%E7%82%B91.png" alt="1682089665791"></p><p><img src="/images/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%88%A0%E9%99%A4%E5%80%92%E6%95%B0%E7%AC%ACn%E7%BB%99%E7%BB%93%E7%82%B92.png" alt="1682089701537"></p><p>所以快慢指针只是减少了遍历一遍链表长度实质上就是用fast来代替长度罢了………………</p><p>还不如自己写一遍傻的暴力</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line">    ListNode* <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        ListNode* dummyHead=new ListNode(<span class="number">0</span>);</span><br><span class="line">        dummyHead-&gt;next=head;</span><br><span class="line">        ListNode* fast=dummyHead;</span><br><span class="line">        ListNode* slow=dummyHead;</span><br><span class="line">        <span class="keyword">while</span>(n&amp;&amp;fast-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            fast=fast-&gt;next;</span><br><span class="line">            n--;</span><br><span class="line">        &#125;</span><br><span class="line">        fast=fast-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(fast!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            fast=fast-&gt;next;</span><br><span class="line">            slow=slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        slow-&gt;next=slow-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> dummyHead-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>暴力</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line">    ListNode* <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        ListNode* dummyHead=new ListNode(<span class="number">0</span>);</span><br><span class="line">        dummyHead-&gt;next=head;</span><br><span class="line">        <span class="type">int</span> length=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(head!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            length++;</span><br><span class="line">            head=head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* cur=dummyHead;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span> ;i&lt;=length-n;i++)&#123;</span><br><span class="line">            cur=cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur-&gt;next=cur-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> dummyHead-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>24. 两两交换链表中的节点</title>
      <link href="/2023/04/21/24.-%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/"/>
      <url>/2023/04/21/24.-%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/swap-nodes-in-pairs/">24. 两两交换链表中的节点</a></p><p><img src="/images/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8.png" alt="1682085503157"></p><p><img src="/images/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E9%93%BE%E8%A1%A8%E4%BA%A4%E6%8D%A22.png" alt="1682085672405"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line">    ListNode* <span class="title function_">swapPairs</span><span class="params">(ListNode* head)</span> &#123;</span><br><span class="line">    ListNode *dummyHead=new ListNode(<span class="number">0</span>);</span><br><span class="line">    dummyHead-&gt;next=head;</span><br><span class="line">    ListNode *cur=dummyHead;</span><br><span class="line">    <span class="keyword">while</span>(cur-&gt;next!=<span class="literal">NULL</span>&amp;&amp;cur-&gt;next-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        ListNode* temp=cur-&gt;next;</span><br><span class="line">        ListNode* temp1=cur-&gt;next-&gt;next-&gt;next;</span><br><span class="line">        cur-&gt;next=cur-&gt;next-&gt;next;</span><br><span class="line">        cur-&gt;next-&gt;next=temp;</span><br><span class="line">        cur-&gt;next-&gt;next-&gt;next=temp1; <span class="comment">//顺着思路比较好毕竟已经改变了cur-&gt;next的值，直接顺下比较清楚</span></span><br><span class="line"></span><br><span class="line">        cur=cur-&gt;next-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummyHead-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>206. 反转链表</title>
      <link href="/2023/04/20/206.-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
      <url>/2023/04/20/206.-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/reverse-linked-list/">206. 反转链表</a></p><p><img src="/images/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/206.%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8.gif"></p><p>示例: 输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL 输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ListNode* <span class="title function_">reverseList</span><span class="params">(ListNode* head)</span>&#123;</span><br><span class="line">ListNode* temp;   <span class="comment">//保存cur的下一个结点   </span></span><br><span class="line">ListNode* cur=head;</span><br><span class="line">ListNode* pre =<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span>(cur)&#123;</span><br><span class="line">tmp=cur-&gt;next;  <span class="comment">//保存cur的下一个结点，因为接下来要改变cur-&gt;next</span></span><br><span class="line">cur-&gt;next=pre;  <span class="comment">//反转 </span></span><br><span class="line">pre=cur;<span class="comment">//更新pre</span></span><br><span class="line">cur=temp;<span class="comment">//再更新cur</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line">    ListNode* <span class="title function_">reverseList</span><span class="params">(ListNode* head)</span> &#123;</span><br><span class="line">        ListNode* pre=<span class="literal">NULL</span>;</span><br><span class="line">        ListNode* cur=head;</span><br><span class="line">        ListNode* tmp;</span><br><span class="line">        <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">            tmp=cur-&gt;next;</span><br><span class="line">            cur-&gt;next=pre;</span><br><span class="line">            pre=cur;</span><br><span class="line">            cur=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>递归</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line">    ListNode* <span class="title function_">reverse</span><span class="params">(ListNode* pre,ListNode* cur)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur == <span class="literal">NULL</span>) <span class="keyword">return</span> pre;</span><br><span class="line">        ListNode* temp = cur-&gt;next;</span><br><span class="line">        cur-&gt;next = pre;</span><br><span class="line">        <span class="comment">// 可以和双指针法的代码进行对比，如下递归的写法，其实就是做了这两步</span></span><br><span class="line">        <span class="comment">// pre = cur;</span></span><br><span class="line">        <span class="comment">// cur = temp;</span></span><br><span class="line">        <span class="keyword">return</span> reverse(cur,temp);</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode* <span class="title function_">reverseList</span><span class="params">(ListNode* head)</span> &#123;</span><br><span class="line">        <span class="comment">// 和双指针法初始化是一样的逻辑</span></span><br><span class="line">        <span class="comment">// ListNode* cur = head;</span></span><br><span class="line">        <span class="comment">// ListNode* pre = NULL;</span></span><br><span class="line">        <span class="keyword">return</span> reverse(<span class="literal">NULL</span>, head);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-20-2023</title>
      <link href="/2023/04/20/4-20-2023/"/>
      <url>/2023/04/20/4-20-2023/</url>
      
        <content type="html"><![CDATA[<p>1.半夜背东西的效果</p><div ><img src="\images\dayliy_image\4.20.jpg" alt="drawing" width="200" /></div>2.一边看田静长难句每日一句，忘记的语法看了英语兔，觉得看懂中高阶难度的文章单词重要语法也重要<div ><img src="\images\dayliy_image\4.20.2.png" alt="drawing" width="200" /></div>3.写的越来越慢了，进展到链表（TAT）<div ><img src="\images\dayliy_image\4.20.3.png" alt="drawing" width="200" /></div>4.数学干掉了第三章和知识框架，进展到张宇30讲第三讲函数极限，<p>正在做7种未定式归纳。</p><p>感觉怪怪的：</p><p>首先把所以定义理了一遍（超级费时间），</p><p>然后把张宇和武忠祥的题归纳在了活页本上，感觉做题方法啥的有点乱，一道题不一定用了一个知识点，不过第三遍看张宇的，思路清晰很多。</p><p>这周希望能写1800那上面的题吧（有思路的写）</p><p>5.半夜报复性的玩代号鸢，单词都咩有背完（投降）（认错）（再也不敢了）</p><p>比起看英语文章，背单词的还是比看文章的轻松太多的。</p><p><em><strong>知道了那个考南邮的是哪个师兄了！！！</strong></em></p><p>acm铜的江苏师兄，专业课110 数学98 政治50英语60多 总分320无缘南邮直接上班去了（掰了掰手指头算了算我考的学校，好像我得数学上百，zz70英语80才可以哦（怎么感觉在梦里可以做到呢）（考不上就进流水线（摆）））</p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> casual_talk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>707.设计链表</title>
      <link href="/2023/04/18/707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8/"/>
      <url>/2023/04/18/707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/design-linked-list/">707. 设计链表</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    LinkedNode* next;</span><br><span class="line">    LinkedNode(<span class="type">int</span> val):val(val),next(<span class="literal">NULL</span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//初始化链表</span></span><br><span class="line">MyLinkedList()&#123;</span><br><span class="line"> dummyHead=new LinkedNode(<span class="number">0</span>);<span class="comment">//虚拟头结点</span></span><br><span class="line">    size=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取第index个结点数值，index是从0开始的，第0个结点就是头结点</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(index&gt;(size<span class="number">-1</span>)||index&lt;<span class="number">0</span>)&#123; <span class="comment">//如果index是非法数值返回-1，</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    LinkedNode* cur=dummyHead-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(index)&#123;  <span class="comment">//当index的值不为0的时候</span></span><br><span class="line">        cur=cur-&gt;next; <span class="comment">//continue 到下一个，因为加了个dummy虚拟头节点所以第一个cur-&gt;next就是头结点</span></span><br><span class="line">        index--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cur-&gt;val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">addAtHead</span><span class="params">(<span class="type">int</span> val)</span>&#123;</span><br><span class="line">    LinkedNode* newNode=new LinkedNode(val);<span class="comment">//创建个的结点</span></span><br><span class="line">    newNode-&gt;next=dummyHead-&gt;next;<span class="comment">//让新节点的地址指向当初的头节点</span></span><br><span class="line">    dummyHead-&gt;next=newNode; <span class="comment">//然后再让虚拟头结点的地址指向新的结点</span></span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在链表最后面添加一个结点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">addAtTail</span><span class="params">(<span class="type">int</span> val)</span>&#123;</span><br><span class="line">    LinkedNode* newNode =new LinkedNode(val);<span class="comment">//创建一个结点</span></span><br><span class="line">    LinkedNode* cur=dummyHead;<span class="comment">//设置一个cur来操作dummy</span></span><br><span class="line">    <span class="keyword">while</span>(cur-&gt;next!=<span class="literal">NULL</span>)&#123;<span class="comment">//当当前结点不为空的时候 ，继续往下找</span></span><br><span class="line">        cur=cur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    cur-&gt;next=newNode; <span class="comment">//把最后一个结点的地址变成newnode</span></span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/3.png" alt="1681829938210"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在index之前的地方插入新结点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">addIndex</span><span class="params">(<span class="type">int</span> index,<span class="type">int</span> val)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(index&gt;size) <span class="keyword">return</span> ;<span class="comment">// ilegal</span></span><br><span class="line">    <span class="keyword">if</span>(index&lt;<span class="number">0</span>) index=<span class="number">0</span>;</span><br><span class="line">    LinkedNode* newNode=new LinkedNode(val); <span class="comment">//set new node</span></span><br><span class="line">    LinkedNode* cur=dummyHead;<span class="comment">// set cur </span></span><br><span class="line">    <span class="keyword">while</span>(index)&#123;  <span class="comment">//index!=NULL</span></span><br><span class="line">        cur=cur-&gt;next; <span class="comment">//point to next address</span></span><br><span class="line">        index--;</span><br><span class="line">    &#125;</span><br><span class="line">    newNode-&gt;next=cur-&gt;next; <span class="comment">//把 newNode的 地址 变成cur地址（后面的值放入） </span></span><br><span class="line">    cur-&gt;next=newNode;<span class="comment">//再把newNode放到cur的地址上（前面的值改变）</span></span><br><span class="line">    size++;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除第index个结点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(index&gt;=size||index&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    LinkedNode* cur = dummyHead;</span><br><span class="line">    <span class="keyword">while</span>(index)&#123;</span><br><span class="line">        cur=cur-&gt;next;</span><br><span class="line">        index--;</span><br><span class="line">    &#125;</span><br><span class="line">    LinkedNode* tmp =cur-&gt;next;</span><br><span class="line">    cur-&gt;next=cur-&gt;next-&gt;next;</span><br><span class="line">    delete tmp;</span><br><span class="line">    size--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印链表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printLinkedList</span><span class="params">()</span>&#123;</span><br><span class="line">    LinkedNode* cur =dummyHead;</span><br><span class="line">    <span class="keyword">while</span>(cur-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;cur-&gt;next-&gt;val&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        cur=cur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>203.移除链表元素</title>
      <link href="/2023/04/17/203.%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/"/>
      <url>/2023/04/17/203.%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/remove-linked-list-elements/">203. 移除链表元素</a></p><p><strong>直接使用原来的链表来进行移除节点操作：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ListNode* <span class="title function_">removeElements</span><span class="params">(ListNode* head,<span class="type">int</span> val)</span>&#123;</span><br><span class="line">    <span class="comment">//删除头结点</span></span><br><span class="line">    <span class="keyword">while</span>(head!=<span class="literal">NULL</span>&amp;&amp;head-&gt;val==val)&#123;</span><br><span class="line">ListNode* tmp=head;</span><br><span class="line">        head=head-&gt;next;<span class="comment">//直接让head等于下一个next</span></span><br><span class="line">        delete tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除非头结点</span></span><br><span class="line">    ListNode* cur =head;  <span class="comment">//设置一个cur的东西来操作链表</span></span><br><span class="line">    <span class="keyword">while</span>(cur!=<span class="literal">NULL</span>&amp;&amp;cur-&gt;next!=<span class="literal">NULL</span>)&#123; <span class="comment">//当前不为空，且下一个结点也不为空</span></span><br><span class="line">        <span class="keyword">if</span>(cur-&gt;next-&gt;val==val)&#123; <span class="comment">// 如果当前的下一个结点为val 当前的next地址为下一个结点</span></span><br><span class="line">            ListNode* tep=cur-&gt;next;</span><br><span class="line">            cur-&gt;next=cur-&gt;next-&gt;next; <span class="comment">//val的next变成 val的下一个下一个的next</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cur=cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line">    ListNode* <span class="title function_">removeElements</span><span class="params">(ListNode* head, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="comment">//删除头结点</span></span><br><span class="line">        <span class="keyword">while</span>(head!=<span class="literal">NULL</span>&amp;&amp;head-&gt;val==val)&#123;</span><br><span class="line">            ListNode* tmp=head;</span><br><span class="line">            head=head-&gt;next;</span><br><span class="line">            delete tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//删除非头结点</span></span><br><span class="line">        ListNode *cur=head;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">NULL</span>&amp;&amp;cur-&gt;next!=<span class="literal">NULL</span>)&#123; <span class="comment">//当前不为空，且下一个也不为空</span></span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;next-&gt;val==val)&#123;</span><br><span class="line">                ListNode *tmp=cur-&gt;next;</span><br><span class="line">                cur-&gt;next=cur-&gt;next-&gt;next;</span><br><span class="line">                delete tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123; </span><br><span class="line">                cur=cur-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>设置一个虚拟头结点在进行移除节点操作：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ListNode* <span class="title function_">removeElements</span><span class="params">(ListNode* head,<span class="type">int</span> val)</span>&#123;</span><br><span class="line">    ListNode* dummyHead=new ListNode(<span class="number">0</span>); <span class="comment">//创建一个虚拟节点</span></span><br><span class="line">    dummyHead-&gt;next=head;<span class="comment">//这个结点的地址指向head</span></span><br><span class="line">    ListNode* cur=dummyHead;<span class="comment">//用来操作的作为 当前的为虚拟结点</span></span><br><span class="line">   <span class="keyword">while</span>(cur-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(cur-&gt;next-&gt;val==val)&#123;<span class="comment">// 当前的下一个结点值 等于 val</span></span><br><span class="line">      ListNode* tmp=cur-&gt;next;<span class="comment">// </span></span><br><span class="line">        cur-&gt;next=cur-&gt;next-&gt;next; <span class="comment">//下一个等于下一个结点</span></span><br><span class="line">         delete tmp;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span>&#123;</span><br><span class="line">            cur=cur-&gt;next; <span class="comment">//cur移向下一个结点</span></span><br><span class="line">    &#125;</span><br><span class="line">    head=dummyHead-&gt;next; <span class="comment">//head为虚拟结点的下一个结点</span></span><br><span class="line">    delete dummyHead;<span class="comment">//</span></span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//单链表</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>&#123;</span></span><br><span class="line"><span class="type">int</span> val;<span class="comment">//节点上存储的元素 </span></span><br><span class="line">ListNode *next;  <span class="comment">//指向下一个结点的指针</span></span><br><span class="line">ListNode(<span class="type">int</span> x): val(x)  ,next(<span class="literal">NULL</span>)&#123;&#125;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">//创建链表</span></span><br><span class="line"><span class="comment">//ListNode* createList()&#123;</span></span><br><span class="line"><span class="comment">//ListNode* head=NULL;</span></span><br><span class="line"><span class="comment">//ListNode* tail=NULL;</span></span><br><span class="line"><span class="comment">//int val;</span></span><br><span class="line"><span class="comment">//while(cin&gt;&gt;val)&#123;</span></span><br><span class="line"><span class="comment">//ListNode* node=new ListNode(val);</span></span><br><span class="line"><span class="comment">//if(tail==NULL)&#123;</span></span><br><span class="line"><span class="comment">//head=node;</span></span><br><span class="line"><span class="comment">//tail==node;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else&#123;</span></span><br><span class="line"><span class="comment">//tail-&gt;next=node;</span></span><br><span class="line"><span class="comment">//tail=node;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125; </span></span><br><span class="line">ListNode* <span class="title function_">removeElements</span><span class="params">(ListNode* head,<span class="type">int</span> val)</span>&#123;</span><br><span class="line"></span><br><span class="line">ListNode *dymmy=new ListNode(<span class="number">0</span>);</span><br><span class="line">dymmy-&gt;next=head;</span><br><span class="line">ListNode *cur=dymmy;</span><br><span class="line"><span class="keyword">while</span>(cur-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(cur-&gt;next-&gt;val==val)&#123;</span><br><span class="line">ListNode *tmp=cur-&gt;next;</span><br><span class="line">cur-&gt;next=cur-&gt;next-&gt;next;</span><br><span class="line">delete tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">cur=cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//head=dymmy-&gt;next</span></span><br><span class="line"><span class="keyword">return</span> head=dymmy-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印链表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printList</span><span class="params">(ListNode* head)</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(head)<span class="comment">//head is not empty</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;head-&gt;val&lt;&lt;<span class="string">&quot; &quot;</span>;<span class="comment">//pirnt the value of the head</span></span><br><span class="line">head=head-&gt;next;  <span class="comment">//turn to the next address</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    ListNode* head = new ListNode(<span class="number">1</span>);</span><br><span class="line">    head-&gt;next = new ListNode(<span class="number">2</span>);</span><br><span class="line">    head-&gt;next-&gt;next = new ListNode(<span class="number">6</span>);</span><br><span class="line">    head-&gt;next-&gt;next-&gt;next = new ListNode(<span class="number">3</span>);</span><br><span class="line">    head-&gt;next-&gt;next-&gt;next-&gt;next = new ListNode(<span class="number">4</span>);</span><br><span class="line">    head-&gt;next-&gt;next-&gt;next-&gt;next-&gt;next = new ListNode(<span class="number">5</span>);</span><br><span class="line">    head-&gt;next-&gt;next-&gt;next-&gt;next-&gt;next-&gt;next = new ListNode(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> val = <span class="number">6</span>;</span><br><span class="line">    </span><br><span class="line">ListNode* newHead= removeElements(head,val);</span><br><span class="line">printList(newHead);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表基础</title>
      <link href="/2023/04/17/%E9%93%BE%E8%A1%A8%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/04/17/%E9%93%BE%E8%A1%A8%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="链表的定义"><a href="#链表的定义" class="headerlink" title="链表的定义"></a>链表的定义</h1><p>链表的定义。</p><p>刷leetcode的链表的节点都默认定义好了，直接用就行了</p><p>没有注意到链表的节点是如何定义的。</p><p>C&#x2F;C++的定义链表节点方式，如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单链表</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;  <span class="comment">// 节点上存储的元素</span></span><br><span class="line">    ListNode *next;  <span class="comment">// 指向下一个节点的指针</span></span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">NULL</span>) &#123;&#125;  <span class="comment">// 节点的构造函数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我不定义构造函数行不行，答案是可以的，C++默认生成一个构造函数。</p><p>但是这个构造函数不会初始化任何成员变量，下面我来举两个例子：</p><p>通过自己定义构造函数初始化节点：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ListNode* head = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>使用默认构造函数初始化节点：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ListNode* head = <span class="keyword">new</span> <span class="built_in">ListNode</span>();</span><br><span class="line">head-&gt;val = <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>果不定义构造函数使用默认构造函数的话，在初始化的时候就不能直接给变量赋值！</p><h1 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h1><p>再把链表的特性和数组的特性进行一个对比，如图所示：</p><p><img src="/mages/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E9%93%BE%E8%A1%A8%E5%9F%BA%E7%A1%80.png"></p>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组总结</title>
      <link href="/2023/04/17/%E6%95%B0%E7%BB%84%E6%80%BB%E7%BB%93/"/>
      <url>/2023/04/17/%E6%95%B0%E7%BB%84%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="数组总结"><a href="#数组总结" class="headerlink" title="数组总结"></a>数组总结</h3><p><img src="/images/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84%E6%80%BB%E7%BB%93.png"></p>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>59.螺旋矩阵II</title>
      <link href="/2023/04/17/59.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5II/"/>
      <url>/2023/04/17/59.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5II/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/spiral-matrix-ii/"> 螺旋矩阵 II</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&gt; res(n,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n,<span class="number">0</span>));<span class="comment">//用vector定义一个二维数组</span></span><br><span class="line"><span class="type">int</span> startx=<span class="number">0</span>,starty=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> loop=n/<span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> mid=n/<span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> count=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> offset=<span class="number">1</span>;<span class="comment">//需要控制每一条边遍历的长度，每次循环右边界收缩一位</span></span><br><span class="line"><span class="type">int</span> i,j;</span><br><span class="line"><span class="keyword">while</span>(loop--)&#123;</span><br><span class="line">i=startx;</span><br><span class="line">j=starty;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一行</span></span><br><span class="line"><span class="keyword">for</span>(j=starty;j&lt;n-offset;j++)&#123;</span><br><span class="line">res[startx][j]=count++; <span class="comment">//行不动，j++</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=startx;i&lt;n-offset;i++)&#123;</span><br><span class="line">res[i][j]=count++; <span class="comment">//保持上面的j的值，i++行++</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(;j&gt;starty;j--)&#123;</span><br><span class="line">res[i][j]=count++;<span class="comment">//保持上面的值，j--左边</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(;i&gt;startx;i--)&#123;</span><br><span class="line">res[i][j]=count++;<span class="comment">//保持上面的j的值,i--回到最上面</span></span><br><span class="line">&#125;</span><br><span class="line">startx++;</span><br><span class="line">starty++;</span><br><span class="line">offset+=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//为奇数 单独思考</span></span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">2</span>)&#123;</span><br><span class="line">res[mid][mid]=count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&gt; generateMatrix(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&gt; res(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>)); <span class="comment">// 使用vector定义一个二维数组</span></span><br><span class="line">        <span class="type">int</span> startx = <span class="number">0</span>, starty = <span class="number">0</span>; <span class="comment">// 定义每循环一个圈的起始位置</span></span><br><span class="line">        <span class="type">int</span> loop = n / <span class="number">2</span>; <span class="comment">// 每个圈循环几次，例如n为奇数3，那么loop = 1 只是循环一圈，矩阵中间的值需要单独处理</span></span><br><span class="line">        <span class="type">int</span> mid = n / <span class="number">2</span>; <span class="comment">// 矩阵中间的位置，例如：n为3， 中间的位置就是(1，1)，n为5，中间位置为(2, 2)</span></span><br><span class="line">        <span class="type">int</span> count = <span class="number">1</span>; <span class="comment">// 用来给矩阵中每一个空格赋值</span></span><br><span class="line">        <span class="type">int</span> offset = <span class="number">1</span>; <span class="comment">// 需要控制每一条边遍历的长度，每次循环右边界收缩一位</span></span><br><span class="line">        <span class="type">int</span> i,j;</span><br><span class="line">        <span class="keyword">while</span> (loop --) &#123;</span><br><span class="line">            i = startx;</span><br><span class="line">            j = starty;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 下面开始的四个for就是模拟转了一圈</span></span><br><span class="line">            <span class="comment">// 模拟填充上行从左到右(左闭右开)</span></span><br><span class="line">            <span class="keyword">for</span> (j = starty; j &lt; n - offset; j++) &#123;</span><br><span class="line">                res[startx][j] = count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 模拟填充右列从上到下(左闭右开)</span></span><br><span class="line">            <span class="keyword">for</span> (i = startx; i &lt; n - offset; i++) &#123;</span><br><span class="line">                res[i][j] = count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 模拟填充下行从右到左(左闭右开)</span></span><br><span class="line">            <span class="keyword">for</span> (; j &gt; starty; j--) &#123;</span><br><span class="line">                res[i][j] = count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 模拟填充左列从下到上(左闭右开)</span></span><br><span class="line">            <span class="keyword">for</span> (; i &gt; startx; i--) &#123;</span><br><span class="line">                res[i][j] = count++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 第二圈开始的时候，起始位置要各自加1， 例如：第一圈起始位置是(0, 0)，第二圈起始位置是(1, 1)</span></span><br><span class="line">            startx++;</span><br><span class="line">            starty++;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// offset 控制每一圈里每一条边遍历的长度</span></span><br><span class="line">            offset += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果n为奇数的话，需要单独给矩阵最中间的位置赋值</span></span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span>) &#123;</span><br><span class="line">            res[mid][mid] = count;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&gt; generateMatrix(<span class="type">int</span> n) &#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&gt; res(n,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n,<span class="number">0</span>));   <span class="comment">//vector&lt;int&gt; a(10,1)  初始化 10个1</span></span><br><span class="line">    <span class="type">int</span> loop=n/<span class="number">2</span>; <span class="comment">//转圈次数</span></span><br><span class="line">    <span class="type">int</span> count=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> mid=n/<span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> startx=<span class="number">0</span>,starty=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="type">int</span> offset=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(loop--)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=starty;j&lt;n-offset;j++)&#123;</span><br><span class="line">            <span class="comment">// res[startx][j]=count++;</span></span><br><span class="line">            <span class="comment">//拆解出来就是,这个不是自增</span></span><br><span class="line">            res[startx][j]=count;</span><br><span class="line">            count++;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i=startx;i&lt;n-offset;i++)&#123;</span><br><span class="line">            res[i][j]=count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(;j&gt;starty;j--)&#123;</span><br><span class="line">            res[i][j]=count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(;i&gt;startx;i--)&#123;</span><br><span class="line">            res[i][j]=count++;</span><br><span class="line">        &#125;</span><br><span class="line">        startx++;</span><br><span class="line">        starty++;</span><br><span class="line">        offset++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">2</span>)&#123;</span><br><span class="line">        res[mid][mid]=count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 螺旋矩阵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何打开ipynb文件</title>
      <link href="/2023/04/17/%E5%A6%82%E4%BD%95%E6%89%93%E5%BC%80ipynb%E6%96%87%E4%BB%B6/"/>
      <url>/2023/04/17/%E5%A6%82%E4%BD%95%E6%89%93%E5%BC%80ipynb%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<ol><li>安装 Jupyter Notebook 或 JupyterLab：您可以使用 pip 命令来安装，如下所示：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install jupyterlab</span><br></pre></td></tr></table></figure><ol><li>启动 Jupyter Notebook 或 JupyterLab：在命令行中输入 <code>jupyter notebook</code> 或 <code>jupyter lab</code> 命令，启动 Jupyter Notebook 或 JupyterLab。</li><li>打开 .ipynb 文件：在 Jupyter Notebook 或 JupyterLab 的主界面中，找到包含 .ipynb 文件的目录，点击文件名即可打开。</li><li>运行和编辑 .ipynb 文件：在打开的 .ipynb 文件中，您可以执行代码、编辑文本、添加图像等内容，并且可以在浏览器中进行交互式的运行和编辑。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据可视化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>滑动窗口904. 水果成篮</title>
      <link href="/2023/04/16/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3904.-%E6%B0%B4%E6%9E%9C%E6%88%90%E7%AF%AE/"/>
      <url>/2023/04/16/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3904.-%E6%B0%B4%E6%9E%9C%E6%88%90%E7%AF%AE/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/fruit-into-baskets/">904. 水果成篮</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line">    <span class="type">int</span> <span class="title function_">totalFruit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&amp; fruits)</span> &#123;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>,right=<span class="number">0</span>; </span><br><span class="line">        <span class="type">int</span> n=fruits.size();    </span><br><span class="line">        <span class="type">int</span> max_fruit=INT_MIN;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="type">int</span>,<span class="type">int</span>&gt; basket; <span class="comment">//这个什么map不懂</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i&lt;n;i++)&#123; <span class="comment">//大循环 从0-n-1</span></span><br><span class="line">            <span class="type">int</span>  fruit_num= fruits[i];  <span class="comment">// 记录fruits[i]的数字，当比如fruits[0]=1,fruits[1]=1,那么，basket[1]=1+1=2</span></span><br><span class="line">            basket[fruit_num]++;</span><br><span class="line">            <span class="keyword">while</span>(basket.size()&gt;<span class="number">2</span>)&#123;<span class="comment">//当篮里种类大于2时</span></span><br><span class="line">                <span class="type">int</span> fruit_num=fruits[left];<span class="comment">//记录从fruits[0]=1即basket[1]=2</span></span><br><span class="line">                basket[fruit_num]--;      <span class="comment">//把前面的减掉</span></span><br><span class="line">                <span class="keyword">if</span>(basket[fruit_num]==<span class="number">0</span>)&#123; </span><br><span class="line">                    basket.erase(fruit_num); <span class="comment">//当这种水果为0的时候，就删除这种水果  //删除key就行了</span></span><br><span class="line">                &#125;</span><br><span class="line">                left++;<span class="comment">//继续从当前的位置往右边移动</span></span><br><span class="line">            &#125;</span><br><span class="line">            max_fruit=max_fruit&gt;i-left+<span class="number">1</span>?max_fruit:i-left+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max_fruit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 滑动窗口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中map和unordered_map的用法</title>
      <link href="/2023/04/16/C++%E4%B8%ADmap%E5%92%8Cunordered_map%E7%9A%84%E7%94%A8%E6%B3%95/"/>
      <url>/2023/04/16/C++%E4%B8%ADmap%E5%92%8Cunordered_map%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>map和unordered_map都是c++中可以充当字典（key-value）来用的数据类型，但是其基本实现是不一样的。</p><h2 id="2-map"><a href="#2-map" class="headerlink" title="2.map"></a>2.map</h2><p>对于map的底层原理，是通过红黑树（一种非严格意义上的平衡二叉树）来实现的，因此map内部所有的数据都是有序的，map的查询、插入、删除操作的时间复杂度都是O(logn)。此外，map的key需要定义operator &lt;，对于一般的数据类型已被系统实现，若是用户自定义的数据类型，则要重新定义该操作符。</p><p>map的基本操作如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line">map&lt;string, <span class="type">int</span>&gt; dict;</span><br><span class="line"><span class="comment">// 插入数据的三种方式</span></span><br><span class="line">dict.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string,<span class="type">int</span>&gt;(<span class="string">&quot;apple&quot;</span>,<span class="number">2</span>));</span><br><span class="line">dict.<span class="built_in">insert</span>(map&lt;string, <span class="type">int</span>&gt;::<span class="built_in">value_type</span>(<span class="string">&quot;orange&quot;</span>,<span class="number">3</span>));</span><br><span class="line">dict[<span class="string">&quot;banana&quot;</span>] = <span class="number">6</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 判断是否有元素</span></span><br><span class="line"><span class="keyword">if</span>(dict.<span class="built_in">empty</span>())</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;该字典无元素&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;该字典共有&quot;</span>&lt;&lt;dict.<span class="built_in">size</span>()&lt;&lt;<span class="string">&quot;个元素&quot;</span>&lt;&lt;endl;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line">map&lt;string, <span class="type">int</span>&gt;::iterator iter;</span><br><span class="line"><span class="keyword">for</span>(iter=dict.<span class="built_in">begin</span>();iter!=dict.<span class="built_in">end</span>();iter++)</span><br><span class="line">cout&lt;&lt;iter-&gt;first&lt;&lt;ends&lt;&lt;iter-&gt;second&lt;&lt;endl;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 查找</span></span><br><span class="line"><span class="keyword">if</span>((iter=dict.<span class="built_in">find</span>(<span class="string">&quot;banana&quot;</span>))!=dict.<span class="built_in">end</span>()) <span class="comment">//  返回一个迭代器指向键值为key的元素，如果没找到就返回end()</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;已找到banana,其value为&quot;</span>&lt;&lt;iter-&gt;second&lt;&lt;<span class="string">&quot;.&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;未找到banana.&quot;</span>&lt;&lt;endl;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(dict.<span class="built_in">count</span>(<span class="string">&quot;watermelon&quot;</span>)==<span class="number">0</span>) <span class="comment">// 返回键值等于key的元素的个数</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;watermelon不存在&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;watermelon存在&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">pair&lt;map&lt;string, <span class="type">int</span>&gt;::iterator, map&lt;string, <span class="type">int</span>&gt;::iterator&gt; ret;</span><br><span class="line">ret = dict.<span class="built_in">equal_range</span>(<span class="string">&quot;banana&quot;</span>); <span class="comment">// 查找键值等于 key 的元素区间为[start,end)，指示范围的两个迭代器以 pair 返回</span></span><br><span class="line">cout&lt;&lt;ret.first-&gt;first&lt;&lt;ends&lt;&lt;ret.first-&gt;second&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;ret.second-&gt;first&lt;&lt;ends&lt;&lt;ret.second-&gt;second&lt;&lt;endl;</span><br><span class="line"> </span><br><span class="line">iter = dict.<span class="built_in">lower_bound</span>(<span class="string">&quot;boluo&quot;</span>); <span class="comment">// 返回一个迭代器，指向键值&gt;=key的第一个元素。</span></span><br><span class="line">cout&lt;&lt;iter-&gt;first&lt;&lt;endl;</span><br><span class="line">iter = dict.<span class="built_in">upper_bound</span>(<span class="string">&quot;boluo&quot;</span>); <span class="comment">// 返回一个迭代器，指向值键值&gt;key的第一个元素。</span></span><br><span class="line">cout&lt;&lt;iter-&gt;first&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意如果定义了<code>map&lt;string,int&gt;</code>这个类型，需要在头文件中包含<code>#include&lt;string&gt;</code>，这是因为默认的string是系统的xstring对象，但是没有定义operator&lt;，从而报错。map用到自定义的类型，一定要定义operator&lt;，具体用法如下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">person</span>  </span></span><br><span class="line"><span class="class">&#123;</span>  </span><br><span class="line">    <span class="built_in">string</span> name;  </span><br><span class="line">    <span class="type">int</span> age;  </span><br><span class="line">person(<span class="built_in">string</span> name, <span class="type">int</span> age)  </span><br><span class="line">&#123;  </span><br><span class="line">    this-&gt;name =  name;  </span><br><span class="line">    this-&gt;age = age;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">bool</span> operator &lt; (<span class="type">const</span> person&amp; p) <span class="type">const</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">return</span> this-&gt;age &lt; p.age;   </span><br><span class="line">&#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="built_in">map</span>&lt;person,<span class="type">int</span>&gt; m; </span><br></pre></td></tr></table></figure><h2 id="3-unordered-map"><a href="#3-unordered-map" class="headerlink" title="3.unordered_map"></a>3.unordered_map</h2><p>unordered_map和map类似，都是存储的key-value的值，可以通过key快速索引到value。不同的是unordered_map不会根据key的大小进行排序，存储时是根据key的hash值判断元素是否相同，即unordered_map内部元素是无序的。unordered_map的底层是一个防冗余的哈希表（开链法避免地址冲突）。unordered_map的key需要定义hash_value函数并且重载operator &#x3D;&#x3D;。</p><p>哈希表最大的优点，就是把数据的存储和查找消耗的时间大大降低，时间复杂度为O(1)；而代价仅仅是消耗比较多的内存。哈希表的查询时间虽然是O(1)，但是并不是unordered_map查询时间一定比map短，因为实际情况中还要考虑到数据量，而且unordered_map的hash函数的构造速度也没那么快，所以不能一概而论，应该具体情况具体分析。</p><p>unordered_map的基本操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">unordered_map&lt;string, <span class="type">int</span>&gt;  dict; <span class="comment">// 声明unordered_map对象</span></span><br><span class="line"><span class="comment">// 插入数据的三种方式</span></span><br><span class="line">dict.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string,<span class="type">int</span>&gt;(<span class="string">&quot;apple&quot;</span>,<span class="number">2</span>));</span><br><span class="line">dict.<span class="built_in">insert</span>(unordered_map&lt;string, <span class="type">int</span>&gt;::<span class="built_in">value_type</span>(<span class="string">&quot;orange&quot;</span>,<span class="number">3</span>));</span><br><span class="line">dict[<span class="string">&quot;banana&quot;</span>] = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否有元素</span></span><br><span class="line"><span class="keyword">if</span>(dict.<span class="built_in">empty</span>())</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;该字典无元素&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;该字典共有&quot;</span>&lt;&lt;dict.<span class="built_in">size</span>()&lt;&lt;<span class="string">&quot;个元素&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line">unordered_map&lt;string, <span class="type">int</span>&gt;::iterator iter;</span><br><span class="line"><span class="keyword">for</span>(iter=dict.<span class="built_in">begin</span>();iter!=dict.<span class="built_in">end</span>();iter++)</span><br><span class="line">cout&lt;&lt;iter-&gt;first&lt;&lt;ends&lt;&lt;iter-&gt;second&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找</span></span><br><span class="line"><span class="keyword">if</span>(dict.<span class="built_in">count</span>(<span class="string">&quot;boluo&quot;</span>)==<span class="number">0</span>)</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;can&#x27;t find boluo!&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;find boluo!&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((iter=dict.<span class="built_in">find</span>(<span class="string">&quot;banana&quot;</span>))!=dict.<span class="built_in">end</span>())</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;banana=&quot;</span>&lt;&lt;iter-&gt;second&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;can&#x27;t find boluo!&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>unordered_map用到自定义的类型，需要对key定义hash_value函数并且重载operator &#x3D;&#x3D;，具体用法请参考文献3（有空再来补个示例）。</p><p>参考文献</p><ol><li><a href="http://www.cnblogs.com/NeilZhang/p/5724996.html">C++11 新特性： unordered_map 与 map 的对比</a></li></ol><p>2.<a href="https://blog.csdn.net/u011475134/article/details/75810085">C++ STL之map与unordered_map</a></p><p>3.<a href="https://blog.csdn.net/happykocola/article/details/74188452">std::unordered_map（提供自己的Hash函数和等价准则）</a></p><p>4.<a href="https://blog.csdn.net/jingyi130705008/article/details/82633778">https://blog.csdn.net/jingyi130705008/article/details/82633778</a></p>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> map和unordered_map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于最大值最小值的定义</title>
      <link href="/2023/04/15/%E5%85%B3%E4%BA%8E%E6%9C%80%E5%A4%A7%E5%80%BC%E6%9C%80%E5%B0%8F%E5%80%BC%E7%9A%84%E5%AE%9A%E4%B9%89/"/>
      <url>/2023/04/15/%E5%85%B3%E4%BA%8E%E6%9C%80%E5%A4%A7%E5%80%BC%E6%9C%80%E5%B0%8F%E5%80%BC%E7%9A%84%E5%AE%9A%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<h4 id="最大值"><a href="#最大值" class="headerlink" title="最大值"></a>最大值</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int result = INT32_MAX;</span><br></pre></td></tr></table></figure><p>最近在刷Leetcode的一些题的时候，发现经常会使用到最大值。<br>Xcode告诉我这个值在limits.h中<br>老版本的limit.h可能还会有NC++</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define INT_MAX   2147483647</span><br></pre></td></tr></table></figure><p>但是现在新的版本已经是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define INT_MAX   __INT_MAX__</span><br></pre></td></tr></table></figure><p>同样的 INT_MIN 、 LONG_MAX 等等数值都会有相应的定义。</p><h4 id="最小值"><a href="#最小值" class="headerlink" title="最小值"></a>最小值</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int result = INT32_MIN </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INT32_MAX</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++最大值 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>209. 长度最小的子数组-滑动窗口</title>
      <link href="/2023/04/14/209.-%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
      <url>/2023/04/14/209.-%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/">209. 长度最小的子数组</a></p><p>暴力o(n^2)超时呵呵呵，不是能做出来就好了吗啊吧啊吧。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line">    <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&amp; nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> sum;</span><br><span class="line">        <span class="type">int</span> min=<span class="number">100000</span>;</span><br><span class="line">        <span class="type">int</span> count;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)&#123;</span><br><span class="line">            sum=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j = i;j&lt;nums.size();j++)&#123;</span><br><span class="line">                    sum+=nums[j];</span><br><span class="line">                    <span class="keyword">if</span>(sum&gt;=target)&#123;</span><br><span class="line">                        count=j-i+<span class="number">1</span>;</span><br><span class="line">                        min=min&lt;count?min:count;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(min&gt;nums.size()) min=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>滑动窗口</p><p>思路是先让</p><p><code>sum+nums[j]</code></p><p>当<code>sum&gt;=target</code>的时候</p><p>算出子数组长度subL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```while```循环```nums[i++]```一直减到它```&lt;target```退出```while```</span><br><span class="line"></span><br><span class="line">用result记录min的subL</span><br><span class="line"></span><br><span class="line">然后再次大循环从nums[j+1]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```c</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int minSubArrayLen(int target, vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">    int i=0;</span><br><span class="line">    int subL=0;</span><br><span class="line">    int sum=0;</span><br><span class="line">    int result=INT_MAX;</span><br><span class="line">    for(int j =0;j&lt;nums.size();j++)&#123;</span><br><span class="line">        sum+=nums[j];</span><br><span class="line">        while(sum&gt;=target)&#123;</span><br><span class="line">            subL=j-i+1;</span><br><span class="line">            sum-=nums[i];</span><br><span class="line">            result=min(result,subL);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return result==INT_MAX ? 0 : result;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如何理解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return result==INT_MAX ? 0 : result;</span><br></pre></td></tr></table></figure><p>当result&#x3D;&#x3D;INT_MAX时候</p><p>是 返回0</p><p>否 返回result </p><p>如何理解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = result &lt; subLength ? result : subLength;</span><br></pre></td></tr></table></figure><p>当result&lt;subL的时候</p><p>是 返回result</p><p>否 返回subL</p>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 滑动窗口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双指针法-977. 有序数组的平方</title>
      <link href="/2023/04/14/%E5%8F%8C%E6%8C%87%E9%92%88-977%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9/"/>
      <url>/2023/04/14/%E5%8F%8C%E6%8C%87%E9%92%88-977%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/">977. 有序数组的平方</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; <span class="title function_">sortedSquares</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&amp; nums)</span> &#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; <span class="title function_">result</span><span class="params">(nums.size(),<span class="number">0</span>)</span>;</span><br><span class="line">    <span class="type">int</span> k=nums.size()<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=nums.size()<span class="number">-1</span>;i&lt;=j;)&#123;  <span class="comment">// 注意i&lt;=j</span></span><br><span class="line">        <span class="keyword">if</span>(nums[i]*nums[i]&lt;nums[j]*nums[j])&#123;</span><br><span class="line">            result[k--]=nums[j]*nums[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(nums[i]*nums[i]&gt;=nums[j]*nums[j])&#123;</span><br><span class="line">            result[k--]=nums[i]*nums[i];</span><br><span class="line">            i++;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双指针法---844.比较含退格的字符串</title>
      <link href="/2023/04/13/%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95---844.%E6%AF%94%E8%BE%83%E5%90%AB%E9%80%80%E6%A0%BC%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2023/04/13/%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95---844.%E6%AF%94%E8%BE%83%E5%90%AB%E9%80%80%E6%A0%BC%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h4 id="844-比较含退格的字符串"><a href="#844-比较含退格的字符串" class="headerlink" title="844. 比较含退格的字符串"></a><a href="https://leetcode.cn/problems/backspace-string-compare/">844. 比较含退格的字符串</a></h4><p>我没看懂怎么用双指针，用栈吧（阿巴阿巴阿巴，傻子流口水）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line">    <span class="type">bool</span> <span class="title function_">backspaceCompare</span><span class="params">(<span class="built_in">string</span> S, <span class="built_in">string</span> T)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> build(S) == build(T);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> <span class="title function_">build</span><span class="params">(<span class="built_in">string</span> str)</span> &#123;</span><br><span class="line">        <span class="built_in">string</span> ret;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> ch : str) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ch != <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">                ret.push_back(ch);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!ret.empty()) &#123;</span><br><span class="line">                ret.pop_back();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双指针法---283. 移动零</title>
      <link href="/2023/04/13/%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95---283.-%E7%A7%BB%E5%8A%A8%E9%9B%B6/"/>
      <url>/2023/04/13/%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95---283.-%E7%A7%BB%E5%8A%A8%E9%9B%B6/</url>
      
        <content type="html"><![CDATA[<h4 id="283-移动零"><a href="#283-移动零" class="headerlink" title="283. 移动零"></a><a href="https://leetcode.cn/problems/move-zeroes/">283. 移动零</a></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">moveZeroes</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize)</span>&#123;</span><br><span class="line">        <span class="type">int</span> target=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> slow=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> fast;</span><br><span class="line">        <span class="keyword">for</span>(fast=<span class="number">0</span>;fast&lt;numsSize;fast++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast]!=target)&#123;</span><br><span class="line">                nums[slow]=nums[fast];</span><br><span class="line">                slow++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>(i=slow;i&lt;numsSize;i++)&#123;</span><br><span class="line">            nums[i]=target;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在后面一个for那边卡了，不敢写（因为用了两个for）时间复杂度大不敢了</p>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双指针法---26. 删除有序数组中的重复项</title>
      <link href="/2023/04/12/%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95---26.-%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/"/>
      <url>/2023/04/12/%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95---26.-%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/">26. 删除有序数组中的重复项</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">removeDuplicates</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize)</span>&#123;</span><br><span class="line">    <span class="type">int</span> slow=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> fast;</span><br><span class="line">    <span class="keyword">for</span>(fast=<span class="number">0</span>;fast&lt;numsSize;fast++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[slow]!=nums[fast])&#123;</span><br><span class="line">            slow++;</span><br><span class="line">            nums[slow]=nums[fast];           </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/1.gif" alt="IMG_0057"></p>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双指针法---27.移除元素</title>
      <link href="/2023/04/12/%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95---%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/"/>
      <url>/2023/04/12/%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95---%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/remove-element/">27. 移除元素</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> val)</span>&#123;</span><br><span class="line">        <span class="type">int</span> slow=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>( <span class="type">int</span> fast=<span class="number">0</span>;fast&lt;numsSize;fast++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast]!=val)&#123;</span><br><span class="line">                nums[slow]=nums[fast];</span><br><span class="line">                slow++;</span><br><span class="line">            &#125;</span><br><span class="line">   </span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反而比暴力慢</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> nums2[<span class="number">100</span>];</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>( i =<span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i]==val)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>;j &lt; numsSize;j++)&#123;</span><br><span class="line">                    nums[j<span class="number">-1</span>]=nums[j];</span><br><span class="line">                &#125; </span><br><span class="line">                         numsSize--;</span><br><span class="line">            i--;</span><br><span class="line">            &#125;</span><br><span class="line">   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> numsSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双指针法</title>
      <link href="/2023/04/12/%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95/"/>
      <url>/2023/04/12/%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/27.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0-%E6%9A%B4%E5%8A%9B%E8%A7%A3%E6%B3%95.gif" alt="IMG_0057"></p><p>双指针法（快慢指针法）： <strong>通过一个快指针和慢指针在一个for循环下完成两个for循环的工作。</strong></p><p>定义快慢指针</p><ul><li>快指针：寻找新数组的元素 ，新数组就是不含有目标元素的数组</li><li>慢指针：指向更新 新数组下标的位置</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">slow=<span class="number">0</span>;</span><br><span class="line">val=<span class="number">3</span></span><br><span class="line">nums[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> fast=<span class="number">0</span>;fast&lt;size;fast++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums[fast]!=val)&#123; <span class="comment">//当【fast】的不等于val的值的时候</span></span><br><span class="line">    nums[slow]=nums[fast];    <span class="comment">// slow是下标  fast是数组元素</span></span><br><span class="line">        slow++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> slow;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 相向双指针方法，基于元素顺序可以改变的题目描述改变了元素相对位置，确保了移动最少元素</span></span><br><span class="line"><span class="comment">* 时间复杂度：O(n)</span></span><br><span class="line"><span class="comment">* 空间复杂度：O(1)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line">    <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">int</span> leftIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> rightIndex = nums.size() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (leftIndex &lt;= rightIndex) &#123;</span><br><span class="line">            <span class="comment">// 找左边等于val的元素</span></span><br><span class="line">            <span class="keyword">while</span> (leftIndex &lt;= rightIndex &amp;&amp; nums[leftIndex] == val)&#123;</span><br><span class="line">                ++leftIndex;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 找右边不等于val的元素</span></span><br><span class="line">            <span class="keyword">while</span> (leftIndex &lt;= rightIndex &amp;&amp; nums[rightIndex] != val) &#123;</span><br><span class="line">                -- rightIndex;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将右边不等于val的元素覆盖左边等于val的元素</span></span><br><span class="line">            <span class="keyword">if</span> (leftIndex &lt; rightIndex) &#123;</span><br><span class="line">                nums[leftIndex++] = nums[rightIndex--];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> leftIndex;   <span class="comment">// leftIndex一定指向了最终数组末尾的下一个元素</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vector容器删除元素的几种简单方法</title>
      <link href="/2023/04/12/vector%E5%AE%B9%E5%99%A8%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0%E7%9A%84%E5%87%A0%E7%A7%8D%E7%AE%80%E5%8D%95%E6%96%B9%E6%B3%95/"/>
      <url>/2023/04/12/vector%E5%AE%B9%E5%99%A8%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0%E7%9A%84%E5%87%A0%E7%A7%8D%E7%AE%80%E5%8D%95%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h4 id="一、直接删除法"><a href="#一、直接删除法" class="headerlink" title="一、直接删除法"></a>一、直接删除法</h4><h5 id="（1）使用-vector库函数“erase”删除，使用erase函数后容器size自动-1"><a href="#（1）使用-vector库函数“erase”删除，使用erase函数后容器size自动-1" class="headerlink" title="（1）使用 vector库函数“erase”删除，使用erase函数后容器size自动-1"></a>（1）使用 vector库函数“erase”删除，使用erase函数后容器size自动-1</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> detarget)</span> &#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(nums[i] == detarget)&#123;</span><br><span class="line">               nums.erase(nums.begin() + i); </span><br><span class="line">               i--; <span class="comment">//由于容器size-1，还按原来的i的话相当于自动右移一位而漏掉一个元素</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> nums.size();      </span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> detarget)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(nums[i] == detarget)&#123;</span><br><span class="line">nums.erase(nums.begin() + i);</span><br><span class="line">i--; <span class="comment">//由于容器size-1，还按原``来的i的话相当于自动右移一位而漏掉一个元素</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> nums.size();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; nums ;</span><br><span class="line">    nums.push_back(<span class="number">3</span>);</span><br><span class="line">nums.push_back(<span class="number">2</span>);</span><br><span class="line">nums.push_back(<span class="number">2</span>);</span><br><span class="line">nums.push_back(<span class="number">3</span>);</span><br><span class="line">    <span class="type">int</span> detarget = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> len = removeElement(nums, detarget);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;After removing &quot;</span> &lt;&lt; detarget &lt;&lt; <span class="string">&quot;, the length of nums is &quot;</span> &lt;&lt; len &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; nums[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="（2）使用-vector库函数“swap和pop-back-”-由于pop-back删除的是最后一个元素，所以先移位再删除"><a href="#（2）使用-vector库函数“swap和pop-back-”-由于pop-back删除的是最后一个元素，所以先移位再删除" class="headerlink" title="（2）使用 vector库函数“swap和pop_back()”,由于pop_back删除的是最后一个元素，所以先移位再删除"></a>（2）使用 vector库函数“swap和pop_back()”,由于pop_back删除的是最后一个元素，所以先移位再删除</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> detarget)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] == detarget)&#123;   </span><br><span class="line">                swap(nums[i], nums[nums.size() - <span class="number">1</span>]); <span class="comment">//将要删除的元素交换到最后</span></span><br><span class="line">                nums.pop_back(); </span><br><span class="line">                i--; <span class="comment">//这里的i--与上面的作用一样</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums.size();      </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="二、遍历覆盖法"><a href="#二、遍历覆盖法" class="headerlink" title="二、遍历覆盖法"></a>二、遍历覆盖法</h4><p>如果从数组的角度理解，因为数组存储的内容在地址上是连续的，要移除目标元素，就没有库函数可以使用，那就需要对其他元素进行处理，进行覆盖和前移，比较暴力的思路是发现目标元素后，将后面的所有元素都前移覆盖原来的元素，这种方法需要两个for循环，时间复杂度为O(n2),这里不详细讲这种写法。<br>从覆盖的角度思考，我们可以通过一次遍历把非目标元素全部前移覆盖到前半部片</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> detarget)</span> &#123;</span><br><span class="line">         <span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> x : nums)  <span class="comment">//遍历全部元素</span></span><br><span class="line">            <span class="keyword">if</span>(x != detarget)  nums[size++] = x;<span class="comment">//如果不是要删除的目标元素，把它前移覆盖到前半部分</span></span><br><span class="line">        <span class="keyword">return</span> size;  <span class="comment">//这里的size即为删除后的容量大小</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//暴力</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> val)</span>&#123;</span><br><span class="line">        <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> nums2[<span class="number">100</span>];</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>( i =<span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i]==val)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>;j &lt; numsSize;j++)&#123;</span><br><span class="line">                    nums[j<span class="number">-1</span>]=nums[j];</span><br><span class="line">                &#125; </span><br><span class="line">            numsSize--;</span><br><span class="line">            i--;</span><br><span class="line">            &#125;</span><br><span class="line">   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> numsSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三、相向双指针法"><a href="#三、相向双指针法" class="headerlink" title="三、相向双指针法"></a>三、相向双指针法</h4><h5 id="1-使用vector库函数swap，通过有两个指针和一个for循环将所有元素分为两个部分"><a href="#1-使用vector库函数swap，通过有两个指针和一个for循环将所有元素分为两个部分" class="headerlink" title="(1)使用vector库函数swap，通过有两个指针和一个for循环将所有元素分为两个部分,"></a>(1)使用vector库函数swap，通过有两个指针和一个for循环将所有元素分为两个部分,</h5><p>左端的指针（快指针）控制前半部分的边界，swap后前半部分全部是要保留的元素<br>右端的指针（慢指针）控制后半部分的边界，swap后后半部分全部是要删除的元素</p><p>&#x2F;&#x2F;时间复杂度：O（n)<br>&#x2F;&#x2F;空间复杂度：O（1）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> detarget)</span> &#123;</span><br><span class="line">       <span class="type">int</span> j = nums.size() - <span class="number">1</span>; </span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= j; i++) &#123;</span><br><span class="line">           <span class="keyword">if</span> (nums[i] == detarget) &#123;  </span><br><span class="line">               swap(nums[i--], nums[j--]); <span class="comment">//注意这里的i--，j--，代表先交换再移动，而不是先移动再交换</span></span><br><span class="line">               <span class="comment">//i--的原因：如果发生交换的两个元素全是要删除的目标元素，这样不会把换过来的漏删</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> j + <span class="number">1</span>; <span class="comment">//j+1就是删除完的size大小</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>ps：上面几种方法只给出了核心算法的代码，具体问题做出相应改动即可</p>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vector容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-12-2023</title>
      <link href="/2023/04/12/4-12-2023/"/>
      <url>/2023/04/12/4-12-2023/</url>
      
        <content type="html"><![CDATA[<ol><li></li></ol><div ><img src="\images\dayliy_image\4.12.jpg" alt="drawing" width="200" /></div><p>2.打卡<img src="/images/dayliy_image/leetcode1.png" alt="1681285904280"></p><p>3.洛谷先mark一下之前的题目数量，vjudge就不去刷了。</p><p><img src="/images/dayliy_image/luogu1.png" alt="1681286036053"></p><p>Conclusion:一天2h打题目太少了</p><p>4.数学放缓(等张宇来了过第三遍一二章（发疯）理出思维导图)</p><p>改良计划:</p><p>①下午没课就看数学，看到5.吃饭，吃完回来继续数学，到7.30。</p><p>②看英语文章1h（尝试了一下，有难度的文章1h够呛）</p><p>③刷题到11.00</p><p>④回去床上背单词（当然课上不困最好课上干掉）</p><p>⑤最近沉迷策门有所懈怠（双手合十）（低头认错）</p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> casual_talk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>memset函数</title>
      <link href="/2023/04/11/memset%E5%87%BD%E6%95%B0/"/>
      <url>/2023/04/11/memset%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>memset简介<br>memset是一个初始化函数，作用是将某一块内存中的全部设置为指定的值。</p><p><code>void *memset(void *s, int c, size_t n); </code></p><p>s指向要填充的内存块。<br>c是要被设置的值。<br>n是要被设置该值的字符数。<br>返回类型是一个指向存储区s的指针。</p><hr><p>需要说明的几个地方</p><h5 id="一、不能任意赋值"><a href="#一、不能任意赋值" class="headerlink" title="一、不能任意赋值"></a>一、不能任意赋值</h5><p>memset函数是按照字节对内存块进行初始化，所以不能用它将int数组出初始化为0和-1之外的其他值（除非该值高字节和低字节相同）。<br>其实c的实际范围应该在0~255，因为memset函数只能取c的后八位给所输入范围的每个字节。也就是说无论c多大只有后八位二进制是有效的。</p><p>对于int a[4];<br>memset(a, -1, sizeof(a)) 与 memset(a, 511, sizeof(a)) 所赋值的结果一样都为-1：<br>因为 -1 的二进制码为（11111111 11111111 11111111 11111111）；511 的二进制码为（00000000 00000000 00000001 11111111）；<br>后八位均为（11111111），所以数组中的每个字节都被赋值为（11111111）。<br>注意int占四个字节，例如a[0]的四个字节都被赋值为（11111111），那么a[0]（11111111 11111111 11111111 11111111），即a[0] &#x3D; -1。</p><h5 id="二、注意所要赋值的数组的元素类型"><a href="#二、注意所要赋值的数组的元素类型" class="headerlink" title="二、注意所要赋值的数组的元素类型"></a>二、注意所要赋值的数组的元素类型</h5><p>先来看两个例子：<br>例一：对char类型的数组a初始化，设置元素全为’1’</p><figure class="highlight plaintext"><figcaption><span>main()&#123;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    char a[4];</span><br><span class="line">    memset(a,&#x27;1&#x27;,4);</span><br><span class="line">    for(int i=0; i&lt;4; i++)&#123;</span><br><span class="line">        cout&lt;&lt;a[i]&lt;&lt;&quot; &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例二：对int类型的数组a初始化，设置元素值全为1</p><figure class="highlight plaintext"><figcaption><span>main()&#123;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    int a[4];</span><br><span class="line">    memset(a,1,sizeof(a));</span><br><span class="line">    for(int i=0; i&lt;4; i++)&#123;</span><br><span class="line">        cout&lt;&lt;a[i]&lt;&lt;&quot; &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="1、首先要说明的第一点"><a href="#1、首先要说明的第一点" class="headerlink" title="1、首先要说明的第一点"></a>1、首先要说明的第一点</h6><p> 对于第二个程序，数组a是整型的，一般int所占内存空间为4个字节，所以在使用memset赋值时，下面的语句是错误的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int a[4];</span><br><span class="line">memset(a,1,4);</span><br></pre></td></tr></table></figure><p>由于memset函数是以字节为单位进行赋值的，所以上述代码是为数组a的前4个字节进行赋值，那么所得到的执行结果就只能是：</p><p>正确的memset语句应为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">memset(a,1,16); //int所占内存为4字节的情况</span><br><span class="line">memset(a,1,sizeof(a));</span><br></pre></td></tr></table></figure><p>至于为什么不是预期得到的1，将在下面的第二点进行说明。</p><p>当然，不同的机器上int的大小可能不同，所以最好用sizeof()函数。</p><h6 id="2、为什么第一个程序可以正确赋值1而第二个不可以？"><a href="#2、为什么第一个程序可以正确赋值1而第二个不可以？" class="headerlink" title="2、为什么第一个程序可以正确赋值1而第二个不可以？"></a>2、为什么第一个程序可以正确赋值1而第二个不可以？</h6><p>这就又回到了刚刚说的第一个问题，memset函数中只能取c的后八位赋给每个字节。</p><p>第一个程序中，数组a是字符型的，字符型占据的内存大小就是1Byte，而memset函数也是以字节为单位进行赋值的，所以输出正确。<br>第二个程序中，数组a是整型的，整型占据的内存大小为4Byte，而memset函数还是按照字节为单位进行赋值，将1（00000001）赋给每一个字节。那么对于a[0]来说，其值为(00000001 00000001 00000001 00000001），即十进制的16843009。</p><p>关于所要赋值的字符数的写法<br>先来看一个示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void fun1(int a[])&#123;</span><br><span class="line">    memset(a,-1,sizeof(a)); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    int a[6];</span><br><span class="line">    fun1(a);</span><br><span class="line">    for(int i=0; i&lt;6; i++)&#123;</span><br><span class="line">        cout&lt;&lt;a[i]&lt;&lt;&quot; &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">当数组作为参数传递时，其传递的实际上是一个指针，这个指针指向数组的首地址，如果用sizeof(a)函数得到的只是指针的长度，而不是数组的长度。</span><br></pre></td></tr></table></figure><p>解决方案：<br>在函数中加入数组长度参数，在传递前先获取数组长度，然后将数组长度作为参数传递进去。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void fun1(int a[], int len)&#123;</span><br><span class="line">    memset(a,-1,len); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    int a[6];</span><br><span class="line">    int len = sizeof(a);</span><br><span class="line">    fun1(a,len);</span><br><span class="line">    for(int i=0; i&lt;6; i++)&#123;</span><br><span class="line">        cout&lt;&lt;a[i]&lt;&lt;&quot; &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体用法实例<br>初始化数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">char str[100];</span><br><span class="line">memset(str,0,100);</span><br><span class="line">清空结构体类型的变量</span><br><span class="line">typedef struct Stu&#123;</span><br><span class="line">char name[20];</span><br><span class="line">int cno;</span><br><span class="line">&#125;Stu;</span><br><span class="line">Stu stu1; </span><br><span class="line">memset(&amp;stu1, 0 ,sizeof(Stu));</span><br><span class="line">Stu stu2[10]; //数组</span><br><span class="line">memset(stu2, 0, sizeof(Stu)*10);</span><br></pre></td></tr></table></figure><p>此外，如果结构体中有数组的话还是需要对数组单独进行初始化处理的。</p>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> memset函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>367. 有效的完全平方数</title>
      <link href="/2023/04/11/367.-%E6%9C%89%E6%95%88%E7%9A%84%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0/"/>
      <url>/2023/04/11/367.-%E6%9C%89%E6%95%88%E7%9A%84%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/valid-perfect-square/">367. 有效的完全平方数</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">isPerfectSquare</span><span class="params">(<span class="type">int</span> num)</span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> left=<span class="number">1</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> right=num;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> middle;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> temp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">        middle=(left+right)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(middle*middle&lt;=num)&#123;</span><br><span class="line">            <span class="keyword">if</span>(middle*middle==num)&#123;</span><br><span class="line">                temp=middle;</span><br><span class="line">            &#125;</span><br><span class="line">            left=middle+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(middle*middle&gt;num)&#123;</span><br><span class="line">            right=middle<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(temp==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>69.x的平方根</title>
      <link href="/2023/04/11/69.x%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9/"/>
      <url>/2023/04/11/69.x%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/sqrtx/">69. x 的平方根 </a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">mySqrt</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> temp;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> left = <span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> right = x;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> middle;</span><br><span class="line">        <span class="keyword">if</span> (x==<span class="number">0</span>)temp=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (x==<span class="number">1</span>) temp=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x!=<span class="number">0</span>&amp;&amp;x!=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            middle=(left+right)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(middle&lt;=x/middle)&#123;</span><br><span class="line">                temp=middle;</span><br><span class="line">                left=middle+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(middle&gt;x/middle)&#123;</span><br><span class="line">                right=middle<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> temp;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="comment">//vector&lt;int&gt; x; </span></span><br><span class="line"><span class="comment">//for(int i=0;i&lt;n;i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//x.push_back(i);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="type">int</span> left=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> right=n;</span><br><span class="line"><span class="type">int</span> middle;</span><br><span class="line"><span class="comment">//int target=2;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">middle=(left+right)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(middle&gt;n/middle)&#123;</span><br><span class="line">right=middle<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(middle&lt;=n/middle)&#123;  <span class="comment">//middle^2&lt;n </span></span><br><span class="line">temp=middle;    <span class="comment">//因为2^2&lt;8&lt;2^3  所以直接取这边的middle </span></span><br><span class="line">left=middle+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    cout&lt;&lt;temp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>35. 搜索插入位置</title>
      <link href="/2023/04/10/35.-%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/"/>
      <url>/2023/04/10/35.-%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/search-insert-position/">35. 搜索插入位置</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line">    <span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">            <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> right=nums.size()<span class="number">-1</span>;</span><br><span class="line">            <span class="type">int</span> middle;</span><br><span class="line">            <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">                middle=(left+right)/<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span> (nums[middle]&gt;target)&#123;</span><br><span class="line">                    right=middle<span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (nums[middle]&lt;target)&#123;</span><br><span class="line">                    left=middle+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> middle;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> right+<span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>binary_search &amp;lower_bound &amp;upper_bound</title>
      <link href="/2023/04/10/binary_search-&amp;lower_bound-&amp;upper_bound/"/>
      <url>/2023/04/10/binary_search-&amp;lower_bound-&amp;upper_bound/</url>
      
        <content type="html"><![CDATA[<p>使用方法：</p><h1 id="1-binary-search-查找某个元素是否出现"><a href="#1-binary-search-查找某个元素是否出现" class="headerlink" title="1.binary_search:查找某个元素是否出现"></a>1.binary_search:查找某个元素是否出现</h1><h5 id="a-函数模板："><a href="#a-函数模板：" class="headerlink" title="a.函数模板："></a>a.函数模板：</h5><p>binary_search(arr[],arr[]+size,indx)</p><h5 id="b-参数说明："><a href="#b-参数说明：" class="headerlink" title="b.参数说明："></a>b.参数说明：</h5><p>arr[]:数组首地址<br>size:数组元素个数<br>indx：需要查找的值</p><h5 id="c-函数功能："><a href="#c-函数功能：" class="headerlink" title="c.函数功能："></a>c.函数功能：</h5><p>在数组中以二分法检索的方式查找，若在数组中查找到indx元素则真，若查找不到则返回值是假</p><h1 id="2-lower-bound-查找第一个大于或等于某个元素的位置"><a href="#2-lower-bound-查找第一个大于或等于某个元素的位置" class="headerlink" title="2.lower_bound:查找第一个大于或等于某个元素的位置"></a>2.lower_bound:查找第一个大于或等于某个元素的位置</h1><h5 id="a-函数模板：-1"><a href="#a-函数模板：-1" class="headerlink" title="a.函数模板："></a>a.函数模板：</h5><p>lower_bound(arr[],arr[]+size,indx)</p><h5 id="b-参数说明：-1"><a href="#b-参数说明：-1" class="headerlink" title="b.参数说明："></a>b.参数说明：</h5><p>arr[] : 数组首地址<br>size : 数组元素的个数<br>indx : 需要查找的值</p><h5 id="c-函数功能：-1"><a href="#c-函数功能：-1" class="headerlink" title="c.函数功能："></a>c.函数功能：</h5><p>函数lower_bound()在first和last的前闭后开区间进行二分查找，返回大于或等于val的第一个元素的位置，如果所有元素都小于val，则返回last的位置。<br>举例：<br>一个数组number序列为：4,10,11,30,69,70,96,100.设要插入数字3,9,111.pos为要插入的位置的下标，则<br>　<em>注意因为返回值是一个指针，所以减去数组的指针就是int变量了</em><br>　　pos &#x3D; lower_bound( number, number + 8, 3) - number，pos &#x3D; 0.即number数组的下标为0的位置。<br>　　pos &#x3D; lower_bound( number, number + 8, 9) - number， pos &#x3D; 1，即number数组的下标为1的位置（即10所在的位置）。<br>　　pos &#x3D; lower_bound( number, number + 8, 111) - number， pos &#x3D; 8，即number数组的下标为8的位置（但下标上限为7，所以返回最后一个元素的下一个元素）。<br>e.注意：函数lower_bound()在first和last中的前闭后开区间进行二分查找，返回大于或等于val的第一个元素位置。如果所有元素都小于val，则返回last的位置，且last的位置是越界的！</p><p>返回查找元素的第一个可安插位置，也就是“元素值&gt;&#x3D;查找值”的第一个元素的位置</p><h1 id="3-upper-bound-查找第一个大于某个元素的位置"><a href="#3-upper-bound-查找第一个大于某个元素的位置" class="headerlink" title="3.upper_bound : 查找第一个大于某个元素的位置"></a>3.upper_bound : 查找第一个大于某个元素的位置</h1><h5 id="a-函数模板-upper-bound-arr-arr-size-indx"><a href="#a-函数模板-upper-bound-arr-arr-size-indx" class="headerlink" title="a. 函数模板 : upper_bound(arr[] , arr[]+size , indx)"></a>a. 函数模板 : upper_bound(arr[] , arr[]+size , indx)</h5><h5 id="b-参数说明：-2"><a href="#b-参数说明：-2" class="headerlink" title="b. 参数说明："></a>b. 参数说明：</h5><p>arr[] : 数组首地址<br>size : 数组元素个数<br>indx : 需要查找的值</p><h5 id="c-函数功能"><a href="#c-函数功能" class="headerlink" title="c. 函数功能 :"></a>c. 函数功能 :</h5><p> 函数upper_bound()返回的在前闭后开区间查找的关键字的上界，返回大于val的第一个元素位置<br>　　例如：一个数组number序列1,2,2,4.upper_bound(2)后，返回的位置是3（下标）也就是4所在的位置,同样，如果插入元素大于数组中全部元素，返回的是last。(注意：数组下标越界)<br>　　返回查找元素的最后一个可安插位置，也就是“元素值&gt;查找值”的第一个元素的位置 。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">int</span> a[<span class="number">100</span>]= &#123;<span class="number">5</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">30</span>,<span class="number">69</span>,<span class="number">70</span>,<span class="number">96</span>,<span class="number">100</span>&#125;;</span><br><span class="line">   <span class="type">int</span> b=binary_search(a,a+<span class="number">9</span>,<span class="number">5</span>);<span class="comment">//查找成功，返回1</span></span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;在数组中查找元素5，结果为：&quot;</span>&lt;&lt;b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   <span class="type">int</span> c=binary_search(a,a+<span class="number">9</span>,<span class="number">99</span>);<span class="comment">//查找失败，返回0</span></span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;在数组中查找元素99，结果为：&quot;</span>&lt;&lt;b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   <span class="type">int</span> d=lower_bound(a,a+<span class="number">9</span>,<span class="number">9</span>)-a;</span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;在数组中查找第一个大于等于9的元素位置，结果为：&quot;</span>&lt;&lt;d&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   <span class="type">int</span> e=lower_bound(a,a+<span class="number">9</span>,<span class="number">101</span>)-a;</span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;在数组中查找第一个大于等于101的元素位置，结果为：&quot;</span>&lt;&lt;e&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   <span class="type">int</span> f=upper_bound(a,a+<span class="number">9</span>,<span class="number">10</span>)-a;</span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;在数组中查找第一个大于10的元素位置，结果为：&quot;</span>&lt;&lt;f&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   <span class="type">int</span> g=upper_bound(a,a+<span class="number">9</span>,<span class="number">101</span>)-a;</span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;在数组中查找第一个大于101的元素位置，结果为：&quot;</span>&lt;&lt;g&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> search方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>704.二分查找</title>
      <link href="/2023/04/10/704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
      <url>/2023/04/10/704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/binary-search/">704. 二分查找</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            <span class="type">int</span> middle=(left+right)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[middle]&gt;target)&#123;</span><br><span class="line">                right=middle<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[middle]&lt;target)&#123;</span><br><span class="line">                left=middle+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> middle;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> target)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=numsSize<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            <span class="type">int</span> middle=(left+right)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[middle]&gt;target)&#123;</span><br><span class="line">                right=middle<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[middle]&lt;target)&#123;</span><br><span class="line">                left=middle+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> middle;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="type">int</span>&gt; nums;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="type">int</span> target;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;target;</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line"><span class="type">int</span> temp;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;temp;</span><br><span class="line">nums.push_back(temp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> right=nums.size()<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line"><span class="type">int</span> middle=(left+right)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(nums[middle]&gt;target)&#123;</span><br><span class="line">right=middle<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(nums[middle]&lt;target)&#123;</span><br><span class="line">left=middle+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;middle;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vector容器</title>
      <link href="/2023/04/10/vector%E5%AE%B9%E5%99%A8/"/>
      <url>/2023/04/10/vector%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1-vector："><a href="#1-vector：" class="headerlink" title="1. vector："></a>1. vector：</h2><h4 id="1-1-vector-说明"><a href="#1-1-vector-说明" class="headerlink" title="1.1 vector 说明"></a>1.1 vector 说明</h4><ul><li>vector是向量类型，可以容纳许多类型的数据，因此也被称为容器</li><li>(可以理解为动态数组，是封装好了的类）</li><li>进行<code>vector</code>操作前应添加头文件<code>#include &lt;vector&gt;</code></li></ul><h4 id="1-2-vector初始化："><a href="#1-2-vector初始化：" class="headerlink" title="1.2 vector初始化："></a>1.2 vector初始化：</h4><p><strong>方式1.</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义具有10个整型元素的向量（尖括号为元素类型名，它可以是任何合法的数据类型），不具有初值，其值不确定</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;a(<span class="number">10</span>);</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><p><strong>方式2.</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义具有10个整型元素的向量，且给出的每个元素初值为1</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;a(<span class="number">10</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><strong>方式3.</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用向量b给向量a赋值，a的值完全等价于b的值</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;a(b);</span><br></pre></td></tr></table></figure><p><strong>方式4</strong>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将向量b中从0-2（共三个）的元素赋值给a，a的类型为int型</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;a(b.begin(),b.begin+<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p><strong>方式5.</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//从数组中获得初值</span></span><br><span class="line"><span class="type">int</span> b[<span class="number">7</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; <span class="title function_">a</span><span class="params">(b,b+<span class="number">7</span>）;</span></span><br></pre></td></tr></table></figure><h4 id="1-3-vector对象的常用内置函数使用（举例说明）"><a href="#1-3-vector对象的常用内置函数使用（举例说明）" class="headerlink" title="1.3 vector对象的常用内置函数使用（举例说明）"></a>1.3 vector对象的常用内置函数使用（举例说明）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; a,b;</span><br><span class="line"><span class="comment">//b为向量，将b的0-2个元素赋值给向量a</span></span><br><span class="line">a.<span class="built_in">assign</span>(b.<span class="built_in">begin</span>(),b.<span class="built_in">begin</span>()+<span class="number">3</span>);</span><br><span class="line"><span class="comment">//a含有4个值为2的元素</span></span><br><span class="line">a.<span class="built_in">assign</span>(<span class="number">4</span>,<span class="number">2</span>);</span><br><span class="line"><span class="comment">//返回a的最后一个元素</span></span><br><span class="line">a.<span class="built_in">back</span>();</span><br><span class="line"><span class="comment">//返回a的第一个元素</span></span><br><span class="line">a.<span class="built_in">front</span>();</span><br><span class="line"><span class="comment">//返回a的第i元素,当且仅当a存在</span></span><br><span class="line">a[i];</span><br><span class="line"><span class="comment">//清空a中的元素</span></span><br><span class="line">a.<span class="built_in">clear</span>();</span><br><span class="line"><span class="comment">//判断a是否为空，空则返回true，非空则返回false</span></span><br><span class="line">a.<span class="built_in">empty</span>();</span><br><span class="line"><span class="comment">//删除a向量的最后一个元素</span></span><br><span class="line">a.<span class="built_in">pop_back</span>();</span><br><span class="line"><span class="comment">//删除a中第一个（从第0个算起）到第二个元素，也就是说删除的元素从a.begin()+1算起（包括它）一直到a.begin()+3（不包括它）结束</span></span><br><span class="line">a.<span class="built_in">erase</span>(a.<span class="built_in">begin</span>()+<span class="number">1</span>,a.<span class="built_in">begin</span>()+<span class="number">3</span>);</span><br><span class="line"><span class="comment">//在a的最后一个向量后插入一个元素，其值为5</span></span><br><span class="line">a.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line"><span class="comment">//在a的第一个元素（从第0个算起）位置插入数值5,</span></span><br><span class="line">a.<span class="built_in">insert</span>(a.<span class="built_in">begin</span>()+<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line"><span class="comment">//在a的第一个元素（从第0个算起）位置插入3个数，其值都为5</span></span><br><span class="line">a.<span class="built_in">insert</span>(a.<span class="built_in">begin</span>()+<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>);</span><br><span class="line"><span class="comment">//b为数组，在a的第一个元素（从第0个元素算起）的位置插入b的第三个元素到第5个元素（不包括b+6）</span></span><br><span class="line">a.<span class="built_in">insert</span>(a.<span class="built_in">begin</span>()+<span class="number">1</span>,b+<span class="number">3</span>,b+<span class="number">6</span>);</span><br><span class="line"><span class="comment">//返回a中元素的个数</span></span><br><span class="line">a.<span class="built_in">size</span>();</span><br><span class="line"><span class="comment">//返回a在内存中总共可以容纳的元素个数</span></span><br><span class="line">a.<span class="built_in">capacity</span>();</span><br><span class="line"><span class="comment">//将a的现有元素个数调整至10个，多则删，少则补，其值随机</span></span><br><span class="line">a.<span class="built_in">resize</span>(<span class="number">10</span>);</span><br><span class="line"><span class="comment">//将a的现有元素个数调整至10个，多则删，少则补，其值为2</span></span><br><span class="line">a.<span class="built_in">resize</span>(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line"><span class="comment">//将a的容量扩充至100，</span></span><br><span class="line">a.<span class="built_in">reserve</span>(<span class="number">100</span>);</span><br><span class="line"><span class="comment">//b为向量，将a中的元素和b中的元素整体交换</span></span><br><span class="line">a.<span class="built_in">swap</span>(b);</span><br><span class="line"><span class="comment">//b为向量，向量的比较操作还有 != &gt;= &gt; &lt;= &lt;</span></span><br><span class="line">a==b;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-顺序访问vector的几种方式，举例说明"><a href="#2-顺序访问vector的几种方式，举例说明" class="headerlink" title="2. 顺序访问vector的几种方式，举例说明"></a>2. 顺序访问vector的几种方式，举例说明</h2><h4 id="2-1-对向量a添加元素的几种方式"><a href="#2-1-对向量a添加元素的几种方式" class="headerlink" title="2.1. 对向量a添加元素的几种方式"></a>2.1. 对向量a添加元素的几种方式</h4><p>1.向向量a中添加元素</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt;a;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;++i)&#123;</span><br><span class="line">a.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.从数组中选择元素向向量中添加</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">6</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; b;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">4</span>;++i)</span><br><span class="line">&#123;b.<span class="built_in">push_back</span>(a[i]);&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.从现有向量中选择元素向向量中添加</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">6</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;b;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;c(a,a+<span class="number">4</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;::iterator it=c.begin();it&lt;c.end();++it)</span><br><span class="line">&#123;</span><br><span class="line">b.push_back(*it);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.从文件中读取元素向向量中添加</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ifstream <span class="title function_">in</span><span class="params">(<span class="string">&quot;data.txt&quot;</span>)</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;a;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i;in&gt;&gt;i)&#123;a.push_back(i);&#125;</span><br></pre></td></tr></table></figure><p><strong>5.常见错误赋值方式</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;a;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;++i)&#123;a[i]=i;&#125;<span class="comment">//下标只能用来获取已经存在的元素</span></span><br></pre></td></tr></table></figure><h4 id="2-2-从向量中读取元素"><a href="#2-2-从向量中读取元素" class="headerlink" title="2.2 从向量中读取元素"></a>2.2 从向量中读取元素</h4><p>1.通过下标方式获取</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">6</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;b(a,a+<span class="number">4</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=b.size()<span class="number">-1</span>;++i)&#123;<span class="built_in">cout</span>&lt;&lt;b[i]&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br></pre></td></tr></table></figure><p>2.通过迭代器方式读取</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">6</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;b(a,a+<span class="number">4</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;::iterator it=b.begin();it!=b.end();it++)&#123;<span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="string">&quot;  &quot;</span>;&#125;</span><br></pre></td></tr></table></figure><h2 id="3-几个常用的算法"><a href="#3-几个常用的算法" class="headerlink" title="3.几个常用的算法"></a>3.几个常用的算法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="comment">//对a中的从a.begin()（包括它）到a.end()（不包括它）的元素进行从小到大排列</span></span><br><span class="line"><span class="built_in">sort</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>());</span><br><span class="line"><span class="comment">//对a中的从a.begin()（包括它）到a.end()（不包括它）的元素倒置，但不排列，如a中元素为1,3,2,4,倒置后为4,2,3,1</span></span><br><span class="line"><span class="built_in">reverse</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>());</span><br><span class="line"> <span class="comment">//把a中的从a.begin()（包括它）到a.end()（不包括它）的元素复制到b中，从b.begin()+1的位置（包括它）开始复制，覆盖掉原有元素</span></span><br><span class="line"><span class="built_in">copy</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>(),b.<span class="built_in">begin</span>()+<span class="number">1</span>);</span><br><span class="line"><span class="comment">//在a中的从a.begin()（包括它）到a.end()（不包括它）的元素中查找10，若存在返回其在向量中的位置</span></span><br><span class="line"> <span class="built_in">find</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>(),<span class="number">10</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vector容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分查找解题思路以及归错</title>
      <link href="/2023/04/10/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF%E4%BB%A5%E5%8F%8A%E5%BD%92%E9%94%99/"/>
      <url>/2023/04/10/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF%E4%BB%A5%E5%8F%8A%E5%BD%92%E9%94%99/</url>
      
        <content type="html"><![CDATA[<h1 id="1-left-right"><a href="#1-left-right" class="headerlink" title="1.[left,right]"></a>1.[left,right]</h1><p><img src="E:\BLOG\blog1\source\images\代码随想录\1.png" alt="IMG_0057"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">left=<span class="number">0</span>;</span><br><span class="line">right=num.size()<span class="number">-1</span>;   <span class="comment">//-1是因为]的原因</span></span><br><span class="line"><span class="keyword">while</span>(left&lt;=right)    <span class="comment">//为什么= 因为[1,1]合法</span></span><br><span class="line">&#123;</span><br><span class="line">    middle=(left+right)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(num[middle]&gt;target)</span><br><span class="line">    &#123;</span><br><span class="line">        right=middle<span class="number">-1</span>; <span class="comment">//为什么是middle-1 因为&#x27;]&#x27;右区间去了闭，所以要减一避免重复</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(num[middle]&lt;target)&#123;</span><br><span class="line">        left=middle+<span class="number">1</span>;  <span class="comment">//为什么+1，和上面同理</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> middle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="E:\BLOG\blog1\source\images\代码随想录\2.png" alt="B4B0D0DA4054146C02000B88684BE541"></p><h1 id="2-left-right"><a href="#2-left-right" class="headerlink" title="2.[left,right)"></a>2.[left,right)</h1><p><img src="E:\BLOG\blog1\source\images\代码随想录\1.png" alt="IMG_0057"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">left=<span class="number">0</span>;</span><br><span class="line">right=num.size();   <span class="comment">//)的原因</span></span><br><span class="line"><span class="keyword">while</span>(left&lt;right)  <span class="comment">//为什么是&lt;,因为[),[1,1)开区间的取不到</span></span><br><span class="line">&#123;</span><br><span class="line"> middle=(left+right)/<span class="number">2</span>;</span><br><span class="line"> <span class="keyword">if</span> (num[middle]&gt;target)&#123;</span><br><span class="line"> right=middle;  <span class="comment">//为什么不加1，因为)开区间取不到</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span>(num[middle]&lt;target)&#123;</span><br><span class="line"> left=middle+<span class="number">1</span>;  <span class="comment">//闭区间取得到，所以+1</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span>&#123;</span><br><span class="line"> <span class="keyword">return</span> middle;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="E:\BLOG\blog1\source\images\代码随想录\2.png" alt="B4B0D0DA4054146C02000B88684BE541"></p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>模板题<a href="https://leetcode.cn/problems/binary-search/">704. 二分查找</a></p><p>其他：</p><p><a href="https://leetcode.cn/problems/search-insert-position/">35 搜索插入位置</a></p>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu安装hive，并配置mysql作为元数据库</title>
      <link href="/2023/04/07/Ubuntu%E5%AE%89%E8%A3%85hive%EF%BC%8C%E5%B9%B6%E9%85%8D%E7%BD%AEmysql%E4%BD%9C%E4%B8%BA%E5%85%83%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2023/04/07/Ubuntu%E5%AE%89%E8%A3%85hive%EF%BC%8C%E5%B9%B6%E9%85%8D%E7%BD%AEmysql%E4%BD%9C%E4%B8%BA%E5%85%83%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>hive是基于Hadoop的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供简单的sql查询功能，可以将sql语句转换为MapReduce任务进行运行。 其优点是学习成本低，可以通过类SQL语句快速实现简单的MapReduce统计，不必开发专门的MapReduce应用，十分适合数据仓库的统计分析。</p><h2 id="一、安装hive"><a href="#一、安装hive" class="headerlink" title="一、安装hive"></a>一、安装hive</h2><p><strong>1. 下载并解压hive源程序</strong></p><p><a href="http://www.apache.org/dyn/closer.cgi/hive/">Hive下载地址</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -zxvf ./apache-hive-1.2.1-bin.tar.gz -C /usr/local   # 解压到/usr/local中</span><br><span class="line">cd /usr/local/</span><br><span class="line">sudo mv apache-hive-1.2.1-bin hive       # 将文件夹名改为hive</span><br><span class="line">sudo chown -R dblab:dblab hive            # 修改文件权限</span><br></pre></td></tr></table></figure><p><strong>2. 配置环境变量</strong><br>为了方便使用，我们把hive命令加入到环境变量中去，编辑~&#x2F;.bashrc文件<code>vim ~/.bashrc</code>，在最前面一行添加:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export HIVE_HOME=/usr/local/hive</span><br><span class="line">export PATH=$PATH:$HIVE_HOME/bin</span><br></pre></td></tr></table></figure><p>保存退出后，运行<code>source ~/.bashrc</code>使配置立即生效。</p><p><strong>3. 修改&#x2F;usr&#x2F;local&#x2F;hive&#x2F;conf下的hive-site.xml</strong><br>将hive-default.xml.template重命名为hive-default.xml；新建一个文件<code>touch hive-site.xml</code>，并在hive-site.xml中粘贴如下配置信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;</span><br><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;jdbc:mysql://localhost:3306/hive?createDatabaseIfNotExist=true&lt;/value&gt;</span><br><span class="line">    &lt;description&gt;JDBC connect string for a JDBC metastore&lt;/description&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt;</span><br><span class="line">    &lt;description&gt;Driver class name for a JDBC metastore&lt;/description&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;hive&lt;/value&gt;</span><br><span class="line">    &lt;description&gt;username to use against metastore database&lt;/description&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;hive&lt;/value&gt;</span><br><span class="line">    &lt;description&gt;password to use against metastore database&lt;/description&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h2 id="二、安装并配置mysql"><a href="#二、安装并配置mysql" class="headerlink" title="二、安装并配置mysql"></a>二、安装并配置mysql</h2><p><strong>1.Ubuntu下mysql的安装请参考</strong>：<a href="https://dblab.xmu.edu.cn/blog/install-mysql/">Ubuntu安装MySQL</a><br><strong>2.下载mysql jdbc 包</strong>,<a href="http://www.mysql.com/downloads/connector/j/">下载地址</a></p><p><a href="https://downloads.mysql.com/archives/c-j/">https://downloads.mysql.com/archives/c-j/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf mysql-connector-java-5.1.40.tar.gz   #解压</span><br><span class="line">cp mysql-connector-java-5.1.40/mysql-connector-java-5.1.40-bin.jar  /usr/local/hive/lib #将mysql-connector-java-5.1.40-bin.jar拷贝到/usr/local/hive/lib目录下</span><br></pre></td></tr></table></figure><p><strong>3. 启动并登陆mysql shell</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service mysql start #启动mysql服务</span><br><span class="line">mysql -u root -p  #登陆shell界面</span><br></pre></td></tr></table></figure><p><strong>4. 新建hive数据库</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database hive;    #这个hive数据库与hive-site.xml中localhost:3306/hive的hive对应，用来保存hive元数据</span><br></pre></td></tr></table></figure><p><strong>5. 配置mysql允许hive接入：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">这条MySQL语句是为用户&#x27;hive&#x27;授予所有数据库的所有权限，并设置&#x27;hive&#x27;用户的密码为&#x27;hive&#x27;。这个命令通常用于在授权给用户访问数据库之前，先为该用户创建一个数据库账户并为其授权。</span><br><span class="line"></span><br><span class="line">在这个命令中，&#x27;identified by&#x27;语句用于设置用户的密码。&#x27;hive&#x27;是数据库账户的用户名和密码，它将用于在hive-site.xml配置文件中连接数据库。</span><br><span class="line"></span><br><span class="line">请注意，为了安全起见，建议不要在授权语句中明文指定密码。相反，可以使用以下语句来创建用户并设置其密码：</span><br><span class="line"></span><br><span class="line">CREATE USER &#x27;hive&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;password&#x27;;</span><br><span class="line">然后使用以下命令来授予用户所有数据库的所有权限：</span><br><span class="line"></span><br><span class="line">GRANT ALL ON *.* TO &#x27;hive&#x27;@&#x27;localhost&#x27;;</span><br><span class="line">这样做可以保护您的数据库免受潜在的安全威胁。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; grant all on *.* to hive@localhost identified by &#x27;hive&#x27;;   #将所有数据库的所有表的所有权限赋给hive用户，后面的hive是配置hive-site.xml中配置的连接密码</span><br><span class="line">mysql&gt; flush privileges;  #刷新mysql系统权限关系表</span><br></pre></td></tr></table></figure><p><strong>6. 启动hive</strong><br>启动hive之前，请先启动hadoop集群。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">start-all.sh #启动hadoop</span><br><span class="line">hive  #启动hive</span><br></pre></td></tr></table></figure><p>解决Hive启动，Hive metastore database is not initialized的错误。出错原因：重新安装Hive和MySQL，导致版本、配置不一致。在终端执行如下命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schematool -dbType mysql -initSchema</span><br></pre></td></tr></table></figure><p>Hive 分布现在包含一个用于 Hive Metastore 架构操控的脱机工具，名为 schematool.此工具可用于初始化当前 Hive 版本的 Metastore 架构。此外，其还可处理从较旧版本到新版本的架构升级。</p><p><a href="https://dblab.xmu.edu.cn/blog/996/">https://dblab.xmu.edu.cn/blog/996/</a></p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu安装MySQL及常用操作</title>
      <link href="/2023/04/07/Ubuntu%E5%AE%89%E8%A3%85MySQL%E5%8F%8A%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2023/04/07/Ubuntu%E5%AE%89%E8%A3%85MySQL%E5%8F%8A%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.mysql.com/">MySQL</a>是一个关系型数据库管理系统，由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下产品。MySQL 最流行的关系型数据库管理系统，在 WEB 应用方面MySQL是最好的 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件之一。</p><h2 id="一、安装MySQL"><a href="#一、安装MySQL" class="headerlink" title="一、安装MySQL"></a>一、安装MySQL</h2><p>使用以下命令即可进行mysql安装，注意安装前先更新一下软件源以获得最新版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update  #更新软件源</span><br><span class="line">sudo apt-get install mysql-server  #安装mysql</span><br></pre></td></tr></table></figure><p>上述命令会安装以下包：<br>apparmor<br>mysql-client-5.7<br>mysql-common<br>mysql-server<br>mysql-server-5.7<br>mysql-server-core-5.7<br>因此无需再安装mysql-client等。安装过程会提示设置mysql root用户的密码，设置完成后等待自动安装即可。默认安装完成就启动了mysql。</p><ul><li><p>启动和关闭mysql服务器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service mysql start</span><br><span class="line">service mysql stop</span><br></pre></td></tr></table></figure></li></ul><p><img src="/images/spark/78.png" alt="1680850535731"></p><ul><li><p>确认是否启动成功，mysql节点处于LISTEN状态表示启动成功：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo netstat -tap | grep mysql</span><br></pre></td></tr></table></figure><p><img src="/images/spark/79.png" alt="1680850589215"></p></li><li><p>进入mysql shell界面：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p><img src="/images/spark/80.png" alt="1680850651984"></p><p>解决利用sqoop导入MySQL中文乱码的问题（可以插入中文，但不能用sqoop导入中文）<br>导致导入时中文乱码的原因是character_set_server默认设置是latin1，如下图。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &quot;char%&quot;;</span><br></pre></td></tr></table></figure><p><img src="/images/spark/82.png" alt="未修改server 编码"></p><p>可以单个设置修改编码方式<code>set character_set_server=utf8;</code>但是重启会失效，建议按以下方式修改编码方式。<br>(1)编辑配置文件。<code>sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf</code><br>(2)在[mysqld]下添加一行<code>character_set_server=utf8</code>。如下图</p><p><img src="/images/spark/83.png" alt="未修改server 编码"></p><p>(3)重启MySQL服务。<code>service mysql restart</code><br>(4)登陆MySQL，并查看MySQL目前设置的编码。<code>show variables like &quot;char%&quot;;</code></p><p><img src="/images/spark/84.png" alt="未修改server 编码"></p><p>但是我的就直接是这样子的了：</p><p><img src="/images/spark/81.png" alt="1680850651984"></p><h2 id="二、MySQL常用操作"><a href="#二、MySQL常用操作" class="headerlink" title="二、MySQL常用操作"></a>二、MySQL常用操作</h2><p>注意：MySQL中每个命令后都要以英文分号；结尾。<br>1、显示数据库<br>mysql&gt; show databases;<br>MySql刚安装完有两个数据库：mysql和test。mysql库非常重要，它里面有MySQL的系统信息，我们改密码和新增用户，实际上就是用这个库中的相关表进行操作。</p><p>2、显示数据库中的表<br>mysql&gt; use mysql; （打开库，对每个库进行操作就要打开此库）<br>Database changed<br>mysql&gt; show tables;</p><p>3、显示数据表的结构：<br>describe 表名;</p><p>4、显示表中的记录：<br>select * from 表名;<br>例如：显示mysql库中user表中的纪录。所有能对MySQL用户操作的用户都在此表中。<br>select * from user;</p><p>5、建库：<br>create database 库名;<br>例如：创建一个名字位aaa的库<br>mysql&gt; create database aaa;</p><p>6、建表：<br>use 库名；<br>create table 表名 (字段设定列表)；<br>例如：在刚创建的aaa库中建立表person,表中有id(序号，自动增长)，xm（姓名）,xb（性别）,csny（出身年月）四个字段<br>use aaa;<br>mysql&gt; create table person (id int(3) auto_increment not null primary key, xm varchar(10),xb varchar(2),csny date);<br>可以用describe命令察看刚建立的表结构。<br>mysql&gt; describe person;</p><p><img src="/images/spark/85.png" alt="未修改server 编码"></p><p>7、增加记录<br>例如：增加几条相关纪录。<br>mysql&gt;insert into person values(null,’张三’,’男’,’1997-01-02’);<br>mysql&gt;insert into person values(null,’李四’,’女’,’1996-12-02’);<br>注意，字段的值（’张三’,’男’,’1997-01-02’）是使用两个英文的单撇号包围起来，后面也是如此。<br>因为在创建表时设置了id自增，因此无需插入id字段，用null代替即可。<br>可用select命令来验证结果。<br>mysql&gt; select * from person;</p><p><img src="/images/spark/86.png" alt="未修改server 编码"></p><p>8、修改纪录<br>例如：将张三的出生年月改为1971-01-10<br>mysql&gt; update person set csny&#x3D;’1971-01-10’ where xm&#x3D;’张三’;</p><p>9、删除纪录<br>例如：删除张三的纪录。<br>mysql&gt; delete from person where xm&#x3D;’张三’;</p><p>10、删库和删表<br>drop database 库名;<br>drop table 表名；</p><p>11、查看mysql版本<br>在mysql5.0中命令如下：<br>show variables like ‘version’;<br>或者：select version();</p><p><a href="https://dblab.xmu.edu.cn/blog/1002/">https://dblab.xmu.edu.cn/blog/1002/</a></p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验4  Spark SQL编程初级实践</title>
      <link href="/2023/04/07/%E5%AE%9E%E9%AA%8C4-Spark-SQL%E7%BC%96%E7%A8%8B%E5%88%9D%E7%BA%A7%E5%AE%9E%E8%B7%B5/"/>
      <url>/2023/04/07/%E5%AE%9E%E9%AA%8C4-Spark-SQL%E7%BC%96%E7%A8%8B%E5%88%9D%E7%BA%A7%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="1．Spark-SQL基本操作"><a href="#1．Spark-SQL基本操作" class="headerlink" title="1．Spark SQL基本操作"></a>1．Spark SQL基本操作</h2><p>将下列JSON格式数据复制到Linux系统中，并保存命名为employee.json。</p><p>为employee.json创建DataFrame，并写出Python语句完成下列操作：</p><p>(1)     查询所有数据；</p><p>(2)     查询所有数据，并去除重复的数据；</p><p>(3)     查询所有数据，打印时去除id字段；</p><p>(4)     筛选出age&gt;30的记录；</p><p>(5)     将数据按age分组；</p><p>(6)     将数据按name升序排列；</p><p>(7)     取出前3行数据；</p><p>(8)     查询所有记录的name列，并为其取别名为username；</p><p>(9)     查询年龄age的平均值；</p><p>(10)  查询年龄age的最小值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">首先为employee.json创建DataFrame，并写出Python语句完成下列操作：</span><br><span class="line">创建DataFrame</span><br><span class="line">答案：</span><br><span class="line">&gt;&gt;&gt; spark=SparkSession.builder().getOrCreate()</span><br><span class="line">&gt;&gt;&gt; df = spark.read.json(&quot;file:///usr/local/spark/employee.json&quot;)</span><br><span class="line">(1)查询DataFrame的所有数据</span><br><span class="line">答案：&gt;&gt;&gt; df.show()</span><br><span class="line">(2)查询所有数据，并去除重复的数据</span><br><span class="line">答案：&gt;&gt;&gt; df.distinct().show()</span><br><span class="line">(3)查询所有数据，打印时去除id字段</span><br><span class="line">答案：&gt;&gt;&gt; df.drop(&quot;id&quot;).show()</span><br><span class="line">(4)筛选age&gt;20的记录</span><br><span class="line">答案：&gt;&gt;&gt; df.filter(df.age &gt; 30 ).show()</span><br><span class="line">(5)将数据按name分组</span><br><span class="line">答案：&gt;&gt;&gt; df.groupBy(&quot;name&quot;).count().show()</span><br><span class="line">(6)将数据按name升序排列</span><br><span class="line">答案：&gt;&gt;&gt; df.sort(df.name.asc()).show()</span><br><span class="line">(7)取出前3行数据</span><br><span class="line">答案：&gt;&gt;&gt; df.take(3) 或python&gt; df.head(3)</span><br><span class="line">(8)查询所有记录的name列，并为其取别名为username</span><br><span class="line">答案：&gt;&gt;&gt; df.select(df.name.alias(&quot;username&quot;)).show()</span><br><span class="line">(9)查询年龄age的平均值</span><br><span class="line">答案：&gt;&gt;&gt; df.agg(&#123;&quot;age&quot;: &quot;mean&quot;&#125;).show()</span><br><span class="line">(10)查询年龄age的最大值</span><br><span class="line">答案：&gt;&gt;&gt; df.agg(&#123;&quot;age&quot;: &quot;max&quot;&#125;).show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2．编程实现将RDD转换为DataFrame"><a href="#2．编程实现将RDD转换为DataFrame" class="headerlink" title="2．编程实现将RDD转换为DataFrame"></a>2．编程实现将RDD转换为DataFrame</h2><p>源文件内容如下（包含id,name,age）：</p><p>​       请将数据复制保存到Linux系统中，命名为employee.txt，实现从RDD转换得到DataFrame，并按“id:1,name:Ella,age:36”的格式打印出DataFrame的所有数据。请写出程序代码。</p><p>假设当前目录为&#x2F;usr&#x2F;local&#x2F;spark&#x2F;mycode&#x2F;rddtodf，在当前目录下新建一个目录mkdir -p src&#x2F;main&#x2F;python，然后在目录&#x2F;usr&#x2F;local&#x2F;spark&#x2F;mycode&#x2F;rddtodf&#x2F;src&#x2F;main&#x2F;python下新建一个rddtodf.py，复制下面代码；（下列两种方式任选其一）</p><p>方法一：利用反射来推断包含特定类型对象的RDD的schema，适用对已知数据结构的RDD转换；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from pyspark.conf import SparkConf</span><br><span class="line">from pyspark.sql.session import SparkSession</span><br><span class="line">from pyspark import SparkContext</span><br><span class="line">from pyspark.sql.types import Row</span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">sc = SparkContext(&quot;local&quot;,&quot;Simple App&quot;)</span><br><span class="line">peopleRDD = sc.textFile(&quot;file:///usr/local/spark/employee.txt&quot;)</span><br><span class="line">rowRDD = peopleRDD.map(lambda line : line.split(&quot;,&quot;)).map(lambda attributes : Row(int(attributes[0]),attributes[1],int(attributes[2]))).toDF()</span><br><span class="line">rowRDD.createOrReplaceTempView(&quot;employee&quot;)</span><br><span class="line">personsDF = spark.sql(&quot;select * from employee&quot;)</span><br><span class="line">personsDF.rdd.map(lambda t : &quot;id:&quot;+str(t[0])+&quot;,&quot;+&quot;Name:&quot;+t[1]+&quot;,&quot;+&quot;age:&quot;+str(t[2])).foreach(print)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>方法二：使用编程接口，构造一个schema并将其应用在已知的RDD上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">from pyspark.sql.types import Row</span><br><span class="line">from pyspark.sql.types import StructType</span><br><span class="line">from pyspark.sql.types import StructField</span><br><span class="line">from pyspark.sql.types import StringType</span><br><span class="line">from pyspark.conf import SparkConf</span><br><span class="line">from pyspark import SparkContext</span><br><span class="line">from pyspark.sql.session import SparkSession</span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">sc = SparkContext(&quot;local&quot;,&quot;Simple App&quot;)</span><br><span class="line">peopleRDD = sc.textFile(&quot;file:///usr/local/spark/employee.txt&quot;)</span><br><span class="line">schemaString = &quot;id name age&quot;</span><br><span class="line">fields = list(map( lambda fieldName : StructField(fieldName, StringType(), nullable = True), schemaString.split(&quot; &quot;)))</span><br><span class="line">schema = StructType(fields)</span><br><span class="line">rowRDD = peopleRDD.map(lambda line : line.split(&quot;,&quot;)).map(lambda attributes : Row(int(attributes[0]),attributes[1],int(attributes[2])))</span><br><span class="line">employeeDF = spark.createDataFrame(rowRDD, schema)</span><br><span class="line">employeeDF.createOrReplaceTempView(&quot;employee&quot;)</span><br><span class="line">results = spark.sql(&quot;SELECT * FROM employee&quot;)</span><br><span class="line">results.rdd.map(lambda t : &quot;id:&quot;+str(t[0])+&quot;,&quot;+&quot;Name:&quot;+t[1]+&quot;,&quot;+&quot;age:&quot;+str(t[2])).foreach(print)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`python3 ./ rddtodf.py`</span><br></pre></td></tr></table></figure><h2 id="3-编程实现利用DataFrame读写MySQL的数据"><a href="#3-编程实现利用DataFrame读写MySQL的数据" class="headerlink" title="3. 编程实现利用DataFrame读写MySQL的数据"></a>3. 编程实现利用DataFrame读写MySQL的数据</h2><p>（1）在MySQL数据库中新建数据库sparktest，再创建表employee，包含如表5-2所示的两行数据。</p><p><strong>表<strong><strong>5-2 employee</strong></strong>表原有数据</strong></p><table><thead><tr><th>id</th><th>name</th><th>gender</th><th>Age</th></tr></thead><tbody><tr><td>1</td><td>Alice</td><td>F</td><td>22</td></tr><tr><td>2</td><td>John</td><td>M</td><td>25</td></tr></tbody></table> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database sparktest;</span><br><span class="line">mysql&gt; use sparktest;</span><br><span class="line">mysql&gt; create table employee (id int(4), name char(20), gender char(4), age int(4));</span><br><span class="line">mysql&gt; insert into employee values(1,&#x27;Alice&#x27;,&#x27;F&#x27;,22);</span><br><span class="line">mysql&gt; insert into employee values(2,&#x27;John&#x27;,&#x27;M&#x27;,25);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（2）配置Spark通过JDBC连接数据库MySQL，编程实现利用DataFrame插入如表5-3所示的两行数据到MySQL中，最后打印出age的最大值和age的总和。</p><p><strong>表<strong><strong>5-3 employee</strong></strong>表新增数据</strong></p><table><thead><tr><th>id</th><th>name</th><th>gender</th><th>age</th></tr></thead><tbody><tr><td>3</td><td>Mary</td><td>F</td><td>26</td></tr><tr><td>4</td><td>Tom</td><td>M</td><td>23</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">答案：假设当前目录为/usr/local/spark/mycode/testmysql，在当前目录下新建一个目录mkdir -p src/main/python，然后在目录/usr/local/spark/mycode/testmysql/src/main/python下新建一个testmysql.py，复制下面代码；</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">from pyspark import SparkContext</span><br><span class="line">from pyspark.sql import SQLContext</span><br><span class="line">from pyspark.sql.types import Row</span><br><span class="line">from pyspark.sql.types import StructType</span><br><span class="line">from pyspark.sql.types import StructField</span><br><span class="line">from pyspark.sql.types import StringType</span><br><span class="line">from pyspark.sql.types import IntegerType</span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line"></span><br><span class="line">sc = SparkContext( &#x27;local&#x27;, &#x27;test&#x27;)</span><br><span class="line">spark=SQLContext(sc)</span><br><span class="line">jdbcDF=spark.read.format(&quot;jdbc&quot;).option(&quot;url&quot;,&quot;jdbc:mysql://localhost:3306/sparktest&quot;).option(&quot;driver&quot;,&quot;com.mysql.jdbc.Driver&quot;).option(&quot;dbtable&quot;,&quot;employee&quot;).option(&quot;user&quot;, &quot;root&quot;).option(&quot;password&quot;, &quot;123&quot;).load()</span><br><span class="line">jdbcDF.filter(jdbcDF.age&gt;20).collect()//检测是否连接成功</span><br><span class="line">studentRDD = sc.parallelize([&quot;3 Mary F 26&quot;,&quot;4 Tom M 23&quot;]).map(lambda line : line.split(&quot; &quot;))</span><br><span class="line">schema = StructType([StructField(&quot;id&quot;,IntegerType(),True),StructField(&quot;name&quot;, StringType(), True),StructField(&quot;gender&quot;, StringType(), True),StructField(&quot;age&quot;,IntegerType(), True)])</span><br><span class="line">rowRDD = studentRDD.map(lambda p : Row(int(p[0]),p[1].strip(), p[2].strip(),int(p[3])))</span><br><span class="line">employeeDF = spark.createDataFrame(rowRDD, schema)</span><br><span class="line">prop = &#123;&#125;</span><br><span class="line">prop[&#x27;user&#x27;] = &#x27;root&#x27;</span><br><span class="line">prop[&#x27;password&#x27;] = &#x27;123&#x27;</span><br><span class="line">prop[&#x27;driver&#x27;] = &quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">employeeDF.write.jdbc(&quot;jdbc:mysql://localhost:3306/sparktest&quot;,&#x27;employee&#x27;,&#x27;append&#x27;, prop)</span><br><span class="line">  jdbcDF.collect()</span><br><span class="line">  jdbcDF.agg(&#123;&quot;age&quot;: &quot;max&quot;&#125;).show()</span><br><span class="line">  jdbcDF.agg(&#123;&quot;age&quot;: &quot;sum&quot;&#125;).show()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后我们，执行以下指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">python3 ./ rddtodf.py</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>在终端下，我们就可以看到结果了。</p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-6-2023</title>
      <link href="/2023/04/06/4-6-2023/"/>
      <url>/2023/04/06/4-6-2023/</url>
      
        <content type="html"><![CDATA[<h2 id="反思三月"><a href="#反思三月" class="headerlink" title="反思三月"></a>反思三月</h2><span id="more"></span><div ><img src="\images\dayliy_image\4.6.jpg" alt="drawing" width="200" /></div><ol><li><p>三月单词全勤</p></li><li><p>三月末制定了个学习计划分为①数学②数据结构③coding④单词。具体罗列出每天除去上课之后的空闲时间，然后安排这些内容。单词水课上可以背（但是早课太困用来睡觉为主），固定为21：00-23：00背，实现了三天（orz）。coding实现了0天（只把登录给写了），没实现是因为0：00之后的时间背没背完单词。数学重新看绿色同济书，目前看完了两章，并且把课后习题写完了，找回自信，但是错误率很高。回头看武忠祥的书，感觉总结的不错。接下来就是先看书，再看武忠祥。不得不说，书上的定义证明真的不错。数据结构进展为0</p></li><li><p>需要再安排时间实现②③</p></li><li><p>每天至多6h空闲时间，做到晚上不熬夜，不报复性看手机，我的计划就能实现80%（我做得到有鬼）</p></li><li><p>和老爸交流了一下留学，还是不出去的好。考得上就上，考不上就上班。我的学校层次就在这边，出了国能证明自己有能力吗？不能。找捷径穿了一层华丽的衣服，回来还是草包。如果出去了回来，说是说留过学的，这样不就拉不下面子进厂了吗？哈哈哈。初中数学老师说过一句话：“人在做，天在看。”这一天天的到底学没学，学习的效果怎么样，我用每周博客来记录，算是对我自己的鞭策。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> casual_talk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>访问者模式</title>
      <link href="/2023/03/29/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/03/29/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h2><p>访问者模式是一种行为设计模式， 它能将算法与其所作用的对象隔离开来。</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/4e23a618ff97985330433f90306dd504.png" alt="visitor.png"></p><h3 id="模式动机"><a href="#模式动机" class="headerlink" title="模式动机"></a>模式动机</h3><p>假如某个软件团队开发了一款能够使用巨型图像中地理信息的应用程序。 图像中的每个节点既能代表复杂实体 （例如一座城市）， 也能代表更精细的对象 （例如工业区和旅游景点等）。 如果节点代表的真实对象之间存在公路， 那么这些节点就会相互连接。 在程序内部， 每个节点的类型都由其所属的类来表示， 每个特定的节点则是一个对象。</p><p>一段时间后， 软件团队接到了实现将图像导出到 XML 文件中的任务，如下图所示。</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/9321980ba4009779f34c5ef36107c34f.png" alt="problem1.png"></p><p>图8.2.1 将图像导出为 XML。</p><p> 这些工作最初看上去非常简单。 该团队计划为每个节点类添加导出函数， 然后递归执行图像中每个节点的导出函数。 解决方案简单且优雅： 使用多态机制可以让导出方法的调用代码不会和具体的节点类相耦合。</p><p>但团队的系统架构师拒绝批准对已有节点类进行修改。 他认为这些代码已经是产品了， 不想冒险对其进行修改， 因为修改可能会引入潜在的缺陷。</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/4087528d356b1fd7bc80697b0bd559d9.png" alt="problem2-zh.png"></p><p>所有节点的类中都必须添加导出至 XML 文件的方法， 但如果在修改代码的过程中引入了任何缺陷， 那么整个程序都会面临风险。</p><p>此外， 他还质疑在节点类中包含导出 XML 文件的代码是否有意义。 这些类的主要工作是处理地理数据。 导出 XML 文件的代码放在这里并不合适。</p><p>还有另一个原因， 那就是在此项任务完成后， 营销部门很有可能会要求程序提供导出其他类型文件的功能， 或者提出其他奇怪的要求。 这样你很可能会被迫再次修改这些重要但脆弱的类。</p><p>该模式适用场景：如果我们想为一个现有的类增加新功能，不得不考虑几个事情：</p><ol><li>新功能会不会与现有功能出现兼容性问题？</li><li>以后会不会再需要添加？</li><li>如果类不允许修改代码怎么办？</li></ol><p>面对这些问题，最好的解决方法就是使用访问者模式，访问者模式适用于数据结构相对稳定的系统，把数据结构和算法解耦。</p><p>总结来说，在软件设计中，下面的情况可以使用访问者模式。</p><ul><li>在实际使用时，对同一集合对象的操作并不是唯一的，对相同的元素对象可能存在多种不同的操作方式。而且这些操作方式并不稳定，可能还需要增加新的操作，以满足新的业务需求。此时，访问者模式就是一个值得考虑的解决方案。</li><li>访问者模式的目的是封装一些施加于某种数据结构元素之上的操作，一旦这些操作需要修改的话，接受这个操作的数据结构可以保持不变。为不同类型的元素提供多种访问操作方式，且可以在不修改原有系统的情况下增加新的操作方式。</li></ul><p>简单来说，访问者模式就是一种<strong>分离****对象数据结构</strong>与<strong>行为</strong>的方法，通过这种分离，可达到为一个被访问者动态添加新的操作而无需做其它的修改的效果。</p><h3 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h3><p>将作用于某种数据结构中的各元素的操作分离出来封装成独立的类，使其在不改变数据结构的前提下可以添加作用于这些元素的新的操作，为数据结构中的每个元素提供多种访问方式。</p><h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><p><img src="https://p.ananas.chaoxing.com/star3/origin/1b760e73de40d5b3c4fe4d30241033ee.png" alt="visitor-diagram.png"></p><p>访问者模式包含如下角色：</p><ul><li>Vistor: 抽象访问者。定义了对每一个元素（Element）访问的行为，它的参数就是可以访问的元素，它的方法个数理论上来讲与元素类个数（Element的实现类个数）是一样的。</li><li>ConcreteVisitor: 具体访问者。给出对每一个元素类访问时所产生的具体行为。</li><li>Element: 抽象元素。定义了一个接受访问者的方法（accept），其意义是指，每一个元素都要可以被访问者访问。</li><li>ConcreteElement: 具体元素。提供接受访问方法的具体实现，而这个具体的实现，通常情况下是使用访问者提供的访问该元素类的方法。</li><li>ObjectStructure: 对象结构。定义当中所提到的对象结构，对象结构是一个抽象表述，具体点可以理解为一个具有容器性质或者复合对象特性的类，它会含有一组元素（Element），并且可以迭代这些元素，供访问者访问。</li></ul><h3 id="模式时序图"><a href="#模式时序图" class="headerlink" title="模式时序图"></a>模式时序图</h3><p><img src="https://p.ananas.chaoxing.com/star3/origin/5acd0ad9a8e0db00efc5318648fd0fd0.png" alt="visitor-sequence.png"></p><h3 id="模式抽象代码分析"><a href="#模式抽象代码分析" class="headerlink" title="模式抽象代码分析"></a>模式抽象代码分析</h3><p>抽象访问者类：</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/c53c88b55d3c3a16090dd777f227015f.png" alt="img"></p><p>具体访问者类：</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/57ac2ddcb5c1875d8e713152f3b9514a.png" alt="img"></p><p>抽象元素：</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/2f57cd37cd5bb7fda6b18423fd11ed1b.png" alt="img"></p><p>具体元素：</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/392a699ccd1cc4d563f5282103fd2dd2.png" alt="img"></p><p>对象结构：</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/64f16221067ce9c7ce88907fd1247317.png" alt="img"></p><h3 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h3><ul><li>访问者模式中对象结构存储了不同类型的元素对象，以供不同访问者访问。</li><li>访问者模式包括两个层次结构，一个是访问者层次结构，提供了抽象访问者和具体访问者，一个是元素层次结构，提供了抽象元素和具体元素。</li><li>相同的访问者可以以不同的方式访问不同的元素，相同的元素可以接受不同访问者以不同访问方式访问。在访问者模式中，增加新的访问者无须修改原有系统，系统具有较好的可扩展性</li></ul><h3 id="模式实例"><a href="#模式实例" class="headerlink" title="模式实例"></a>模式实例</h3><p>在本示例中，希望将一组几何形状导出到 XML文件。 存在的问题是，不能直接更改形状的代码，或者尽量少地修改形状代码。为此，使用访问者模式建立了一个基类，允许将任何行为添加到形状层次结构中，而无需更改这些类的现有代码。</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/f437fc69b5232ef8a21d9a75d19bd5b9.png" alt="example.png"></p><p>Shape.java</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/1daceedc4ebb0cf60b040d2c9244aab1.png" alt="img"></p><p>Dot.java</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/ae078d55949c6106261b4ac315d36c91.png" alt="img"></p><p>Circle.java</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/89a94e5cdbe85f79906b95ff0b83eb38.png" alt="img"></p><p>Rectangle.java</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/530dd2146ab5124fbaca8437277bea0c.png" alt="img"></p><p>CompoundShape.java</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/e471b5321ce1d5a34f76c2e35bde509b.png" alt="img"></p><p>Visitor.java</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/780d43b4d16bbbe2a0ec9733c28e7783.png" alt="img"></p><p>Visitor.java</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/7cb77b441d1015c925ecf8c2c4048657.png" alt="img"></p><p>Client.java</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/13e7bd8166cf77243849b842a21ab16b.png" alt="img"></p><h3 id="模式优点"><a href="#模式优点" class="headerlink" title="模式优点"></a>模式优点</h3><ul><li>使得增加新的访问操作变得很容易。</li><li>将有关元素对象的访问行为集中到一个访问者对象中，而不是分散到一个个的元素类中。</li><li>可以跨过类的等级结构访问属于不同的等级结构的元素类。</li><li>让用户能够在不修改现有类层次结构的情况下，定义该类层次结构的操作。</li></ul><h3 id="模式缺点"><a href="#模式缺点" class="headerlink" title="模式缺点"></a>模式缺点</h3><ul><li>增加新的元素类很困难。在访问者模式中，每增加一个新的元素类都意味着要在抽象访问者角色中增加一个新的抽象操作，并在每一个具体访问者类中增加相应的具体操作，<strong>违背了开闭原则的要求</strong>。</li><li>破坏封装。访问者模式要求访问者对象访问并调用每一个元素对象的操作，这意味着元素对象有时候必须暴露一些自己的内部操作和内部状态，否则无法供访问者访问。</li></ul><h3 id="模式适用环境"><a href="#模式适用环境" class="headerlink" title="模式适用环境"></a>模式适用环境</h3><ul><li>一个对象结构包含很多类型的对象，希望对这些对象实施一些依赖其具体类型的操作。在访问者中针对每一种具体的类型都提供了一个访问操作，不同类型的对象可以有不同的访问操作。</li><li>需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作污染这些对象的类，也不希望在增加新操作时修改这些类。访问者模式使得我们可以将相关的访问操作集中起来定义在访问者类中，对象结构可以被多个不同的访问者类所使用，将对象本身与对象的访问操作分离。</li><li>对象结构中对象对应的类很少改变，但经常需要在此对象结构上定义新的操作。</li></ul><h3 id="模式应用"><a href="#模式应用" class="headerlink" title="模式应用"></a>模式应用</h3><ol><li><p>Java类库实例</p><p>javax.lang.model.element.AnnotationValue和AnnotationValueVisitor</p><p>javax.lang.model.element.Element和ElementVisitor</p><p>javax.lang.model.type.TypeMirror和TypeVisitor</p><p>java.nio.file.FileVisitor和SimpleFileVisitor</p><p>javax.faces.component.visit.VisitContext和VisitCallback</p></li><li><p>在一些编译器的设计中运用了访问者模式，程序代码是被访问的对象，它包括变量定义、变量赋值、逻辑运算、算术运算等语句，编译器需要对代码进行分析，如检查变量是否定义、变量是否赋值、算术运算是否合法等，可以将不同的操作封装在不同的类中，如检查变量定义的类、检查变量赋值的类、检查算术运算是否合法的类，这些类就是具体访问者，可以访问程序代码中不同类型的语句。在编译过程中除了代码分析外，还包含代码优化、空间分配和代码生成等部分，也可以将每一个不同编译阶段的操作封装到了跟该阶段有关的一个访问者类中。</p></li><li><p>在常用的Java XML处理技术DOM4J中，可以通过访问者模式的方式来读取并解析XML文档，VisitorSupport是DOM4J提供的Visitor接口的默认适配器，具体访问者只需继承VisitorSupport类即可。</p></li></ol><h3 id="模式扩展"><a href="#模式扩展" class="headerlink" title="模式扩展"></a>模式扩展</h3><p>\1. 与其他模式联用</p><ul><li>由于访问者模式需要对对象结构进行操作，而对象结构本身是一个元素对象的集合，因此访问者模式经常需要与迭代器模式联用，在对象结构中使用迭代器来遍历元素对象。</li><li>在访问者模式中，元素对象可能存在容器对象和叶子对象，因此可以结合组合模式来进行设计。</li></ul><p>\2. 访问者模式以一种倾斜的方式支持开闭原则，增加新的访问者方便，但是增加新的元素很困难。</p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>行为型软件设计模式</title>
      <link href="/2023/03/29/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/03/29/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="行为型软件设计模式"><a href="#行为型软件设计模式" class="headerlink" title="行为型软件设计模式"></a>行为型软件设计模式</h2><p>行为型模式(Behavioral Pattern)是对在不同的对象之间划分责任和算法的抽象化。</p><p>行为型模式不仅仅关注类和对象的结构，而且重点关注它们之间的相互作用。</p><p>通过行为型模式，可以更加清晰地划分类与对象的职责，并研究系统在运行时实例对象 之间的交互。在系统运行时，对象并不是孤立的，它们可以通过相互通信与协作完成某些复杂功能，一个对象在运行时也将影响到其他对象的运行。</p><p>行为型模式分为类行为型模式和对象行为型模式两种：</p><ul><li>类行为型模式：类的行为型模式使用继承关系在几个类之间分配行为，类行为型模式主要通过多态等方式来分配父类与子类的职责。</li><li>对象行为型模式：对象的行为型模式则使用对象的聚合关联关系来分配行为，对象行为型模式主要是通过对象关联等方式来分配两个或多个类的职责。根据“合成复用原则”，系统中要尽量使用关联关系来取代继承关系，因此大部分行为型设计模式都属于对象行为型设计模式。</li></ul><h2 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h2><p><img src="https://p.ananas.chaoxing.com/star3/origin/b159d584c987ba42d57c12478b5a6329.png" alt="img"></p><p><strong>迭代器模式</strong>是一种行为设计模式， 让你能在不暴露集合底层表现形式 （列表、 栈和树等） 的情况下遍历集合中所有的元素。</p><h3 id="模式动机"><a href="#模式动机" class="headerlink" title="模式动机"></a>模式动机</h3><p>集合是编程中最常使用的数据类型之一，通常可以被认为是一组对象的容器。</p><p>大部分集合使用简单列表存储元素。 但有些集合还会使用栈、 树、 图和其他复杂的数据结构，如下图所示。</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/137117358456957d4ab80c7c761dced5.png" alt="img"></p><p>集合这种数据类型虽然是一种用于存储的数据结构，<strong>但同时需要提供访问其存储数据的方法，特别是一种可以遍历其存储所有数据的方法</strong>。</p><p>也就是说，无论集合的构成方式如何， 它都必须提供某种访问元素的方式， 便于其他代码使用其中的元素。 集合应提供一种能够遍历元素的方式， 且保证它不会周而复始地访问同一个元素。</p><p>对于基于数组或者列表的集合而言， 访问或者遍历其元素可以直接通过下标完成，这种对象遍历的方法是简单且唯一的。 但对于树和图这种复杂数据结构，应该如何遍历其中的元素呢？ 而且复杂数据结构的遍历方法是多样的。比如对于树形数据结构，就可以适用深度优先算法、广度优先或者随机存取等算法来遍历树结构。</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/5026e77949166ec60d7c18f08481333a.png" alt="img"></p><p>一种简单的做法是，将这些遍历算法作为这些集合数据结构类的公共成员函数。但不断向集合类中添加遍历算法，首先会导致单个类的功能过于臃肿，集合数据结构类承担太多的功能，一方面提供添加和删除等功能，还要提供遍历访问功能。其次，集合数据结构类的首要功能是 “高效存储数据”，在遍历过程中，需要保存遍历状态，其和元素的添加和删除混杂在一起，容易引起混乱；添加过多的遍历算法会导致类的职责模糊问题，违反单一职责的设计原则。最后，不论是列表，还是树或者图，一般都会继承自共有的父类——泛型类，有些算法可能是根据特定应用订制的， 将其加入泛型集合类中会显得非常奇怪。</p><p>另一方面，从客户端来看，使用多种集合的客户端代码可能并不关心存储数据的方式（如同SQL数据库的使用者并不会关心底层数据库是MySql、SQL Server，还是Oracle一样），其更关心的是用这些数据结构存储数据后，<strong>如何访问（遍历）其中的所有数据</strong>。 不过由于不同的集合数据结构类提供不同的元素访问方式， 客户端代码将不得不与特定集合类进行耦合。</p><p>在这样的场景下，动态变化的是遍历数据对象的方法。一个自然而然的想法是，将遍历数据功能抽象形成单独的类，其专门负责遍历集合数据结构类中数据——这就是迭代器设计模式。</p><p>总结</p><ul><li>一个聚合对象，如一个列表(List)或者一个集合(Set)，应该提供一种方法来让别人可以访问它的元素，而又不需要暴露它的内部结构。</li><li>针对不同的需要，可能还要以不同的方式遍历整个聚合对象，但是我们并不希望在聚合对象的抽象层接口中充斥着各种不同遍历的操作。</li><li>在迭代器模式中，提供一个外部的迭代器来对聚合对象进行访问和遍历，迭代器定义了一个访问该聚合元素的接口，并且可以跟踪当前遍历的元素，了解哪些元素已经遍历过而哪些没有。</li></ul><h3 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h3><p>迭代器模式(Iterator Pattern) ：提供一种方法来访问聚合对象，而不用暴露这个对象的内部表示，其别名为游标(Cursor)。</p><p>迭代器模式是一种对象行为型模式。</p><p>迭代器模式就是顺序访问聚集中的对象，这是集合中非常常见的一种操作。其包含两层意思：</p><ul><li>需要遍历的对象，即聚集对象，</li><li>迭代器对象，用于对聚集对象进行遍历访问。</li></ul><h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><p><img src="https://p.ananas.chaoxing.com/star3/origin/460f83df320b70eb2faf6f8306d6392b.png" alt="img"></p><h3 id="模式时序图"><a href="#模式时序图" class="headerlink" title="模式时序图"></a>模式时序图</h3><p><img src="https://p.ananas.chaoxing.com/star3/origin/17c7275fd590ae4f47ba004f6570f92b.png" alt="img"></p><h3 id="模式抽象代码分析"><a href="#模式抽象代码分析" class="headerlink" title="模式抽象代码分析"></a>模式抽象代码分析</h3><ol><li>迭代器接口</li></ol><p><img src="https://p.ananas.chaoxing.com/star3/origin/3b60f4305417170e2ef2f002e4807005.png" alt="img"></p><ol start="2"><li>具体迭代器</li></ol><p><img src="https://p.ananas.chaoxing.com/star3/origin/dd66290f9460b70c8d40963d7ab1bb9d.png" alt="img"></p><ol start="3"><li>集合接口声明</li></ol><p><img src="https://p.ananas.chaoxing.com/star3/origin/1dca748f480d31d59dd26fe0c2db6e5b.png" alt="img"></p><ol start="4"><li>具体集合类</li></ol><p><img src="https://p.ananas.chaoxing.com/star3/origin/c9d00498d86ea1d79c009a49c36935dd.png" alt="img"></p><h3 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h3><ul><li>聚合是一个管理和组织数据对象的数据结构。聚合对象主要拥有两个职责：一是存储内部数据；二是遍历内部数据。</li><li>将遍历聚合对象中数据的行为提取出来，封装到一个迭代器中，通过专门的迭代器来遍历聚合对象的内部数据，这就是迭代器模式的本质。迭代器模式是“单一职责原则”的完美体现。</li><li>在迭代器模式中应用了工厂方法模式，聚合类充当工厂类，而迭代器充当产品类，由于定义了抽象层，系统的扩展性很好，在客户端可以针对抽象聚合类和抽象迭代器进行编程。</li><li>java编程语言的类库都已经实现了迭代器模式，因此在实际使用中很少自定义迭代器，只需要直接使用Java语言中已定义好的迭代器即可。</li></ul><h3 id="模式实例"><a href="#模式实例" class="headerlink" title="模式实例"></a>模式实例</h3><p>在本例中， 迭代器模式用于遍历一个封装了访问微信好友关系功能的特殊集合。 该集合提供使用不同方式遍历档案资料的多个迭代器。</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/f8ea0cd42be67602a465f7526c8d98b5.png" alt="img"></p><p>“好友 （friends）” 迭代器可用于遍历指定档案的好友。  “同事 （colleagues）” 迭代器也提供同样的功能， 但仅包括与目标用户在同一家公司工作的好友。 这两个迭代器都实现了同一个通用接口， 客户端能在不了解认证和发送 REST 请求等实现细节的情况下获取档案。</p><p>客户端仅通过接口与集合和迭代器交互， 也就不会同具体类耦合。 如果你决定将应用连接到全新的社交网络， 只需提供新的集合和迭代器类即可， 无需修改现有代码。</p><p>SocialNetwork.java</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/6658d19e88990b5673f53e8ac43403a9.png" alt="img"></p><p>Webchat.java</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/365fb341ad681a5ad53f2c923cf87dcc.png" alt="img"></p><p>LinkedIn.java</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/4e37791703596db5b86dacd09a7b6993.png" alt="img"></p><p>ProfileIterator.java</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/1d954f05bfc7c2b66d3b6a3277c5ef53.png" alt="img"></p><p>WebchatIterator.java</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/d6fc80c8e43b54bd5a503cae6a363c07.png" alt="img"></p><p>LinkedInIterator.java</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/f3ecf2b860a1386fee47a1e1417e0067.png" alt="img"></p><p>Profile.java</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/22f89ae046c3c1a6fe291b625766fd43.png" alt="img"></p><p>SocialSpammer.java</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/1fc5bc549b935bc6dbf11a959d706eee.png" alt="img"></p><p>Client.java</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/156f2a78d920d0984b3a46c06e34c10c.png" alt="img"></p><h3 id="模式优点"><a href="#模式优点" class="headerlink" title="模式优点"></a>模式优点</h3><ul><li>单一职责原则。 通过将体积庞大的遍历算法代码抽取为独立的类， 可对客户端代码和集合进行整理。</li><li>开闭原则。 可实现新型的集合和迭代器并将其传递给现有代码， 无需修改现有代码。</li><li>可以并行遍历同一集合， 因为每个迭代器对象都包含其自身的遍历状态。</li><li>相似的， 可以暂停遍历并在需要时继续。</li></ul><h3 id="模式缺点"><a href="#模式缺点" class="headerlink" title="模式缺点"></a>模式缺点</h3><ul><li>如果你的程序只与简单的集合进行交互， 应用该模式可能会矫枉过正。</li><li>对于某些特殊集合， 使用迭代器可能比直接遍历的效率低。</li></ul><h3 id="模式适用环境"><a href="#模式适用环境" class="headerlink" title="模式适用环境"></a>模式适用环境</h3><ul><li>访问一个聚合对象的内容而无须暴露它的内部表示。</li><li>需要为聚合对象提供多种遍历方式。</li><li>为遍历不同的聚合结构提供一个统一的接口。</li></ul><h3 id="模式应用"><a href="#模式应用" class="headerlink" title="模式应用"></a>模式应用</h3><p>该模式在 Java 代码中很常见。 许多框架和程序库都会使用它来提供遍历其集合的标准方式。</p><p>\1. 下面是该模式在核心 Java 程序库中的一些示例：</p><p><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html">java.util.Iterator</a>的所有实现 （还有<a href="https://docs.oracle.com/javase/8/docs/api/java/util/Scanner.html"> java.util.Scanner</a>）。</p><p><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Enumeration.html">java.util.Enumeration</a>的所有实现</p><p>\2. JDK1.2 引入了新的Java聚合框架Collections</p><p><img src="https://duanguangguang.github.io/2017/09/17/designPattern/iterator/dp1603.jpg" alt="img"></p><ul><li>Collection是所有Java聚合类的根接口。</li><li>在JDK类库中，Collection的iterator()方法返回一个java.util.Iterator类型的对象，而其子接口java.util.List的listIterator()方法返回一个java.util.ListIterator类型的对象，ListIterator是Iterator的子类。它们构成了Java语言对迭代器模式的支持，Java语言的java.util.Iterator接口就是迭代器模式的应用。</li></ul><p>识别方法： 迭代器可以通过导航方法 （例如 next和 previous等） 来轻松识别。 使用迭代器的客户端代码可能没有其所遍历的集合的直接访问权限。</p><h3 id="模式扩展"><a href="#模式扩展" class="headerlink" title="模式扩展"></a>模式扩展</h3><p>Java迭代器，•在JDK中，Iterator接口具有如下3个基本方法：</p><ul><li>Object next()：通过反复调用next()方法可以逐个访问聚合中的元素。</li><li>boolean hasNext()：hasNext()方法用于判断聚合对象中是否还存在下一个元素，为了不抛出异常，必须在调用next()之前先调用hasNext()。如果迭代对象仍然拥有可供访问的元素，那么hasNext()返回true。</li><li>void remove()：用于删除上次调用next()时所返回的元素</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>声明迭代器接口。 该接口必须提供至少一个方法来获取集合中的下个元素。 但为了使用方便， 你还可以添加一些其他方法， 例如获取前一个元素、 记录当前位置和判断迭代是否已结束。</li><li>声明集合接口并描述一个获取迭代器的方法。 其返回值必须是迭代器接口。 如果你计划拥有多组不同的迭代器， 则可以声明多个类似的方法。</li><li>为希望使用迭代器进行遍历的集合实现具体迭代器类。 迭代器对象必须与单个集合实体链接。 链接关系通常通过迭代器的构造函数建立。</li><li>在你的集合类中实现集合接口。 其主要思想是针对特定集合为客户端代码提供创建迭代器的快捷方式。 集合对象必须将自身传递给迭代器的构造函数来创建两者之间的链接。</li><li>检查客户端代码， 使用迭代器替代所有集合遍历代码。 每当客户端需要遍历集合元素时都会获取一个新的迭代器。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No module named &#39;pyspark&#39;</title>
      <link href="/2023/03/28/ModuleNotFoundError%20No%20module%20named%20&#39;pyspark&#39;/"/>
      <url>/2023/03/28/ModuleNotFoundError%20No%20module%20named%20&#39;pyspark&#39;/</url>
      
        <content type="html"><![CDATA[<h1 id="ModuleNotFoundError-No-module-named-‘pyspark’"><a href="#ModuleNotFoundError-No-module-named-‘pyspark’" class="headerlink" title="ModuleNotFoundError: No module named ‘pyspark’"></a>ModuleNotFoundError: No module named ‘pyspark’</h1><p>root@gu-virtual-machine:&#x2F;usr&#x2F;local&#x2F;spark&#x2F;mycode&#x2F;remdup# python3 remdup.py<br>Traceback (most recent call last):<br>File “&#x2F;usr&#x2F;local&#x2F;spark&#x2F;mycode&#x2F;remdup&#x2F;remdup.py”, line 1, in <module><br>from pyspark import SparkContext<br>ModuleNotFoundError: No module named ‘pyspark’</p><p>1.找到.bashrc文件在哪</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/hadoop</span><br></pre></td></tr></table></figure><p>编辑环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export PYSPARK_HOME=/usr/local/spark</span><br><span class="line">export PYTHONPATH=$PYSPARK_HOME/python:$PYTHONPATH</span><br><span class="line">export PYTHONPATH=$PYSPARK_HOME/python/lib/py4j-0.10.9.5-src.zip:$PYTHONPATH</span><br></pre></td></tr></table></figure><p>其中&#96;&#96;&#96;py4j-0.10.9.5-src.zip&#96;&#96;</p><p>需要在<code>/usr/local/spark/python/lib/</code>中自己找自己的是啥版本</p><p>然后</p><p><code> source .bashrc</code></p><p><code>chatgpt 的prompt</code></p><p><code>怎么将PySpark安装目录添加到PYTHONPATH环境变量中</code></p><p><img src="/images/spark/77.png" alt="1679936834308"></p><p><a href="https://spark.apache.org/docs/latest/api/python/getting_started/install.html">https://spark.apache.org/docs/latest/api/python/getting_started/install.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark入门：初级编程实践</title>
      <link href="/2023/03/27/Spark%E5%85%A5%E9%97%A8%EF%BC%9A%E5%88%9D%E7%BA%A7%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5/"/>
      <url>/2023/03/27/Spark%E5%85%A5%E9%97%A8%EF%BC%9A%E5%88%9D%E7%BA%A7%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<p>1.pyspark交互式编程<img src="E:\BLOG\blog1\source\images\spark\76.png" alt="1679922636425"></p><p>（1）      该系总共有多少学生；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lines =   sc.textFile(&quot;file:///usr/local/spark/sparksqldata/Data01.txt&quot;)   </span><br><span class="line">res = lines.map(lambda x:x.split(&quot;,&quot;)).map(lambda x: x[0]) //获取每行数据的第1列  </span><br><span class="line">distinct_res = res.distinct()  //去重操作  </span><br><span class="line"></span><br><span class="line">distinct_res.count()//取元素总个数   //265</span><br></pre></td></tr></table></figure><p>答案为：265人</p><p>（2）      该系共开设了多少门课程；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lines =   sc.textFile(&quot;file:///usr/local/spark/sparksqldata/Data01.txt&quot;) </span><br><span class="line">res = lines.map(lambda x:x.split(&quot;,&quot;)).map(lambda x:x[1]) //获取每行数据的第2列</span><br><span class="line">distinct_res = res.distinct()//去重操作  </span><br><span class="line">distinct_res.count()//取元素总个数   //8   </span><br></pre></td></tr></table></figure><p>答案为8门</p><p>（3）      Tom同学的总成绩平均分是多少；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lines =   sc.textFile(&quot;file:///usr/local/spark/sparksqldata/Data01.txt&quot;)</span><br><span class="line">res = lines.map(lambda x:x.split(&quot;,&quot;)).filter(lambda   x:x[0]==&quot;Tom&quot;) //筛选Tom同学的成绩信息 </span><br><span class="line">res.foreach(print)   </span><br><span class="line">score = res.map(lambda x:int(x[2])) //提取Tom同学的每门成绩，并转换为int类型   </span><br><span class="line">num = res.count() //Tom同学选课门数  </span><br><span class="line">sum_score = score.reduce(lambda x,y:x+y) //Tom同学的总成绩   avg = sum_score/num // 总成绩/门数=平均分</span><br><span class="line">print(avg)   //30.8   </span><br></pre></td></tr></table></figure><p>Tom同学的平均分为30.8分</p><p>（4）      求每名同学的选修的课程门数；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lines =   sc.textFile(&quot;file:///usr/local/spark/sparksqldata/Data01.txt&quot;) </span><br><span class="line">res = lines.map(lambda x:x.split(&quot;,&quot;)).map(lambda x:(x[0],1)) //学生每门课程都对应(学生姓名,1)，学生有n门课程则有n个(学生姓名,1)  </span><br><span class="line">each_res = res.reduceByKey(lambda x,y: x+y) //按学生姓名获取每个学生的选课总数 </span><br><span class="line">each_res.foreach(print)   </span><br></pre></td></tr></table></figure><p>答案共265行</p><p>(‘Lewis’, 4)</p><p>(‘Mike’, 3)</p><p>(‘Walter’, 4)</p><p>(‘Conrad’, 2)</p><p>(‘Borg’, 4)</p><p>……</p><p>（5）      该系DataBase课程共有多少人选修；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lines = sc.textFile(&quot;file:///usr/local/spark/sparksqldata/Data01.txt&quot;)  </span><br><span class="line">res = lines.map(lambda x:x.split(&quot;,&quot;)).filter(lambda   x:x[1]==&quot;DataBase&quot;)  </span><br><span class="line">res.count()   //126   </span><br></pre></td></tr></table></figure><p>答案为126人</p><p>（6）      各门课程的平均分是多少；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lines = sc.textFile(&quot;file:///usr/local/spark/sparksqldata/Data01.txt&quot;)  </span><br><span class="line">res = lines.map(lambda x:x.split(&quot;,&quot;)).map(lambda   x:(x[1],(int(x[2]),1))) //为每门课程的分数后面新增一列1，表示1个学生选择了该课程。格式如(&#x27;ComputerNetwork&#x27;,   (44, 1))</span><br><span class="line">temp = res.reduceByKey(lambda x,y:(x[0]+y[0],x[1]+y[1])) //按课程名聚合课程总分和选课人数。格式如(&#x27;ComputerNetwork&#x27;,   (7370, 142))   </span><br><span class="line">avg = temp.map(lambda x:(x[0], round(x[1][0]/x[1][1],2)))//课程总分/选课人数 = 平均分，并利用round(x,2)保留两位小数  </span><br><span class="line">avg.foreach(print)   </span><br></pre></td></tr></table></figure><p>答案为：</p><p>(‘ComputerNetwork’, 51.9)</p><p>(‘Software’, 50.91)</p><p>(‘DataBase’, 50.54)</p><p>(‘Algorithm’, 48.83)</p><p>(‘OperatingSystem’, 54.94)</p><p>(‘Python’, 57.82)</p><p>(‘DataStructure’, 47.57)</p><p>(‘CLanguage’, 50.61)</p><p>（7）使用累加器计算共有多少人选了DataBase这门课。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lines = sc.textFile(&quot;file:///usr/local/spark/sparksqldata/Data01.txt&quot;) </span><br><span class="line">res = lines.map(lambda x:x.split(&quot;,&quot;)).filter(lambda   x:x[1]==&quot;DataBase&quot;)//筛选出选了DataBase课程的数据  </span><br><span class="line">accum = sc.accumulator(0) //定义一个从0开始的累加器accum  </span><br><span class="line">res.foreach(lambda x:accum.add(1))//遍历res，每扫描一条数据，累加器加1 </span><br><span class="line">accum.value //输出累加器的最终值   </span><br><span class="line">//126   </span><br></pre></td></tr></table></figure><h2 id="2-编写独立应用程序实现数据去重"><a href="#2-编写独立应用程序实现数据去重" class="headerlink" title="2.编写独立应用程序实现数据去重"></a>2.编写独立应用程序实现数据去重</h2><p>对于两个输入文件A和B，编写Spark独立应用程序，对两个文件进行合并，并剔除其中重复的内容，得到一个新文件C。下面是输入文件和输出文件的一个样例，供参考。</p><p>输入文件A的样例如下：</p><p>20170101    x</p><p>20170102    y</p><p>20170103    x</p><p>20170104    y</p><p>20170105    z</p><p>20170106    z</p><p>输入文件B的样例如下：</p><p>20170101    y</p><p>20170102    y</p><p>20170103    x</p><p>20170104    z</p><p>20170105    y</p><p>根据输入的文件A和B合并得到的输出文件C的样例如下：</p><p>20170101    x</p><p>20170101    y</p><p>20170102    y</p><p>20170103    x</p><p>20170104    y</p><p>20170104    z</p><p>20170105    y</p><p>20170105    z</p><p>20170106    z</p><p>【参考答案】</p><p>  实验答案参考步骤如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">（1）假设当前目录为/usr/local/spark/mycode/remdup，在当前目录下新建一个remdup.py文件，复制下面代码；</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（2）最后在目录/usr/local/spark/mycode/remdup下执行下面命令执行程序（注意执行程序时请先退出pyspark shell，否则会出现“地址已在使用”的警告）；</span><br><span class="line">$ python3 remdup.py</span><br><span class="line">（3）在目录/usr/local/spark/mycode/remdup/result下即可得到结果文件part-00000。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cookie和Session用户认证</title>
      <link href="/2023/03/27/%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81-Cookie%E5%92%8CSession/"/>
      <url>/2023/03/27/%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81-Cookie%E5%92%8CSession/</url>
      
        <content type="html"><![CDATA[<p>什么是cookie和session</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/admin/list/</span><br><span class="line">https://127.0.0.1:8000/admin/list/</span><br></pre></td></tr></table></figure><ul><li>无状态&amp;短链接</li></ul><p><img src="/images/django/1.png" alt="1679910829181"></p><p><img src="/images/django/2.png" alt="1679911346812"></p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统——进程同步——哲学家进餐问题</title>
      <link href="/2023/03/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5%E2%80%94%E2%80%94%E5%93%B2%E5%AD%A6%E5%AE%B6%E8%BF%9B%E9%A4%90%E9%97%AE%E9%A2%98/"/>
      <url>/2023/03/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5%E2%80%94%E2%80%94%E5%93%B2%E5%AD%A6%E5%AE%B6%E8%BF%9B%E9%A4%90%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="哲学家进餐问题"><a href="#哲学家进餐问题" class="headerlink" title="哲学家进餐问题"></a>哲学家进餐问题</h2><p>复习一下 pv操作 互斥锁</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">P --wait(信号量S)&#123;</span><br><span class="line">S&lt;=0</span><br><span class="line">S--//上锁</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">V --signal(信号量)&#123;</span><br><span class="line">S++//开锁</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p><img src="/images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4%EF%BC%88origin2%EF%BC%89.png"></p><p><img src="/images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/5.png" alt="1679620287199"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">semaphpore chopstick[<span class="number">5</span>]=&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;  </span><br><span class="line"><span class="comment">// 所有信号量均被初始化为1,第i位哲学家的活动可描述为</span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    P(chopstick[i]);      <span class="comment">//取左筷子  当所有哲学家都拿起左筷子</span></span><br><span class="line">    P(chopstick[i+<span class="number">1</span>]%<span class="number">5</span>);  <span class="comment">//取右筷子  右筷子被阻碍</span></span><br><span class="line">eat;</span><br><span class="line">    V(chopstick[i]);  <span class="comment">//放左筷子</span></span><br><span class="line">    V(chopstick[(i+<span class="number">1</span>)%<span class="number">5</span>]);<span class="comment">//放右筷子</span></span><br><span class="line">    think;</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p><img src="/images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4%EF%BC%88origin2%EF%BC%89.png"></p><p>至多只允许有4位哲学家同时去拿左边的筷子，仅当一名哲学家左右两边的筷子都可以使用时，才允许他抓筷子。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">semaphpore chopstick[<span class="number">5</span>]=&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;; <span class="comment">//筷子</span></span><br><span class="line">semaphpore count=<span class="number">4</span>;       <span class="comment">//控制最多只允许4名哲学家同时进餐</span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line"><span class="built_in">P</span>(count);  <span class="comment">//判断是否超过4个人进餐</span></span><br><span class="line"><span class="built_in">P</span>(chopstick[i]);  <span class="comment">//取左筷子</span></span><br><span class="line">    <span class="built_in">P</span>(chopstick[i+<span class="number">1</span>]%<span class="number">5</span>);  <span class="comment">// 取右筷子</span></span><br><span class="line">    eating;</span><br><span class="line">    <span class="built_in">V</span>(chopstick[i]);  <span class="comment">//放左筷子</span></span><br><span class="line">    <span class="built_in">V</span>(chopstick[i+<span class="number">1</span>]%<span class="number">5</span>);  <span class="comment">//放右筷子</span></span><br><span class="line">    <span class="built_in">V</span>(count);   <span class="comment">//用餐完毕</span></span><br><span class="line">    thinking;</span><br><span class="line">&#125;<span class="keyword">while</span>(True);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">A  count=3</span><br><span class="line">B  count=2</span><br><span class="line">C  count=1</span><br><span class="line">D  count=0</span><br><span class="line">E  (负数阻塞)</span><br><span class="line">保证了四个同时进餐</span><br></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p><img src="/images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.png"></p><p>对哲学家进行编号，</p><p>奇数哲学家，先拿左边筷子，再拿右边筷子</p><p>偶数哲学家，先拿右边筷子，再拿左边筷子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">semaphpore chopstick[5]=&#123;1,1,1,1,1&#125;; //筷子</span><br><span class="line">do&#123;</span><br><span class="line">if(i%2==1)&#123;//奇数</span><br><span class="line">P(chopstick[i]);  //取左筷子</span><br><span class="line">      P(chopstick[i+1]%5);  // 取右筷子</span><br><span class="line">&#125;</span><br><span class="line">else&#123;     //偶数</span><br><span class="line">P(chopstick[i]);  //取左筷子</span><br><span class="line">    P(chopstick[i+1]%5);  // 取右筷子</span><br><span class="line">&#125;</span><br><span class="line">eating;</span><br><span class="line">    V(chopstick[i]);  //放左筷子</span><br><span class="line">    V(chopstick[i+1]%5);  //放右筷子</span><br><span class="line">    thinking;</span><br><span class="line">&#125;while(True)</span><br></pre></td></tr></table></figure><h1 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h1><h3 id="第1关：03哲学家进餐同步控制问题"><a href="#第1关：03哲学家进餐同步控制问题" class="headerlink" title="第1关：03哲学家进餐同步控制问题"></a>第1关：03哲学家进餐同步控制问题</h3><ul><li><p>任务要求</p></li><li><p>评论</p></li><li><p>关卡排行榜</p></li><li><p><a href="https://www.educoder.net/tasks/hfrvjb2z8y46#%E4%BB%BB%E5%8A%A1%E6%8F%8F%E8%BF%B0">任务描述</a></p></li><li><p>相关知识</p><ul><li><a href="https://www.educoder.net/tasks/hfrvjb2z8y46#%E5%93%B2%E5%AD%A6%E5%AE%B6%E8%BF%9B%E9%A4%90%E9%97%AE%E9%A2%98">哲学家进餐问题</a></li><li><a href="https://www.educoder.net/tasks/hfrvjb2z8y46#%E5%93%B2%E5%AD%A6%E5%AE%B6%E9%97%AE%E9%A2%98%E6%AD%BB%E9%94%81%E6%A8%A1%E6%8B%9F">哲学家问题死锁模拟</a></li></ul></li><li><p><a href="https://www.educoder.net/tasks/hfrvjb2z8y46#%E7%A8%8B%E5%BA%8F%E7%BC%96%E7%A8%8B%E8%AF%B4%E6%98%8E">程序编程说明</a></p></li><li><p><a href="https://www.educoder.net/tasks/hfrvjb2z8y46#%E6%B5%8B%E8%AF%95%E8%AF%B4%E6%98%8E">测试说明</a></p></li></ul><hr><h4 id="任务描述"><a href="#任务描述" class="headerlink" title="任务描述"></a>任务描述</h4><p>本关任务：编写程序实现哲学家进餐同步控制。</p><h4 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h4><p>为了完成本关任务，你需要掌握：</p><p>1.多个哲学家进餐同步模型与死锁的产生。</p><p>2.同步控制避免哲学家进餐产生死锁。</p><p>3.<code>sem_timedwait</code>函数的使用。</p><h5 id="哲学家进餐问题-1"><a href="#哲学家进餐问题-1" class="headerlink" title="哲学家进餐问题"></a>哲学家进餐问题</h5><p>哲学家进餐问题是计算机操作系统中一个典型的同步问题，有五个哲学家在同一张圆桌，它们间隔放置了五只筷子，每个哲学家只有拿到两只筷子才可进餐，进餐完就进行思考。在该问题中筷子是一种临界资源，会被两个哲学家进行争用，在并发条件下，如果不进行适当控制，则线程发生死锁，可能产生所有哲学家无法进餐的情况。这样产生的死锁状态对计算机系统是不利的。 该线程运行模型如图： <img src="/images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/7.png" alt="哲学家进餐模型"></p><h5 id="哲学家问题死锁模拟"><a href="#哲学家问题死锁模拟" class="headerlink" title="哲学家问题死锁模拟"></a>哲学家问题死锁模拟</h5><p>原始的哲学家线程是无限等待的，这不利于在线测评(限定程序的运行时长)，因此本实训限定五个哲学家线程持续固定长的时间(无论成功或失败)即退出运行。 在本项目中有两种情况：一是不进行同步控制的哲学家线程，每个哲学家线程如果不进行控制，则所有哲学家线程都无法进行，这就是发生了死锁。二是对哲学家线程执行同步控制，每个哲学家线程不能取比自己编号大的信号量，经过控制的哲学家线程则不会发生死锁。</p><p>为了区分两种模式的运行效果不同，哲学家线程运行时还有一个统计线程Reporter，用于统计已经成功执行的线程数目。该实训项目说明访问临界资源进行限制后各线程可以执行完毕。</p><p>两种情况要有相同的开局，哲学家线程获得信号量后都持有信号量资源一段时间(200MS)，第一种情况是不控制线程直接再申请新资源，在1.5秒后进行完成情况统计。第二种情况是奇数编号的线程首先判断下一个编号资源是否可用，如果不可用，则马上释放已有资源。等100*编号(100MS或300MS)后再申请资源，经过控制的哲学家线程全部可以执行完成。 </p><h4 id="程序编程说明"><a href="#程序编程说明" class="headerlink" title="程序编程说明"></a>程序编程说明</h4><p>本项目采用C语言进行编写，采用的是linux平台的gcc编译器，主线程先执行未受控制的哲学家线程，并输出完成统计。再执行受控制的哲学家线程，也输出完成统计。</p><p>两种情况中，主线程初始化信号量资源，启动五个哲学家线程，主线程<code>ReporterPhi</code>函数第一次启动五个哲学家线程(Philosopher)，这五个哲学家线程在获得一个筷子后，都保持一段时间。然后试图再去获得新的筷子，发生死锁，造成所有线程都无法完成任务。五个线程结束后，统计成功的数目。</p><p><img src="/images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/8.png" alt="哲学家线程死锁"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![交错获取筷子](/images/操作系统/9.png) </span><br><span class="line"></span><br><span class="line">执行完毕的哲学家进程马上归还筷子资源， ![归还资源的哲学家线程](/images/操作系统/10.png) </span><br><span class="line"></span><br><span class="line">这样就使线程间可以依次执行完毕。主线程最后统计成功的数目。如果哲学家线程发生了死锁，则统计数会是0。经过同步控制的哲学家线程具有相互协调资源的能力，而不发生死锁，统计数会是5。</span><br><span class="line"></span><br><span class="line">这里对信号量的操作使用的是```sem_timedwait```函数，它在一个规定的时间尝试获取信号量，如果信号量值是可用的(大于0)，则该函数马上返回0值，如果信号量值是不可用的(不大于0)，则该方法会等待指定的时长，在阻塞指定时长后返回值是-1。```sem_timedwait```函数使用的是绝时间值。</span><br><span class="line"></span><br><span class="line">```sem_getvalue(&amp;sem, &amp;semvalue)```;该方法直接查看信号量的值。```sem_post(&amp;sem)```方法增加信号量的值，相当于归还资源;```gettimeofday```方法获得机器当前时间绝对值。```time_add_ms```对指定时间变量增加给定的时长。</span><br><span class="line"></span><br><span class="line">本实训核心内容是要求学生理解哲学家线程死锁的发生，以及如何避免发生死锁，要求学生对并发线程有较深刻的理解，了解linux平台线程的运用和信号量的使用。</span><br><span class="line"></span><br><span class="line">#### 测试说明</span><br><span class="line"></span><br><span class="line">项目没有输入数据，输出数据是两种情况下线程成功运行的数目。 </span><br><span class="line"></span><br><span class="line">测试输入：无 预期输出：1,1(非真正结果)</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">开始你的任务吧，祝你成功！</span><br><span class="line"></span><br><span class="line">```c++</span><br><span class="line">//stu001.c 哲学家进餐问题，程序模板，由学生完成缺失代码 </span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt; </span><br><span class="line">#include &lt;pthread.h&gt;</span><br><span class="line">#include &lt;semaphore.h&gt; </span><br><span class="line"></span><br><span class="line">static sem_t sem_chops[5];//筷子信号量 </span><br><span class="line">static sem_t sem_stop;//该信号量用于等待。</span><br><span class="line">//时间递增方法 </span><br><span class="line">void time_add_ms(struct timeval *time, uint ms)</span><br><span class="line">&#123;</span><br><span class="line">        time-&gt;tv_usec += ms * 1000; // 微秒 = 毫秒 * 1000</span><br><span class="line">        if(time-&gt;tv_usec &gt;= 1000000) // 进位，1000 000 微秒 = 1 秒</span><br><span class="line">        &#123;</span><br><span class="line">                time-&gt;tv_sec += time-&gt;tv_usec / 1000000;</span><br><span class="line">                time-&gt;tv_usec %= 1000000;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">//100毫秒</span><br><span class="line">#define TIMEOUT_FIRST 100</span><br><span class="line">//200毫秒</span><br><span class="line">#define TIMEOUT_HOLD 200</span><br><span class="line">//200毫秒</span><br><span class="line">#define TIMEOUT_PHIEND 200</span><br><span class="line">//200毫秒 </span><br><span class="line">#define TIME_REPORT 200</span><br><span class="line"></span><br><span class="line">struct timeval  begintime;      //获取的机器初始开始时间值</span><br><span class="line">struct timespec first_time;     //首次获取筷子信号量</span><br><span class="line">struct timespec phi_holdtime;    //保持一段时间</span><br><span class="line">struct timespec report_time;    //汇报线程完成情况时间</span><br><span class="line">struct timespec phi_endtime;    //哲学家线程结束绝对时间值</span><br><span class="line">static int finish[5]; </span><br><span class="line"></span><br><span class="line">//哲学家线程没有进行有效同步控制</span><br><span class="line">void* Philosopher(void *arg)</span><br><span class="line">&#123;</span><br><span class="line">int iIndex=*((int*)arg);</span><br><span class="line">int iRetWait1=-1,iRetWait2=-1;</span><br><span class="line">//iRetWait1是获取筷子资源1的结果，成功返回0，失败返回-1</span><br><span class="line"></span><br><span class="line">//iRetWait2是获取筷子资源2的结果，成功返回0，失败返回-1</span><br><span class="line">//获取第一个筷子成功后还要保持一段时间，继续请求下一个新筷子</span><br><span class="line">//begin ******哲学家线程获取筷子资源进餐</span><br><span class="line"></span><br><span class="line">                        //筷子信号量  //首次获取筷子信号量</span><br><span class="line">iRetWait1=sem_timedwait(sem_chops+iIndex,&amp;first_time);//获取筷子时间结束</span><br><span class="line">                //该信号量用于等待 //保持一段时间</span><br><span class="line">  sem_timedwait(&amp;sem_stop,&amp;phi_holdtime);</span><br><span class="line">                           //筷子信号量  //首次获取筷子信号量</span><br><span class="line">iRetWait2=sem_timedwait(sem_chops+(iIndex+1)%5,&amp;first_time); //获取筷子时间结束</span><br><span class="line">//end</span><br><span class="line">if((iRetWait1==0)&amp;&amp;(iRetWait2==0))&#123;</span><br><span class="line">    //检查获得两个筷子资源结果，都成功则为就餐成功</span><br><span class="line">    //设置任务完成标志为1，线程结束</span><br><span class="line">    finish[iIndex]=1;</span><br><span class="line">    //释放筷子资源iIndex</span><br><span class="line">    sem_post(&amp;sem_chops[iIndex]);</span><br><span class="line">    //释放筷子资源</span><br><span class="line">    sem_post(&amp;sem_chops[(iIndex+1)%5]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //线程结束时间点：约为700MS</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//哲学家线程进行有效同步控制</span><br><span class="line">void* PhilosopherGood(void *arg)</span><br><span class="line">&#123;</span><br><span class="line">int iIndex=*((int*)arg);</span><br><span class="line">int iRetWait1=-1,iRetWait2=-1;</span><br><span class="line">int i=0;</span><br><span class="line">/*begin ******哲学家线程获取筷子资源进餐-受同步控制********************* </span><br><span class="line">//根据线程编号选择筷子编号并尝试获取第一个筷子,未成功获取则等待一段时间后重试</span><br><span class="line">//成功后继续请求下一个新筷子</span><br><span class="line">****end*****************************************/</span><br><span class="line">  for(i=0;(i&lt;5)&amp;&amp;(iRetWait1!=0);i++)&#123;</span><br><span class="line">    //获取第一根筷子</span><br><span class="line">    if(iIndex%2==1)&#123;</span><br><span class="line">      iRetWait1=sem_timedwait(sem_chops+iIndex,&amp;first_time);</span><br><span class="line">    &#125;</span><br><span class="line">  iRetWait2=sem_timedwait(sem_chops+(iIndex+1)%5,&amp;first_time);</span><br><span class="line">    //设置任务完成标志为1，线程结束</span><br><span class="line">    finish[iIndex]=1;</span><br><span class="line">    //释放筷子资源iIndex</span><br><span class="line">    sem_post(&amp;sem_chops[iIndex]);</span><br><span class="line">    //释放筷子资源</span><br><span class="line">    sem_post(&amp;sem_chops[(iIndex+1)%5]);</span><br><span class="line">  &#125;</span><br><span class="line">    //线程结束时间点：约为700MS</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">//该线程用于检测哲学家未经同步控制完成任务的数量</span><br><span class="line">int ReporterPhi(void*(*phiFunc)(void*))</span><br><span class="line">&#123;</span><br><span class="line">  int iFinishCount=0;</span><br><span class="line">  pthread_t pids[5]; </span><br><span class="line">  int arg[5];</span><br><span class="line">  int iRetWait1=-1,iRetWait2=-1,retVal=-1;</span><br><span class="line">  int i=0; </span><br><span class="line">  gettimeofday(&amp;begintime, NULL);</span><br><span class="line">  //第一次获取筷子资源时间点:100MS</span><br><span class="line">  time_add_ms(&amp;begintime, TIMEOUT_FIRST);</span><br><span class="line">  first_time.tv_sec = begintime.tv_sec;</span><br><span class="line">  first_time.tv_nsec = begintime.tv_usec * 1000;  </span><br><span class="line">  </span><br><span class="line">  //保持获取筷子资源到时间点:300MS</span><br><span class="line">  time_add_ms(&amp;begintime, TIMEOUT_HOLD);</span><br><span class="line">  phi_holdtime.tv_sec = begintime.tv_sec;</span><br><span class="line">  phi_holdtime.tv_nsec = begintime.tv_usec * 1000; </span><br><span class="line">  </span><br><span class="line">  //哲学家线程结束时间点:500毫秒</span><br><span class="line">  time_add_ms(&amp;begintime, TIMEOUT_PHIEND);</span><br><span class="line">  phi_endtime.tv_sec= begintime.tv_sec;</span><br><span class="line">  phi_endtime.tv_nsec= begintime.tv_usec * 1000; </span><br><span class="line">  </span><br><span class="line">  //汇报线程完成情况时间点：700MS</span><br><span class="line">  time_add_ms(&amp;begintime, TIME_REPORT);</span><br><span class="line">  report_time.tv_sec = begintime.tv_sec;</span><br><span class="line">  report_time.tv_nsec = begintime.tv_usec * 1000; </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  sem_init(&amp;sem_stop,0,0);//该信号量初值为0 </span><br><span class="line">  </span><br><span class="line">  //初始化完成数组为0，筷子信号量值为1</span><br><span class="line">  for(i=0;i&lt;5;i++)</span><br><span class="line">  &#123;</span><br><span class="line">finish[i]=0;</span><br><span class="line">//设置信量初值为1</span><br><span class="line">sem_init(sem_chops+i,0,1); </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  for(i=0;i&lt;5;i++)</span><br><span class="line">  &#123;</span><br><span class="line">arg[i]=i;//传给线程的参数值，用来区分线程实体</span><br><span class="line">//创建消费者线程,pids+i是线程ID的保存地址，arg+i是线程的参数指针 </span><br><span class="line">pthread_create(pids+i,NULL,phiFunc,(void *)(&amp;arg[i]));  </span><br><span class="line">  &#125; </span><br><span class="line">  </span><br><span class="line">  //等待哲学家线程结束,但都没有完成任务。</span><br><span class="line">  for(i=0;i&lt;5;i++)</span><br><span class="line">  &#123;</span><br><span class="line">pthread_join(pids[i],NULL);  //主线程等待生产者线程结束</span><br><span class="line">  &#125;  </span><br><span class="line">  //等待到报告时间点：700MS </span><br><span class="line">  retVal = sem_timedwait(&amp;sem_stop, &amp;report_time);  </span><br><span class="line">  iFinishCount=0;</span><br><span class="line">  for(i=0;i&lt;5;i++)</span><br><span class="line">  &#123;</span><br><span class="line">if(finish[i]==1)</span><br><span class="line">&#123;iFinishCount++;&#125; </span><br><span class="line">  &#125; </span><br><span class="line">  return iFinishCount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main(int argc,char * argv[])</span><br><span class="line">&#123; </span><br><span class="line">  int i=0; </span><br><span class="line">  int phi1=-1,phi2=-1;</span><br><span class="line">  //调用无同步控制的哲学家线程</span><br><span class="line">  phi1=ReporterPhi(Philosopher);</span><br><span class="line">  //调用有同步控制的哲学家线程</span><br><span class="line">  phi2=ReporterPhi(PhilosopherGood); </span><br><span class="line">  //输出两种情况下完成任务的线程数</span><br><span class="line">  printf(&quot;%d,%d&quot;,phi1,phi2);</span><br><span class="line">  //销毁信号量资源</span><br><span class="line">  for(i=0;i&lt;5;i++)</span><br><span class="line">  &#123;</span><br><span class="line">sem_destroy(sem_chops+i); </span><br><span class="line">  &#125; </span><br><span class="line">  sem_destroy(&amp;sem_stop); </span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-23-2023</title>
      <link href="/2023/03/23/3-23-2023/"/>
      <url>/2023/03/23/3-23-2023/</url>
      
        <content type="html"><![CDATA[<h2 id="放平心态不焦虑"><a href="#放平心态不焦虑" class="headerlink" title="放平心态不焦虑"></a>放平心态不焦虑</h2><span id="more"></span><div ><img src="\images\dayliy_image\3.23.jpg" alt="drawing" width="200" /></div>加油咯1.接下来目标，确定中介，交钱，保底。2.加油把手上的东西学完（这周把它干掉交比赛）3.刷数据结构算法&&慢慢看数学慢慢刷题(方平心态)4.美团笔试准备摆烂<div ><img src="\images\dayliy_image\breautiful_team.png" alt="drawing" width="200" /></div>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> casual_talk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式--外观模式</title>
      <link href="/2023/03/22/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/03/22/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><span id="more"></span><p><img src="https://p.ananas.chaoxing.com/star3/origin/0399ac825ed1daf0f651bfc02285f2fe.png" alt="facade.png"></p><h3 id="模式动机"><a href="#模式动机" class="headerlink" title="模式动机"></a>模式动机</h3><p>为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p><p>外观模式是为了解决类与类之间的依赖关系的，像spring一样，可以将类和类之间的关系配置到配置文件中，而外观模式就是将其关系放在一个Facade类中，降低了类类之间的耦合度，该模式中没有涉及到接口。</p><h3 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h3><p>外观模式(Facade Pattern)：外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。外观模式又称为门面模式，它是一种对象结构型模式。</p><p>该模式对外有一个统一接口，外部应用程序不用关心内部子系统的具体的细节，这样会大大降低应用程序的复杂度，提高了程序的可维护性。</p><p>外观（Facade）模式是“迪米特法则”的典型应用</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/b86b419a00e7b54804b8c11fcb9e48d2.jpg" alt="外观模式引入.jpg"></p><h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><ul><li>Facade: 外观角色。为多个子系统对外提供一个共同的接口。</li><li>SubSystem:子系统角色。实现系统的部分功能，客户可以通过外观角色访问它。</li><li>Client：客户 角色</li></ul><p><img src="https://p.ananas.chaoxing.com/star3/origin/13fcb42c725de3dfebd8650c82ef321c.jpg" alt="Facade.jpg"></p><h3 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h3><p><img src="https://p.ananas.chaoxing.com/star3/origin/64b70bd5b107c730acaf8ae6941fe4bf.jpg" alt="seq_Facade.jpg"></p><h3 id="外观模式抽象代码"><a href="#外观模式抽象代码" class="headerlink" title="外观模式抽象代码"></a>外观模式抽象代码</h3><p><img src="https://p.ananas.chaoxing.com/star3/origin/caff6c5076db97e3300ce68dbede42af.png" alt="img"><img src="https://p.ananas.chaoxing.com/star3/origin/7c51781933ea7da6f51c74fa327a7741.png" alt="img"></p><p><img src="https://p.ananas.chaoxing.com/star3/origin/974296aef5da2a26ddacd3aa7eec6429.png" alt="img"></p><h3 id="外观模式分析"><a href="#外观模式分析" class="headerlink" title="外观模式分析"></a>外观模式分析</h3><ul><li>根据“单一职责原则”，在软件中将一个系统划分为若干个子系统有利于降低整个系统的复杂性，一个常见的设计目标是使子系统间的通信和相互依赖关系达到最小，而达到该目标的途径之一就是引入一个外观对象，它为子系统的访问提供了一个简单而单一的入口。 </li><li>外观模式也是“迪米特法则”的体现，通过引入一个新的外观类可以降低原有系统的复杂度，同时降低客户类与子系统类的耦合度。 </li><li>外观模式要求一个子系统的外部与其内部的通信通过一个统一的外观对象进行，外观类将客户端与子系统的内部复杂性分隔开，使得客户端只需要与外观对象打交道，而不需要与子系统内部的很多对象打交道。 </li><li>外观模式的目的在于降低系统的复杂程度。 </li><li>外观模式从很大程度上提高了客户端使用的便捷性，使得客户端无须关心子系统的工作细节，通过外观角色即可调用相关功能。</li></ul><h3 id="外观模式实例"><a href="#外观模式实例" class="headerlink" title="外观模式实例"></a>外观模式实例</h3><p>比如电脑是由CPU、内存、磁盘等部件组成，当启动电脑的时候，需要依次启动CPU、内存和磁盘等部件。CPU、Memory、Disk他们之间将会相互持有实例，产生关系，这样会造成严重的依赖，修改一个类，可能会带来其他类的修改。对于用户而言，其只需要知道可以把电脑打开即可。可以适用外观模式来设计该实例。类图如下图所示。</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/71f0df393a5d5e55bfe3fbd36767e65a.jpg" alt="dp901.jpg"></p><p>代码文件，CPU.java</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/194fc257fbb2b9ca0bf818d919344ce7.png" alt="img"></p><p>Memory.java</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/9694cc69463bfc05d2f5d00e3a37f897.png" alt="img"></p><p>Disk.java</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/3a73bdceadcc55ecdcf6e05586181812.png" alt="img"></p><p>Computer.java（外观类）</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/617e3bcdfabbdea0a2086fc9060bbbf1.png" alt="img"></p><p>Client.java</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/a06ac34d3d2d2bde2af0b2183be7fbcd.png" alt="img"></p><p>引入外观角色之后，用户只需要直接与外观角色交互，用户与子系统之间的复杂关系由外观角色来实现，从而降低了系统的耦合度。</p><h3 id="外观模式优点"><a href="#外观模式优点" class="headerlink" title="外观模式优点"></a>外观模式优点</h3><ul><li>对客户屏蔽子系统组件，减少了客户处理的对象数目并使得子系统使用起来更加容易。通过引入外观模式，客户代码将变得很简单，与之关联的对象也很少。</li><li>实现了子系统与客户之间的松耦合关系，这使得子系统的组件变化不会影响到调用它的客户类，只需要调整外观类即可。</li><li>降低了大型软件系统中的编译依赖性，并简化了系统在不同平台之间的移植过程，因为编译一个子系统一般不需要编译所有其他的子系统。一个子系统的修改对其他子系统没有任何影响，而且子系统内部变化也不会影响到外观对象。</li><li>只是提供了一个访问子系统的统一入口，并不影响用户直接使用子系统类。</li></ul><h3 id="外观模式缺点"><a href="#外观模式缺点" class="headerlink" title="外观模式缺点"></a>外观模式缺点</h3><ul><li>不能很好地限制客户使用子系统类，如果对客户访问子系统类做太多的限制则减少了可变性和灵活性。</li><li>在不引入抽象外观类的情况下，增加新的子系统可能需要修改外观类或客户端的源代码，违背了“开闭原则”。</li></ul><h3 id="外观模式适用环境"><a href="#外观模式适用环境" class="headerlink" title="外观模式适用环境"></a>外观模式适用环境</h3><ul><li>当要为一个复杂子系统提供一个简单接口时可以使用外观模式。该接口可以满足大多数用户的需求，而且用户也可以越过外观类直接访问子系统。</li><li>客户程序与多个子系统之间存在很大的依赖性。引入外观类将子系统与客户以及其他子系统解耦，可以提高子系统的独立性和可移植性。</li><li>在层次化结构中，可以使用外观模式定义系统中每一层的入口，层与层之间不直接产生联系，而通过外观类建立联系，降低层之间的耦合度。</li></ul><h3 id="外观模式应用"><a href="#外观模式应用" class="headerlink" title="外观模式应用"></a>外观模式应用</h3><p>在Java核心库中，下面的类使用了外观模式。</p><ul><li>javax.faces.context.FacesContext。该类使用了LifeCycle、ViewHandler、NavigationHandler等类。但用户直接使用FacesContext，并不觉得使用了后面的三个类。</li><li>javax.faces.context.ExternalContext 。该类使用了ServletContext，HttpSession，HttpServletRequest，HttpServletResponse等类。</li><li>JDBCFacade</li></ul><p><img src="https://p.ananas.chaoxing.com/star3/origin/0b7e81580154279d0f96f84b1c6bb05c.png" alt="img"></p><p>识别方法： 如果一个类提供了一个简单的接口，但是其工作实际由其它类来完成，则可以认为是个外观类。通常外观类管理其使用对象的整个生命周期。</p><h3 id="外观模式扩展"><a href="#外观模式扩展" class="headerlink" title="外观模式扩展"></a>外观模式扩展</h3><ul><li>在外观模式中，通常只需要一个外观类，并且此外观类只有一个实例，换言之它是一个单例类。在很多情况下为了节约系统资源，一般将外观类设计为单例类。当然这并不意味着在整个系统里只能有一个外观类，在一个系统中可以设计多个外观类，每个外观类都负责和一些特定的子系统交互，向用户提供相应的业务功能。</li><li>不要通过继承一个外观类在子系统中加入新的行为，这种做法是错误的。外观模式的用意是为子系统提供一个集中化和简化的沟通渠道，而不是向子系统加入新的行为，新的行为的增加应该通过修改原有子系统类或增加新的子系统类来实现，不能通过外观类来实现。</li><li>外观模式最大的缺点在于违背了“开闭原则”，当增加新的子系统或者移除子系统时需要修改外观类，可以通过引入抽象外观类在一定程度上解决该问题，客户端针对抽象外观类进行编程。对于新的业务需求，不修改原有外观类，而对应增加一个新的具体外观类，由新的具体外观类来关联新的子系统对象，同时通过修改配置文件来达到不修改源代码并更换外观类的目的。</li></ul><h3 id="外观模式总结"><a href="#外观模式总结" class="headerlink" title="外观模式总结"></a>外观模式总结</h3><ul><li>在外观模式中，外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。外观模式又称为门面模式，它是一种对象结构型模式。</li><li>外观模式包含两个角色：外观角色是在客户端直接调用的角色，在外观角色中可以知道相关的(一个或者多个)子系统的功能和责任，它将所有从客户端发来的请求委派到相应的子系统去，传递给相应的子系统对象处理；在软件系统中可以同时有一个或者多个子系统角色，每一个子系统可以不是一个单独的类，而是一个类的集合，它实现子系统的功能。</li><li>外观模式要求一个子系统的外部与其内部的通信通过一个统一的外观对象进行，外观类将客户端与子系统的内部复杂性分隔开，使得客户端只需要与外观对象打交道，而不需要与子系统内部的很多对象打交道。</li><li>外观模式主要优点在于对客户屏蔽子系统组件，减少了客户处理的对象数目并使得子系统使用起来更加容易，它实现了子系统与客户之间的松耦合关系，并降低了大型软件系统中的编译依赖性，简化了系统在不同平台之间的移植过程；其缺点在于不能很好地限制客户使用子系统类，而且在不引入抽象外观类的情况下，增加新的子系统可能需要修改外观类或客户端的源代码，违背了“开闭原则”。</li><li>外观模式适用情况包括：要为一个复杂子系统提供一个简单接口；客户程序与多个子系统之间存在很大的依赖性；在层次化结构中，需要定义系统中每一层的入口，使得层与层之间不直接产生联系。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django_搜索校验分页</title>
      <link href="/2023/03/21/django_%E6%90%9C%E7%B4%A2%E6%A0%A1%E9%AA%8C%E5%88%86%E9%A1%B5/"/>
      <url>/2023/03/21/django_%E6%90%9C%E7%B4%A2%E6%A0%A1%E9%AA%8C%E5%88%86%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##搜索</span></span><br><span class="line">PrettyNum.objects.<span class="built_in">filter</span>&#123;mobile=<span class="string">&#x27;13906135233&#x27;</span>,<span class="string">&quot;id&quot;</span>:<span class="number">123</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">data_dict=&#123;<span class="string">&quot;mobile&quot;</span>:<span class="string">&quot;13906135233&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="number">123</span>&#125;</span><br><span class="line"></span><br><span class="line">PrettyNum.objects.<span class="built_in">filter</span>(**data_dict)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PrettyNum.objects.filter(id=12)  等于12</span><br><span class="line">PrettyNum.objects.filter(id__gt=12) 大于12</span><br><span class="line">PrettyNum.objects.filter(id__gte=12) 大于等于12</span><br><span class="line">PrettyNum.objects.filter(id__lt=12)   小于12</span><br><span class="line">PrettyNum.objects.filter(id__lte=12) 小于等于12</span><br><span class="line"></span><br><span class="line">data_dict=&#123;&quot;id__lte&quot;:12&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PrettyNum.objects.filter(mobile=&#x27;233&#x27;)  等于 PrettyNum.objects.filter(mobile__startswitch=&quot;139&quot;) 筛选出以139开头</span><br><span class="line">PrettyNum.objects.filter(mobile__endswitch=&quot;233&quot;) 筛选出以233结尾</span><br><span class="line">PrettyNum.objects.filter(mobile__contains=&quot;5233&quot;) 筛选出包含5233</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># use</span></span><br><span class="line">data_dict=&#123;<span class="string">&quot;mobile__contains&quot;</span>:<span class="string">&quot;233&quot;</span>&#125;</span><br><span class="line">PrettyNum.objects.<span class="built_in">filter</span>(**data_dict)</span><br></pre></td></tr></table></figure><h2 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from django.core.exceptions import ValidationError</span><br><span class="line"># 验证方法一</span><br><span class="line">mobile=forms.CharField(</span><br><span class="line">    label=&quot;手机号&quot;,</span><br><span class="line">    disabled=True,</span><br><span class="line">    validators=[RegexValidator(r&#x27;^1[3-9]\d&#123;9&#125;$&#x27;,&#x27;手机号格式错误&#x27;)],</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from django.core.validators import RegexValidator</span><br><span class="line"># 验证方法二</span><br><span class="line">    def clean_mobile(self):</span><br><span class="line">        txt_mobile=self.cleaned_data[&quot;mobile&quot;]</span><br><span class="line">        exists=PrettyNum.objects.filter(mobile=txt_mobile).exists()</span><br><span class="line"></span><br><span class="line">        if len(txt_mobile)!=11:</span><br><span class="line">            #验证不通过</span><br><span class="line">            raise ValidationError(&quot;格式错误&quot;)</span><br><span class="line">        if exists:</span><br><span class="line">            #验证不通过</span><br><span class="line">            raise ValidationError(&quot;手机号已存在&quot;)</span><br><span class="line">        return txt_mobile</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">class PrettyForm(forms.ModelForm):</span><br><span class="line">    # 验证方法一</span><br><span class="line">    # mobile=forms.CharField(</span><br><span class="line">    #     label=&quot;手机号&quot;,</span><br><span class="line">    #     validators=[RegexValidator(r&#x27;^1[3-9]\d&#123;9&#125;$&#x27;,&#x27;手机号格式错误&#x27;)]</span><br><span class="line">    # )</span><br><span class="line">    class Meta:</span><br><span class="line">        model=PrettyNum</span><br><span class="line">        fields=[&#x27;mobile&#x27;,&#x27;price&#x27;,&#x27;level&#x27;,&#x27;status&#x27;]</span><br><span class="line">        # fields=&quot;__all__&quot;</span><br><span class="line">        # exclude=[&#x27;level&#x27;]</span><br><span class="line">        widgets=&#123;</span><br><span class="line">            &quot;mobile&quot;:forms.TextInput(attrs=&#123;&quot;class&quot;:&quot;form-control&quot;&#125;),</span><br><span class="line">            &quot;price&quot;:forms.TextInput(attrs=&#123;&quot;class&quot;:&quot;form-control&quot;&#125;),</span><br><span class="line">            &quot;level&quot;:forms.TextInput(attrs=&#123;&quot;class&quot;:&quot;form-control&quot;&#125;),</span><br><span class="line">            &quot;status&quot;:forms.TextInput(attrs=&#123;&quot;class&quot;:&quot;form-control&quot;&#125;),</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"># 验证方法二</span><br><span class="line">    def clean_mobile(self):</span><br><span class="line">        txt_mobile=self.cleaned_data[&quot;mobile&quot;]</span><br><span class="line">        exists=PrettyNum.objects.filter(mobile=txt_mobile).exists()</span><br><span class="line"></span><br><span class="line">        if len(txt_mobile)!=11:</span><br><span class="line">            #验证不通过</span><br><span class="line">            raise ValidationError(&quot;格式错误&quot;)</span><br><span class="line">        if exists:</span><br><span class="line">            #验证不通过</span><br><span class="line">            raise ValidationError(&quot;手机号已存在&quot;)</span><br><span class="line">        return txt_mobile</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data_dict=&#123;&#125;</span><br><span class="line">value=request.GET.get(<span class="string">&#x27;q&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> value:</span><br><span class="line">    data_dict[<span class="string">&quot;mobile__contains&quot;</span>] = value   qurylist=PrettyNum.objects.<span class="built_in">filter</span>(**data_dict).order_by(<span class="string">&quot;-level&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qurylist=PrettyNum.objects.<span class="built_in">all</span>()<span class="comment">#所有的</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qurylist=PrettyNum.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="number">4</span>)[<span class="number">0</span>:<span class="number">10</span>]<span class="comment">#id为4的前十页</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qurylist=PrettyNum.objects.<span class="built_in">all</span>()[<span class="number">0</span>:<span class="number">10</span>]<span class="comment">#第一页</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qurylist=PrettyNum.objects.all()[10:20]#第二页</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qurylist=PrettyNum.objects.all()[20:30]#第三页</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">page=int(request.GET.get(&#x27;page&#x27;,1))</span><br><span class="line">start=(page-1)*10</span><br><span class="line">end=page*10</span><br><span class="line">qurylist=PrettyNum.objects.filter(**data_dict).order_by(&quot;-level&quot;)[start:end]</span><br><span class="line">return render(request,&#x27;pretty_list.html&#x27;,&#123;&#x27;qurylist&#x27;:qurylist,&quot;search_data&quot;:value&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;nav aria-label=&quot;Page navigation&quot;&gt;</span><br><span class="line">  &lt;ul class=&quot;pagination&quot;&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      &lt;a href=&quot;#&quot; aria-label=&quot;Previous&quot;&gt;</span><br><span class="line">        &lt;span aria-hidden=&quot;true&quot;&gt;«&lt;/span&gt;</span><br><span class="line">      &lt;/a&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;/pretty/list/?page=1&quot;&gt;1&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;?page=2&quot;&gt;2&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;?page=3&quot;&gt;3&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;?page=4&quot;&gt;4&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;?page=5&quot;&gt;5&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      &lt;a href=&quot;#&quot; aria-label=&quot;Next&quot;&gt;</span><br><span class="line">        &lt;span aria-hidden=&quot;true&quot;&gt;»&lt;/span&gt;</span><br><span class="line">      &lt;/a&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/nav&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">#分页</span><br><span class="line">    # qurylist=PrettyNum.objects.all()</span><br><span class="line">    # qurylist=PrettyNum.objects.filter(id=4)[0:10]</span><br><span class="line">    # qurylist=PrettyNum.objects.all()[0:10]</span><br><span class="line">    # qurylist=PrettyNum.objects.all()[10:20]</span><br><span class="line">    # qurylist=PrettyNum.objects.all()[20:30]</span><br><span class="line">    page=int(request.GET.get(&#x27;page&#x27;,1))</span><br><span class="line">    pageSize=10</span><br><span class="line">    start=(page-1)*pageSize</span><br><span class="line">    end=page*pageSize</span><br><span class="line"></span><br><span class="line">    qurylist=PrettyNum.objects.filter(**data_dict).order_by(&quot;-level&quot;)[start:end]</span><br><span class="line">   #总数据条数</span><br><span class="line">    total_count=PrettyNum.objects.filter(**data_dict).order_by(&quot;-level&quot;).count()</span><br><span class="line">   #总页码</span><br><span class="line">    total_page_count,div=divmod(total_count,pageSize)</span><br><span class="line">    if div:</span><br><span class="line">        total_page_count+=1</span><br><span class="line"></span><br><span class="line">    # 计算出，显示当前页的前5页、后5页</span><br><span class="line">    plus=5</span><br><span class="line">    if total_page_count&lt;=2*plus+1:</span><br><span class="line">        #数据库中的数据比较少，都没有达到11页</span><br><span class="line">        start_page=1</span><br><span class="line">        end_page=total_page_count</span><br><span class="line">    else:</span><br><span class="line">        #数据库中的数据比较多 &gt;11页</span><br><span class="line"></span><br><span class="line">        #当前页&lt;5时(极小值)</span><br><span class="line">        if page&lt;=plus:</span><br><span class="line">            start_page=1</span><br><span class="line">            end_page=2*plus+1</span><br><span class="line">        else:</span><br><span class="line">            #当前页&gt;5</span><br><span class="line">            #当前页+5&gt;总页面</span><br><span class="line">            if (page+plus)&gt;total_page_count:</span><br><span class="line">                start_page=total_page_count-2*plus</span><br><span class="line">                end_page=total_page_count</span><br><span class="line">            else:</span><br><span class="line">                start_page=page-plus</span><br><span class="line">                end_page=page+plus</span><br><span class="line">    #页码</span><br><span class="line">    page_str_list=[]</span><br><span class="line">    #首页</span><br><span class="line">    page_str_list.append(&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;&#x27;.format(1))</span><br><span class="line">    #上一页</span><br><span class="line">    if page&gt;1:</span><br><span class="line">        prev=&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;&#x27;.format(page-1)</span><br><span class="line">    else:</span><br><span class="line">        prev=&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;&#x27;.format(1)</span><br><span class="line">    page_str_list.append(prev)</span><br><span class="line">    </span><br><span class="line">    for i in range(start_page,end_page+1):</span><br><span class="line">        if i==page:</span><br><span class="line">            ele=&#x27;&lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;&#123;&#125;&lt;/a&gt;&lt;/li&gt;&#x27;.format(i,i)</span><br><span class="line">        else:</span><br><span class="line">            ele=&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;&#123;&#125;&lt;/a&gt;&lt;/li&gt;&#x27;.format(i,i)</span><br><span class="line">        page_str_list.append(ele)</span><br><span class="line">    #下一页</span><br><span class="line">    if page&lt;total_page_count:</span><br><span class="line">        prev=&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;&#x27;.format(page+1)</span><br><span class="line">    else:</span><br><span class="line">        prev=&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;&#x27;.format(total_page_count)</span><br><span class="line">    page_str_list.append(prev)</span><br><span class="line">    #尾页</span><br><span class="line">    page_str_list.append(&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;尾页&lt;/a&gt;&lt;/li&gt;&#x27;.format(total_page_count))</span><br><span class="line">    </span><br><span class="line">    page_string =mark_safe(&quot;&quot;.join(page_str_list))</span><br><span class="line">    return render(request,&#x27;pretty_list.html&#x27;,&#123;&#x27;qurylist&#x27;:qurylist,&quot;search_data&quot;:value,&quot;page_string&quot;:page_string&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">def pretty_list(request):</span><br><span class="line">##搜索</span><br><span class="line"># --------------------</span><br><span class="line"># 1.PrettyNum.objects.filter&#123;mobile=&#x27;13906135233&#x27;,&quot;id&quot;:123&#125;</span><br><span class="line"># 2.data_dict=&#123;&quot;mobile&quot;:&quot;13906135233&quot;,&quot;id&quot;:123&#125;</span><br><span class="line">#   PrettyNum.objects.filter(**data_dict)</span><br><span class="line"># --------------------------------</span><br><span class="line"># PrettyNum.objects.filter(id=12)  等于12</span><br><span class="line"># PrettyNum.objects.filter(id__gt=12) 大于12</span><br><span class="line"># PrettyNum.objects.filter(id__gte=12) 大于等于12</span><br><span class="line"># PrettyNum.objects.filter(id__lt=12)   小于12</span><br><span class="line"># PrettyNum.objects.filter(id__lte=12) 小于等于12</span><br><span class="line"></span><br><span class="line"># data_dict=&#123;&quot;id__lte&quot;:12&#125;</span><br><span class="line"># # -----------------------------------</span><br><span class="line"># PrettyNum.objects.filter(mobile=&#x27;233&#x27;)  等于</span><br><span class="line"># PrettyNum.objects.filter(mobile__startswitch=&quot;139&quot;) 筛选出以139开头</span><br><span class="line"># PrettyNum.objects.filter(mobile__endswitch=&quot;233&quot;) 筛选出以233结尾</span><br><span class="line"># PrettyNum.objects.filter(mobile__contains=&quot;5233&quot;) 筛选出包含5233</span><br><span class="line"># use</span><br><span class="line"># data_dict=&#123;&quot;mobile__contains&quot;:&quot;233&quot;&#125;</span><br><span class="line"># PrettyNum.objects.filter(**data_dict)</span><br><span class="line"># ----------------------------------------</span><br><span class="line"># test</span><br><span class="line">    # for i in range(300):</span><br><span class="line">    #     PrettyNum.objects.create(mobile=&quot;13906135899&quot;,price=10,level=1,status=1)</span><br><span class="line"></span><br><span class="line">    data_dict=&#123;&#125;</span><br><span class="line">    value=request.GET.get(&#x27;q&#x27;,&#x27;&#x27;)</span><br><span class="line">    if value:</span><br><span class="line">        data_dict[&quot;mobile__contains&quot;] = value</span><br><span class="line">    # res=PrettyNum.objects.filter(**data_dict)</span><br><span class="line">    # print(res)</span><br><span class="line"></span><br><span class="line">    # if request.method==&#x27;GET&#x27;:</span><br><span class="line">    # ****qurylist=PrettyNum.objects.filter(**data_dict).order_by(&quot;-level&quot;)[start:end]</span><br><span class="line">    #select * from 表 order by level desc</span><br><span class="line">    # qurylist=PrettyNum.objects.all().order_by(&quot;-level&quot;)</span><br><span class="line">#分页</span><br><span class="line">    # qurylist=PrettyNum.objects.all()</span><br><span class="line">    # qurylist=PrettyNum.objects.filter(id=4)[0:10]</span><br><span class="line">    # qurylist=PrettyNum.objects.all()[0:10]</span><br><span class="line">    # qurylist=PrettyNum.objects.all()[10:20]</span><br><span class="line">    # qurylist=PrettyNum.objects.all()[20:30]</span><br><span class="line">    page=int(request.GET.get(&#x27;page&#x27;,1))</span><br><span class="line">    pageSize=10</span><br><span class="line">    start=(page-1)*pageSize</span><br><span class="line">    end=page*pageSize</span><br><span class="line"></span><br><span class="line">    qurylist=PrettyNum.objects.filter(**data_dict).order_by(&quot;-level&quot;)[start:end]</span><br><span class="line">   #总数据条数</span><br><span class="line">    total_count=PrettyNum.objects.filter(**data_dict).order_by(&quot;-level&quot;).count()</span><br><span class="line">   #总页码</span><br><span class="line">    total_page_count,div=divmod(total_count,pageSize)</span><br><span class="line">    if div:</span><br><span class="line">        total_page_count+=1</span><br><span class="line"></span><br><span class="line">    # 计算出，显示当前页的前5页、后5页</span><br><span class="line">    plus=5</span><br><span class="line">    if total_page_count&lt;=2*plus+1:</span><br><span class="line">        #数据库中的数据比较少，都没有达到11页</span><br><span class="line">        start_page=1</span><br><span class="line">        end_page=total_page_count</span><br><span class="line">    else:</span><br><span class="line">        #数据库中的数据比较多 &gt;11页</span><br><span class="line"></span><br><span class="line">        #当前页&lt;5时(极小值)</span><br><span class="line">        if page&lt;=plus:</span><br><span class="line">            start_page=1</span><br><span class="line">            end_page=2*plus+1</span><br><span class="line">        else:</span><br><span class="line">            #当前页&gt;5</span><br><span class="line">            #当前页+5&gt;总页面</span><br><span class="line">            if (page+plus)&gt;total_page_count:</span><br><span class="line">                start_page=total_page_count-2*plus</span><br><span class="line">                end_page=total_page_count</span><br><span class="line">            else:</span><br><span class="line">                start_page=page-plus</span><br><span class="line">                end_page=page+plus</span><br><span class="line">    #页码</span><br><span class="line">    page_str_list=[]</span><br><span class="line">    #首页</span><br><span class="line">    page_str_list.append(&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;&#x27;.format(1))</span><br><span class="line">    #上一页</span><br><span class="line">    if page&gt;1:</span><br><span class="line">        prev=&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;&#x27;.format(page-1)</span><br><span class="line">    else:</span><br><span class="line">        prev=&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;&#x27;.format(1)</span><br><span class="line">    page_str_list.append(prev)</span><br><span class="line">    </span><br><span class="line">    for i in range(start_page,end_page+1):</span><br><span class="line">        if i==page:</span><br><span class="line">            ele=&#x27;&lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;&#123;&#125;&lt;/a&gt;&lt;/li&gt;&#x27;.format(i,i)</span><br><span class="line">        else:</span><br><span class="line">            ele=&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;&#123;&#125;&lt;/a&gt;&lt;/li&gt;&#x27;.format(i,i)</span><br><span class="line">        page_str_list.append(ele)</span><br><span class="line">    #下一页</span><br><span class="line">    if page&lt;total_page_count:</span><br><span class="line">        prev=&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;&#x27;.format(page+1)</span><br><span class="line">    else:</span><br><span class="line">        prev=&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;&#x27;.format(total_page_count)</span><br><span class="line">    page_str_list.append(prev)</span><br><span class="line">    #尾页</span><br><span class="line">    page_str_list.append(&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;尾页&lt;/a&gt;&lt;/li&gt;&#x27;.format(total_page_count))</span><br><span class="line">    search_string=&quot;&quot;&quot;&quot;</span><br><span class="line">  &lt;form class=&quot;navbar-form navbar-left&quot; method=&quot;GET&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;Search&quot; name=&quot;page&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;Submit&lt;/button&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    page_str_list.append(search_string)</span><br><span class="line">    page_string =mark_safe(&quot;&quot;.join(page_str_list))</span><br><span class="line">    return render(request,&#x27;pretty_list.html&#x27;,&#123;&#x27;qurylist&#x27;:qurylist,&quot;search_data&quot;:value,&quot;page_string&quot;:page_string&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &#x27;layout.html&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div style=&quot;float: right;&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;form class=&quot;navbar-form navbar-left&quot; method=&quot;GET&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;Search&quot; name=&quot;q&quot; value=&quot;&#123;&#123;search_data&#125;&#125;&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;Search&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div&gt;            </span><br><span class="line">  &lt;a href=&quot;/pretty/add/&quot; &gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-success dropdown-toggle&quot; data-toggle=&quot;dropdown&quot; aria-haspopup=&quot;true&quot; aria-expanded=&quot;false&quot;&gt;新建&lt;/button&gt;&lt;/a&gt;    </span><br><span class="line">  &lt;!-- &lt;a href=&quot;/usr/addform&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-success dropdown-toggle&quot; data-toggle=&quot;dropdown&quot; aria-haspopup=&quot;true&quot; aria-expanded=&quot;false&quot;&gt;用form新建&lt;/button&gt;&lt;/a&gt; --&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;panel panel-default &quot;&gt; &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;bs-example&quot; data-example-id=&quot;table-within-panel&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;panel panel-default&quot;&gt;</span><br><span class="line">    &lt;!-- Default panel contents --&gt;</span><br><span class="line">    &lt;div class=&quot;panel-heading&quot;&gt;靓号列表&lt;/div&gt;</span><br><span class="line">    &lt;!-- &lt;div class=&quot;panel-body&quot;&gt;</span><br><span class="line">    &lt;/div&gt; --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Table --&gt;</span><br><span class="line">    &lt;table class=&quot;table&quot;&gt;</span><br><span class="line">      &lt;thead&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">          &lt;th&gt;id&lt;/th&gt;</span><br><span class="line">          &lt;th&gt;手机号&lt;/th&gt;</span><br><span class="line">          &lt;th&gt;价格&lt;/th&gt;</span><br><span class="line">          &lt;th&gt;级别&lt;/th&gt;</span><br><span class="line">          &lt;th&gt;状态&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">      &lt;/thead&gt;</span><br><span class="line"></span><br><span class="line">      &lt;tbody&gt;</span><br><span class="line">          &#123;% for mp in qurylist %&#125;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">          &lt;th scope=&quot;row&quot;&gt;&#123;&#123;mp.id&#125;&#125;&lt;/th&gt;</span><br><span class="line">          &lt;td&gt;&#123;&#123;mp.mobile&#125;&#125;&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;&#123;&#123;mp.price&#125;&#125;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">          &lt;!-- &lt;td&gt;&#123;&#123;mp.create_time&#125;&#125;&lt;/td&gt; --&gt;</span><br><span class="line">          &lt;!-- &lt;td&gt;&#123;&#123;mp.create_time|date:&quot;Y-m-d H:i:s&quot;&#125;&#125;&lt;/td&gt; --&gt;</span><br><span class="line">          &lt;td&gt;&#123;&#123;mp.get_level_display&#125;&#125;&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;&#123;&#123;mp.get_status_display&#125;&#125;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">          &lt;td&gt;</span><br><span class="line">            &lt;a href=&quot;/pretty/&#123;&#123;mp.id&#125;&#125;/edit/&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-warning dropdown-toggle&quot; data-toggle=&quot;dropdown&quot; aria-haspopup=&quot;true&quot; aria-expanded=&quot;false&quot;&gt;编辑&lt;/button&gt;&lt;/a&gt;  </span><br><span class="line">           &lt;!-- &lt;a href=&quot;/dep/delete/?memid=&#123;&#123;mp.id&#125;&#125;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-danger dropdown-toggle&quot; data-toggle=&quot;dropdown&quot; aria-haspopup=&quot;true&quot; aria-expanded=&quot;false&quot; &gt;删除&lt;/button&gt;&lt;/a&gt; --&gt;</span><br><span class="line">           &lt;!-- &lt;a href=&quot;/dep/delete/?memid=&#123;&#123;mp.id&#125;&#125;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-danger dropdown-toggle&quot; data-toggle=&quot;dropdown&quot; aria-haspopup=&quot;true&quot; aria-expanded=&quot;false&quot; &gt;删除&lt;/button&gt;&lt;/a&gt; --&gt;</span><br><span class="line">           &lt;a href=&quot;/pretty/&#123;&#123;mp.id&#125;&#125;/delete/&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-danger dropdown-toggle&quot; data-toggle=&quot;dropdown&quot; aria-haspopup=&quot;true&quot; aria-expanded=&quot;false&quot; &gt;删除&lt;/button&gt;&lt;/a&gt;</span><br><span class="line">          &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">      &#123;% endfor %&#125;</span><br><span class="line">   </span><br><span class="line">      &lt;/tbody&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;nav aria-label=&quot;Page navigation&quot;&gt;</span><br><span class="line">    &lt;ul class=&quot;pagination&quot;&gt;</span><br><span class="line">      &#123;&#123;page_string&#125;&#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/nav&gt;</span><br><span class="line">  &lt;!-- &lt;form class=&quot;navbar-form navbar-left&quot; method=&quot;GET&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;Search&quot; name=&quot;page&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;Submit&lt;/button&gt;</span><br><span class="line">  &lt;/form&gt; --&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><h2 id="BootStrap样式父类"><a href="#BootStrap样式父类" class="headerlink" title="BootStrap样式父类"></a>BootStrap样式父类</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br></pre></td><td class="code"><pre><span class="line">from django.shortcuts import render,HttpResponse,redirect</span><br><span class="line">from .models import Department,Employee,PrettyNum</span><br><span class="line">from django import forms</span><br><span class="line">from django.core.exceptions import ValidationError</span><br><span class="line">from django.core.validators import RegexValidator</span><br><span class="line">from django.utils.safestring import mark_safe</span><br><span class="line">from app01.utils.pagination import Pagination</span><br><span class="line">import copy</span><br><span class="line"># Create your views here.</span><br><span class="line">def department_list(request):</span><br><span class="line">    member_list=Department.objects.all()</span><br><span class="line">    return  render(request,&#x27;dep.html&#x27;,&#123;&#x27;member&#x27;:member_list&#125;)</span><br><span class="line"></span><br><span class="line">def add_dep(request):</span><br><span class="line">    if request.method==&#x27;GET&#x27;:</span><br><span class="line">        return render(request,&#x27;adddep.html&#x27;)</span><br><span class="line">    elif request.method==&#x27;POST&#x27;:</span><br><span class="line">        title=request.POST.get(&#x27;aatitle&#x27;)</span><br><span class="line">        Department.objects.create(tittle=title)</span><br><span class="line">        return redirect(&quot;/dep/list/&quot;)</span><br><span class="line"></span><br><span class="line">def delete_dep(request):</span><br><span class="line">    memid=request.GET.get(&#x27;memid&#x27;)</span><br><span class="line">    Department.objects.filter(id=memid).delete()</span><br><span class="line">    return redirect(&quot;/dep/list/&quot;)</span><br><span class="line">def edit_dep(request,memid):</span><br><span class="line">    if request.method==&#x27;GET&#x27;:</span><br><span class="line">        nnmame=Department.objects.filter(id=memid).first()</span><br><span class="line">        return render(request,&#x27;editdpt.html&#x27;,&#123;&#x27;nnmame&#x27;:nnmame.tittle&#125;)</span><br><span class="line">    aatitle=request.POST.get(&#x27;aatitle&#x27;)</span><br><span class="line">    Department.objects.filter(id=memid).update(tittle=aatitle)</span><br><span class="line">    return redirect(&quot;/dep/list/&quot;)</span><br><span class="line"></span><br><span class="line">def test(request):</span><br><span class="line">    return render(request,&#x27;tt.html&#x27;)</span><br><span class="line">def usr_list(request):</span><br><span class="line">        # for i in range(300):</span><br><span class="line">        #     Employee.objects.create(name=&quot;maomao&quot;,password=123,age=50,create_time=&#x27;2023-10-5&#x27;,depart_id=5)</span><br><span class="line">    </span><br><span class="line">        qurylist=Employee.objects.all()</span><br><span class="line"></span><br><span class="line">        page_object=Pagination(request,qurylist)</span><br><span class="line"></span><br><span class="line">        context=&#123;</span><br><span class="line">            &quot;qurylist&quot;:page_object.page_qurylist,</span><br><span class="line">            &quot;page_string&quot;:page_object.html(),</span><br><span class="line">        &#125;</span><br><span class="line">        return render(request,&#x27;usr.html&#x27;,context)</span><br><span class="line"># class MyForm(forms.Form):</span><br><span class="line">    # usr=forms.CharField(widget=forms.EmailInput)</span><br><span class="line">    # pwd=forms.CharField(widget=forms.PasswordInput)</span><br><span class="line">    # age=forms.ImageField(widget=forms.NumberInput)</span><br><span class="line"># class MyForm(forms.Form):</span><br><span class="line">#     class Meta:</span><br><span class="line">#         model=Employee</span><br><span class="line">#         fields=[&#x27;name&#x27;,&#x27;password&#x27;,&#x27;age&#x27;]</span><br><span class="line">def add_usr(request):</span><br><span class="line">    </span><br><span class="line">    context=&#123;</span><br><span class="line">        &#x27;gender_choice&#x27;:Employee.gender_choices,</span><br><span class="line">        &#x27;depart_list&#x27;:Department.objects.all()</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    # form=MyForm()</span><br><span class="line">    </span><br><span class="line">    return render(request,&#x27;add_usr.html&#x27;,context)</span><br><span class="line">    # return render(request,&#x27;add_usr_fro.html&#x27;,&#123;&#x27;form&#x27;:form&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class MyForm(forms.ModelForm):</span><br><span class="line">    # name=forms.CharField(min_length=3,label=&quot;用户名&quot;)</span><br><span class="line">    # usr=forms.CharField(widget=forms.EmailInput)</span><br><span class="line">    # pwd=forms.CharField(widget=forms.PasswordInput)</span><br><span class="line">    # age=forms.ImageField(widget=forms.NumberInput)</span><br><span class="line">    class Meta:</span><br><span class="line">        model=Employee</span><br><span class="line">        fields=[&#x27;name&#x27;,&#x27;password&#x27;,&#x27;age&#x27;,&#x27;account&#x27;,&#x27;create_time&#x27;,&#x27;depart&#x27;,&#x27;gender&#x27;]</span><br><span class="line">        widgets=&#123;</span><br><span class="line">            &quot;name&quot;:forms.TextInput(attrs=&#123;&quot;class&quot;:&quot;form-control&quot;&#125;),</span><br><span class="line">            &quot;age&quot;:forms.TextInput(attrs=&#123;&quot;class&quot;:&quot;form-control&quot;&#125;),</span><br><span class="line">            &quot;create-time&quot;:forms.TextInput(attrs=&#123;&quot;type&quot;:&quot;data&quot;&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        # def __init__(self,*args, **kwargs):</span><br><span class="line">        #    super().__init__(*args,**kwargs)</span><br><span class="line">        #</span><br><span class="line">        #    for name,field in self.fields.items():</span><br><span class="line">        #        field.Widget.attrs=&#123;&quot;class&quot;:&quot;form-control&quot;,&quot;placeholder&quot;:field.label&#125;</span><br><span class="line"></span><br><span class="line">def add_usr_form(request):</span><br><span class="line">    if request.method == &quot;GET&quot;:</span><br><span class="line">      form=MyForm()</span><br><span class="line">      return render(request,&#x27;add_usr_fro.html&#x27;,&#123;&#x27;form&#x27;:form&#125;)</span><br><span class="line">    </span><br><span class="line">    # post 校验</span><br><span class="line">    form=MyForm(data=request.POST)</span><br><span class="line">    if form.is_valid():</span><br><span class="line">        form.save()</span><br><span class="line">        return redirect(&#x27;/usr/list/&#x27;)</span><br><span class="line">    else:</span><br><span class="line">        return render(request,&#x27;add_usr_fro.html&#x27;,&#123;&quot;form&quot;:form&#125;)</span><br><span class="line">def usr_edit(request,nid):</span><br><span class="line">    #获取默认值</span><br><span class="line">    row_object=Employee.objects.filter(id=nid).first()</span><br><span class="line">    if request.method ==&#x27;GET&#x27;:</span><br><span class="line">        form =MyForm(instance=row_object)</span><br><span class="line">        return render(request,&#x27;usr_edit.html&#x27;,&#123;&#x27;form&#x27;:form&#125;)</span><br><span class="line">    #post</span><br><span class="line">    form=MyForm(data=request.POST,instance=row_object)</span><br><span class="line">    if form.is_valid():</span><br><span class="line">        form.save()</span><br><span class="line">        return redirect(&#x27;/usr/list/&#x27;)</span><br><span class="line">    return render(request,&#x27;usr_edit.html&#x27;,&#123;&#x27;form&#x27;:form&#125;)</span><br><span class="line">def usr_delete(request,nid):</span><br><span class="line">    Employee.objects.filter(id=nid).delete()</span><br><span class="line">    return redirect(&#x27;/usr/list/&#x27;)</span><br><span class="line">class PrettyForm(forms.ModelForm):</span><br><span class="line">    # 验证方法一</span><br><span class="line">    # mobile=forms.CharField(</span><br><span class="line">    #     label=&quot;手机号&quot;,</span><br><span class="line">    #     validators=[RegexValidator(r&#x27;^1[3-9]\d&#123;9&#125;$&#x27;,&#x27;手机号格式错误&#x27;)]</span><br><span class="line">    # )</span><br><span class="line">    class Meta:</span><br><span class="line">        model=PrettyNum</span><br><span class="line">        fields=[&#x27;mobile&#x27;,&#x27;price&#x27;,&#x27;level&#x27;,&#x27;status&#x27;]</span><br><span class="line">        # fields=&quot;__all__&quot;</span><br><span class="line">        # exclude=[&#x27;level&#x27;]</span><br><span class="line">        widgets=&#123;</span><br><span class="line">            &quot;mobile&quot;:forms.TextInput(attrs=&#123;&quot;class&quot;:&quot;form-control&quot;&#125;),</span><br><span class="line">            &quot;price&quot;:forms.TextInput(attrs=&#123;&quot;class&quot;:&quot;form-control&quot;&#125;),</span><br><span class="line">            &quot;level&quot;:forms.TextInput(attrs=&#123;&quot;class&quot;:&quot;form-control&quot;&#125;),</span><br><span class="line">            &quot;status&quot;:forms.TextInput(attrs=&#123;&quot;class&quot;:&quot;form-control&quot;&#125;),</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"># 验证方法二</span><br><span class="line">    def clean_mobile(self):</span><br><span class="line">        txt_mobile=self.cleaned_data[&quot;mobile&quot;]</span><br><span class="line">        exists=PrettyNum.objects.filter(mobile=txt_mobile).exists()</span><br><span class="line"></span><br><span class="line">        if len(txt_mobile)!=11:</span><br><span class="line">            #验证不通过</span><br><span class="line">            raise ValidationError(&quot;格式错误&quot;)</span><br><span class="line">        if exists:</span><br><span class="line">            #验证不通过</span><br><span class="line">            raise ValidationError(&quot;手机号已存在&quot;)</span><br><span class="line">        return txt_mobile</span><br><span class="line">def pretty_list(request):</span><br><span class="line">##搜索</span><br><span class="line"># --------------------</span><br><span class="line"># 1.PrettyNum.objects.filter&#123;mobile=&#x27;13906135233&#x27;,&quot;id&quot;:123&#125;</span><br><span class="line"># 2.data_dict=&#123;&quot;mobile&quot;:&quot;13906135233&quot;,&quot;id&quot;:123&#125;</span><br><span class="line">#   PrettyNum.objects.filter(**data_dict)</span><br><span class="line"># --------------------------------</span><br><span class="line"># PrettyNum.objects.filter(id=12)  等于12</span><br><span class="line"># PrettyNum.objects.filter(id__gt=12) 大于12</span><br><span class="line"># PrettyNum.objects.filter(id__gte=12) 大于等于12</span><br><span class="line"># PrettyNum.objects.filter(id__lt=12)   小于12</span><br><span class="line"># PrettyNum.objects.filter(id__lte=12) 小于等于12</span><br><span class="line"></span><br><span class="line"># data_dict=&#123;&quot;id__lte&quot;:12&#125;</span><br><span class="line"># # -----------------------------------</span><br><span class="line"># PrettyNum.objects.filter(mobile=&#x27;233&#x27;)  等于</span><br><span class="line"># PrettyNum.objects.filter(mobile__startswitch=&quot;139&quot;) 筛选出以139开头</span><br><span class="line"># PrettyNum.objects.filter(mobile__endswitch=&quot;233&quot;) 筛选出以233结尾</span><br><span class="line"># PrettyNum.objects.filter(mobile__contains=&quot;5233&quot;) 筛选出包含5233</span><br><span class="line"># use</span><br><span class="line"># data_dict=&#123;&quot;mobile__contains&quot;:&quot;233&quot;&#125;</span><br><span class="line"># PrettyNum.objects.filter(**data_dict)</span><br><span class="line"># ----------------------------------------</span><br><span class="line"># test</span><br><span class="line">    # for i in range(300):</span><br><span class="line">    #     PrettyNum.objects.create(mobile=&quot;13906135899&quot;,price=10,level=1,status=1)</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">    # print(request.GET)</span><br><span class="line">    # request.GET.setlist(&#x27;xx&#x27;,11)</span><br><span class="line">    # print(request.GET.urlencode())</span><br><span class="line"></span><br><span class="line">    #q=123&amp;page=2</span><br><span class="line"></span><br><span class="line">    # get_object=copy.deepcopy(request.GET)</span><br><span class="line">    # get_object._mutable=True</span><br><span class="line">    # get_object.setlist(&#x27;page&#x27;,[11])</span><br><span class="line">    # print(get_object.urlencode())</span><br><span class="line">    qury_dict=copy.deepcopy(request.GET)</span><br><span class="line">    qury_dict._mutable=True</span><br><span class="line">    qury_dict.setlist(&#x27;page&#x27;,[11])</span><br><span class="line">    print(qury_dict.urlencode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    data_dict=&#123;&#125;</span><br><span class="line">    value=request.GET.get(&#x27;q&#x27;,&#x27;&#x27;)</span><br><span class="line">    if value:</span><br><span class="line">        data_dict[&quot;mobile__contains&quot;] = value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    qurylist=PrettyNum.objects.filter(**data_dict).order_by(&quot;-level&quot;)</span><br><span class="line">    page_object= Pagination(request,qurylist)</span><br><span class="line">    page_qurylist=page_object.page_qurylist</span><br><span class="line">    page_string=page_object.html()</span><br><span class="line">    context=&#123;&#x27;qurylist&#x27;:page_qurylist,</span><br><span class="line">             &quot;search_data&quot;:value,</span><br><span class="line">             &quot;page_string&quot;:page_string&#125;</span><br><span class="line">    # res=PrettyNum.objects.filter(**data_dict)</span><br><span class="line">    # print(res)</span><br><span class="line"></span><br><span class="line">    # if request.method==&#x27;GET&#x27;:</span><br><span class="line">    # ****qurylist=PrettyNum.objects.filter(**data_dict).order_by(&quot;-level&quot;)[start:end]</span><br><span class="line">    #select * from 表 order by level desc</span><br><span class="line">    # qurylist=PrettyNum.objects.all().order_by(&quot;-level&quot;)</span><br><span class="line">#分页</span><br><span class="line">    # qurylist=PrettyNum.objects.all()</span><br><span class="line">    # qurylist=PrettyNum.objects.filter(id=4)[0:10]</span><br><span class="line">    # qurylist=PrettyNum.objects.all()[0:10]</span><br><span class="line">    # qurylist=PrettyNum.objects.all()[10:20]</span><br><span class="line">    # qurylist=PrettyNum.objects.all()[20:30]</span><br><span class="line">    # page=int(request.GET.get(&#x27;page&#x27;,1))</span><br><span class="line">    # pageSize=10</span><br><span class="line">    # start=(page-1)*pageSize</span><br><span class="line">    # end=page*pageSize</span><br><span class="line"></span><br><span class="line">    # qurylist=PrettyNum.objects.filter(**data_dict).order_by(&quot;-level&quot;)[page_object.start:page_object.end]</span><br><span class="line">   #总数据条数</span><br><span class="line">#     total_count=PrettyNum.objects.filter(**data_dict).order_by(&quot;-level&quot;).count()</span><br><span class="line">#    #总页码</span><br><span class="line">#     total_page_count,div=divmod(total_count,pageSize)</span><br><span class="line">#     if div:</span><br><span class="line">#         total_page_count+=1</span><br><span class="line"></span><br><span class="line">    # 计算出，显示当前页的前5页、后5页</span><br><span class="line">#     plus=5</span><br><span class="line">#     if total_page_count&lt;=2*plus+1:</span><br><span class="line">#         #数据库中的数据比较少，都没有达到11页</span><br><span class="line">#         start_page=1</span><br><span class="line">#         end_page=total_page_count</span><br><span class="line">#     else:</span><br><span class="line">#         #数据库中的数据比较多 &gt;11页</span><br><span class="line"></span><br><span class="line">#         #当前页&lt;5时(极小值)</span><br><span class="line">#         if page&lt;=plus:</span><br><span class="line">#             start_page=1</span><br><span class="line">#             end_page=2*plus+1</span><br><span class="line">#         else:</span><br><span class="line">#             #当前页&gt;5</span><br><span class="line">#             #当前页+5&gt;总页面</span><br><span class="line">#             if (page+plus)&gt;total_page_count:</span><br><span class="line">#                 start_page=total_page_count-2*plus</span><br><span class="line">#                 end_page=total_page_count</span><br><span class="line">#             else:</span><br><span class="line">#                 start_page=page-plus</span><br><span class="line">#                 end_page=page+plus</span><br><span class="line">#     #页码</span><br><span class="line">#     page_str_list=[]</span><br><span class="line">#     #首页</span><br><span class="line">#     page_str_list.append(&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;&#x27;.format(1))</span><br><span class="line">#     #上一页</span><br><span class="line">#     if page&gt;1:</span><br><span class="line">#         prev=&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;&#x27;.format(page-1)</span><br><span class="line">#     else:</span><br><span class="line">#         prev=&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;&#x27;.format(1)</span><br><span class="line">#     page_str_list.append(prev)</span><br><span class="line">    </span><br><span class="line">#     for i in range(start_page,end_page+1):</span><br><span class="line">#         if i==page:</span><br><span class="line">#             ele=&#x27;&lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;&#123;&#125;&lt;/a&gt;&lt;/li&gt;&#x27;.format(i,i)</span><br><span class="line">#         else:</span><br><span class="line">#             ele=&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;&#123;&#125;&lt;/a&gt;&lt;/li&gt;&#x27;.format(i,i)</span><br><span class="line">#         page_str_list.append(ele)</span><br><span class="line">#     #下一页</span><br><span class="line">#     if page&lt;total_page_count:</span><br><span class="line">#         prev=&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;&#x27;.format(page+1)</span><br><span class="line">#     else:</span><br><span class="line">#         prev=&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;&#x27;.format(total_page_count)</span><br><span class="line">#     page_str_list.append(prev)</span><br><span class="line">#     #尾页</span><br><span class="line">#     page_str_list.append(&#x27;&lt;li&gt;&lt;a href=&quot;?page=&#123;&#125;&quot;&gt;尾页&lt;/a&gt;&lt;/li&gt;&#x27;.format(total_page_count))</span><br><span class="line">#     search_string=&quot;&quot;&quot;&quot;</span><br><span class="line">#   &lt;form class=&quot;navbar-form navbar-left&quot; method=&quot;GET&quot;&gt;</span><br><span class="line">#     &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">#       &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;Search&quot; name=&quot;page&quot;&gt;</span><br><span class="line">#     &lt;/div&gt;</span><br><span class="line">#     &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;Submit&lt;/button&gt;</span><br><span class="line">#   &lt;/form&gt;</span><br><span class="line">#     &quot;&quot;&quot;</span><br><span class="line">#     page_str_list.append(search_string)</span><br><span class="line">#     page_string =mark_safe(&quot;&quot;.join(page_str_list))</span><br><span class="line">    return render(request,&#x27;pretty_list.html&#x27;,context)</span><br><span class="line">def pretty_add(request):</span><br><span class="line">    if request.method==&#x27;GET&#x27;:</span><br><span class="line">        form=PrettyForm()</span><br><span class="line">        return render(request,&#x27;pretty_add.html&#x27;,&#123;&#x27;form&#x27;:form&#125;)</span><br><span class="line">    #post校验</span><br><span class="line">    form=PrettyForm(data=request.POST)</span><br><span class="line">    if form.is_valid():</span><br><span class="line">        form.save()</span><br><span class="line">        return redirect(&#x27;/pretty/list/&#x27;)</span><br><span class="line">    else:</span><br><span class="line">        return render(request,&#x27;pretty_add.html&#x27;,&#123;&quot;form&quot;:form&#125;)</span><br><span class="line">class PrettyEditModelForm(forms.ModelForm):</span><br><span class="line">        # 验证方法一</span><br><span class="line">    mobile=forms.CharField(</span><br><span class="line">  </span><br><span class="line">        label=&quot;手机号&quot;,</span><br><span class="line">        # disabled=True,</span><br><span class="line">        validators=[RegexValidator(r&#x27;^1[3-9]\d&#123;9&#125;$&#x27;,&#x27;手机号格式错误&#x27;)],</span><br><span class="line">    ) </span><br><span class="line">    ## mobile=forms.CharField(disabled=True,label=&quot;手机号&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        model=PrettyNum</span><br><span class="line">        fields=[&#x27;mobile&#x27;,&#x27;price&#x27;,&#x27;level&#x27;,&#x27;status&#x27;]</span><br><span class="line">    def clean_mobile(self):</span><br><span class="line">    #     print(self.instance.pk)</span><br><span class="line">        </span><br><span class="line">        txt_mobile=self.cleaned_data[&quot;mobile&quot;]</span><br><span class="line">        exists=PrettyNum.objects.exclude(id=self.instance.pk).filter(mobile=txt_mobile).exists()</span><br><span class="line">        # if len(txt_mobile)!=11:</span><br><span class="line">        #     # 验证不通过</span><br><span class="line">        #     raise ValidationError(&quot;格式错误&quot;)</span><br><span class="line">        if exists:</span><br><span class="line">            #验证不通过</span><br><span class="line">            raise ValidationError(&quot;手机号已存在&quot;)</span><br><span class="line">        return txt_mobile</span><br><span class="line">       </span><br><span class="line">def pertty_edit(request,nid):</span><br><span class="line">    row_object=PrettyNum.objects.filter(id=nid).first()</span><br><span class="line">    if request.method==&#x27;GET&#x27;:</span><br><span class="line">        form=PrettyEditModelForm(instance=row_object)</span><br><span class="line">        return render(request,&#x27;pretty_edit.html&#x27;,&#123;&#x27;form&#x27;:form&#125;)</span><br><span class="line">    #post</span><br><span class="line">    form=PrettyEditModelForm(data=request.POST,instance=row_object)</span><br><span class="line">    if form.is_valid():</span><br><span class="line">        form.save()</span><br><span class="line">        return redirect(&#x27;/pretty/list/&#x27;)</span><br><span class="line">    else:</span><br><span class="line">        return render(request,&#x27;pretty_edit.html&#x27;,&#123;&#x27;form&#x27;:form&#125;)</span><br><span class="line">def pertty_delete(request,nid):</span><br><span class="line">    PrettyNum.objects.filter(id=nid).delete()</span><br><span class="line">    return redirect(&#x27;/pretty/list/&#x27;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark入门：RDD编程（2）</title>
      <link href="/2023/03/21/Spark%E5%85%A5%E9%97%A8%EF%BC%9ARDD%E7%BC%96%E7%A8%8B%EF%BC%882%EF%BC%89/"/>
      <url>/2023/03/21/Spark%E5%85%A5%E9%97%A8%EF%BC%9ARDD%E7%BC%96%E7%A8%8B%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Spark入门：RDD编程-2"><a href="#Spark入门：RDD编程-2" class="headerlink" title="Spark入门：RDD编程(2)"></a>Spark入门：RDD编程(2)</h1><h1 id="4-2键值对RDD"><a href="#4-2键值对RDD" class="headerlink" title="4.2键值对RDD"></a>4.2键值对RDD</h1><h3 id="4-2-1键值对RDD的创建"><a href="#4-2-1键值对RDD的创建" class="headerlink" title="4.2.1键值对RDD的创建"></a>4.2.1键值对RDD的创建</h3><p><img src="E:\BLOG\blog1\source\images\spark\55.png" alt="1679919962655"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lines=sc.textFile(&quot;file:///usr/local/spark/mycode/rdd/word.txt&quot;)</span><br><span class="line"></span><br><span class="line">pairRdd=lines.flatMap(lambda line:line.split(&quot; &quot;)).map(lambda word:(word,1))</span><br><span class="line"></span><br><span class="line">pairRdd.foreach(print)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="E:\BLOG\blog1\source\images\spark\57.png" alt="1679920610754"></p><p><img src="E:\BLOG\blog1\source\images\spark\56.png" alt="1679920024570"></p><p><img src="E:\BLOG\blog1\source\images\spark\58.png" alt="1679920857471"></p><h3 id="4-2-2常用键值对转换操作"><a href="#4-2-2常用键值对转换操作" class="headerlink" title="4.2.2常用键值对转换操作"></a>4.2.2常用键值对转换操作</h3><p><img src="E:\BLOG\blog1\source\images\spark\59.png" alt="1679920904927"></p><h4 id="1-reduceByKey-func"><a href="#1-reduceByKey-func" class="headerlink" title="1.reduceByKey(func)"></a>1.reduceByKey(func)</h4><p><img src="E:\BLOG\blog1\source\images\spark\60.png" alt="1679920937895"></p><p><img src="E:\BLOG\blog1\source\images\spark\61.png" alt="1679921092076"></p><h4 id="2-groupByKey"><a href="#2-groupByKey" class="headerlink" title="2.groupByKey()"></a>2.groupByKey()</h4><p><img src="E:\BLOG\blog1\source\images\spark\62.png" alt="1679921126885"></p><p><img src="E:\BLOG\blog1\source\images\spark\63.png" alt="1679921148329"></p><p><img src="E:\BLOG\blog1\source\images\spark\64.png" alt="1679921162978"></p><h4 id="3-key"><a href="#3-key" class="headerlink" title="3.key"></a>3.key</h4><p><img src="E:\BLOG\blog1\source\images\spark\65.png" alt="1679921231527"></p><h4 id="4-value"><a href="#4-value" class="headerlink" title="4.value"></a>4.value</h4><p><img src="E:\BLOG\blog1\source\images\spark\66.png" alt="1679921285079"></p><h4 id="5-sortByKey"><a href="#5-sortByKey" class="headerlink" title="5.sortByKey()"></a>5.sortByKey()</h4><p><img src="E:\BLOG\blog1\source\images\spark\67.png" alt="1679921328845"></p><h4 id="6-sortBy"><a href="#6-sortBy" class="headerlink" title="6.sortBy()"></a>6.sortBy()</h4><p><img src="E:\BLOG\blog1\source\images\spark\68.png" alt="1679921389676"></p><h4 id="7-mapValues-func"><a href="#7-mapValues-func" class="headerlink" title="7.mapValues(func)"></a>7.mapValues(func)</h4><p><img src="E:\BLOG\blog1\source\images\spark\69.png" alt="1679921487925"></p><h4 id="8-join"><a href="#8-join" class="headerlink" title="8.join"></a>8.join</h4><p><img src="E:\BLOG\blog1\source\images\spark\70.png" alt="1679921512081"></p><h3 id="4-2-3一个综合实例"><a href="#4-2-3一个综合实例" class="headerlink" title="4.2.3一个综合实例"></a>4.2.3一个综合实例</h3><p><img src="E:\BLOG\blog1\source\images\spark\71.png" alt="1679921667681"></p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark入门：RDD编程（1）</title>
      <link href="/2023/03/20/spark/"/>
      <url>/2023/03/20/spark/</url>
      
        <content type="html"><![CDATA[<h1 id="Spark入门：RDD编程-1"><a href="#Spark入门：RDD编程-1" class="headerlink" title="Spark入门：RDD编程(1)"></a>Spark入门：RDD编程(1)</h1><span id="more"></span><h1 id="4-1RDD编程基础"><a href="#4-1RDD编程基础" class="headerlink" title="4.1RDD编程基础"></a>4.1RDD编程基础</h1><h2 id="RDD创建"><a href="#RDD创建" class="headerlink" title="RDD创建"></a>RDD创建</h2><p>RDD可以通过两种方式创建：</p><ul><li>第一种：读取一个外部数据集。比如，从本地文件加载数据集，或者从HDFS文件系统、HBase、Cassandra、Amazon S3等外部数据源中加载数据集。Spark可以支持文本文件、SequenceFile文件（Hadoop提供的 SequenceFile是一个由二进制序列化过的key&#x2F;value的字节流组成的文本存储文件）和其他符合Hadoop InputFormat格式的文件。</li><li>第二种：调用SparkContext的parallelize方法，在Driver中一个已经存在的集合（数组）上创建</li></ul><p>在即将进行相关的实践操作之前，我们首先要登录Linux系统（本教程统一采用hadoop用户登录），然后，打开命令行“终端”，请按照下面的命令启动Hadoop中的HDFS组件：</p><h3 id="创建RDD之前的准备工作"><a href="#创建RDD之前的准备工作" class="headerlink" title="创建RDD之前的准备工作"></a>创建RDD之前的准备工作</h3><p>在即将进行相关的实践操作之前，我们首先要登录Linux系统（本教程统一采用hadoop用户登录），然后，打开命令行“终端”，请按照下面的命令启动Hadoop中的HDFS组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd  /usr/local/hadoop</span><br><span class="line">./sbin/start-dfs.sh</span><br></pre></td></tr></table></figure><p>然后，我们按照下面命令启动spark-shell：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/spark</span><br><span class="line">./bin/pyspark</span><br></pre></td></tr></table></figure><p><img src="/images/spark/1.png" alt="1678715171189"></p><p>然后，新建第二个“终端”，方法是，在前面已经建设的第一个终端窗口的左上方，点击“终端”菜单，在弹出的子菜单中选择“新建终端”，就可以打开第二个终端窗口，现在，我们切换到第二个终端窗口，在第二个终端窗口中，执行以下命令，进入之前已经创建好的“&#x2F;usr&#x2F;local&#x2F;spark&#x2F;mycode&#x2F;”目录，在这个目录下新建rdd子目录，用来存放本章的代码和相关文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd usr/local/spark/mycode/</span><br><span class="line">mkdir rdd</span><br></pre></td></tr></table></figure><p>然后，使用vim编辑器，在rdd目录下新建一个word.txt文件，你可以在文件里面随便输入几行英文语句用来测试。</p><p>经过上面的准备工作以后，我们就可以开始创建RDD了。</p><h3 id="从文件系统中加载数据创建RDD"><a href="#从文件系统中加载数据创建RDD" class="headerlink" title="从文件系统中加载数据创建RDD"></a>从文件系统中加载数据创建RDD</h3><p>Spark采用textFile()方法来从文件系统中加载数据创建RDD，该方法把文件的URI作为参数，这个URI可以是本地文件系统的地址，或者是分布式文件系统HDFS的地址，或者是Amazon S3的地址等等。<br>下面请切换回spark-shell窗口，看一下如何从本地文件系统中加载数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;lines = sc.textFile(&quot;file:///usr/local/spark/mycode/rdd/word.txt&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/spark/2.png" alt="1678715444810"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;lines.foreach(print)</span><br></pre></td></tr></table></figure><p><img src="/images/spark/3.png" alt="1678715770877"></p><p><img src="/images/spark/14.png" alt="1678720839060"></p><h3 id="加载HDFS中的文件"><a href="#加载HDFS中的文件" class="headerlink" title="加载HDFS中的文件"></a>加载HDFS中的文件</h3><p>为了能够读取HDFS中的文件，请首先启动Hadoop中的HDFS组件。注意，之前我们在“Spark安装”这章内容已经介绍了如何安装Hadoop和Spark，所以，这里我们可以使用以下命令直接启动Hadoop中的HDFS组件（由于用不到MapReduce组件，所以，不需要启动MapReduce或者YARN）。请到第二个终端窗口，使用Linux Shell命令提示符状态，然后输入下面命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/hadoop</span><br><span class="line">./sbin/start-dfs.sh</span><br></pre></td></tr></table></figure><p><img src="/images/spark/4.png" alt="1678715996913"></p><p>启动结束后，HDFS开始进入可用状态。如果你在HDFS文件系统中，还没有为当前Linux登录用户创建目录(本教程统一使用用户名hadoop登录Linux系统)，请使用下面命令创建：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/hdfs dfs -mkdir -p /user/hadoop</span><br></pre></td></tr></table></figure><p>也就是说，HDFS文件系统为Linux登录用户开辟的默认目录是“&#x2F;user&#x2F;用户名”（注意：是user，不是usr），本教程统一使用用户名hadoop登录Linux系统，所以，上面创建了“&#x2F;user&#x2F;hadoop”目录，再次强调，这个目录是在HDFS文件系统中，不在本地文件系统中。创建好以后，下面我们使用命令查看一下HDFS文件系统中的目录和文件：</p><p><img src="/images/spark/5.png" alt="1678716107634"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/hdfs dfs -ls .</span><br></pre></td></tr></table></figure><p>** 但这个命令我搞不出来，显示的是这个</p><p><img src="/images/spark/6.png" alt="1678717090642"></p><p>–</p><p>上面命令中，最后一个点号“.”，表示要查看Linux当前登录用户hadoop在HDFS文件系统中与hadoop对应的目录下的文件，也就是查看HDFS文件系统中“&#x2F;user&#x2F;hadoop&#x2F;”目录下的文件，所以，下面两条命令是等价的：</p><p>–</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./bin/hdfs dfs -ls .</span><br><span class="line">./bin/hdfs dfs -ls /user/hadoop</span><br></pre></td></tr></table></figure><p> 你自己可以试一试，只有第二个可以用</p><p><img src="/images/spark/7.png" alt="1678717187423"></p><p>如果要查看HDFS文件系统根目录下的内容，需要使用下面命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/hdfs dfs -ls /</span><br></pre></td></tr></table></figure><p>然后输出的东西见上面那个图，有一个items</p><p>下面，我们把本地文件系统中的“&#x2F;usr&#x2F;local&#x2F;spark&#x2F;mycode&#x2F;rdd&#x2F;word.txt”上传到分布式文件系统HDFS中（放到hadoop用户目录下）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/hdfs dfs -put /usr/local/spark/mycode/rdd/word.txt /user/hadoop</span><br></pre></td></tr></table></figure><p><img src="/images/spark/8.png" alt="1678717295097"></p><p>然后，用命令查看一下HDFS的hadoop用户目录下是否多了word.txt文件，可以使用下面命令列出hadoop目录下的内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/hdfs dfs -ls /</span><br></pre></td></tr></table></figure><p><img src="/images/spark/9.png" alt="1678717376742"></p><p>可以看到，确实多了一个word.txt文件，我们使用cat命令查看一个HDFS中的word.txt文件的内容，命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/hdfs dfs -cat ./word.txt</span><br></pre></td></tr></table></figure><p><img src="/images/spark/10.png" alt="1678717420477"></p><p>上面命令执行后，就会看到HDFS中word.txt的内容了。</p><p>现在，让我们切换回到spark-shell窗口，编写语句从HDFS中加载word.txt文件，并显示第一行文本内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;lines= sc.textFile(&quot;hdfs://localhost:9000/user/hadoop/word.txt&quot;)</span><br><span class="line">&gt;&gt;&gt;lines=sc.foreach(print)</span><br></pre></td></tr></table></figure><p><img src="/images/spark/11.png" alt="1678717605626"></p><p><img src="/images/spark/12.png" alt="1678717639868"></p><p>注意，上面三条命令是完全等价的命令，只不过使用了不同的目录形式，你可以使用其中任意一条命令完成数据加载操作。</p><p>在使用Spark读取文件时，需要说明以下几点：<br>（1）如果使用了本地文件系统的路径，那么，必须要保证在所有的worker节点上，也都能够采用相同的路径访问到该文件，比如，可以把该文件拷贝到每个worker节点上，或者也可以使用网络挂载共享文件系统。<br>（2）textFile()方法的输入参数，可以是文件名，也可以是目录，也可以是压缩文件等。比如，textFile(“&#x2F;my&#x2F;directory”), textFile(“&#x2F;my&#x2F;directory&#x2F;<em>.txt”), and textFile(“&#x2F;my&#x2F;directory&#x2F;</em>.gz”).<br>（3）textFile()方法也可以接受第2个输入参数（可选），用来指定分区的数目。默认情况下，Spark会为HDFS的每个block创建一个分区（HDFS中每个block默认是128MB）。你也可以提供一个比block数量更大的值作为分区数目，但是，你不能提供一个小于block数量的值作为分区数目。</p><h3 id="通过并行集合（数组）创建RDD"><a href="#通过并行集合（数组）创建RDD" class="headerlink" title="通过并行集合（数组）创建RDD"></a>通过并行集合（数组）创建RDD</h3><p>可以调用SparkContext的parallelize方法，在Driver中一个已经存在的集合（数组）上创建。<br>下面请在spark-shell中操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;array = [1,2,3,4,5]</span><br><span class="line">&gt;&gt;&gt;rdd = sc.parallelize(array)</span><br><span class="line">&gt;&gt;&gt;rdd.foreach(print)</span><br></pre></td></tr></table></figure><p><img src="/images/spark/13.png" alt="1678720471787"></p><p><img src="/images/spark/15.png" alt="1678720865514"></p><h2 id="RDD操作"><a href="#RDD操作" class="headerlink" title="RDD操作"></a>RDD操作</h2><p>RDD被创建好以后，在后续使用过程中一般会发生两种操作：<br>*  转换（Transformation）： 基于现有的数据集创建一个新的数据集。<br>*  行动（Action）：在数据集上进行运算，返回计算值。</p><h3 id="Ⅰ转换操作"><a href="#Ⅰ转换操作" class="headerlink" title="Ⅰ转换操作"></a>Ⅰ转换操作</h3><p>对于RDD而言，每一次转换操作都会产生不同的RDD，供给下一个“转换”使用。转换得到的RDD是惰性求值的，也就是说，整个转换过程只是记录了转换的轨迹，并不会发生真正的计算，只有遇到行动操作时，才会发生真正的计算，开始从血缘关系源头开始，进行物理的转换操作。<br>下面列出一些常见的转换操作（Transformation API）：<br>* filter(func)：筛选出满足函数func的元素，并返回一个新的数据集<br>* map(func)：将每个元素传递到函数func中，并将结果返回为一个新的数据集<br>* flatMap(func)：与map()相似，但每个输入元素都可以映射到0或多个输出结果<br>* groupByKey()：应用于(K,V)键值对的数据集时，返回一个新的(K, Iterable)形式的数据集<br>* reduceByKey(func)：应用于(K,V)键值对的数据集时，返回一个新的(K, V)形式的数据集，其中的每个值是将每个key传递到函数func中进行聚合</p><p><img src="/images/spark/16.png" alt="1678720959522"></p><p><img src="/images/spark/17.png" alt="1678720974857"></p><h4 id="1-filter-func"><a href="#1-filter-func" class="headerlink" title="1.filter(func)"></a>1.filter(func)</h4><p><img src="/images/spark/18.png" alt="1678720994986"></p><p>好吧，这个书上说要把word.txt写成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Hadoop is good</span><br><span class="line"></span><br><span class="line">Spark is fast</span><br><span class="line"></span><br><span class="line">Spark is better</span><br></pre></td></tr></table></figure><p>那我们就</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/spark/mycode/rdd</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gedit word.txt</span><br></pre></td></tr></table></figure><p>然后再</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;lines=sc.textFile(&quot;file:///usr/local/spark/mycode/rdd/word.txt&quot;)</span><br><span class="line">&gt;&gt;&gt;linesWithSpark = lines.filter(lambda line: &quot;Spark&quot; in line)</span><br><span class="line">&gt;&gt;&gt;linesWithSpark.foreach(print)</span><br></pre></td></tr></table></figure><p><img src="/images/spark/20.png" alt="1678722624927"></p><p>上面的代码中，lines就是一个RDD。lines.filter()会遍历lines中的每行文本，并对每行文本执行括号中的匿名函数，也就是执行Lamda表达式：line &#x3D;&gt; line.contains(“Spark”)，在执行Lamda表达式时，会把当前遍历到的这行文本内容赋值给参数line，然后，执行处理逻辑line.contains(“Spark”)，也就是只有当改行文本包含“Spark”才满足条件，才会被放入到结果集中。最后，等到lines集合遍历结束后，就会得到一个结果集，这个结果集中包含了所有包含“Spark”的行。最后，对这个结果集调用count()，这是一个行动操作，会计算出结果集中的元素个数。</p><h4 id="2-map-func"><a href="#2-map-func" class="headerlink" title="2.map(func)"></a>2.map(func)</h4><p><img src="/images/spark/21.png" alt="1678724709366"></p><p>map(func)：将每个元素传递到函数func中，并将结果返回为一个新的数据集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; data =[1,2,3,4,5]</span><br><span class="line">&gt;&gt;&gt; rdd1 = sc.parallelize(data)</span><br><span class="line">&gt;&gt;&gt; rdd2 = rdd1.map(lambda x:x+10)</span><br><span class="line">&gt;&gt;&gt; rdd2.foreach(print)</span><br></pre></td></tr></table></figure><p><img src="/images/spark/22.png" alt="1678724836563"></p><p>上述语句执行过程如图 所示。第 1行语句创建了一个包含 5 个整型元素的列表 data。第2行语句执行 sc.parallelize(data)，从列表 data 中生成一个 RDD，即 rdd1,rdd1 中包含了5 个整型的元素即1、2、3、4、5。第 3 行语句执行 rdd1.map0操作,map0的输入参数“lambda x:x+10”是一个Lambda表达式。rdd1.map(lambda x:x+10)的含义是，依次取出 rdd1 这个RDD 中的每个元素，对于当前取到的元素，把它赋值给 Lambda 表达式中的变量x，然后，执行 Lambda 表达式的函数体部分“x+10”也就是把变量x的值和 10 相加后，作为函数的返回值，并作为一个元素放入到新的 RDD(即rdd2中。最终，新牛成的RDD (即 rdd2) 中包含了 5 个整型元素，即 11、12、13、14、15。</p><p>另外一个实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;lines=sc.textFile(&quot;file:///usr/local/spark/mycode/rdd/word.txt&quot;)</span><br><span class="line">&gt;&gt;&gt; words = lines.map(lambda line:line.split(&quot; &quot;))</span><br><span class="line">&gt;&gt;&gt; words.foreach(print)</span><br></pre></td></tr></table></figure><p><img src="/images/spark/24.png" alt="1678725201907"></p><p>上述语句执行过程如图所示。在第 1 行语句中，执行 sc.textFile0方法把 word.txt 文件中的数据加载到内存生成一个 RDD，即 lines，这个RDD 中的每个元素都是字符串类型，即每个 RDD 元素都是一行文本，比如，lines 中的第 1 个元素是”Hadoop is good”，第2 个元素是”Spark is fast”，第3个元素是”Spark is better”。在第 2 行语句中，执行 lies.map0操作，map0的输入参数 lambdaline:line.split(“)是一个 Lambda 表达式。linesmap(lambda line:line.split(“”)的含义是，依次取出 lines这个 RDD 中的每个元素，对于当前取到的元素，把它赋值给 Lambda 表达式中的变量 line，然后，执行 Lambda 表达式的函数体部分 line.split(“”)。因为 line 是一行文本，如”Hadoop is good”，一行文本中包含了很多个单词，单词之间以空格进行分隔，所以，line.split(“”的功能是，以空格作为分隔符把 line 拆分成一个个单词,拆分后得到的单词都封装在一个列表对象中,成为新的 RDD( 即 words)的一个元素，比如，”Hadoop is good”被拆分后，得到”Hadoop”、”is”和”good”3 个单词，会被封装到一个列表对象中，即[“Hadoop”.”is”,”good”]，成为 words 这个 RDD 中的一个元素。</p><p><img src="/images/spark/23.png" alt="1678725073888"></p><h4 id="3-flatMap-func"><a href="#3-flatMap-func" class="headerlink" title="3.flatMap(func)"></a>3.flatMap(func)</h4><p>flatMap(func)与 map0相似，但每个输入元素都可以映射到 0 或多个输出结果。例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;lines=sc.textFile(&quot;file:///usr/local/spark/mycode/rdd/word.txt&quot;)</span><br><span class="line">&gt;&gt;&gt;words =lines.flatMap(lambda line:line.split(&quot; &quot;))</span><br><span class="line">&gt;&gt;&gt; words.foreach(print)</span><br></pre></td></tr></table></figure><p><img src="/images/spark/26.png" alt="1678725603008"></p><p>上述语句执行过程如图所示。在第 1行语句中，执行 sc.textFile0方法把 wordtxt 文件中的数据加载到内存生成一个RDD，即 lines，这个 RDD 中的每个元素都是字符串类型，即每个RDD 元素都是一行文本。在第2行语句中，执行 linesflatMap0操作，flatMap0的输入参数 line:linesplit(“”)是个Lambda 表达式。lines.flatMap(lambda line:line.split(“”))的结果，等价于如下两步操作的结果。</p><p><img src="/images/spark/25.png" alt="1678725419517"></p><p>第1步: map0。执行 lines.map(lambda line: linesplit(“”))操作，从 lines 转换得到一个新的 RDD(即wordArray),wordArray 中的每个元素都是一个列表,比如,第1个元素是[“Hadoop”,”is”，”good”]7.第2个元素是”Spark”，”is”,”fast”]，第3 个元素是[“Spark”,”is””better”]。</p><p>第 2步:拍扁 ( flat)。flatMap0操作中的“flat”是一个很形象的动作-“拍扁”，也就是把vordArray 中的每个 RDD 元素都“拍扁”成多个元素。所有这些被拍扁以后得到的元素，构成一个新的 RDD，即 words。比如，wordArray 中的第1个元素是[“Hadoop”,”is”,”good]，被拍扁以后得到3个新的字符串类型的元素,即”Hadoop”、”is”和”good”; wordArray 中的第 2 个元素是[“Spark”,”is”fast”],被拍扁以后得到 3 个新的元素,即”Spark”、”is”和”fast”; wordArray 中的第 3 个元素是[“Spark””is””beter”，被拍扁以后得到 3 个新的元素，即”Spark”、”is”和”beter”。最终，这些被拍扁以后得到的 9 个字符串类型的元素构成一个新的 RDD (即 words )。也就是说，words 里面包含了 9 个字串类型的元素，分别是”Hadoop”、”is”、”good”、”Spark”、”is”、”fast”、”Spark”、”is”和”‘better’。</p><h4 id="4-gropByKey"><a href="#4-gropByKey" class="headerlink" title="4.gropByKey"></a>4.gropByKey</h4><p>groupByKey()应用于(K,V)键值对的数据集时，返回一个新的(K,Iterable)形式的数据集。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">words=sc.parallelize([(&quot;Hadoop&quot;,1),(&quot;is&quot;,1),(&quot;good&quot;,1),(&quot;Spark&quot;,1),(&quot;is&quot;,1),(&quot;better&quot;,1)])</span><br><span class="line">words1=words.groupByKey()</span><br><span class="line">words1.foreach(print)</span><br></pre></td></tr></table></figure><p><img src="/images/spark/27.png" alt="1679317892865"></p><p><img src="/images/spark/28.png" alt="1679318485755"></p><p><img src="/images/spark/29.png" alt="1679318770911"></p><p>如图所示，在这个实例中，名称为 words 的 RDD 中包含了 9 个元素，每个元素都是(KV)键值对类型。wordsl&#x3D;words.groupByKey0操作执行以后，所有 key 相同的键值对，它们的 value都被归并到一起。比如，(“is”,1)、(“is”,1)、(is”,1)这3 个键值对的 key 相同，就会被归并成一个新的键值对(“is”,(1,1,1))，其中，key 是”is”，value 是(1,1,1)，而且，value 会被封装成 Iterable 对象 (一种可选代集合 )。</p><h4 id="5-reduceByKey-func"><a href="#5-reduceByKey-func" class="headerlink" title="5.reduceByKey(func)"></a>5.reduceByKey(func)</h4><p>reduceByKey(func)应用于(KV)键值对的数据集时，返回一个新的(K,V)形式的数据集，其中的每个值是将每个key传递到函数func中进行聚合后得到的结果</p><p><img src="/images/spark/30.png" alt="1679318833321"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">words=sc.parallelize([(&quot;Hadoop&quot;,1),(&quot;is&quot;,1),(&quot;good&quot;,1),(&quot;Spark&quot;,1),(&quot;is&quot;,1),(&quot;better&quot;,1)])</span><br><span class="line">words1=words.reduceByKey(lambda a,b:a+b)</span><br><span class="line">words1.foreach(print)</span><br></pre></td></tr></table></figure><p><img src="/images/spark/31.png" alt="1679319056594"></p><p><img src="/images/spark/33.png" alt="1679319272140"></p><p><img src="/images/spark/32.png" alt="1679319106659"></p><p>如图所示，在这个实例中，名称为 words 的 RDD 中包含了 9个元素，每个元素都是(K,V)键值对类型。words.reduceByKey(lambda a,b;atb)操作执行以后,所有 key 相同的键值对，它们的 value首先被归并到一起，比如，(“is”,1)、(“is”1)、(“is”,1)这3 个键值对的 key 相同，就会被归并成一个新的键值对(“is”,(1,1,1))，其中，key 是”is”，value 是一个 value-list，即(1,1,1)。然后，使用 func 函数把(l,1,1)聚合到一起，这里的 func 函数是一个Lambda 表达式，即 lambda a,b;atb，它的功能是把(1,1,1)这个 value-list 中的每个元素进行汇总求和。首先，把 value-list 中的第1个元素(即 1) 赋值给参数a，把 value-list 中的第 2个元素(也是 1)赋值给参数 b，执行 atb 得到 2，然后，继续对 value-list中的元素执行下一次计算，把刚才求和得到的 2 赋值给 a，把 value-list 中的第 3 个元素(即 1)赋值给b，再次执行 a+b 计算得到 3。最终，就得到聚合后的结果(‘is’,3)。</p><h3 id="Ⅱ行动操作"><a href="#Ⅱ行动操作" class="headerlink" title="Ⅱ行动操作"></a>Ⅱ行动操作</h3><p>行动操作是真正触发计算的地方。Spark程序执行到行动操作时，才会执行真正的计算，从文件中加载数据，完成一次又一次转换操作，最终，完成行动操作得到结果。</p><p><img src="/images/spark/34.png" alt="1679319390149"></p><p>用一个例子看看</p><p><img src="/images/spark/35.png" alt="1679319465685"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rdd =sc.parallelize([1,2,3,4,5])</span><br><span class="line">rdd.count()</span><br></pre></td></tr></table></figure><p><code>5</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rdd.first()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>1</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdd.take(3)</span><br></pre></td></tr></table></figure><p><code>[1, 2, 3]</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdd.reduce(lambda a,b:a+b)</span><br></pre></td></tr></table></figure><p><code>15</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdd.collect()</span><br></pre></td></tr></table></figure><p><code>[1, 2, 3, 4, 5]</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdd.foreach(lambda elem:print(elem))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p>这里首先使用 sc.parallelize([1,2,3,4,5])生成了一个 RDD,变量名称为 rdd,rdd 中包含了5个元素分别是1、2、3、4和5，因此，rdd.count0语句执行以后返回的结果是 5。执行 rdd.first0语句后，会返回第1个元素，即1。当执行完 rdd.take(3)语句以后，会以列表的形式返回 rdd 中的前 3 个元素即[1,2,3]。执行完<code>rdd.reduce(lambda a,b:a+b)</code>语句后，会得到对 rdd 中的所有元素(即1、2、3、4、5进行求和以后的结果，即 15。在执行 rdd.reduce(lambda a,b;atb)时，系统会把 rdd 中的第1个元素1传入参数 a，把rdd 的第2个元素 2 传入参数 b，执行 a+b 计算得到求和结果 3;然后，把这个求和的结果 3 传入给参数 a，把 rdd 的第 3 个元素3 传入参数 b，执行 atb 计算得到求和结果 6; 然后,把6传入参数 a，把 rdd 的第 4 个元素 4 传入参数 b，执行 a+b 计算得到求和结果 10; 最后，把 10传入参数 a，把 rdd 的第 5个元素 5 传入参数 b，执行 atb 算得到求和结果 S。接下来，执行<code>rdd.collect()</code>，以列表的形式返回 rdd 中的所有元素，可以看出，执行结果是一个列表[1,2,3,4,5]。在这个实例的最后，执行了语句 <code>rdd.foreach(lambda elem:print(elem)</code>，该语句会依次遍历 rdd 中的每个元素，把当前遍历到的元素赋值给变量 elem，并使用 print(elem)打印出 elem 的值。实际上<code>rdd.foreach(lambda elem:print(elem))</code>可以被简化成<code> rdd.foreach(print)</code>，执行效果是一样的。<br>需要特别强调的是,当采用Local 模式在单机上执行时,<code>rdd.foreach(print)</code>语句会打印出一个RDD中的所有元素。但是，当采用集群模式执行时，在 Worker 节点上执行打印语句是输出到 Worker 节点的 stdout 中，而不是输出到任务控制节点 Driver 中，因此，任务控制节点 Driver 中的 stdout 是不会显示打印语句的这些输出内容的。为了能够把所有 Worker 节点上的打印输出信息也显示到 Driver中，就需要使用 collect0方法，比如，<code>print(rdd.collect())</code>。但是，由于 collect0方法会把各个 Worker节点上的所有 RDD元素都抓取到 Driver 中，因此，这可能会导致 Driver 所在节点发生内存溢出。所以，在实际编程中，需要谨慎使用&#96;&#96;&#96; collect()&#96;&#96;方法。</p><h3 id="Ⅲ惰性机制"><a href="#Ⅲ惰性机制" class="headerlink" title="Ⅲ惰性机制"></a>Ⅲ惰性机制</h3><p>惰性机制是指整个转换过程只是记录了转换的轨迹，并不会发生真正的计算，只有遇到行动操作时，才会触发“从头到尾”的真正的计算。这里给出一段简单的语句来解释 Spark 的惰性机制。</p><p><img src="/images/spark/37.png" alt="1679320607704"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lines=sc.textFile(&quot;file:///usr/local/spark/mycode/rdd/word.txt&quot;)</span><br><span class="line">lineLengths=lines.map(lambda s:len(s))</span><br><span class="line">totalLength=lineLengths.reduce(lambda a,b:a+b)</span><br><span class="line">print(totalLength)</span><br></pre></td></tr></table></figure><p>在上述语句中，第1 行语句中的 textFile()是一个转换操作，执行后，系统只会记录这次转换，并不会真正读取 wordtxt 文件的数据到内存中;第 2 行语句的 map也是一个转换操作，系统只是记录这次转换，不会真正执行 map()方法;第 3 行语句的 reduce()方法是一个“行动”类型的操作，这时，系统会生成一个作业，触发真正的计算。也就是说，这时才会加载 word.txt 的数据到内存，生成lines 这个RDD。lines 中的每个元素都是一行文本，然后，对 lines 执行 map()方法，计算这个RDD中每个元素的长度(即一行文本包含的单词个数 )，得到新的 RDD，即 lineLengths，这个RDD中每个元素都是整型，表示文本的长度。最后，在 lineLengths 上调用reduce()方法，执行 RDD元素求和，得到所有文本长度的总和。</p><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><p>在 Spark 中，RDD 采用惰性求值的机制，每次遇到行动操作，都会从头开始执行计算。每次调用行动操作，都会触发一次从头开始的计算，这对于迭代计算而言，代价是很大的，因为选代计算经常需要多次重复使用同一组数据。下面就是多次计算同一个 RDD 的例子。</p><p><img src="/images/spark/38.png" alt="1679321131046"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list = [&quot;Hadoop&quot;,&quot;Spark&quot;,&quot;Hive&quot;]</span><br><span class="line">rdd = sc.parallelize(list)</span><br><span class="line">print (rdd.count ()) #行动操作，触发一次真正从头到尾的计算</span><br><span class="line">print (&#x27;,&#x27;.join(rdd.collect())) #行动操作，触发一次真正从头到尾的计算Hadoop,Spark,Hive</span><br></pre></td></tr></table></figure><p><img src="/images/spark/39.png" alt="1679320828250"></p><p>实际上，可以通过持久化(缓存)机制来避免这种重复计算的开销。具体方法是使用 persist0方法将一个 RDD 标记为持久化，之所以要“标记为持久化”，是因为出现 persist0语句的地方，并不会马上计算生成 RDD 并把它持久化，而是要等到遇到第一个行动操作触发真正计算以后，才会把算结果进行持久化。持久化后的 RDD 将会被保留在计算节点的内存中，被后面的行动操作重复使用persist0的圆括号中包含的是持久化级别参数，可以有如下不同的级别。</p><ul><li><p>persist(MEMORY ONLY): 表示将 RDD作为反序列化的对象存储于JVM 中，如果内存足，就要按照 LRU 原则替换缓存中的内容。</p></li><li><p>persist(MEMORYAND DISK):表示将RDD作为反序列化的对象存储在JVM中，如果内存不足，超出的分区将会被存放在硬盘上。</p><p>一般而言，使用 cache()方法时，会调用 persist(MEMORY ONLY)。针对上面的实例，增加持久化语句以后的执行过程如下:</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list = [&quot;Hadoop&quot;,&quot;Spark&quot;,&quot;Hive&quot;]</span><br><span class="line">rdd = sc.parallelize(list)</span><br><span class="line">rdd.cache() #会调用 persist(MEMORY ONLY)，但是，语句执行到这里，并不会缓存 rdd，因为这#时 rdd 还没有被计算生成</span><br><span class="line">print(rdd.count()) #第一次行动操作，触发一次真正从头到尾的计算，这时上面的 rdd.cache ()#才会被执行，把这个 rdd 放到缓存中</span><br><span class="line">print(&#x27;.&#x27;.join(rdd.collect())) #第二次行动操作，不需要触发从头到尾的计算，只需要重复使#用上面缓存中的 rdd</span><br></pre></td></tr></table></figure><p><img src="/images/spark/40.png" alt="1679321297416"></p><p>持久化RDD 会占用内存空间，当不再需要一个 RDD 时，就可以使用 unpersist0方法手动地把持久化的 RDD 从缓存中移除，释放内存空间。</p><h3 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h3><h4 id="1-分区的作用"><a href="#1-分区的作用" class="headerlink" title="1.分区的作用"></a>1.分区的作用</h4><p>RDD 是弹性分布式数据集，通常 RDD 很大，会被分成很多个分区，分别保存在不同的节点上如图49所示，一个集群中包含 4 个工作节点( WorkerNode )，分别是 WorkerNodel、WorkerNode2WorkerNode3 和 WorkerNode4。假设有两个 RDD，即rdd1 和 rdd2，其中，rdd1 包含5 个分区(即plp2、p3、p4和p5)，rdd2 包含3 个分区(即p6、p7和p8)。<br>对RDD 进行分区，第一个作用是增加并行度。比如，在图 4-9 中，rdd2 的 3 个分区 p6、p7和p8,分布在3 个不同的工作节点 WorkerNode2、WorkerNode3 和 WorkerNode4 上，就可以在这3个T作节点上分别启动 3 个线程对这 3 个分区的数据进行并行处理，增加任务的并行度。</p><p><img src="/images/spark/41.png" alt="1679321394814"></p><p>对 RDD 进行分区的第二个作用是减少通信开销。在分布式系统中，通信的代价是巨大的，控制数据分布以获得最少的网络传输可以极大地提升整体性能。Spark 程序可以通过控制 RDD 分区方式来减少网络通信的开销。下面通过一个实例来解释为什么通过分区可以减少网络传输开销。</p><p>连接(join)是查询分析中经常使用的一种操作。假设在某种应用中需要对两个表进行连接操作第1个表是一个很大的用户信息表 UserData(UserID,UserInfo)，其中，UserId 和 UserInfo 是 UserData表的两个字段，UserInfo 包含了某个用户所订阅的主题信息。第 2 个表是 Events(UserID,LinkInfo),这个表比较小，只记录了过去 5 分钟内发生的事件，即某个用户查看了哪个链接。为了对用户访问情况进行统计，需要周期性地对 UserData 和 Events 这两个表进行连接操作，获得(UserID,UserInfo,LinkInfo)这种形式的结果，从而知道某个用户订阅的是哪个主题，以及访问了哪个链接。</p><p>可以用 Spark 来实现上述应用场景。在执行 Spark 作业时，首先，UserData 表会被加载到内存中生成RDD(假设 RDD的名称为 userData)，RDD 中的每个元素是(UserID,UserInfo)这种形式的键值对,即 key 是 UserID,value 是 UserInfo;Events 表也会被加载到内存中生成RDD(假设名称为 events)RDD中的每个元素是(UserID，LinkInfo)这种形式的键值对，key 是 UserID，value 是 LinkInfo。由于UserData 是一个很大的表，通常会被存放到 HDFS 文件中，Spark 系统会根据每个 RDD 元素的数据来源，把每个 RDD 元素放在相应的节点上。比如，从工作节点 上的 HDFS 文件块 (block)中读取到的记录，其生成的 RDD 元素 ((UserID，UserInfo)形式的键值对 ，就会被放在节点上，从节点上的 HDFS 文件块 (block)中读取到的记录，其生成的 RDD 元素会被放在节点上，最终userData 这个 RDD 的元素就会分布在节点u1、u2…..um上。<br>然后，执行连接操作 userData,join(events)得到连接结果。如图  所示，在默认情况下，连接操作会将两个数据集中的所有的 key 的哈希值都求出来，将哈希值相同的记录传送到同一台机器上之后在该机器上对所有 key 相同的记录进行连接操作。比如，对于 userData 这个 RDD 而言，它在节点山上的所有 RDD 元素，都需要根据 key 的值进行哈，然后，根据哈希值再分发到 j1、j2…..j这些节点上;在节点u上的所有 RDD 元素，也需要根据 key 的值进行哈希，然后，根据哈希值再分发到j1……jk这些节点上;同理，u1……um等节点上的 RDD元素，都需要进行同样的操作对于events 这个RDD 而言，也需要执行同样的操作。可以看出，在这种情况下，每次进行连接操作都会有数据混洗的问题，造成了很大的网络传输开销。</p><p><img src="/images/spark/42.png" alt="1679321456313"></p><p>实际上，由于userData 这个 RDD 要比 events 大很多，所以，可以选择对 userData 进行分区。比如.可以采用哈希分区方法，把 userData 这个 RDD 分区成 m 个分区，这些分区分布在节点 、u…“u，上。对userData 进行分区以后，在执行连接操作时，就不会产生图 4-10 中的数据混洗情况。如图所示，由于已经对 userData 根据哈希值进行了分区，因此，在执行连接操作时，不需要再把 userData中的每个元素进行哈希求值以后再分发到其他节点上，只需要对 events 这个 RDD 的每个元素求哈希值(采用与 userData 相同的哈希函数)。然后，根据哈希值把每个 events 中的 RDD 元素分发到对应的节点u、u····um上面。整个过程中，只有 events 发生了数据混洗，产生了网络通信，而 userData的数据都是在本地引用，不会产生网络传输开销。由此可以看出，Spark 通过数据分区，可以大大降低一些特定类型的操作(比如join()、leftOuterJoin()、groupByKey()、reduceByKey()等)的网络传输开销。</p><p><img src="/images/spark/43.png" alt="1679321697993"></p><h4 id="2-分区的原则"><a href="#2-分区的原则" class="headerlink" title="2.分区的原则"></a>2.分区的原则</h4><p><img src="/images/spark/44.png" alt="1679322183409"></p><p>RDD分区的一个原则是使得分区的个数尽量等于集群中的 CPU核心(Core)数目。对于不同的Spark 部署模式 (Local 模式、Standalone 模式、YARN 模式、Mesos 模式)而言，都可以通过设置spark.defaultparallelism 这个参数的值，来配置默认的分区数目。一般而言，各种模式下的默认分区数目如下。<br>Local模式:默认为本地机器的 CPU 数目，若设置了 local[N]，则默认为 N。Standalone 或YARN模式:在“集群中所有 CPU 核心数目总和”和“2”这二者中取较大值作为<br>默认值。<br>Mesos 模式:默认的分区数为 8。</p><h4 id="3-设置分区的个数"><a href="#3-设置分区的个数" class="headerlink" title="3.设置分区的个数"></a>3.设置分区的个数</h4><p>可以手动设置分区的数量，主要包括两种方式: 创建 RDD 时手动指定分区个数;使用repartition方法重新设置分区个数。</p><h5 id="1-创建RDD-时手动指定分区个数"><a href="#1-创建RDD-时手动指定分区个数" class="headerlink" title="(1)创建RDD 时手动指定分区个数"></a>(1)创建RDD 时手动指定分区个数</h5><p><img src="/images/spark/45.png" alt="1679322207468"></p><p>在调用 textFile()和 parallelize()方法的时候手动指定分区个数即可，语法格式如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc.textFile(path, partitionNum)</span><br></pre></td></tr></table></figure><p>其中，path 参数用于指定要加载的文件的地址，partitionNum 参数用于指定分区个数。下面是个分区的实例。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list = [1,2,3,4,5]</span><br><span class="line">rdd = sc.parallelize(list,2) //设置两个分区</span><br></pre></td></tr></table></figure><p>对于 parallelize()而言，如果没有在方法中指定分区数，则默认为 spark.default,parallelism。对于textFile()而言，如果没有在方法中指定分区数，则默认为 min(defaultParallelism,2)，其中defaultParallelism 对应的就是 spark.default,parallelism。如果是从HDFS 中读取文件，则分区数为文件分片数(比如，128MB&#x2F;片 )。</p><h5 id="2-使用repartition-方法重新设置分区个数"><a href="#2-使用repartition-方法重新设置分区个数" class="headerlink" title="(2)使用repartition 方法重新设置分区个数"></a>(2)使用repartition 方法重新设置分区个数</h5><p><img src="/images/spark/46.png" alt="1679322237913"></p><p>通过转换操作得到新 RDD 时，直接调用 repartition 方法即可。例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data = sc.parallelize([1,2,3,4,5],2)</span><br><span class="line">len(data.glom().collect ()) #显示 data 这个 RDD 的分区数量</span><br><span class="line">2</span><br><span class="line">rdd = data.repartition(1) #对 data 这个RDD进行重新分区</span><br><span class="line">len(rdd.glom().collect())#显示 rdd 这个 RDD的分区数量</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h4 id="4-自定义分区方法"><a href="#4-自定义分区方法" class="headerlink" title="4.自定义分区方法"></a>4.自定义分区方法</h4><p><img src="/images/spark/47.png" alt="1679322265099"></p><p><img src="/images/spark/48.png" alt="1679322297300"></p><p>Spark 提供了自带的 HashPartitioner (哈希分区)与 RangePartitioner ( 区城分区)，能够满足大数应用场景的需求。与此同时，Spark 也支持自定义分区方式，即通过提供一个自定义的分区函数来控制 RDD 的分区方式，从而利用领域知识进一步减少通信开销。需要注意的是，Spark 的分区函数针对的是(key;value)类型的 RDD，也就是说，RDD 中的每个元素都是(key,value)类型，然后，分区数根据 key对RDD 元素进行分区。因此，当需要对一些非(key,value)类型的 RDD进行自定义分区时需要首先把 RDD 元素转换为(key,value)类型，然后再使用分区函数。<br>下面是一个实例，要求根据 key 值的最后一位数字将 key 写入到不同的文件中，比如，10 写入到part-00000，11写入到 part-00001，12 写入到 part-00002。打开一个 Linux 终端，使用 vim 编辑器创建一个代码文件“&#x2F;usr&#x2F;local&#x2F;spark&#x2F;mycode&#x2F;rdd&#x2F;TestPartitioner.py”，输入以下代码:</p><p><img src="/images/spark/49.png" alt="1679322332812"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">MyPartitioner</span>(<span class="params">key</span>):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;MyPartitioner is running&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;The key is %d&#x27;</span> % key)</span><br><span class="line"><span class="keyword">return</span> key%<span class="number">10</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The main function is running&quot;</span>)</span><br><span class="line">conf=SparkConf().setMaster(<span class="string">&quot;local&quot;</span>).setAppName(<span class="string">&quot;MyApp&quot;</span>)</span><br><span class="line">sc=SparkContext(conf=conf)</span><br><span class="line">data=sc.parallelize(<span class="built_in">range</span>(<span class="number">10</span>),<span class="number">5</span>)</span><br><span class="line">data.<span class="built_in">map</span>(<span class="keyword">lambda</span> x:(x,<span class="number">1</span>)) \</span><br><span class="line">         .partitionBy(<span class="number">10</span>,MyPartitioner)\</span><br><span class="line">             .<span class="built_in">map</span>(<span class="keyword">lambda</span> x:x[<span class="number">0</span>]) \</span><br><span class="line">         .saveAsTextFile(<span class="string">&quot;File:///usr/local/spark/mycode/add/partitioner&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>出现问题</p><p><code>ModuleNotFoundError: No module named &#39;pyspark&#39;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install python3-pip</span><br><span class="line">pip install pyspark</span><br></pre></td></tr></table></figure><p>在上述代码中，data&#x3D;sc.parallelize(range(10),5)这行代码执行后，会生成一个名称为 data 的 RDD这个RDD 中包含了 0、1、2、3…..9 共 10 个整型元素，并被分成 5个分区。data,map(lambda x:(x,1)表示把 data 中的每个整型元素取出来，转换成(key,value)类型。比如，把1 这个元素取出来以后转按成(1,1)，把2这个元素取出来以后转换成(2,1)，这是因为，自定义分区函数要求 RDD 元素的类型必须是(key, value)类型。partitionBy(10,MyPartitioner表示调用自定义分区函数，把(0,1)、(,)、(2,1)、(3,1)….(9,1)这些 RDD 元素根据尾号分成10个分区。划分分区完成以后,再使用 map(ambda x:x[0).把(0,1)、(1,1)、(2,1)、(3,1) .·….(9,1)等(key,value)类型元素的 key 提取出来，得到 0、1、2、3…9.最后调用 saveAsTextFile0方法把 RDD的 10个整型元素写入到本地文件中。</p><p>使用如下命令运行 TestPartitioner.py:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/spark/mycode/rdd</span><br><span class="line">python3 TestPartitioner.py</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd /usr/local/spark/mycode/rdd</span><br><span class="line">S /usr/local/spark/bin/spark-submit TestPartitioner.py</span><br></pre></td></tr></table></figure><p>程序运行后会返回如下信息:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">The main function is running</span><br><span class="line">MyPartitioner is running</span><br><span class="line">The key is 0</span><br><span class="line">MyPartitioner is running</span><br><span class="line">The key is 1</span><br><span class="line">MyPartitioner is running</span><br><span class="line">The key is 9</span><br></pre></td></tr></table></figure><p><img src="/images/spark/50.png" alt="1679322360532"></p><p>运行结束后可以看到，在本地文件系统的“file:&#x2F;&#x2F;&#x2F;usr&#x2F;local&#x2F;spark&#x2F;mycode&#x2F;rdd&#x2F;partitioner”目录下面，会生成 part-00000、part-00001、part-00002…..part-00009 和_SUCCESS 等文件。其中,part-00000文件中包含了数字 0，part-00001 文件中包含了数字 1，part-00002 文件中包含了数字 2</p><h3 id="综合实例"><a href="#综合实例" class="headerlink" title="综合实例"></a>综合实例</h3><p>假设有一个本地文件“&#x2F;usr&#x2F;local&#x2F;spark&#x2F;mycode&#x2F;rdd&#x2F;word.txt”，里面包含了很多行文本，每行文本由多个单词构成，单词之间用空格分隔。可以使用如下语句对 word.txt 中的单词进行词频统计(即统计每个单词出现的次数 ):</p><p><img src="/images/spark/51.png" alt="1679329145076"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lines=sc.textFile(<span class="string">&quot;file:///usr/local/spark/mycode/rdd/word.txt&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wordCount=lines.flatMap(<span class="keyword">lambda</span> line:line.split(<span class="string">&quot; &quot;</span>)).<span class="built_in">map</span>(<span class="keyword">lambda</span> word:(word,<span class="number">1</span>)).reduceByKey(<span class="keyword">lambda</span> a,b:a+b)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(wordCount.collect())</span><br></pre></td></tr></table></figure><p><img src="/images/spark/52.png" alt="1679329176974"></p><p><img src="/images/spark/53.png" alt="1679329211688"></p><p><img src="/images/spark/54.png" alt="1679329237135"></p><p>在实际应用中，单词文件可能非常大，会被保存到分布式文件系统 HDFS 中，Spark 和 Hadoop会统一部署在一个集群上。如图所示，HDFS 的名称节点(HDFS NN)和 Spark 的主节点( SparkMaster)可以分开部署，而HDFS 的数据节点(HDFS DN)和 Spark 的从节点 ( Spark Worker)会部署在一起。这时采用 Spark 进行分布式处理,可以大大提高词频统计程序的执行效率,这是因为,SparkWorker 可以就近处理与自己部署在一起的 HDFS 数据节点中的数据。</p><p>对于词频统计程序 WordCount 而言，该程序分布式运行在每个 Slave 节点的每个分区上，统计本分区内的单词计数，然后将它传回给 Driver，再由 Driver 合并来自各个分区的所有单词计数，形成最终的单词计数。</p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UML类图 &amp; UML时序图</title>
      <link href="/2023/03/20/UML%E7%B1%BB%E5%9B%BE-&amp;-UML%E6%97%B6%E5%BA%8F%E5%9B%BE/"/>
      <url>/2023/03/20/UML%E7%B1%BB%E5%9B%BE-&amp;-UML%E6%97%B6%E5%BA%8F%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="2-1-UML图"><a href="#2-1-UML图" class="headerlink" title="2.1 UML图"></a>2.1 UML图</h2><h2 id="2-1-UML类图-amp-UML时序图"><a href="#2-1-UML类图-amp-UML时序图" class="headerlink" title="2.1 UML类图 &amp; UML时序图"></a>2.1 UML类图 &amp; UML时序图</h2><p>统一建模语言（Unified Modeling Language，UML）是用来设计软件的可视化建模语言。它的特点是简单、统一、图形化、能表达软件设计中的动态与静态信息。UML是一种为面向对象系统的产品进行说明、可视化和编制文档的标准语言，独立于任何一种具体的程序设计语言。</p><p>1997 年 UML 被国际对象管理组织（OMG）采纳为面向对象的建模语言的国际标准。它的特点是简单、统一、图形化、能表达软件设计中的动态与静态信息。</p><p><strong>应用场景</strong></p><p>UML 能为软件开发的所有阶段提供模型化和可视化支持。而且融入了软件工程领域的新思想、新方法和新技术，使软件设计人员沟通更简明，进一步缩短了设计时间，减少开发成本。</p><p>UML 具有很宽的应用领域。其中最常用的是建立软件系统的模型，但它同样可以用于描述非软件领域的系统，如机械系统、企业机构或业务过程，以及处理复杂数据的信息系统、具有实时要求的工业系统或工业过程等。总之，UML 可以对任何具有静态结构和动态行为的系统进行建模，而且使用于从需求规格描述直至系统完成后的测试和维护等系统开发的各个阶段。</p><p>UML 模型大多以图表的方式表现出来，一份典型的建模图表通常包含几个块或框、连接线和作为模型附加信息的文本。这些虽简单却非常重要，在 UML 规则中相互联系和扩展。</p><p>语言是包括文字和图形的，有很多内容文字是无法表达的。比如建筑设计图纸吗，里面存在多图形，光用文字并不能表达清楚建筑设计。在建筑界，有一套标准来描述设计，同样道理，在软件开发界，也需要一套标准来帮助我们做好软件开发的工作。UML 就是其中的一种标准，注意这可不是唯一标准，只是 UML 是大家比较推崇的一种标准而已。UML 并不是强制性标准，没有规定在软件开发中一定要用 UML，但是我们需要包括 UML 在内的各种标准，来提高软件开发的水平。</p><p><strong>基本构件</strong></p><p>UML 建模的核心是模型，模型是现实的简化、真实系统的抽象。UML 提供了系统的设计蓝图。当给软件系统建模时，需要采用通用的符号语言，这种描述模型所使用的语言被称为建模语言。在 UML 中，所有的描述由事物、关系和图这些构件组成。下图完整地描述了所有构件的关系。</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/8b41ffb818f6758e08c3a4307c24d76f.png" alt="img"></p><p><strong>事物</strong></p><p>事物是抽象化的最终结果，分为结构事物、行为事物、分组事物和注释事物。</p><ol><li>结构事物</li></ol><p>结构事物是模型中的静态部分，用以呈现概念或实体的表现元素，如下表所示。</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/6d050090c2dd17905c284bec11c2ded1.png" alt="img"></p><ol start="2"><li>行为事物</li></ol><p>行为事物指 UML 模型中的动态部分，如下表所示。</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/a1b45aed6c2bc4351ca486f51f349ff1.png" alt="img"></p><ol start="3"><li>分组事物</li></ol><p>目前只有一种分组事物，即包。包纯碎是概念上的，只存在于开发阶段，结构事物、行为事物甚至分组事物都有可能放在一个包中，如下表所示。</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/45f2e9d2f5a63f6a015e119e83ad678e.png" alt="img"></p><ol start="4"><li>注释事物</li></ol><p>注释事物是解释 UML 模型元素的部分，如下表所示。</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/c01bdb3ec33250922bf8bd337031ad30.png" alt="img"></p><p>UML 从目标系统的不同角度出发，UML2.0 一共有 13 种图（UML1.5 定义了 9 种，UML2.0 增加了 4 种），别是类图、对象图、构件图、部署图、活动图、状态图、用例图、时序图、协作图 9 种，以及包图、组合结构图、时间图、交互概览图 4 种。</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/1b62f09be7dfc3a727620cf046e29d5b.png" alt="img"></p><p>在 UML 2.0 的 13 种图中，类图（Class Diagrams）是使用频率最高的 UML 图之一。类图描述系统中的类，以及各个类之间的关系的静态视图，能够让我们在正确编写代码之前对系统有一个全面的认识。类图是一种模型类型，确切地说，是一种静态模型类型。类图表示类、接口和它们之间的协作关系，用于系统设计阶段。</p><h3 id="2-1-1-类图概述"><a href="#2-1-1-类图概述" class="headerlink" title="2.1.1 类图概述"></a>2.1.1 类图概述</h3><p>类图(Class diagram)是显示了模型的静态结构，特别是模型中存在的类、类的内部结构以及它们与其他类的关系等。类图不显示暂时性的信息。类图是面向对象建模的主要组成部分。</p><h3 id="2-1-2-类图作用"><a href="#2-1-2-类图作用" class="headerlink" title="2.1.2 类图作用"></a>2.1.2 类图作用</h3><ul><li>在软件工程中，类图是一种静态的结构图，描述了系统的类的集合，类的属性和类之间的关系，可以简化了人们对系统的理解；</li><li>类图是系统分析和设计阶段的重要产物，是系统编码和测试的重要模型。</li></ul><h3 id="2-1-3-类图表示"><a href="#2-1-3-类图表示" class="headerlink" title="2.1.3 类图表示"></a>2.1.3 类图表示</h3><p>   <strong>1.类</strong></p><p>​    类（Class）是指具有相同属性、方法和关系的对象的抽象，它封装了数据和行为，是面向对象程序设计（OOP）的基础，具有封装性、继承性和多态性等三大特性。</p><p>  (1) 类名（Name）是一个字符串，例如，Student。</p><p>  (2) 属性（Attribute）是指类的特性，即类的成员变量。</p><p>  (3) 操作（Operations）是类的任意一个实例对象都可以使用的行为，是类的成员方法。    在UML类图中，类使用包含类名、属性(field) 和方法(method) 且带有分割线的矩形来表示，比如下图表示一个Employee类，它包含name,age和address这3个属性，以及work()方法。</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/5de8b469efc781f32fd20dddb5633f6e.jpg" alt="Employee.jpg"></p><p>​    属性&#x2F;方法名称前加的加号和减号表示了这个属性&#x2F;方法的可见性，UML类图中表示可见性的符号有三种：</p><ul><li>+：表示public</li><li>-：表示private</li><li>#：表示protected</li></ul><p>​    属性的完整表示方式是： <strong>可见性 名称 ：类型 [ &#x3D; 缺省值]</strong></p><p>​    方法的完整表示方式是： <strong>可见性 名称(参数列表) [ ： 返回类型]</strong></p><blockquote><p>注意：</p><p>1，中括号中的内容表示是可选的</p><p>2，也有将类型放在变量名前面，返回值类型放在方法名前面</p></blockquote><p><strong>举个例子：</strong></p><p><img src="https://p.ananas.chaoxing.com/star3/origin/d4c5ec49b8ee9f5ae4c5dccd902290a8.png" alt="demo.png"></p><p>​    上图Demo类定义了三个方法：</p><ul><li>method()方法：修饰符为public，没有参数，没有返回值。</li><li>method1()方法：修饰符为private，没有参数，返回值类型为String。</li><li>method2()方法：修饰符为protected，接收两个参数，第一个参数类型为int，第二个参数类型为String，返回值类型是int。</li></ul><p>类图中，需注意以下几点：</p><ul><li>抽象类或抽象方法用斜体表示</li><li>如果是接口，则在类名上方加 &lt;<Interface>&gt;</li><li>字段和方法返回值的数据类型非必需</li><li>静态类或静态方法加下划线</li></ul><p><strong>另外一个例子：</strong></p><p>请看以下这个类图，类之间的关系是我们需要关注的：</p><p><strong><img src="https://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_class_struct.jpg" alt="_images/uml_class_struct.jpg"></strong></p><ul><li>车的类图结构为&lt;<abstract>&gt;，表示车是一个抽象类；</li><li>它有两个继承类：小汽车和自行车；它们之间的关系为实现关系，使用带空心箭头的虚线表示；</li><li>小汽车为与SUV之间也是继承关系，它们之间的关系为泛化关系，使用带空心箭头的实线表示；</li><li>小汽车与发动机之间是组合关系，使用带实心箭头的实线表示；</li><li>学生与班级之间是聚合关系，使用带空心箭头的实线表示；</li><li>学生与身份证之间为关联关系，使用一根实线表示；</li><li>学生上学需要用到自行车，与自行车是一种依赖关系，使用带箭头的虚线表示；</li></ul><p><strong>2. 接口</strong></p><p>接口（Interface）是一种特殊的类，它具有类的结构但不可被实例化，只可以被子类实现。它包含抽象操作，但不包含属性。它描述了类或组件对外可见的动作。在 UML 中，接口使用一个带有名称的小圆圈来进行表示。</p><p>如下所示是图形类接口的 UML 表示。</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/64a5bf7166d365b206bdefeb4a66fa20.png" alt="img"></p><p><strong>3. 类图</strong></p><p>类图（ClassDiagram）是用来显示系统中的类、接口、协作以及它们之间的静态结构和关系的一种静态模型。它主要用于描述软件系统的结构化设计，帮助人们简化对软件系统的理解，它是系统分析与设计阶段的重要产物，也是系统编码与测试的重要模型依据。</p><p>类图中的类可以通过某种编程语言直接实现。类图在软件系统开发的整个生命周期都是有效的，它是面向对象系统的建模中最常见的图。如下所示是“计算长方形和圆形的周长与面积”的类图，图形接口有计算面积和周长的抽象方法，长方形和圆形实现这两个方法供访问类调用。</p><p><strong><img src="https://p.ananas.chaoxing.com/star3/origin/f95aee4f5136a105551af5aa732544d7.png" alt="img"></strong></p><h3 id="2-1-4-类与类之间关系的表示"><a href="#2-1-4-类与类之间关系的表示" class="headerlink" title="2.1.4 类与类之间关系的表示"></a>2.1.4 类与类之间关系的表示</h3><ol><li><strong>关联关系(association)</strong></li></ol><p> 关联关系是用一条直线表示的；它描述不同类的对象之间的结构关系；它是一种静态关系， 通常与运行状态无关，一般由常识等因素决定的；它一般用来定义对象之间静态的、天然的结构； 所以，关联关系是一种“强关联”的关系；</p><p>比如，乘车人和车票之间就是一种关联关系；学生和学校就是一种关联关系；</p><p>关联关系默认不强调方向，表示对象间相互知道；如果特别强调方向，如下图，表示A知道B，但 B不知道A；</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/961e252cc29eacbaaa509dbca06e867d.jpg" alt="uml_association.jpg"></p><p>注：在最终代码中，关联对象通常是以成员变量的形式实现的；</p><p>关联关系是类与类之间最常用的一种关系，分为一般关联关系、聚合关系和组合关系。我们先介绍一般关联。关联又可以分为单向关联，双向关联，自关联。</p><p>a）单项关联</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/4e20737215be9cc0838f06ba6d9e3e73.png" alt="customer_address.png"></p><p>在UML类图中单向关联用一个带箭头的实线表示。上图表示每个顾客都有一个地址，这通过让Customer类持有一个类型为Address的成员变量类实现。</p><p>b）双向关联</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/0647a820494e08997a6b773174116f72.png" alt="customer_product.png"></p><p>从上图中我们很容易看出，所谓的双向关联就是双方各自持有对方类型的成员变量。</p><p>在UML类图中，双向关联用一个不带箭头的直线表示。上图中在Customer类中维护一个List<Product>，表示一个顾客可以购买多个商品；在Product类中维护一个Customer类型的成员变量表示这个产品被哪个顾客所购买。</p><p>c）自关联</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/645df4c3220d37685e4cdb81c926e465.png" alt="node.png"></p><p>自关联在UML类图中用一个带有箭头且指向自身的线表示。上图的意思就是Node类包含类型为Node的成员变量，也就是“自己包含自己”。</p><h3 id="2-聚合关系-aggregation"><a href="#2-聚合关系-aggregation" class="headerlink" title="2. 聚合关系(aggregation)"></a>2. 聚合关系(aggregation)</h3><p>聚合关系是关联关系的一种，是强关联关系，是整体和部分之间的关系。</p><p>聚合关系也是通过成员对象来实现的，其中成员对象是整体对象的一部分，但是成员对象可以脱离整体对象而独立存在。例如，学校与老师的关系，学校包含老师，但如果学校停办了，老师依然存在。</p><p>聚合关系用一条带空心菱形箭头的直线表示，如下图表示A聚合到B上，或者说B由A组成；</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/29ec48ef1ad32353bbdb2f17e3ad5cee.jpg" alt="uml_aggregation.jpg"></p><p>下图所示是大学和教师的关系图：</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/72d895954f4087e90cd2c017a8ac65b2.png" alt="image-20191229173422328.png"></p><h3 id="3-组合关系-composition"><a href="#3-组合关系-composition" class="headerlink" title="3. 组合关系(composition)"></a>3. 组合关系(composition)</h3><p>组合表示类之间的整体与部分的关系，但它是一种更强烈的聚合关系。</p><p>在组合关系中，整体对象可以控制部分对象的生命周期，一旦整体对象不存在，部分对象也将不存在，部分对象不能脱离整体对象而存在。例如，头和嘴的关系，没有了头，嘴也就不存在了。</p><p>在 UML 类图中，组合关系用带实心菱形的实线来表示，菱形指向整体。如下图表示A组成B，或者B由A组成；</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/689c10062581c795135afd579f7c739e.jpg" alt="uml_composition.jpg"></p><p>下图所示是头和嘴的关系图：</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/d85e919e84777cf76b88ff21e034508c.png" alt="image-20191229173455149.png"></p><p>与聚合关系一样，组合关系同样表示整体由部分构成的语义；比如公司由多个部门组成；</p><p>但组合关系是一种强依赖的特殊聚合关系，如果整体不存在了，则部分也不存在了；例如， 公司不存在了，部门也将不存在了；</p><h3 id="4-依赖关系-dependency"><a href="#4-依赖关系-dependency" class="headerlink" title="4. 依赖关系(dependency)"></a>4. 依赖关系(dependency)</h3><p>依赖关系是一种使用关系，它是对象之间耦合度最弱的一种关联方式，是临时性的关联。在代码中，某个类的方法通过局部变量、方法的参数或者对静态方法的调用来访问另一个类（被依赖类）中的某些方法来完成一些职责。</p><p>在 UML 类图中，依赖关系使用带箭头的虚线来表示，箭头从使用类指向被依赖的类。如下图表示A依赖于B；他描述一个对象在运行期间会用到另一个对象的关系；</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/3af99c1229a43e6eda76e06d40101781.jpg" alt="uml_dependency.jpg"></p><p>下图所示是司机和汽车的关系图，司机驾驶汽车：</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/cf4014bd5e1ef9db4dad9802f7bd7cb6.png" alt="image-20191229173518926.png"></p><p>与关联关系不同的是，它是一种临时性的关系，通常在运行期间产生，并且随着运行时的变化； 依赖关系也可能发生变化；</p><p>显然，依赖也有方向，双向依赖是一种非常糟糕的结构，我们总是应该保持单向依赖，杜绝双向依赖的产生；</p><p>注：在最终代码中，依赖关系体现为类构造方法及类方法的传入参数，箭头的指向为调用关系；依赖关系除了临时知道对方外，还是“使用”对方的方法和属性；</p><h3 id="5-继承关系-x2F-泛化关系-generalization"><a href="#5-继承关系-x2F-泛化关系-generalization" class="headerlink" title="5. 继承关系&#x2F;泛化关系(generalization)"></a>5. 继承关系&#x2F;泛化关系(generalization)</h3><p>继承关系是对象之间耦合度最大的一种关系，表示一般与特殊的关系，是父类与子类之间的关系，是一种继承关系。类的继承结构表现在UML中为：泛化(generalize)与实现(realize)：</p><p>继承关系为 is-a的关系；两个对象之间如果可以用 is-a 来表示，就是继承关系：（..是..)</p><p>eg：自行车是车、猫是动物</p><p>在 UML 类图中，泛化关系用带空心三角箭头的实线来表示，箭头从子类指向父类。如下图表示（A继承自B）；</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/8907c51dba42ffa0482fb71cbe52a51c.jpg" alt="uml_generalization.jpg"></p><p>例如，汽车在现实中有实现，可用汽车定义具体的对象；汽车与SUV之间为泛化关系；</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/1922c1289aa576d923c28dd2e369735a.jpg" alt="uml_generalize.jpg"></p><p>再比如，Student 类和 Teacher 类都是 Person 类的子类，其类图如下图所示：</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/4a3aa059e7bd0c658b8c7f9c38ceb415.png" alt="image-20191229173539838.png"></p><p>注：最终代码中，泛化关系表现为继承非抽象类；</p><h3 id="6-实现关系-realize"><a href="#6-实现关系-realize" class="headerlink" title="6. 实现关系(realize)"></a>6. 实现关系(realize)</h3><p>实现关系是接口与实现类之间的关系。在这种关系中，类实现了接口，类中的操作实现了接口中所声明的所有的抽象操作。</p><p>在 UML 类图中，实现关系使用带空心三角箭头的虚线来表示，箭头从实现类指向接口。</p><p>比如：”车”为一个抽象概念，在现实中并无法直接用来定义对象；只有指明具体的子类(汽车还是自行车)，才 可以用来定义对象（”车”这个类在C++中用抽象类表示，在JAVA中有接口这个概念，更容易理解）</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/65f15a3616c6085fab91d7a7864e7b93.jpg" alt="uml_realize.jpg"></p><p>再例如，汽车和船实现了交通工具，其类图如图 9 所示。</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/ac2c49a538d0cda03187a91c71c75ba5.png" alt="image-20191229173554296.png"></p><p>注：最终代码中，实现关系表现为继承抽象类；</p><p>类关系记忆技巧如下表所示。</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/2cd964f35657776fb8770597e5059927.png" alt="img"></p><p>注意：UML 的标准类关系图中，没有实心箭头。有些 Java 编程的 IDE 自带类生成工具可能出现实心箭头，主要目的是降低理解难度。</p><p>下面用一个经典案例来加深和巩固对类图的理解。下图是对动物衍生关系描述的类图。这个图非常有技术含量也非常经典，大家可以好好理解一下。</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/d4a03394dd4e454c9462fa9f495d9c7d.png" alt="img"></p><h3 id="2-1-5-时序图"><a href="#2-1-5-时序图" class="headerlink" title="2.1.5 时序图"></a>2.1.5 时序图</h3><p>为了展示对象之间的交互细节，后续对设计模式解析的章节，都会用到时序图；</p><p>时序图（Sequence Diagram）是显示对象之间交互的图，这些对象是按时间顺序排列的。时序图中显示的是参与交互的对象及其对象之间消息交互的顺序。</p><p>时序图包括的建模元素主要有：对象（Actor）、生命线（Lifeline）、控制焦点（Focus of control）、消息（Message）等等。</p><p> <strong>角色（Actor）：</strong>   系统角色，可以是人、及其甚至其他的系统或者子系统。</p><p> <strong>对象（Object）：</strong>  对象包括三种命名方式：</p><ul><li>第一种方式包括对象名和类名；</li><li>第二中方式只显示类名不显示对象名，即表示他是一个匿名对象；</li><li>第三种方式只显示对象名不显示类明。</li></ul><p><img src="https://p.ananas.chaoxing.com/star3/origin/3d4ad77cf16fc64667e0119e3afe2afb.jpg" alt="SequenceDiagram.jpg"></p><p> <strong>生命线（Lifeline）：</strong>  生命线在顺序图中表示为从对象图标向下延伸的一条虚线，表示对象存在的时间，如下图</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/751e54d02d74a97919dd96625caa3dbe.gif" alt="lifeline.gif"></p><p> <strong>控制焦点（Focus of Control）</strong>：  控制焦点是顺序图中表示时间段的符号，在这个时间段内对象将执行相应的操作。用小矩形表示，如下图。</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/ebfdc7233927ef3a60cbf9da3de617f7.jpg" alt="ElementFOC.jpg"></p><p><strong>消息（Message）</strong>：  消息一般分为同步消息（Synchronous Message），异步消息（Asynchronous Message）和返回消息（Return Message）.如下图所示：</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/9a63cede09efb161e9a93b753f296554.gif" alt="Message.gif"></p><p>同步消息&#x3D;调用消息（Synchronous Message）：  消息的发送者把控制传递给消息的接收者，然后停止活动，等待消息的接收者放弃或者返回控制。用来表示同步的意义。</p><p> 异步消息（Asynchronous Message）：  消息发送者通过消息把信号传递给消息的接收者，然后继续自己的活动，不等待接受者返回消息或者控制。异步消息的接收者和发送者是并发工作的。</p><p>  返回消息（Return Message）：  返回消息表示从过程调用返回</p><p>  自关联消息（Self-Message）：  表示方法的自身调用以及一个对象内的一个方法调用另外一个方法。</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/31dca6f1c4828e193dd3834b7fc1323e.gif" alt="SelfMessage.gif"></p><p>组合片段示例：</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/aa735c6b2c20dc9a0c35a67e9e42dcca.gif" alt="CombinedFragments.gif"> </p><ul><li>Alternative fragment（denoted “alt”） 与 if…then…else对应</li><li>Option fragment (denoted “opt”) 与 Switch对应</li><li>Parallel fragment (denoted “par”) 表示同时发生</li><li>Loop fragment(denoted “loop”) 与 for 或者 Foreach对应</li></ul><p><strong>时序图实例分析（Sequece Diagram Example Analysis）</strong></p><p>完成课程创建功能，主要流程有：</p><p>1、请求添加课程页面，填写课程表单，点击【create】按钮</p><p>2、添加课程信息到数据库</p><p>3、向课程对象追加主题信息</p><p>4、为课程指派教师</p><p>5、完成课程创建功能</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/6381e4331f4ce0b365690111bdd6b04a.jpg" alt="Dequence_Diagram_Example.jpg"></p><p>1、序号1.0-1.3  完成页面的初始化</p><p>2、序号1.4-1.5  课程管理员填充课程表单</p><p>3、序号1.6-1.7  课程管理员点击【Create】按钮，并响应点击事件</p><p>4、序号1.8     Service层创建课程</p><p>5、序号1.9-1.10 添加课程到数据库，并返回课程编号CourseId</p><p>6、序号1.11-1.12 添加课程主题到数据库，并返回主题编号topicId</p><p>7、序号1.13         给课程指派教师</p><p>8、序号1.14         向界面抛创建课程成功与否的消息</p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python类</title>
      <link href="/2023/03/20/Python%E7%B1%BB/"/>
      <url>/2023/03/20/Python%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="Python类"><a href="#Python类" class="headerlink" title="Python类"></a>Python类</h1><h3 id="类-class-和-对象-object"><a href="#类-class-和-对象-object" class="headerlink" title="类(class) 和 对象(object)"></a>类(class) 和 对象(object)</h3><p>类：创建对象的模板，定义对象将会拥有的属性和函数</p><p>__init__函数：每个类必须定义的函数，对象创建语句时自动执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">myday</span>: <span class="comment">#建立一个类模板</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">def</span> <span class="title function_">__init__</span>():</span><br><span class="line"></span><br><span class="line">          .....</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">day1 = myday()      <span class="comment">#创建一个myday类的对象 </span></span><br></pre></td></tr></table></figure><ul><li>python类<br>类名：mayday<br>属性：name和emotion<br>函数：<strong>init</strong>函数，wake函数，eat函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 类(class)</span></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">myday</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):             <span class="comment">#每个类必须定义(def)    __init__函数，每个函数第一参数都是self</span></span><br><span class="line">               self.name = <span class="string">&quot;Xiao Ming&quot;</span>  <span class="comment">#myday对象拥有属性name和emotion</span></span><br><span class="line">               self.emotion = <span class="string">&quot;happy&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wake</span>(<span class="params">self,event</span>):</span><br><span class="line">               <span class="keyword">if</span> event == <span class="string">&quot;上课&quot;</span>:</span><br><span class="line">                     self.emotion = <span class="string">&quot;still happy&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self, food</span>):</span><br><span class="line">               <span class="keyword">if</span> food == <span class="string">&quot;牛肉&quot;</span>:</span><br><span class="line">                     self.emotion = <span class="string">&quot;more happy&quot;</span></span><br><span class="line">        <span class="comment">#def __eq__(self,other):</span></span><br><span class="line">            <span class="comment">#return self.name == other.name</span></span><br><span class="line">day2 = myday()</span><br><span class="line"><span class="comment">#创建对象时会自动执行__init__方法</span></span><br><span class="line"><span class="built_in">print</span>(day2.emotion)</span><br><span class="line"><span class="built_in">print</span>(day2.name)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>__init__函数添加参数  </code></p><p><code> 创建对象时传入self之后的参数</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span>  <span class="title class_">myday</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,emotion</span>):                                                                 </span><br><span class="line">            self.emotion = emotion  <span class="comment">#定义对象属性“self.emotion”，将这个属性赋值为函数传入的参数“emotion”</span></span><br><span class="line">            self.name = name</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wake</span>(<span class="params">self,event</span>):</span><br><span class="line">            <span class="keyword">if</span> event == <span class="string">&quot;上课&quot;</span>:</span><br><span class="line">                self.emotion = <span class="string">&quot;still happy&quot;</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self, food</span>):</span><br><span class="line">            <span class="keyword">if</span> food == <span class="string">&quot;牛肉&quot;</span>:</span><br><span class="line">                self.emotion = <span class="string">&quot;more happy&quot;</span></span><br><span class="line">        <span class="comment">#def __eq__(self,other):</span></span><br><span class="line">            <span class="comment">#return self.name == other.name</span></span><br><span class="line">day2 = myday(<span class="string">&quot;me&quot;</span>,<span class="string">&quot;very happy&quot;</span>)</span><br><span class="line"><span class="comment">#创建对象时会自动执行__init__函数</span></span><br><span class="line"><span class="built_in">print</span>(day2.name)</span><br><span class="line"><span class="built_in">print</span>(day2.emotion)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span>  <span class="title class_">myday</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,emotion</span>):                                                                 </span><br><span class="line">            self.emotion = emotion  <span class="comment">#定义对象属性“self.emotion”，将这个属性赋值为函数传入的参数“emotion”</span></span><br><span class="line">            self.name = name</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wake</span>(<span class="params">self,event</span>):</span><br><span class="line">            <span class="keyword">if</span> event == <span class="string">&quot;上课&quot;</span>:</span><br><span class="line">                self.emotion = <span class="string">&quot;still happy&quot;</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self, food</span>):</span><br><span class="line">            <span class="keyword">if</span> food == <span class="string">&quot;牛肉&quot;</span>:</span><br><span class="line">                self.emotion = <span class="string">&quot;more happy&quot;</span></span><br><span class="line">        <span class="comment">#def __eq__(self,other):</span></span><br><span class="line">            <span class="comment">#return self.name == other.name</span></span><br><span class="line">day2 = myday(<span class="string">&quot;me&quot;</span>,<span class="string">&quot;very happy&quot;</span>)</span><br><span class="line"><span class="comment">#调用对象函数时，从self之后的参数开始传入</span></span><br><span class="line">day2.eat(<span class="string">&quot;jiaozi&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(day2.emotion)</span><br><span class="line">day2.eat(<span class="string">&quot;牛肉&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(day2.emotion)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="任务：编写一个类继承myday类"><a href="#任务：编写一个类继承myday类" class="headerlink" title="任务：编写一个类继承myday类"></a>任务：编写一个类继承myday类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span>  <span class="title class_">myday</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,emotion</span>):                                                                 </span><br><span class="line">            self.emotion = emotion  <span class="comment">#定义对象属性“self.emotion”，将这个属性赋值为函数传入的参数“emotion”</span></span><br><span class="line">            self.name = name</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wake</span>(<span class="params">self,event</span>):</span><br><span class="line">            <span class="keyword">if</span> event == <span class="string">&quot;上课&quot;</span>:</span><br><span class="line">                self.emotion = <span class="string">&quot;still happy&quot;</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self, food</span>):</span><br><span class="line">            <span class="keyword">if</span> food == <span class="string">&quot;牛肉&quot;</span>:</span><br><span class="line">                self.emotion = <span class="string">&quot;more happy&quot;</span></span><br><span class="line">        <span class="comment">#def __eq__(self,other):</span></span><br><span class="line">            <span class="comment">#return self.name == other.name</span></span><br><span class="line">day2 = myday(<span class="string">&quot;me&quot;</span>,<span class="string">&quot;very happy&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建对象时，程序会自动执行__init__函数</span></span><br><span class="line">day2.eat(<span class="string">&quot;jiaozi&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(day2.emotion)</span><br><span class="line">day2.eat(<span class="string">&quot;牛肉&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(day2.emotion)</span><br><span class="line"></span><br><span class="line"><span class="comment">#类的继承     和     函数重写</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">night</span>(<span class="title class_ inherited__">myday</span>): <span class="comment">#night类继承myday类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.emotion = <span class="string">&quot;nice&quot;</span></span><br><span class="line">        self.name = <span class="string">&quot;me&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">play</span>(<span class="params">self</span>):</span><br><span class="line">        self.emotion = <span class="string">&quot;so nice&quot;</span></span><br><span class="line">night1 = night()</span><br><span class="line">night1.eat(<span class="string">&quot;羊肉&quot;</span>)  <span class="comment">#night继承myday类除__init__之外的函数</span></span><br><span class="line"><span class="built_in">print</span>(night1.emotion)</span><br><span class="line">night1.eat(<span class="string">&quot;牛肉&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(night1.emotion)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="一个类是否等于另一个类？"><a href="#一个类是否等于另一个类？" class="headerlink" title="一个类是否等于另一个类？"></a><strong>一个类是否等于另一个类？</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">day1 = myday(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;happy&quot;</span>)</span><br><span class="line">day2 = myday(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;happy&quot;</span>)</span><br><span class="line"></span><br><span class="line">day1.name == day2.name   <span class="comment">#True or False</span></span><br><span class="line">day1 == day2    <span class="comment">#True or False?</span></span><br><span class="line"><span class="comment">#（如果我们在类里定义一个__eq__函数，当我们执行 day1 == day2语句的时候，程序会自动执行__eq__函数）</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/1.png" alt="1679290854192"></p><h3 id="多线程开发案例"><a href="#多线程开发案例" class="headerlink" title="多线程开发案例"></a><strong>多线程开发案例</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestThread</span>(threading.Thread):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, para=<span class="string">&#x27;hi&#x27;</span>, sleep=<span class="number">3</span></span>):</span><br><span class="line">         <span class="built_in">super</span>().__init__()</span><br><span class="line">         self.para = para</span><br><span class="line">         self.sleep = sleep</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">         <span class="string">&quot;&quot;&quot;线程内容&quot;&quot;&quot;</span></span><br><span class="line">         time.sleep(self.sleep)</span><br><span class="line">         <span class="built_in">print</span>(self.para)</span><br><span class="line"></span><br><span class="line">thread_hi = TestThread()</span><br><span class="line">thread_hello = TestThread(<span class="string">&#x27;hello&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"> <span class="comment"># 启动线程</span></span><br><span class="line">thread_hi.start()</span><br><span class="line">thread_hello.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="任务！：按照如下描述定义一个类，代表一个企业"><a href="#任务！：按照如下描述定义一个类，代表一个企业" class="headerlink" title="任务！：按照如下描述定义一个类，代表一个企业"></a>任务！：按照如下描述定义一个类，代表一个企业</h3><p>class company: init函数：定义资金（money)属性，产品(product)属性和价格（price）属性</p><p>register函数：公司注册，修改资金属性</p><p>produce函数：制造，修改资金属性，修改产品属性</p><p>sale函数：销售，修改资金属性和产品属性</p><p>research函数：研发，修改资金属性和价格属性</p><ul><li>任务！：定义另一个类，继承company类，重写research函数（子类需要添加至少一个新的函数，并重写至少一个父类的函数。）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">company</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,money,product,price</span>) :</span><br><span class="line">        self.money=money</span><br><span class="line">        self.product=product</span><br><span class="line">        self.price=price</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">register</span>(<span class="params">self,tol_money</span>):<span class="comment">#注册资金</span></span><br><span class="line">        self.money=tol_money</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">produce</span>(<span class="params">self,pro_money,product_num</span>):</span><br><span class="line">        self.money-=pro_money<span class="comment">#生产就减少了</span></span><br><span class="line">        self.product+=product_num<span class="comment">#产品多了</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sale</span>(<span class="params">self,sal_money,product_num</span>):</span><br><span class="line">        self.money+=sal_money<span class="comment">#钱多了</span></span><br><span class="line">        self.product-=product_num<span class="comment">#产品减少了</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">research</span>(<span class="params">self,re_money,re_price</span>):</span><br><span class="line">        self.money-=re_money<span class="comment">#钱减少了</span></span><br><span class="line">        self.price+=re_price<span class="comment">#价格上去了</span></span><br><span class="line">company1=company(<span class="string">&quot;1000&quot;</span>,<span class="string">&quot;机器&quot;</span>,<span class="string">&quot;100/2&quot;</span>)</span><br><span class="line">company1.register(<span class="string">&quot;5000&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(company1.money)</span><br></pre></td></tr></table></figure><p>research函数：研发，修改资金属性和价格属性，产品属性</p><p>invert函数:投资，修改金钱属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BigCompany</span>(<span class="title class_ inherited__">company</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,money,product,price</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(money,product,price)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">research</span>(<span class="params">self,re_money,re_price,re_prodcut</span>):</span><br><span class="line">        self.money=re_money<span class="comment">#钱减少了</span></span><br><span class="line">        self.price+=re_price<span class="comment">#价格上去了</span></span><br><span class="line">        self.product+=re_prodcut<span class="comment">#产品多了</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inverst</span>(<span class="params">self,invstment_money</span>):</span><br><span class="line">        self.money-=invstment_money</span><br><span class="line"></span><br><span class="line">company2=BigCompany(<span class="number">7000</span>,<span class="number">2</span>,<span class="number">50</span>)</span><br><span class="line">company2.research(<span class="number">8000</span>,<span class="number">80</span>,<span class="number">90</span>)</span><br><span class="line">company2.inverst(<span class="number">908070</span>)</span><br><span class="line"><span class="built_in">print</span>(company2.money)</span><br><span class="line">        </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在Linux系统下编译C++</title>
      <link href="/2023/03/17/%E5%A6%82%E4%BD%95%E5%9C%A8Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%BC%96%E8%AF%91C++/"/>
      <url>/2023/03/17/%E5%A6%82%E4%BD%95%E5%9C%A8Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%BC%96%E8%AF%91C++/</url>
      
        <content type="html"><![CDATA[<h1 id="如何在Linux系统下编译C"><a href="#如何在Linux系统下编译C" class="headerlink" title="如何在Linux系统下编译C++"></a>如何在Linux系统下编译C++</h1><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一:"></a>方法一:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;hello_word&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/NOI/1.png" alt="1679061064013"></p><p>编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc 1.cpp -lstdc++ </span><br></pre></td></tr></table></figure><p>生a.out文件</p><p><img src="/images/NOI/2.png" alt="1679061165889"></p><p>运行a.out</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./a.out</span><br></pre></td></tr></table></figure><p><img src="/images/NOI/3.png" alt="1679061280444"></p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二:"></a>方法二:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;hello_word222&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/NOI/5.png" alt="1679061782953"></p><p>编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ 2.cpp -o 2output</span><br></pre></td></tr></table></figure><p>运行2output</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./2output</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux_c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统——进程同步——生产者消费者问题</title>
      <link href="/2023/03/17/%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5/"/>
      <url>/2023/03/17/%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h1><ul><li><p><strong>pv 操作 互斥锁</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">P --wait(信号量S)&#123;</span><br><span class="line">S&lt;=0</span><br><span class="line">S--//上锁</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成对出现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">V --signal(信号量)&#123;</span><br><span class="line">S++//开锁</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>生产者</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">in</span><span class="params">()</span>,out</span>=();</span><br><span class="line">item butter[n];</span><br><span class="line">semaphore mutex=<span class="number">1</span>,empty=n,full=();<span class="comment">//mutex必须为1 ,empty空位置,full有多少个</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">proceducer</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">producer an item nextp;</span><br><span class="line">……</span><br><span class="line"><span class="built_in">wait</span>(empty);       <span class="comment">//enpty--</span></span><br><span class="line"><span class="built_in">wait</span>(mutex);   <span class="comment">//上锁</span></span><br><span class="line">butter[in]=nextp;  <span class="comment">//生产一个</span></span><br><span class="line">in:=(in+<span class="number">1</span>)%n;      <span class="comment">// 生产一个</span></span><br><span class="line"><span class="built_in">signal</span>(mutex);   <span class="comment">//解锁</span></span><br><span class="line"><span class="built_in">signal</span>(full);      <span class="comment">//full++</span></span><br><span class="line">&#125;<span class="keyword">while</span>(TRUE)；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>消费者</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">consumer</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line"><span class="built_in">wait</span>(full)；      <span class="comment">//full-1</span></span><br><span class="line"><span class="built_in">wait</span>(mutex);<span class="comment">//上锁</span></span><br><span class="line">nextc=butter[out];  <span class="comment">//消费一个</span></span><br><span class="line">out=(out+<span class="number">1</span>)%n;<span class="comment">//消费一个</span></span><br><span class="line"><span class="built_in">signal</span>(mutex);  <span class="comment">//解锁</span></span><br><span class="line"><span class="built_in">signal</span>(empty); <span class="comment">//empty++</span></span><br><span class="line">consumer the item in nextc;</span><br><span class="line">&#125;<span class="keyword">while</span>(TRUE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">cobegin</span></span><br><span class="line"><span class="function"><span class="title">proceducer</span><span class="params">()</span></span>;<span class="built_in">consumer</span>();</span><br><span class="line">coend</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/1.png" alt="1679017003280"></p><h3 id="第1关：生产者消费者同步控制"><a href="#第1关：生产者消费者同步控制" class="headerlink" title="第1关：生产者消费者同步控制"></a>第1关：生产者消费者同步控制</h3><h4 id="任务描述"><a href="#任务描述" class="headerlink" title="任务描述"></a>任务描述</h4><p>本关任务：编写生产者消费者同步控制程序。</p><h4 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h4><p>为了完成本关任务，你需要掌握：1.理解生产者消费者同步问题，2.线程的编写方法，3.使用信号量实现线程间同步控制。</p><h5 id="线程并发引起的同步问题"><a href="#线程并发引起的同步问题" class="headerlink" title="线程并发引起的同步问题"></a>线程并发引起的同步问题</h5><p>线程以并发形式运行，当并发的线程间访问共享数据时，会发后争用现象，不进行同步控制的线程运行会造成不恰当的结果。</p><h5 id="生产者消费者同步问题"><a href="#生产者消费者同步问题" class="headerlink" title="生产者消费者同步问题"></a>生产者消费者同步问题</h5><p>生产者消费者是典型的同步问题，他们共享了一个缓冲池(全局变量数组)，当缓冲池有空位时生产者线程向缓冲池中依次赋值，如果缓冲池满则等待。当缓冲池中有数据时消费者线程从中取走数据，如果缓冲池空则等待。</p><h5 id="如何解决线程间访问共享变量的冲突问题"><a href="#如何解决线程间访问共享变量的冲突问题" class="headerlink" title="如何解决线程间访问共享变量的冲突问题"></a>如何解决线程间访问共享变量的冲突问题</h5><p>当多个线程访问同一个共享变量时，共享变量成为临界资源，它需要操作系统提供同步控制机制，以保证多个线程可以依序访问，当一个线程操作临界资源时其它线程不会中断其操作，因此对临界资源的操作是安全的。 下面是linux平台使用信号量的头文件和方法。 #include &lt;semaphore.h&gt; int sem_init(sem_t * sem, int pshared, unsigned int value);&#x2F;&#x2F;创建信号量变量，value是信号量的初值 int sem_destroy(sem_t *sem);&#x2F;&#x2F;销毁信号量 int sem_post(sem_t * sem);  &#x2F;&#x2F;信号量值增加1，并激活处于等待状态的线程  int sem_wait(sem_t * sem);  &#x2F;&#x2F;信号量值减少1 为0时将调用该方法的线程被OS阻塞 </p><h4 id="编程要求"><a href="#编程要求" class="headerlink" title="编程要求"></a>编程要求</h4><p>主线程序启动生产者线程和消费者线程，并等待两个线程的结束。 两个线程使用三个信号量，其中生产者线程向全局变量进行十次赋值(代表生产)，每次赋值前都要检查是否有空位，有空位的情况下 需要获得互斥量sem_mutex，并对共享缓冲区进行赋值，然后释放互斥量以便消费者线程可以操作缓冲区临界资源。 消费者线程要从缓冲区取值，取值前先检查是否有可用数据，有可用数据的情况下再获得互斥量sem_mutex，再取出缓冲区的值。 要特别说明的是生产者和消费者线程工作的速率是不同的，但在同步信号控制下，两个线程节奏互相配合步调一致。在《计算机操作系统》 教材中使用了伪代码，并且循环体没有结束条件，在此用C语言改写原程序，生产者一共只生产十个数据。 ####测试说明 为简化数据操作，程序没有输入，主线程已经写好， void * producer(void * arg); void * consumer(void * arg); static sem_t sem_empty;&#x2F;&#x2F;空位个数 static sem_t sem_full; &#x2F;&#x2F;可用数据个数 static sem_t sem_mutex; &#x2F;&#x2F;互斥量，用于控制两个线程互斥访问缓冲区 static int buffer[]&#x3D;{0,0,0}; int main(int argc,char * argv[]) {   pthread_t id_prod,id_consum;   sem_init(&amp;sem_empty,0,3); &#x2F;&#x2F;初值为3，空位为3，   sem_init(&amp;sem_full,0,0);  &#x2F;&#x2F;初值为0，可用数据个数为0，   sem_init(&amp;sem_mutex,0,1); &#x2F;&#x2F;初值为1，用于控制两个线程互斥访问缓冲区    pthread_create(&amp;id_prod,  NULL,producer,NULL);&#x2F;&#x2F;创建生产者线程   pthread_create(&amp;id_consum,NULL,consumer,NULL);&#x2F;&#x2F;创建消费者线程</p><p>  pthread_join(id_prod,NULL);  &#x2F;&#x2F;主线程等待生产者线程结束   pthread_join(id_consum,NULL);&#x2F;&#x2F;主线程等待消费者线程结束   sem_destroy(&amp;sem_empty);   sem_destroy(&amp;sem_full);   sem_destroy(&amp;sem_mutex);   return 0; } 学生需要补充producer线程与consumer中关于同步控制部分的程序。</p><p>输出：1至10 (需由学生根据程序生成正确结果) 开始你的任务吧，祝你成功！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//stu001.c 生产者消费者同步控制，由学生完成缺失代码。 </span></span><br><span class="line"><span class="comment">//主线程序启动生产者线程和消费者线程，全局变量初值为0</span></span><br><span class="line"><span class="comment">//生产者线程向全局变量进行10次赋值(代表生产)，消费者线程从全局变量读取值，///并重新赋值0(代表消费了产品)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> * <span class="title function_">producer</span><span class="params">(<span class="type">void</span> * arg)</span>;</span><br><span class="line"><span class="type">void</span> * <span class="title function_">consumer</span><span class="params">(<span class="type">void</span> * arg)</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">sem_t</span> sem_empty;<span class="comment">//空位个数</span></span><br><span class="line"><span class="type">static</span> <span class="type">sem_t</span> sem_full; <span class="comment">//可用数据个数</span></span><br><span class="line"><span class="type">static</span> <span class="type">sem_t</span> sem_mutex; <span class="comment">//互斥量，用于控制两个线程互斥访问缓冲区</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> buffer[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;<span class="comment">//共享的缓冲区</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> * argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">pthread_t</span> id_prod,id_consum;</span><br><span class="line">  sem_init(&amp;sem_empty,<span class="number">0</span>,<span class="number">3</span>); <span class="comment">//初值为3，空位为3，</span></span><br><span class="line">  sem_init(&amp;sem_full,<span class="number">0</span>,<span class="number">0</span>);  <span class="comment">//初值为0，可用数据个数为0，</span></span><br><span class="line">  sem_init(&amp;sem_mutex,<span class="number">0</span>,<span class="number">1</span>); <span class="comment">//初值为1，用于控制两个线程互斥访问缓冲区 </span></span><br><span class="line">  pthread_create(&amp;id_prod,  <span class="literal">NULL</span>,producer,<span class="literal">NULL</span>);<span class="comment">//创建生产者线程</span></span><br><span class="line">  pthread_create(&amp;id_consum,<span class="literal">NULL</span>,consumer,<span class="literal">NULL</span>);<span class="comment">//创建消费者线程</span></span><br><span class="line"></span><br><span class="line">  pthread_join(id_prod,<span class="literal">NULL</span>);  <span class="comment">//主线程等待生产者线程结束</span></span><br><span class="line">  pthread_join(id_consum,<span class="literal">NULL</span>);<span class="comment">//主线程等待消费者线程结束</span></span><br><span class="line">  sem_destroy(&amp;sem_empty);</span><br><span class="line">  sem_destroy(&amp;sem_full);</span><br><span class="line">  sem_destroy(&amp;sem_mutex);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> * <span class="title function_">producer</span><span class="params">(<span class="type">void</span> * arg)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i,pIndex=<span class="number">0</span>; </span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">11</span>;i&lt;<span class="number">21</span>;i++)</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="comment">//请在begin end语句间补全程序语句实现生产者向缓冲区赋值操作 </span></span><br><span class="line">  <span class="comment">/*  begin *******************程序代码约六行******************************* */</span></span><br><span class="line">  sem_wait(&amp;sem_empty);<span class="comment">//empty--</span></span><br><span class="line">      sem_wait(&amp;sem_mutex); <span class="comment">//枷锁</span></span><br><span class="line">      buffer[pIndex]=i;   <span class="comment">//缓冲区只有三个位置</span></span><br><span class="line">      pIndex=(pIndex+<span class="number">1</span>)%<span class="number">3</span>;<span class="comment">// 11-- 0  12--1 13--2 14--0 15--1 16--2</span></span><br><span class="line">      sem_post(&amp;sem_mutex);<span class="comment">//解锁</span></span><br><span class="line">      sem_post(&amp;sem_full);<span class="comment">//full++</span></span><br><span class="line">  <span class="comment">/*   end  ************************************************************** */</span> </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> * <span class="title function_">consumer</span><span class="params">(<span class="type">void</span> *arg)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i,cIndex=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">11</span>;i&lt;<span class="number">21</span>;i++)</span><br><span class="line">  &#123; </span><br><span class="line">  <span class="comment">//请在begin end语句间补全程序语句实现扫描算法，算出总访问磁道数存入totaltracks变量 </span></span><br><span class="line">  <span class="comment">/*  begin *******************程序代码约六行******************************* */</span> </span><br><span class="line">    sem_wait(&amp;sem_full);<span class="comment">//full--</span></span><br><span class="line">    sem_wait(&amp;sem_mutex);<span class="comment">//枷锁</span></span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;%d,&quot;</span>,buffer[cIndex]);</span><br><span class="line">    cIndex=(cIndex+<span class="number">1</span>)%<span class="number">3</span>;<span class="comment">//与上面对应</span></span><br><span class="line">    sem_post(&amp;sem_mutex);<span class="comment">//解锁</span></span><br><span class="line">    sem_post(&amp;sem_empty);<span class="comment">//empty++</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*   end  ************************************************************** */</span> </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参考Linux下c++的东西</p><p><a href="https://man7.org/linux/man-pages/man3/sem_wait.3.html">https://man7.org/linux/man-pages/man3/sem_wait.3.html</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sem_wait是一个函数，也是一个原子操作，它的作用是从信号量的值减去一个“1”，但它永远会先等待该信号量为一个非零值才开始做减法。也就是说，如果你对一个值为2的信号量调用sem_wait()，线程将会继续执行，将信号量的值将减到1。</span><br><span class="line">如果对一个值为0的信号量调用sem_wait()，这个函数就会原地等待直到有其它线程增加了这个值使它不再是0为止。如果有两个线程都在sem_wait()中等待同一个信号量变成非零值，那么当它被第三个线程增加 一个“1”时，等待线程中只有一个能够对信号量做减法并继续执行，另一个还将处于等待状态。sem_trywait(sem_t *sem)是函数sem_wait的非阻塞版，它直接将信号量sem减1，同时返回错误代码。</span><br><span class="line">(不得不说，百度确实蛮会复制粘贴翻译的，只不过没有那个网站格式做的好hhh)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sem_post是给信号量的值加上一个“1”，它是一个“原子操作”－－－即同时对同一个信号量做加“1”操作的两个线程是不会冲突的；而同 时对同一个文件进行读和写操作的两个程序就有可能会引起冲突。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sem_t  C语言中，信号量的数据类型为结构sem_t，它本质上是一个长整型的数。</span><br></pre></td></tr></table></figure><p><a href="https://blog.51cto.com/u_13999641/4314815">https://blog.51cto.com/u_13999641/4314815</a></p><p>没看完【argc，argv是什么】</p><p>真的忘的差不多了0.0</p><p><img src="/images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.png" alt="1679026388457"></p><p><img src="/images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/3.png" alt="1679026432795"></p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java数据类型</title>
      <link href="/2023/03/16/java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2023/03/16/java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Java数据类型"><a href="#Java数据类型" class="headerlink" title="Java数据类型"></a>Java数据类型</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>Java语言是强类型语言，对于每一种数据都定义了明确的具体的数据类型，在内存中分配了不同大小的内存空间。</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li>基本数据类型<ul><li>数值型<ul><li>整数类型(byte,short,int,long)</li><li>浮点类型(float,double)</li></ul></li><li>字符型(char)</li><li>布尔型(boolean)</li></ul></li><li>引用数据类型<ul><li>类(class)</li><li>接口(interface)</li><li>数组([])</li></ul></li></ul><h2 id="计算机存储单元"><a href="#计算机存储单元" class="headerlink" title="计算机存储单元"></a>计算机存储单元</h2><ul><li>定义：变量是内存中的小容器，用来存储数据。那么计算机内存是怎么存储数据的呢？无论是内存还是硬盘，计算机存储设备的最小信息单元叫“位（bit）”，我们又称之为“比特位”，通常用小写的字母b表示。而计算机最小的存储单元叫“字节（byte）”，通常用大写字母B表示，字节是由连续的8个位组成。</li><li>常用存储单元关系<ul><li>1B&#x3D; 8b<br>1KB &#x3D; 1024B<br>1MB &#x3D; 1024KB<br>1GB &#x3D; 1024MB<br>1TB &#x3D; 1024GB</li></ul></li></ul><h2 id="Java基本数据类型图"><a href="#Java基本数据类型图" class="headerlink" title="Java基本数据类型图"></a>Java基本数据类型图</h2><p><img src="/images/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/9.png" alt="1678974709618"></p><ul><li><p>定义</p><ul><li>数据类型的转换是在所赋值的数值类型和被变量接收的数据类型不一致时发生的，它需要从一种数据类型转换成另一种数据类型。</li></ul></li><li><p>分类</p><ul><li><p>隐式转换</p><ul><li><p>定义</p><ul><li>在运算过程中，由于不同的数据类型会转换成同一种数据类型，所以整型、浮点型以及字符型都可以参与混合运算。自动转换的规则是从低级类型数据转换成高级类型数据。</li></ul></li><li><p>转换规则</p><ul><li>数值型数据的转换：byte→short→int→long→float→double。</li><li>字符型转换为整型：char→int。</li></ul></li><li><p>转换条件</p><ul><li>自动类型转换的实现需要同时满足两个条件：①两种数据类型彼此兼容，②目标类型的取值范围大于源数据类型（低级类型数据转换成高级类型数据）。例如 byte 类型向 short 类型转换时，由于 short 类型的取值范围较大，会自动将 byte 转换为 short 类型。</li></ul></li></ul></li><li><p>显式转换</p><ul><li>定义<ul><li>当两种数据类型不兼容，或目标类型的取值范围小于源类型时，自动转换将无法进行，这时就需要进行强制类型转换。</li><li>语法格式<ul><li>目标类型 变量名 &#x3D; (目标类型) (被转换的数据);<br>举例：int b &#x3D; (byte)(a + b);</li></ul></li><li>注意<ul><li>如果超出了被赋值的数据类型的取值范围得到的结果会与你期望的结果不同</li><li>不建议强制转换，因为会有精度的损失。</li></ul></li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-15-2023</title>
      <link href="/2023/03/15/3-15-2023/"/>
      <url>/2023/03/15/3-15-2023/</url>
      
        <content type="html"><![CDATA[<h3 id="三月中自我崩溃"><a href="#三月中自我崩溃" class="headerlink" title="三月中自我崩溃"></a>三月中自我崩溃</h3><span id="more"></span><p>1.每日单词</p><div ><img src="\images\dayliy_image\3.16.jpg" alt="drawing" width="200" /></div>考试周，复习无进展，极度自我焦虑,看的上海的学校今年分数下来了，崩溃，高了40分，崩溃,换学校，觉得三年青春换水硕不值转战留学]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> casual_talk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式homework(1)</title>
      <link href="/2023/03/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8Fhomework(1)/"/>
      <url>/2023/03/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8Fhomework(1)/</url>
      
        <content type="html"><![CDATA[<h2 id="2023-Week1-Exp-Upload"><a href="#2023-Week1-Exp-Upload" class="headerlink" title="2023_Week1_Exp_Upload"></a>2023_Week1_Exp_Upload</h2><h3 id="1-简答题-用-UMLet-工具对下面代码绘制类图"><a href="#1-简答题-用-UMLet-工具对下面代码绘制类图" class="headerlink" title="1. (简答题)用 UMLet 工具对下面代码绘制类图"></a>1. (简答题)用 UMLet 工具对下面代码绘制类图</h3><p><img src="/images/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/10.png" alt="img"></p><p><img src="/images/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/5.png" alt="img"></p><p><img src="/images/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/11.png" alt="1678972004441"></p><p><img src="/images/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/6.png" alt="1678972695825"></p><p>【关联关系】：是一种拥有的关系，它使一个类知道另一个类的属性和方法</p><p>【代码体现】：成员变量</p><p>【箭头及指向】：带普通箭头的实心线，指向被拥有者</p><p>1.上图中，课程与学生是双向关联，课程有多名学生，学生也可能有多个课程。</p><p>2.但学生与成绩间的关系为单向关联，一名学生可能要有多门成绩，成绩有学生信息，但学生类不拥有成绩变量</p><p><img src="/images/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7.png" alt="1678972739648"></p><p>3.【组合关系】：是整体与部分的关系，但部分不能离开整体而单独存在。如公司和部门是整体和部分的关系，没有公司就不存在部门。</p><p>组合关系是关联关系的一种，是比聚合关系还要强的关系，它要求普通的聚合关系中代表整体的对象负责代表部分的对象的生命周期。</p><p>【代码体现】：成员变量</p><p>【箭头及指向】：带实心菱形的实线，菱形指向整体</p><p>上图中课程为整体，成绩没有课程就不存在。</p><p><img src="/images/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/8.png" alt="1678973083372"></p><p>4.【依赖关系】：是一种使用的关系，即一个类的实现需要另一个类的协助，所以要尽量不使用双向的互相依赖.</p><p>【代码表现】：局部变量、方法的参数或者对静态方法的调用</p><p>【箭头及指向】：带箭头的虚线，指向被使用者</p><p>一个宿舍类的实现需要另一个学生类的协助，宿舍是被使用者</p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UML&amp;&amp;面向对象设计原则</title>
      <link href="/2023/03/15/UML%E7%B1%BB%E5%9B%BE&amp;&amp;%E5%8E%9F%E5%88%99%E6%A6%82%E8%BF%B0/"/>
      <url>/2023/03/15/UML%E7%B1%BB%E5%9B%BE&amp;&amp;%E5%8E%9F%E5%88%99%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="一、单一职责原则"><a href="#一、单一职责原则" class="headerlink" title="一、单一职责原则**"></a>一、单一职责原则**</h3><p>就一个类而言，应该仅有一个引起它变化的原因。</p><p>如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化可能会削弱或者抑制这个类完成其他职责的能力。这种耦合会导致脆弱他的设计，当变化发生时，设计会遭受到意想不到的破坏；软件设计真正要做的许多内容就是发现职责并把那些职责相互分离。</p><h3 id="二、开放-封闭原则"><a href="#二、开放-封闭原则" class="headerlink" title="二、开放-封闭原则"></a><strong>二、开放-封闭原则</strong></h3><p>软件实体应该可以扩展，但不可修改。该原则是面向对象设计的核心所在，遵循这个原则可以带来面向对象技术所声称的可维护、可扩展、可复用、灵活性好。</p><p>设计人员必须对于他设计的模块应该对哪种变化封闭做出选择，必须先猜测出最有可能发生的变化种类，然后构造抽象来隔离那些变化。最初编写程序时假设变化不会发生，当变化发生时，就创建抽象来隔离以后发生的同类变化，拒绝不成熟的抽象。</p><h3 id="三、里氏代换原则"><a href="#三、里氏代换原则" class="headerlink" title="三、里氏代换原则"></a><strong>三、里氏代换原则</strong></h3><p>子类型必须能够替换掉它们的父类型。由于子类型的可替换性才使得使用父类类型的模块在无需修改的情况下就可以扩展。</p><h3 id="四、依赖倒转原则"><a href="#四、依赖倒转原则" class="headerlink" title="四、依赖倒转原则"></a><strong>四、依赖倒转原则</strong></h3><p>高层模块不应该依赖低层模块，两个都应该依赖抽象；抽象不应该依赖细节，细节应该依赖抽象。</p><p>要针对接口编程，不要针对实现编程。该原则可以说是面向对象设计的标志，编写时考虑的是如何对抽象编程而不是针对细节编程，即程序中所有的依赖关系都是终止于抽象类或者接口。</p><h3 id="五、迪迷特原则（最少知识原则）"><a href="#五、迪迷特原则（最少知识原则）" class="headerlink" title="五、迪迷特原则（最少知识原则）"></a><strong>五、迪迷特原则（最少知识原则）</strong></h3><p>如果两个类不必彼此直接通信，那么这两个类就不应当发生直接的相互作用；如果其中一个类需要调用另一个类的某一个方法的话，可以通过第三者转发这个调用。</p><p>该原则其根本思想，是强调了类之间的松耦合；类之间的耦合越弱，越利于复用，一个处在弱耦合的类被修改，不会对有关系的类造成波及。在类的结构设计上，每一个类都应当尽量降低成员的访问权限。</p><h3 id="六、合成-x2F-聚合复用原则"><a href="#六、合成-x2F-聚合复用原则" class="headerlink" title="六、合成&#x2F;聚合复用原则"></a><strong>六、合成&#x2F;聚合复用原则</strong></h3><p>尽量使用合成&#x2F;聚合，尽量不要使用类继承。</p><p>聚合表示一种弱的“拥有”关系，体现的是A对象可以包含B对象，但B对象不是A对象的一部分；合成则是一种强的“拥有”关系，体现了严格的部分和整体的关系，部分和整体的生命周期一样。</p><p>优先使用对象的合成&#x2F;聚合将有助于你保持每个类被封装，并被击中在单个任务上，这样类和类继承层次会保持较小规模，并且不太可能增长为不可控制的庞然大物。</p><h3 id="七、UML例图"><a href="#七、UML例图" class="headerlink" title="七、UML例图"></a><strong>七、UML例图</strong></h3><p>‘+’表示public，‘-’表示private，‘#’表示protected；</p><p>接口顶端有《interface》显示，只有两行；同时另一个表示方法为棒棒糖表示法；</p><p>聚合表示一种弱的’拥有’关系，体现的是A对象可以包含B对象，但B对象不是A对象的一部分；</p><p>合成是一种强的’拥有’关系，体现了严格的部分和整体的关系，部分和整体的生命周期一样；</p><p><img src="https://pic2.zhimg.com/80/v2-2a5e007cbbf020df430358e56cc37501_1440w.webp" alt="img"></p><p>在UML类图中，常见的有以下几种关系: 泛化（Generalization）, 实现（Realization），关联（Association)，聚合（Aggregation），组合(Composition)，依赖(Dependency)</p><h3 id="1-泛化（Generalization）"><a href="#1-泛化（Generalization）" class="headerlink" title="1. 泛化（Generalization）"></a><strong>1. 泛化（Generalization）</strong></h3><p>【泛化关系】：是一种继承关系，表示一般与特殊的关系，它指定了子类如何特化父类的所有特征和行为。例如：老虎是动物的一种，即有老虎的特性也有动物的共性。</p><p>【箭头指向】：带三角箭头的实线，箭头指向父类</p><p><img src="https://pic4.zhimg.com/80/v2-2111f42427a07f8270f76c1e41b91127_1440w.webp" alt="img"></p><h3 id="2-实现（Realization）"><a href="#2-实现（Realization）" class="headerlink" title="2. 实现（Realization）"></a><strong>2. 实现（Realization）</strong></h3><p>【实现关系】：是一种类与接口的关系，表示类是接口所有特征和行为的实现.</p><p>【箭头指向】：带三角箭头的虚线，箭头指向接口</p><p><img src="https://pic2.zhimg.com/80/v2-b02e9f6289d1f6ba0e5511e66315368d_1440w.webp" alt="img"></p><h3 id="3-关联（Association"><a href="#3-关联（Association" class="headerlink" title="3. 关联（Association)"></a><strong>3. 关联（Association)</strong></h3><p>【关联关系】：是一种拥有的关系，它使一个类知道另一个类的属性和方法；如：老师与学生，丈夫与妻子关联可以是双向的，也可以是单向的。双向的关联可以有两个箭头或者没有箭头，单向的关联有一个箭头。</p><p>【代码体现】：成员变量</p><p>【箭头及指向】：带普通箭头的实心线，指向被拥有者</p><p><img src="https://pic3.zhimg.com/80/v2-b8a99595152fe8f15587f87e1e15e4ae_1440w.webp" alt="img"></p><p>上图中，老师与学生是双向关联，老师有多名学生，学生也可能有多名老师。但学生与某课程间的关系为单向关联，一名学生可能要上多门课程，课程是个抽象的东西他不拥有学生。</p><p>下图为自身关联：</p><p><img src="https://pic1.zhimg.com/80/v2-07a309a7b5e45179fccbd48f1c76b16c_1440w.webp" alt="img"></p><h3 id="4-聚合（Aggregation）"><a href="#4-聚合（Aggregation）" class="headerlink" title="4. 聚合（Aggregation）"></a><strong>4. 聚合（Aggregation）</strong></h3><p>【聚合关系】：是整体与部分的关系，且部分可以离开整体而单独存在。如车和轮胎是整体和部分的关系，轮胎离开车仍然可以存在。</p><p>聚合关系是关联关系的一种，是强的关联关系；关联和聚合在语法上无法区分，必须考察具体的逻辑关系。</p><p>【代码体现】：成员变量</p><p>【箭头及指向】：带空心菱形的实心线，菱形指向整体</p><p><img src="https://pic3.zhimg.com/80/v2-44cad250f321a597839e05c437e0112a_1440w.webp" alt="img"></p><h3 id="5-组合-Composition"><a href="#5-组合-Composition" class="headerlink" title="5. 组合(Composition)"></a><strong>5. 组合(Composition)</strong></h3><p>【组合关系】：是整体与部分的关系，但部分不能离开整体而单独存在。如公司和部门是整体和部分的关系，没有公司就不存在部门。</p><p>组合关系是关联关系的一种，是比聚合关系还要强的关系，它要求普通的聚合关系中代表整体的对象负责代表部分的对象的生命周期。</p><p>【代码体现】：成员变量</p><p>【箭头及指向】：带实心菱形的实线，菱形指向整体</p><p><img src="https://pic3.zhimg.com/80/v2-7f0849545b8f89914f327c63677587d6_1440w.webp" alt="img"></p><h3 id="6-依赖-Dependency"><a href="#6-依赖-Dependency" class="headerlink" title="6. 依赖(Dependency)"></a><strong>6. 依赖(Dependency)</strong></h3><p>【依赖关系】：是一种使用的关系，即一个类的实现需要另一个类的协助，所以要尽量不使用双向的互相依赖.</p><p>【代码表现】：局部变量、方法的参数或者对静态方法的调用</p><p>【箭头及指向】：带箭头的虚线，指向被使用者</p><p><img src="https://pic3.zhimg.com/80/v2-6651fe1f4705d9bd32cedda210ace8b6_1440w.webp" alt="img"></p><p>各种关系的强弱顺序：</p><blockquote><p>泛化 &#x3D; 实现 &gt; 组合 &gt; 聚合 &gt; 关联 &gt; 依赖</p></blockquote><p>下面这张UML图，比较形象地展示了各种类图关系：</p><p><img src="https://pic1.zhimg.com/80/v2-064242574ba428a2330bf41e069a0f88_1440w.webp" alt="img"></p><h2 id="创建型"><a href="#创建型" class="headerlink" title="创建型"></a>创建型</h2><h3 id="1-Factory-Method（工厂方法）"><a href="#1-Factory-Method（工厂方法）" class="headerlink" title="1. Factory Method（工厂方法）"></a><strong>1. Factory Method（工厂方法）</strong></h3><p><img src="https://pic2.zhimg.com/80/v2-8f3b98dadbc5d9cf9469dcc99ee20991_1440w.webp" alt="img"></p><p><strong>意图：</strong></p><p>定义一个用于创建对象的接口，让子类决定实例化哪一个类。Factory Method 使一个类的实例化延迟到其子类。</p><p><strong>适用性：</strong></p><p>当一个类不知道它所必须创建的对象的类的时候。</p><p>当一个类希望由它的子类来指定它所创建的对象的时候。</p><p>当类将创建对象的职责委托给多个帮助子类中的某一个，并且你希望将哪一个帮助子类是代理者这一信息局部化的时候。</p><p>详解：<a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247487170&idx=2&sn=34b135090c064c1ca202d629a4beab52&chksm=ebd631eedca1b8f85e444f7544c2cbe696b253fe3916f17dbcfbab49b6b74653126c230fdc39&scene=21%23wechat_redirect">设计模式是什么鬼（工厂方法）</a></p><h3 id="2-Abstract-Factory（抽象工厂）"><a href="#2-Abstract-Factory（抽象工厂）" class="headerlink" title="2. Abstract Factory（抽象工厂）"></a><strong>2. Abstract Factory（抽象工厂）</strong></h3><p><img src="https://pic2.zhimg.com/80/v2-1436a190dde8067b8d461ace42c7e4a9_1440w.webp" alt="img"></p><p><strong>意图：</strong></p><p>提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</p><p><strong>适用性：</strong></p><p>一个系统要独立于它的产品的创建、组合和表示时。</p><p>一个系统要由多个产品系列中的一个来配置时。</p><p>当你要强调一系列相关的产品对象的设计以便进行联合使用时。</p><p>当你提供一个产品类库，而只想显示它们的接口而不是实现时。</p><p>详解：<a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247487234&idx=2&sn=1dca994fb989ca55ec311cae187805f2&chksm=ebd6302edca1b938f0b8107d129652d9bc2e1e72d37ce1d6dfd188294a93a62cdbec5ddd91bb&scene=21%23wechat_redirect">设计模式是什么鬼（抽象工厂）</a></p><h3 id="3-Builder（建造者）"><a href="#3-Builder（建造者）" class="headerlink" title="3. Builder（建造者）"></a><strong>3. Builder（建造者）</strong></h3><p><img src="https://pic3.zhimg.com/80/v2-48835219bebcd3b23e9548ae17f80f86_1440w.webp" alt="img"></p><p><strong>意图：</strong></p><p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p><p><strong>适用性：</strong></p><p>当创建复杂对象的算法应该独立于该对象的组成部分以及它们的装配方式时。</p><p>当构造过程必须允许被构造的对象有不同的表示时。</p><p>详解：<a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247487258&idx=2&sn=cee8a48b247ec1fb2fb1a45396c0a04e&chksm=ebd63036dca1b920246061b0287c6f29040a338c46094c8b8eeff03ea068de03180fa48aa2b2&scene=21%23wechat_redirect">设计模式是什么鬼（建造者）</a></p><h3 id="4-Prototype（原型）"><a href="#4-Prototype（原型）" class="headerlink" title="4. Prototype（原型）"></a><strong>4. Prototype（原型）</strong></h3><p><img src="https://pic1.zhimg.com/80/v2-cbd77b435c3c2c6624413b698a2ae4f8_1440w.webp" alt="img"></p><p><strong>意图：</strong></p><p>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p><p><strong>适用性：</strong></p><p>当要实例化的类是在运行时刻指定时，例如，通过动态装载；或者</p><p>为了避免创建一个与产品类层次平行的工厂类层次时；或者</p><p>当一个类的实例只能有几个不同状态组合中的一种时。建立相应数目的原型并克隆它们可能比每次用合适的状态手工实例化该类更方便一些。</p><p>详解：<a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247485830&idx=1&sn=a3164e131d4ed08cc6cfcdaec4425ff4&chksm=ebd636aadca1bfbcd1df059f9795350157c600f37238ba2f334e03064e25e8359b0acfc177b4&scene=21%23wechat_redirect">设计模式是什么鬼（原型）</a></p><h3 id="5-Singleton（单例）"><a href="#5-Singleton（单例）" class="headerlink" title="5. Singleton（单例）"></a><strong>5. Singleton（单例）</strong></h3><p><img src="https://pic4.zhimg.com/80/v2-4fd103fadf7d58b90c355bf91139e307_1440w.webp" alt="img"></p><p><strong>意图：</strong></p><p>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p><p><strong>适用性：</strong></p><p>当类只能有一个实例而且客户可以从一个众所周知的访问点访问它时。</p><p>当这个唯一实例应该是通过子类化可扩展的，并且客户应该无需更改代码就能使用一个扩展的实例时。</p><p>详解：<a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247485826&idx=2&sn=e21d6188ea07a992f1eb9a6671ae7485&chksm=ebd636aedca1bfb8ff0ad69343ab40e87cd65ec41e2dfc54d761e97e9058effe6bd2eac28486&scene=21%23wechat_redirect">设计模式是什么鬼（单例）</a></p><h2 id="结构型"><a href="#结构型" class="headerlink" title="结构型"></a>结构型</h2><h3 id="6-Adapter-Class-x2F-Object（适配器）"><a href="#6-Adapter-Class-x2F-Object（适配器）" class="headerlink" title="6. Adapter Class&#x2F;Object（适配器）"></a><strong>6. Adapter Class&#x2F;Object（适配器）</strong></h3><p><img src="https://pic3.zhimg.com/80/v2-5c8c31d37a74ba8901028488fcada606_1440w.webp" alt="img"></p><p><strong>意图：</strong></p><p>将一个类的接口转换成客户希望的另外一个接口。Adapter 模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p><p><strong>适用性：</strong></p><p>你想使用一个已经存在的类，而它的接口不符合你的需求。</p><p>你想创建一个可以复用的类，该类可以与其他不相关的类或不可预见的类（即那些接口可能不一定兼容的类）协同工作。</p><p>（仅适用于对象Adapter ）你想使用一些已经存在的子类，但是不可能对每一个都进行子类化以匹配它们的接口。对象适配器可以适配它的父类接口。</p><p>详解：<a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247485849&idx=2&sn=79922e3fe8278d01e3fab1870ed824bc&chksm=ebd636b5dca1bfa3c83c3d2d740e25553bc1ba686b2ea6de46acc14d9ea547eb636e24ac7db0&scene=21%23wechat_redirect">设计模式是什么鬼（适配器）</a></p><h3 id="7-Bridge（桥接）"><a href="#7-Bridge（桥接）" class="headerlink" title="7. Bridge（桥接）"></a><strong>7. Bridge（桥接）</strong></h3><p><img src="https://pic2.zhimg.com/80/v2-e36ccde15c056c60e0a2b4e719c3afa9_1440w.webp" alt="img"></p><p><strong>意图：</strong></p><p>将抽象部分与它的实现部分分离，使它们都可以独立地变化。</p><p><strong>适用性：</strong></p><p>你不希望在抽象和它的实现部分之间有一个固定的绑定关系。例如这种情况可能是因为，在程序运行时刻实现部分应可以被选择或者切换。</p><p>类的抽象以及它的实现都应该可以通过生成子类的方法加以扩充。这时Bridge 模式使你可以对不同的抽象接口和实现部分进行组合，并分别对它们进行扩充。</p><p>对一个抽象的实现部分的修改应对客户不产生影响，即客户的代码不必重新编译。</p><p>（C++）你想对客户完全隐藏抽象的实现部分。在C++中，类的表示在类接口中是可见的。</p><p>有许多类要生成。这样一种类层次结构说明你必须将一个对象分解成两个部分。Rumbaugh 称这种类层次结构为“嵌套的普化”（nested generalizations ）。</p><p>你想在多个对象间共享实现（可能使用引用计数），但同时要求客户并不知道这一点。一个简单的例子便是Coplien 的String 类[ Cop92 ]，在这个类中多个对象可以共享同一个字符串表示（StringRep ）。</p><p>详解：<a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247487099&idx=2&sn=457440878204cf39ade08d1643aa6375&chksm=ebd63157dca1b841e4a09c32e7ed7bd28988cc54d08d4e03eb7bbc25dc50c1acd8938fae155c&scene=21%23wechat_redirect">设计模式是什么鬼（桥接）</a></p><h3 id="8-Composite（组合）"><a href="#8-Composite（组合）" class="headerlink" title="8. Composite（组合）"></a><strong>8. Composite（组合）</strong></h3><p><img src="https://pic4.zhimg.com/80/v2-75d82d38597a3c79e0c19665bc816487_1440w.webp" alt="img"></p><p><strong>意图：</strong></p><p>将对象组合成树形结构以表示“部分-整体”的层次结构。C o m p o s i t e 使得用户对单个对象和组合对象的使用具有一致性。</p><p><strong>适用性：</strong></p><p>你想表示对象的部分-整体层次结构。</p><p>你希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。</p><p>详解：<a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247486525&idx=2&sn=a2059bcf272a82f5a98cbd9f22349a96&chksm=ebd63311dca1ba071022d396a12eca74d58be8164713fe90f42aa1a7376db77bd6d97755bde8&scene=21%23wechat_redirect">设计模式是什么鬼（组合）</a></p><h3 id="9-Decorator（装饰）"><a href="#9-Decorator（装饰）" class="headerlink" title="9. Decorator（装饰）"></a><strong>9. Decorator（装饰）</strong></h3><p><img src="https://pic3.zhimg.com/80/v2-20f4f4c4eb272b615394cea73450ca76_1440w.webp" alt="img"></p><p><strong>意图：</strong></p><p>动态地给一个对象添加一些额外的职责。就增加功能来说，Decorator 模式相比生成子类更为灵活。</p><p><strong>适用性：</strong></p><p>在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责。</p><p>处理那些可以撤消的职责。</p><p>当不能采用生成子类的方法进行扩充时。一种情况是，可能有大量独立的扩展，为支持每一种组合将产生大量的子类，使得子类数目呈爆炸性增长。另一种情况可能是因为类定义被隐藏，或类定义不能用于生成子类。</p><p>详解：<a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247486377&idx=2&sn=e88370d32c36b19ac89189341cbaf03b&chksm=ebd63485dca1bd93fd46ce901b8ed5adaa0f1f5db15b8a19902bef66a05bd38ed420e26f7f5e&scene=21%23wechat_redirect">设计模式是什么鬼（装饰）</a></p><h3 id="10-Facade（外观）"><a href="#10-Facade（外观）" class="headerlink" title="10. Facade（外观）"></a><strong>10. Facade（外观）</strong></h3><p><img src="https://pic2.zhimg.com/80/v2-aa585c0b4be937d5a1ee0d9fb5683aa1_1440w.webp" alt="img"></p><p><strong>意图：</strong></p><p>为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p><p><strong>适用性：</strong></p><p>当你要为一个复杂子系统提供一个简单接口时。子系统往往因为不断演化而变得越来越复杂。大多数模式使用时都会产生更多更小的类。这使得子系统更具可重用性，也更容易对子系统进行定制，但这也给那些不需要定制子系统的用户带来一些使用上的困难。Facade 可以提供一个简单的缺省视图，这一视图对大多数用户来说已经足够，而那些需要更多的可定制性的用户可以越过facade层。</p><p>客户程序与抽象类的实现部分之间存在着很大的依赖性。引入facade 将这个子系统与客户以及其他的子系统分离，可以提高子系统的独立性和可移植性。</p><p>当你需要构建一个层次结构的子系统时，使用facade模式定义子系统中每层的入口点。如果子系统之间是相互依赖的，你可以让它们仅通过facade进行通讯，从而简化了它们之间的依赖关系。</p><p>详解：<a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247486253&idx=2&sn=60b15886f8230ee17067d48d8a273329&chksm=ebd63401dca1bd17a26acf0f139f01feebde6071646bfad60c2ca2773fd1f593955aa2efe992&scene=21%23wechat_redirect">设计模式是什么鬼（门面）</a></p><h3 id="11-Flyweight（享元）"><a href="#11-Flyweight（享元）" class="headerlink" title="11. Flyweight（享元）"></a><strong>11. Flyweight（享元）</strong></h3><p><img src="https://pic4.zhimg.com/80/v2-2753d0d9328f08928db006313e08bd43_1440w.webp" alt="img"></p><p><strong>意图：</strong></p><p>运用共享技术有效地支持大量细粒度的对象。</p><p><strong>适用性：</strong></p><p>一个应用程序使用了大量的对象。</p><p>完全由于使用大量的对象，造成很大的存储开销。</p><p>对象的大多数状态都可变为外部状态。</p><p>如果删除对象的外部状态，那么可以用相对较少的共享对象取代很多组对象。</p><p>应用程序不依赖于对象标识。由于Flyweight 对象可以被共享，对于概念上明显有别的对象，标识测试将返回真值。</p><p>详解：<a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247486986&idx=2&sn=0956b282423ac82a64bad9d4b75bd63d&chksm=ebd63126dca1b830bdb1464ec0d2957a63e19956e657673af192d514088a7bef569741656d42&scene=21%23wechat_redirect">设计模式是什么鬼（享元）</a></p><h3 id="12-Proxy（代理）"><a href="#12-Proxy（代理）" class="headerlink" title="12. Proxy（代理）"></a><strong>12. Proxy（代理）</strong></h3><p><img src="https://pic4.zhimg.com/80/v2-6e64b84a618958acae36cb537c70c583_1440w.webp" alt="img"></p><p><strong>意图：</strong></p><p>为其他对象提供一种代理以控制对这个对象的访问。</p><p><strong>适用性：</strong></p><p>在需要用比较通用和复杂的对象指针代替简单的指针的时候，使用Proxy模式。下面是一 些可以使用Proxy 模式常见情况：</p><ul><li>远程代理（Remote Proxy ）为一个对象在不同的地址空间提供局部代表。NEXTSTEP[Add94] 使用NXProxy 类实现了这一目的。Coplien[Cop92] 称这种代理为“大使” （Ambassador ）。</li><li>虚代理（Virtual Proxy ）根据需要创建开销很大的对象。在动机一节描述的ImageProxy 就是这样一种代理的例子。</li><li>保护代理（Protection Proxy ）控制对原始对象的访问。保护代理用于对象应该有不同 的访问权限的时候。例如，在Choices 操作系统[ CIRM93]中KemelProxies为操作系统对象提供 了访问保护。</li><li>智能指引（Smart Reference ）取代了简单的指针，它在访问对象时执行一些附加操作。它的典型用途包括：</li></ul><p>对指向实际对象的引用计数，这样当该对象没有引用时，可以自动释放它(也称为SmartPointers[Ede92 ] )。</p><p>当第一次引用一个持久对象时，将它装入内存。</p><p>在访问一个实际对象前，检查是否已经锁定了它，以确保其他对象不能改变它。</p><p>详解：<a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247487054&idx=2&sn=489695986c038525e25c017c217b72fb&chksm=ebd63162dca1b874edcaa30680e1da4d3a02c9b0011cb5c60c22d2b9ebea9169022813810bd5&scene=21%23wechat_redirect">设计模式是什么鬼（代理）</a></p><h2 id="行为型"><a href="#行为型" class="headerlink" title="行为型"></a>行为型</h2><h3 id="13-Interpreter（解释器）"><a href="#13-Interpreter（解释器）" class="headerlink" title="13. Interpreter（解释器）"></a><strong>13. Interpreter（解释器）</strong></h3><p><img src="https://pic4.zhimg.com/80/v2-1c7090078bc60481325e481502a7074f_1440w.webp" alt="img"></p><p><strong>意图：</strong></p><p>给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。</p><p><strong>适用性：</strong></p><p>当有一个语言需要解释执行, 并且你可将该语言中的句子表示为一个抽象语法树时，可使用解释器模式。而当存在以下情况时该模式效果最好：</p><p>该文法简单对于复杂的文法, 文法的类层次变得庞大而无法管理。此时语法分析程序生成器这样的工具是更好的选择。它们无需构建抽象语法树即可解释表达式, 这样可以节省空间而且还可能节省时间。</p><p>效率不是一个关键问题最高效的解释器通常不是通过直接解释语法分析树实现的, 而是首先将它们转换成另一种形式。例如，正则表达式通常被转换成状态机。但即使在这种情况下, 转换器仍可用解释器模式实现, 该模式仍是有用的。</p><p>详解：<a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247487345&idx=2&sn=1ee3aa645b265c55de74a1d2567c7e89&chksm=ebd6305ddca1b94b7ac2b713c5d439c031765e24315653ae2f728a3de3f10d03ba554c1ab872&scene=21%23wechat_redirect">设计模式是什么鬼（解释器）</a></p><h3 id="14-Template-Method（模板方法）"><a href="#14-Template-Method（模板方法）" class="headerlink" title="14. Template Method（模板方法）"></a><strong>14. Template Method（模板方法）</strong></h3><p><img src="https://pic1.zhimg.com/80/v2-a232d4224c19e0c44d0f5a70a1d74728_1440w.webp" alt="img"></p><p><strong>意图：</strong></p><p>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。TemplateMethod 使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p><p><strong>适用性：</strong></p><p>一次性实现一个算法的不变的部分，并将可变的行为留给子类来实现。</p><p>各子类中公共的行为应被提取出来并集中到一个公共父类中以避免代码重复。这是Opdyke 和Johnson 所描述过的“重分解以一般化”的一个很好的例子[ OJ93 ]。首先识别现有代码中的不同之处，并且将不同之处分离为新的操作。最后，用一个调用这些新的操作的模板方法来替换这些不同的代码。</p><p>控制子类扩展。模板方法只在特定点调用“hook ”操作（参见效果一节），这样就只允许在这些点进行扩展。</p><p>详解：<a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247486148&idx=1&sn=601fa38aee0aa27137341ce9a2624fec&chksm=ebd635e8dca1bcfe8da575478244414d13620010cd0d9823f423af8d2457ad1bb65a17d6a940&scene=21%23wechat_redirect">设计模式是什么鬼（模板方法）</a></p><h3 id="15-Chain-of-Responsibility（责任链）"><a href="#15-Chain-of-Responsibility（责任链）" class="headerlink" title="15. Chain of Responsibility（责任链）"></a><strong>15. Chain of Responsibility（责任链）</strong></h3><p><img src="https://pic4.zhimg.com/80/v2-84c0347f8d4e33bde0a1eaaaebbd347f_1440w.webp" alt="img"></p><p><strong>意图：</strong></p><p>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</p><p><strong>适用性：</strong></p><p>有多个的对象可以处理一个请求，哪个对象处理该请求运行时刻自动确定。</p><p>你想在不明确指定接收者的情况下，向多个对象中的一个提交一个请求。</p><p>可处理一个请求的对象集合应被动态指定。</p><p>详解：<a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247486851&idx=2&sn=e5eb6b74336f0148e8c3e3043e613e87&chksm=ebd632afdca1bbb9d8a54555ed67e248fed58ebc1991cae9961c4d22e226b04369295cc49877&scene=21%23wechat_redirect">设计模式是什么鬼（责任链）</a></p><h3 id="16-Command（命令）"><a href="#16-Command（命令）" class="headerlink" title="16. Command（命令）"></a><strong>16. Command（命令）</strong></h3><p><img src="https://pic3.zhimg.com/80/v2-eeb21ebeb421049703255e00065feb26_1440w.webp" alt="img"></p><p><strong>意图：</strong></p><p>将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤消的操作。</p><p><strong>适用性：</strong></p><p>抽象出待执行的动作以参数化某对象，你可用过程语言中的回调（call back）函数表达这种参数化机制。所谓回调函数是指函数先在某处注册，而它将在稍后某个需要的时候被调用。Command 模式是回调机制的一个面向对象的替代品。</p><p>在不同的时刻指定、排列和执行请求。一个Command对象可以有一个与初始请求无关的生存期。如果一个请求的接收者可用一种与地址空间无关的方式表达，那么就可将负责该请求的命令对象传送给另一个不同的进程并在那儿实现该请求。</p><p>支持取消操作。Command的Excute 操作可在实施操作前将状态存储起来，在取消操作时这个状态用来消除该操作的影响。Command 接口必须添加一个Unexecute操作，该操作取消上一次Execute调用的效果。执行的命令被存储在一个历史列表中。可通过向后和向前遍历这一列表并分别调用Unexecute和Execute来实现重数不限的“取消”和“重做”。</p><p>支持修改日志，这样当系统崩溃时，这些修改可以被重做一遍。在Command接口中添加装载操作和存储操作，可以用来保持变动的一个一致的修改日志。从崩溃中恢复的过程包括从磁盘中重新读入记录下来的命令并用Execute操作重新执行它们。</p><p>用构建在原语操作上的高层操作构造一个系统。这样一种结构在支持事务( transaction)的信息系统中很常见。一个事务封装了对数据的一组变动。Command模式提供了对事务进行建模的方法。Command有一个公共的接口，使得你可以用同一种方式调用所有的事务。同时使用该模式也易于添加新事务以扩展系统。</p><p>详解：<a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247487282&idx=2&sn=875f2c0a1ea711dca843c80c7bb6f34a&chksm=ebd6301edca1b908026c18897d07dbe426cb80bf7788f2d1f8b28e6d0ade726d68d99cfc7739&scene=21%23wechat_redirect">设计模式是什么鬼（命令模式）</a></p><h3 id="17-Iterator（迭代器）"><a href="#17-Iterator（迭代器）" class="headerlink" title="17. Iterator（迭代器）"></a><strong>17. Iterator（迭代器）</strong></h3><p><img src="https://pic3.zhimg.com/80/v2-cd8dac7ccac2eb57e3e56571269867e2_1440w.webp" alt="img"></p><p><strong>意图：</strong></p><p>提供一种方法顺序访问一个聚合对象中各个元素, 而又不需暴露该对象的内部表示。</p><p><strong>适用性：</strong></p><p>访问一个聚合对象的内容而无需暴露它的内部表示。</p><p>支持对聚合对象的多种遍历。</p><p>为遍历不同的聚合结构提供一个统一的接口(即, 支持多态迭代)。</p><p>详解：<a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247486776&idx=2&sn=0f4773ca76d325e51bb358325d312642&chksm=ebd63214dca1bb02dc73c0c58f334076226d13e00499c42cad5ff79422c29af44b28e827e77c&scene=21%23wechat_redirect">设计模式是什么鬼（迭代器）</a></p><h3 id="18-Mediator（中介者）"><a href="#18-Mediator（中介者）" class="headerlink" title="18. Mediator（中介者）"></a><strong>18. Mediator（中介者）</strong></h3><p><img src="https://pic1.zhimg.com/80/v2-4246996c655cd30e5a68cedfb587439c_1440w.webp" alt="img"></p><p><strong>意图：</strong></p><p>用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p><p><strong>适用性：</strong></p><p>一组对象以定义良好但是复杂的方式进行通信。产生的相互依赖关系结构混乱且难以理解。</p><p>一个对象引用其他很多对象并且直接与这些对象通信,导致难以复用该对象。</p><p>想定制一个分布在多个类中的行为，而又不想生成太多的子类。</p><p>详解：<a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247486616&idx=1&sn=e18c5f52fc01187b56a7f579f51878a0&chksm=ebd633b4dca1baa21a87516923460a0a598bf35114fcbd4c73e1f42ff5a7693adab540c401a9&scene=21%23wechat_redirect">设计模式是什么鬼（中介）</a></p><h3 id="19-Memento（备忘录）"><a href="#19-Memento（备忘录）" class="headerlink" title="19. Memento（备忘录）"></a><strong>19. Memento（备忘录）</strong></h3><p><img src="https://pic4.zhimg.com/80/v2-c03892a81c777cc4967136b65d24edbb_1440w.webp" alt="img"></p><p><strong>意图：</strong></p><p>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。</p><p><strong>适用性：</strong></p><p>必须保存一个对象在某一个时刻的(部分)状态, 这样以后需要时它才能恢复到先前的状态。</p><p>如果一个用接口来让其它对象直接得到这些状态，将会暴露对象的实现细节并破坏对象的封装性。</p><p>详解：<a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247486709&idx=2&sn=a3cd99b7c0e7f7953bd5bf44cbbccf87&chksm=ebd633d9dca1bacf94451863de6982593ac15a11f15611de1d3aba9ada3244b5fda6a1bc093e&scene=21%23wechat_redirect">设计模式是什么鬼（备忘录）</a></p><h3 id="20-Observer（观察者）"><a href="#20-Observer（观察者）" class="headerlink" title="20. Observer（观察者）"></a><strong>20. Observer（观察者）</strong></h3><p><img src="https://pic1.zhimg.com/80/v2-18916c491a66e507eb9fd0442da74c50_1440w.webp" alt="img"></p><p><strong>意图：</strong></p><p>定义对象间的一种一对多的依赖关系,当一个对象的状态发生改变时, 所有依赖于它的对象都得到通知并被自动更新。</p><p><strong>适用性：</strong></p><p>当一个抽象模型有两个方面, 其中一个方面依赖于另一方面。将这二者封装在独立的对象中以使它们可以各自独立地改变和复用。</p><p>当对一个对象的改变需要同时改变其它对象, 而不知道具体有多少对象有待改变。</p><p>当一个对象必须通知其它对象，而它又不能假定其它对象是谁。换言之, 你不希望这些对象是紧密耦合的。</p><p>详解：<a href="https://link.zhihu.com/?target=https://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247486897&idx=2&sn=927e4dd95695163fa250447ea88e12e8&scene=21%23wechat_redirect">设计模式是什么鬼（观察者）</a></p><h3 id="21-State（状态）"><a href="#21-State（状态）" class="headerlink" title="21. State（状态）"></a><strong>21. State（状态）</strong></h3><p><img src="https://pic1.zhimg.com/80/v2-bea873507272a679e4dba7ddea2d6edc_1440w.webp" alt="img"></p><p><strong>意图：</strong></p><p>允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它的类。</p><p><strong>适用性：</strong></p><p>一个对象的行为取决于它的状态, 并且它必须在运行时刻根据状态改变它的行为。</p><p>一个操作中含有庞大的多分支的条件语句，且这些分支依赖于该对象的状态。这个状态通常用一个或多个枚举常量表示。通常, 有多个操作包含这一相同的条件结构。State模式将每一个条件分支放入一个独立的类中。这使得你可以根据对象自身的情况将对象的状态作为一个对象，这一对象可以不依赖于其他对象而独立变化。</p><p>详解：<a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247485989&idx=1&sn=7d6967a19531190fb55085e1db559ec1&chksm=ebd63509dca1bc1f710b9df5607a999f68493460e7b610668276009bcd546213500968891f64&scene=21%23wechat_redirect">设计模式是什么鬼（状态）</a></p><h3 id="22-Strategy（策略）"><a href="#22-Strategy（策略）" class="headerlink" title="22. Strategy（策略）"></a><strong>22. Strategy（策略）</strong></h3><p><img src="https://pic3.zhimg.com/80/v2-40ff8a46922f467bba253a34ce20f89a_1440w.webp" alt="img"></p><p><strong>意图：</strong></p><p>定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。本模式使得算法可独立于使用它的客户而变化。</p><p><strong>适用性：</strong></p><p>许多相关的类仅仅是行为有异。“策略”提供了一种用多个行为中的一个行为来配置一个类的方法。</p><p>需要使用一个算法的不同变体。例如，你可能会定义一些反映不同的空间&#x2F;时间权衡的算法。当这些变体实现为一个算法的类层次时[H087] ,可以使用策略模式。</p><p>算法使用客户不应该知道的数据。可使用策略模式以避免暴露复杂的、与算法相关的数据结构。</p><p>一个类定义了多种行为, 并且这些行为在这个类的操作中以多个条件语句的形式出现。将相关的条件分支移入它们各自的Strategy类中以代替这些条件语句。</p><p>详解：<a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247485903&idx=1&sn=172401bccf663455fd90c55aa957db18&chksm=ebd636e3dca1bff544c671c9f8de3a6e8d40049ab7cea3d750d03ed00ef6e6c4fae376333de1&scene=21%23wechat_redirect">设计模式是什么鬼（策略）</a></p><h3 id="23-Visitor（访问者）"><a href="#23-Visitor（访问者）" class="headerlink" title="23. Visitor（访问者）"></a><strong>23. Visitor（访问者）</strong></h3><p><img src="https://pic2.zhimg.com/80/v2-99fb72f8ca261dc1cbd99f0c5203f7f5_1440w.webp" alt="img"></p><p><strong>意图：</strong></p><p>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。TemplateMethod 使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p><p><strong>适用性：</strong></p><p>一次性实现一个算法的不变的部分，并将可变的行为留给子类来实现。</p><p>各子类中公共的行为应被提取出来并集中到一个公共父类中以避免代码重复。这是Opdyke和Johnson所描述过的“重分解以一般化”的一个很好的例子[OJ93]。首先识别现有代码中的不同之处，并且将不同之处分离为新的操作。最后，用一个调用这些新的操作的模板方法来替换这些不同的代码。</p><p>控制子类扩展。模板方法只在特定点调用“hook ”操作（参见效果一节），这样就只允许在这些点进行扩展。</p><p>详解：<a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247487316&idx=2&sn=068c3ef1e11722a0220dea7fc2c28dd6&chksm=ebd63078dca1b96ed3048bc390c97700cbcfff3c0f18425a862de768ee3489b76b15598b56db&scene=21%23wechat_redirect">设计模式是什么鬼（访问者）</a></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">来源：blog.csdn.net/zsjlovesm521/article/details/94382666</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件体系结构</title>
      <link href="/2023/03/15/%E8%BD%AF%E4%BB%B6%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
      <url>/2023/03/15/%E8%BD%AF%E4%BB%B6%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="软件体系结构"><a href="#软件体系结构" class="headerlink" title="软件体系结构"></a>软件体系结构</h2><p>​    软件体系结构是有关软件系统如何组织的描述。体系结构影响了系统的性能、安全性和可用性。软件工程师可以在给定的体系结构类型中使用不同的体系结构风格和模式，而不同的模式描述了不同的系统类别、构建、连接件及约束。</p><p>​    软件体系结构脱胎于软件工程．但其形成同时借鉴了计算机体系结构和网络体系结构中很多宝贵的思想和方法。最近几年软件体系结构研究完全独立于软件工程的研究，成为计算机科学的一个最新的研究方向和独立学科分支。</p><p>软件体系结构是对系统的高层设计，是从一个较高的层次来考虑组成系统的构建、构建之间的连接关系，以及系统需满足的约束等。设计模式可以用于软件体系结构的设计，以实现体系结构级的设计复用。用于软件体系结构的设计模式通常称为架构模式（Architectural Pattern）或体系机构风格（Architectural Style）。</p><p>在《Pattern - Oriented Software Architecture》第一卷中，Buschmann等人根据问题的规模或抽象层次将软件设计模式分为三个层次：架构模式（Architectural Patterns）、设计模式（Design Patterns）和习惯用法（Idioms）。</p><p>（1）架构模式</p><p>架构模式是一种高层模式，用于描述系统级的结构组成、相互关系及相关约束。对架构模式的选择是最基本的设计决策，将决定系统的基本架构，并决定后续的设计及开发活动。</p><p>例如，模型 - 视图 - 控制器（Model - View - Controller，MVC）即是一种架构模式，该模式给出了一种交互式系统的架构设计，该模式的主要思想式实现业务逻辑、用户界面的分离。</p><p>（2）设计模式</p><p>设计模式是中层模式，是针对系统局部设计问题给出的解决方案。一般情况下，人们所讲的设计模式都是指中层模式。设计模式的选择对系统的基本架构没有影响，但在实现架构模式时，则可能采用多种设计模式。</p><p>例如，在实现MVC架构模式时，采用的主要设计模式有观察者模式、组合模式和策略模式等。</p><p>（3）习惯用法</p><p>架构模式和设计模式被认为是与具体编程语言无关的，而习惯用法则通常被认为是与具体编程语言相关的一种低层模式。习惯用法给出的解决方案通常与具体编程语言的某种语法机制相关。</p><p>本课程中，软件体系结构就是指架构模式，可以认为是：软件体系结构 &#x3D; 构件 + 连接件 + 约束 。</p><p><img src="https://pic4.zhimg.com/v2-8c98ec4b5d9d5283ff4d1ad92766de57_r.jpg" alt="preview"></p><p>构件</p><p>构件是具有某种功能的可复用的软件结构单元，表示系统中主要的计算元素 和 数据存储。</p><p>构件是一个抽象的概念，在程序中可以指程序函数、模块、对象、类等。</p><p><img src="https://pic2.zhimg.com/80/v2-b666558008dc4ff3329ca63e35a6e225_720w.jpg" alt="img"></p><p>连接件</p><p>连接是构件间建立和维护行为关联与信息传递的途径。连接包含下面两种要素：</p><p>其中，机制指的实际中的消息传递方式。</p><p>而协议则决定了 消息的语义理解。</p><p><img src="https://pic2.zhimg.com/80/v2-1bb5a6d90757c84a0b4009b3f955fd8d_720w.jpg" alt="img"></p><p>连接件表示构件之间的交互并实现构件之间的连接。</p><p><img src="https://pic4.zhimg.com/80/v2-17f01a5446ba515aca87b563de50f7cb_720w.jpg" alt="img"></p><h2 id="软件体系结构目标"><a href="#软件体系结构目标" class="headerlink" title="软件体系结构目标"></a>软件体系结构目标</h2><p>为了更好理解后面的软件体系结构涉及的原则和体系结构风格，请牢记这些目标，时不时的对照后面的内容回顾这些目标。</p><p>所有的设计原则等理论基本上都可以映射到下面一个或几个目标上。</p><p><img src="https://pic4.zhimg.com/80/v2-97de430bbe1b18afbc7dd681c511ba33_720w.jpg" alt="img"></p><h2 id="体系结构的发展"><a href="#体系结构的发展" class="headerlink" title="体系结构的发展"></a>体系结构的发展</h2><p>现在软件的复杂性及多变性，导致了软件粒度越来越粗，越来越开放。</p><p><img src="https://pic3.zhimg.com/80/v2-d6fe8623f78de2cb0ec0d98660466a52_720w.jpg" alt="img"></p><h2 id="下面是常见的软件体系结构"><a href="#下面是常见的软件体系结构" class="headerlink" title="下面是常见的软件体系结构"></a>下面是常见的软件体系结构</h2><p><img src="/images/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/3.png" alt="11.png"></p><h2 id="软件体系结构与软件设计模式的区别"><a href="#软件体系结构与软件设计模式的区别" class="headerlink" title="软件体系结构与软件设计模式的区别"></a>软件体系结构与软件设计模式的区别</h2><p><img src="/images/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/4.png" alt="Design-vs-Patterns-SAP.png"></p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式概述</title>
      <link href="/2023/03/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(1)/"/>
      <url>/2023/03/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(1)/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式概述（1）"><a href="#设计模式概述（1）" class="headerlink" title="设计模式概述（1）"></a>设计模式概述（1）</h1><h3 id="1-1-软件设计模式的产生背景"><a href="#1-1-软件设计模式的产生背景" class="headerlink" title="1.1 软件设计模式的产生背景"></a>1.1 软件设计模式的产生背景</h3><p>“设计模式”最初并不是出现在软件设计中，而是被用于建筑领域的设计中。</p><p>1977年美国著名建筑大师、加利福尼亚大学伯克利分校环境结构中心主任<code>克里斯托夫·亚历山大（Christopher Alexander）</code>在他的著作《建筑模式语言：城镇、建筑、构造》（A Pattern Language: Towns Building Construction）中描述了一些常见的建筑设计问题，并提出了 253 种关于对城镇、邻里、住宅、花园和房间等进行设计的基本模式。</p><p>1979 年他的另一部经典著作《建筑的永恒之道》（The Timeless Way of Building）进一步强化了设计模式的思想，为后来的建筑设计指明了方向。</p><p>1987 年，肯特·贝克（Kent Beck）和沃德·坎宁安（Ward Cunningham）首先将克里斯托夫·亚历山大的模式思想应用在 Smalltalk 中的图形用户接口的生成中，但没有引起软件界的关注。</p><p>1990年软件工程界开始研讨设计模式的话题，后来召开了多次关于设计模式的研讨会。直到1995 年，艾瑞克·伽马（ErichGamma）、理査德·海尔姆（Richard Helm）、拉尔夫·约翰森（Ralph Johnson）、约翰·威利斯迪斯（John Vlissides）等 4 位作者合作出版了《设计模式：可复用面向对象软件的基础》一书，在此书中收录了 23 个设计模式，这是设计模式领域里程碑的事件，导致了软件设计模式的突破。这 4 位作者在软件开发领域里也以他们的“四人组”（Gang of Four，GoF）著称。</p><h3 id="1-2-软件设计模式的概念"><a href="#1-2-软件设计模式的概念" class="headerlink" title="1.2 软件设计模式的概念"></a>1.2 软件设计模式的概念</h3><p>软件设计模式（Software Design Pattern），又称设计模式，“解决如下的在特定的环境中反复出现的设计问题，并且为其提供了解决方案”(Buschmann, et. al. 1996)，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。它描述了在软件设计过程中的一些不断重复发生的问题，以及该问题的解决方案。也就是说，它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用。</p><h3 id="1-3-学习设计模式的必要性"><a href="#1-3-学习设计模式的必要性" class="headerlink" title="1.3 学习设计模式的必要性"></a>1.3 学习设计模式的必要性</h3><p>设计模式的本质是面向对象设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解。</p><p>正确使用设计模式具有以下优点。</p><ol><li>可以提高程序员的思维能力、编程能力和设计能力。</li><li>使程序设计更加标准化、代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期。</li><li>使设计的代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强。</li><li>成为优秀的软件工程师。</li></ol><p>当然，软件设计模式只是一个引导。在具体的软件幵发中，必须根据设计的应用系统的特点和要求来恰当选择。对于简单的程序开发，苛能写一个简单的算法要比引入某种设计模式更加容易。但对大项目的开发或者框架设计，用设计模式来组织代码显然更好。</p><h3 id="1-4-软件设计模式的基本要素"><a href="#1-4-软件设计模式的基本要素" class="headerlink" title="1.4 软件设计模式的基本要素"></a>1.4 软件设计模式的基本要素</h3><p>软件设计模式使人们可以更加简单方便地复用成功的设计和体系结构，它通常包含以下几个基本要素：模式名称、别名、动机、问题、解决方案、效果、结构、模式角色、合作关系、实现方法、适用性、已知应用、例程、模式扩展和相关模式等，其中最关键的元素包括以下 4 个主要部分。</p><ol><li>模式名称</li></ol><p>每一个模式都有自己的名字，通常用一两个词来描述，可以根据模式的问题、特点、解决方案、功能和效果来命名。模式名称（PatternName）有助于我们理解和记忆该模式，也方便我们来讨论自己的设计。</p><ol start="2"><li>问题</li></ol><p>问题（Problem）描述了该模式的应用环境，即何时使用该模式。它解释了设计问题和问题存在的前因后果，以及必须满足的一系列先决条件。</p><ol start="3"><li>解决方案</li></ol><p>模式问题的解决方案（Solution）包括设计的组成成分、它们之间的相互关系及各自的职责和协作方式。因为模式就像一个模板，可应用于多种不同场合，所以解决方案并不描述一个特定而具体的设计或实现，而是提供设计问题的抽象描述和怎样用一个具有一般意义的元素组合（类或对象的 组合）来解决这个问题。</p><ol start="4"><li>效果</li></ol><p>描述了模式的应用效果以及使用该模式应该权衡的问题，即模式的优缺点。主要是对时间和空间的衡量，以及该模式对系统的灵活性、扩充性、可移植性的影响，也考虑其实现问题。显式地列出这些效果（Consequence）对理解和评价这些模式有很大的帮助。</p><h3 id="1-5-根据目的分类"><a href="#1-5-根据目的分类" class="headerlink" title="1.5 根据目的分类"></a>1.5 根据目的分类</h3><ul><li><p><strong>创建型模式</strong></p><p>用于描述“怎样创建对象”，它的主要特点是“将对象的创建与使用分离”。GoF（四人组）书中提供了单例、原型、工厂方法、抽象工厂、建造者等 5 种创建型模式。</p></li><li><p><strong>结构型模式</strong></p><p>用于描述如何将类或对象按某种布局组成更大的结构，GoF（四人组）书中提供了代理、适配器、桥接、装饰、外观、享元、组合等 7 种结构型模式。</p></li><li><p><strong>行为型模式</strong></p><p>用于描述类或对象之间怎样相互协作共同完成单个对象无法单独完成的任务，以及怎样分配职责。GoF（四人组）书中提供了模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器等 11 种行为型模式。</p></li></ul><p><img src="https://rajneekanth.files.wordpress.com/2014/04/alldesignpatterns.png" alt="What are Design Patterns? – Rajani Kanth"></p><h3 id="1-6-根据作用范围来分"><a href="#1-6-根据作用范围来分" class="headerlink" title="1.6 根据作用范围来分"></a>1.6 根据作用范围来分</h3><p>根据模式是主要用于类上还是主要用于对象上来分，这种方式可分为类模式和对象模式两种。</p><ol><li>类模式：用于处理类与子类之间的关系，这些关系通过继承来建立，是静态的，在编译时刻便确定下来了。GoF中的工厂方法、（类）适配器、模板方法、解释器属于该模式。</li><li>对象模式：用于处理对象之间的关系，这些关系可以通过组合或聚合来实现，在运行时刻是可以变化的，更具动态性。GoF 中除了以上 4 种，其他的都是对象模式。</li></ol><p><img src="/images/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2.png" alt="img"></p><h3 id="1-7-GoF的23种设计模式的功能简介"><a href="#1-7-GoF的23种设计模式的功能简介" class="headerlink" title="1.7. GoF的23种设计模式的功能简介"></a>1.7. GoF的23种设计模式的功能简介</h3><p>前面说明了 GoF 的 23 种设计模式的分类，现在对各个模式的功能进行介绍。</p><ol><li>单例（Singleton）模式：某个类只能生成一个实例，该类提供了一个全局访问点供外部获取该实例，其拓展是有限多例模式。</li><li>原型（Prototype）模式：将一个对象作为原型，通过对其进行复制而克隆出多个和原型类似的新实例。</li><li>工厂方法（Factory Method）模式：定义一个用于创建产品的接口，由子类决定生产什么产品。</li><li>抽象工厂（AbstractFactory）模式：提供一个创建产品族的接口，其每个子类可以生产一系列相关的产品。</li><li>建造者（Builder）模式：将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象。</li><li>代理（Proxy）模式：为某对象提供一种代理以控制对该对象的访问。即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性。</li><li>适配器（Adapter）模式：将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。</li><li>桥接（Bridge）模式：将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。</li><li>装饰（Decorator）模式：动态的给对象增加一些职责，即增加其额外的功能。</li><li>外观（Facade）模式：为多个复杂的子系统提供一个一致的接口，使这些子系统更加容易被访问。</li><li>享元（Flyweight）模式：运用共享技术来有效地支持大量细粒度对象的复用。</li><li>组合（Composite）模式：将对象组合成树状层次结构，使用户对单个对象和组合对象具有一致的访问性。</li><li>模板方法（TemplateMethod）模式：定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。</li><li>策略（Strategy）模式：定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的改变不会影响使用算法的客户。</li><li>命令（Command）模式：将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开。</li><li>职责链（Chain of Responsibility）模式：把请求从链中的一个对象传到下一个对象，直到请求被响应为止。通过这种方式去除对象之间的耦合。</li><li>状态（State）模式：允许一个对象在其内部状态发生改变时改变其行为能力。</li><li>观察者（Observer）模式：多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为。</li><li>中介者（Mediator）模式：定义一个中介对象来简化原有对象之间的交互关系，降低系统中对象间的耦合度，使原有对象之间不必相互了解。</li><li>迭代器（Iterator）模式：提供一种方法来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。</li><li>访问者（Visitor）模式：在不改变集合元素的前提下，为一个集合中的每个元素提供多种访问方式，即每个元素有多个访问者对象访问。</li><li>备忘录（Memento）模式：在不破坏封装性的前提下，获取并保存一个对象的内部状态，以便以后恢复它。</li><li>解释器（Interpreter）模式：提供如何定义语言的文法，以及对语言句子的解释方法，即解释器。</li></ol><p>必须指出，这 23 种设计模式不是孤立存在的，很多模式之间存在一定的关联关系，在大的系统开发中常常同时使用多种设计模式。</p><p><img src="https://s3.ananas.chaoxing.com/sv-w6/doc/81/1a/9b/044fa8cabde2944e50aa2661f8755299/thumb/1.png" alt="img"></p><p><img src="https://s3.ananas.chaoxing.com/sv-w6/doc/81/1a/9b/044fa8cabde2944e50aa2661f8755299/thumb/2.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机和主机双向复制</title>
      <link href="/2023/03/14/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%92%8C%E4%B8%BB%E6%9C%BA%E5%8F%8C%E5%90%91%E5%A4%8D%E5%88%B6/"/>
      <url>/2023/03/14/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%92%8C%E4%B8%BB%E6%9C%BA%E5%8F%8C%E5%90%91%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="虚拟机和主机双向复制"><a href="#虚拟机和主机双向复制" class="headerlink" title="虚拟机和主机双向复制"></a>虚拟机和主机双向复制</h1><span id="more"></span><p><img src="/images/%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%BB%E6%9C%BA/1.png" alt="1678724223117"></p><p>vmware tools黑了</p><p><a href="http://www.360doc.com/content/22/1205/19/81029453_1059073619.shtml">http://www.360doc.com/content/22/1205/19/81029453_1059073619.shtml</a></p><p>试试这个吧</p><p>手工安装Vmware tools方法<br> 这种方法是通过Ubuntu的安装命令直接从网上进行安装，打开终端窗口直接执行下列命令即可，安装之前要保证虚拟机可以连接外网，要能连上软件更新服务器，该服务器有可能在国外（根据你自己的设置）。命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo apt-get autoremove open-vm-tools</span><br><span class="line">sudo apt-get install open-vm-tools</span><br><span class="line">sudo apt-get install open-vm-tools-desktop</span><br></pre></td></tr></table></figure><p> 安装完之后最好重启一下虚拟机。安装完Vmware tools并正确配置后就可以实现主机和虚拟机双向内容复制、粘贴，包括文件的拷贝。</p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vmware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark入门：RDD编程</title>
      <link href="/2023/03/13/sparkRDD%E7%BC%96%E7%A8%8B/"/>
      <url>/2023/03/13/sparkRDD%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Spark入门：RDD编程"><a href="#Spark入门：RDD编程" class="headerlink" title="Spark入门：RDD编程"></a>Spark入门：RDD编程</h1><span id="more"></span><h2 id="RDD创建"><a href="#RDD创建" class="headerlink" title="RDD创建"></a>RDD创建</h2><p>RDD可以通过两种方式创建：</p><ul><li>第一种：读取一个外部数据集。比如，从本地文件加载数据集，或者从HDFS文件系统、HBase、Cassandra、Amazon S3等外部数据源中加载数据集。Spark可以支持文本文件、SequenceFile文件（Hadoop提供的 SequenceFile是一个由二进制序列化过的key&#x2F;value的字节流组成的文本存储文件）和其他符合Hadoop InputFormat格式的文件。</li><li>第二种：调用SparkContext的parallelize方法，在Driver中一个已经存在的集合（数组）上创建</li></ul><p>在即将进行相关的实践操作之前，我们首先要登录Linux系统（本教程统一采用hadoop用户登录），然后，打开命令行“终端”，请按照下面的命令启动Hadoop中的HDFS组件：</p><h3 id="创建RDD之前的准备工作"><a href="#创建RDD之前的准备工作" class="headerlink" title="创建RDD之前的准备工作"></a>创建RDD之前的准备工作</h3><p>在即将进行相关的实践操作之前，我们首先要登录Linux系统（本教程统一采用hadoop用户登录），然后，打开命令行“终端”，请按照下面的命令启动Hadoop中的HDFS组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd  /usr/local/hadoop</span><br><span class="line">./sbin/start-dfs.sh</span><br></pre></td></tr></table></figure><p>然后，我们按照下面命令启动spark-shell：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/spark</span><br><span class="line">./bin/pyspark</span><br></pre></td></tr></table></figure><p><img src="/images/spark/1.png" alt="1678715171189"></p><p>然后，新建第二个“终端”，方法是，在前面已经建设的第一个终端窗口的左上方，点击“终端”菜单，在弹出的子菜单中选择“新建终端”，就可以打开第二个终端窗口，现在，我们切换到第二个终端窗口，在第二个终端窗口中，执行以下命令，进入之前已经创建好的“&#x2F;usr&#x2F;local&#x2F;spark&#x2F;mycode&#x2F;”目录，在这个目录下新建rdd子目录，用来存放本章的代码和相关文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd usr/local/spark/mycode/</span><br><span class="line">mkdir rdd</span><br></pre></td></tr></table></figure><p>然后，使用vim编辑器，在rdd目录下新建一个word.txt文件，你可以在文件里面随便输入几行英文语句用来测试。</p><p>经过上面的准备工作以后，我们就可以开始创建RDD了。</p><h3 id="从文件系统中加载数据创建RDD"><a href="#从文件系统中加载数据创建RDD" class="headerlink" title="从文件系统中加载数据创建RDD"></a>从文件系统中加载数据创建RDD</h3><p>Spark采用textFile()方法来从文件系统中加载数据创建RDD，该方法把文件的URI作为参数，这个URI可以是本地文件系统的地址，或者是分布式文件系统HDFS的地址，或者是Amazon S3的地址等等。<br>下面请切换回spark-shell窗口，看一下如何从本地文件系统中加载数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;lines = sc.textFile(&quot;file:///usr/local/spark/mycode/rdd/word.txt&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/spark/2.png" alt="1678715444810"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;lines.foreach(print)</span><br></pre></td></tr></table></figure><p><img src="/images/spark/3.png" alt="1678715770877"></p><p><img src="/images/spark/14.png" alt="1678720839060"></p><h3 id="加载HDFS中的文件"><a href="#加载HDFS中的文件" class="headerlink" title="加载HDFS中的文件"></a>加载HDFS中的文件</h3><p>为了能够读取HDFS中的文件，请首先启动Hadoop中的HDFS组件。注意，之前我们在“Spark安装”这章内容已经介绍了如何安装Hadoop和Spark，所以，这里我们可以使用以下命令直接启动Hadoop中的HDFS组件（由于用不到MapReduce组件，所以，不需要启动MapReduce或者YARN）。请到第二个终端窗口，使用Linux Shell命令提示符状态，然后输入下面命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/hadoop</span><br><span class="line">./sbin/start-dfs.sh</span><br></pre></td></tr></table></figure><p><img src="/images/spark/4.png" alt="1678715996913"></p><p>启动结束后，HDFS开始进入可用状态。如果你在HDFS文件系统中，还没有为当前Linux登录用户创建目录(本教程统一使用用户名hadoop登录Linux系统)，请使用下面命令创建：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/hdfs dfs -mkdir -p /user/hadoop</span><br></pre></td></tr></table></figure><p>也就是说，HDFS文件系统为Linux登录用户开辟的默认目录是“&#x2F;user&#x2F;用户名”（注意：是user，不是usr），本教程统一使用用户名hadoop登录Linux系统，所以，上面创建了“&#x2F;user&#x2F;hadoop”目录，再次强调，这个目录是在HDFS文件系统中，不在本地文件系统中。创建好以后，下面我们使用命令查看一下HDFS文件系统中的目录和文件：</p><p><img src="/images/spark/5.png" alt="1678716107634"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/hdfs dfs -ls .</span><br></pre></td></tr></table></figure><p>** 但这个命令我搞不出来，显示的是这个</p><p><img src="/images/spark/6.png" alt="1678717090642"></p><p>–</p><p>上面命令中，最后一个点号“.”，表示要查看Linux当前登录用户hadoop在HDFS文件系统中与hadoop对应的目录下的文件，也就是查看HDFS文件系统中“&#x2F;user&#x2F;hadoop&#x2F;”目录下的文件，所以，下面两条命令是等价的：</p><p>–</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./bin/hdfs dfs -ls .</span><br><span class="line">./bin/hdfs dfs -ls /user/hadoop</span><br></pre></td></tr></table></figure><p> 你自己可以试一试，只有第二个可以用</p><p><img src="/images/spark/7.png" alt="1678717187423"></p><p>如果要查看HDFS文件系统根目录下的内容，需要使用下面命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/hdfs dfs -ls /</span><br></pre></td></tr></table></figure><p>然后输出的东西见上面那个图，有一个items</p><p>下面，我们把本地文件系统中的“&#x2F;usr&#x2F;local&#x2F;spark&#x2F;mycode&#x2F;rdd&#x2F;word.txt”上传到分布式文件系统HDFS中（放到hadoop用户目录下）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/hdfs dfs -put /usr/local/spark/mycode/rdd/word.txt /user/hadoop</span><br></pre></td></tr></table></figure><p><img src="/images/spark/8.png" alt="1678717295097"></p><p>然后，用命令查看一下HDFS的hadoop用户目录下是否多了word.txt文件，可以使用下面命令列出hadoop目录下的内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/hdfs dfs -ls /</span><br></pre></td></tr></table></figure><p><img src="/images/spark/9.png" alt="1678717376742"></p><p>可以看到，确实多了一个word.txt文件，我们使用cat命令查看一个HDFS中的word.txt文件的内容，命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/hdfs dfs -cat ./word.txt</span><br></pre></td></tr></table></figure><p><img src="/images/spark/10.png" alt="1678717420477"></p><p>上面命令执行后，就会看到HDFS中word.txt的内容了。</p><p>现在，让我们切换回到spark-shell窗口，编写语句从HDFS中加载word.txt文件，并显示第一行文本内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;lines= sc.textFile(&quot;hdfs://localhost:9000/user/hadoop/word.txt&quot;)</span><br><span class="line">&gt;&gt;&gt;lines=sc.foreach(print)</span><br></pre></td></tr></table></figure><p><img src="/images/spark/11.png" alt="1678717605626"></p><p><img src="/images/spark/12.png" alt="1678717639868"></p><p>注意，上面三条命令是完全等价的命令，只不过使用了不同的目录形式，你可以使用其中任意一条命令完成数据加载操作。</p><p>在使用Spark读取文件时，需要说明以下几点：<br>（1）如果使用了本地文件系统的路径，那么，必须要保证在所有的worker节点上，也都能够采用相同的路径访问到该文件，比如，可以把该文件拷贝到每个worker节点上，或者也可以使用网络挂载共享文件系统。<br>（2）textFile()方法的输入参数，可以是文件名，也可以是目录，也可以是压缩文件等。比如，textFile(“&#x2F;my&#x2F;directory”), textFile(“&#x2F;my&#x2F;directory&#x2F;<em>.txt”), and textFile(“&#x2F;my&#x2F;directory&#x2F;</em>.gz”).<br>（3）textFile()方法也可以接受第2个输入参数（可选），用来指定分区的数目。默认情况下，Spark会为HDFS的每个block创建一个分区（HDFS中每个block默认是128MB）。你也可以提供一个比block数量更大的值作为分区数目，但是，你不能提供一个小于block数量的值作为分区数目。</p><h3 id="通过并行集合（数组）创建RDD"><a href="#通过并行集合（数组）创建RDD" class="headerlink" title="通过并行集合（数组）创建RDD"></a>通过并行集合（数组）创建RDD</h3><p>可以调用SparkContext的parallelize方法，在Driver中一个已经存在的集合（数组）上创建。<br>下面请在spark-shell中操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;array = [1,2,3,4,5]</span><br><span class="line">&gt;&gt;&gt;rdd = sc.parallelize(array)</span><br><span class="line">&gt;&gt;&gt;rdd.foreach(print)</span><br></pre></td></tr></table></figure><p><img src="/images/spark/13.png" alt="1678720471787"></p><p><img src="/images/spark/15.png" alt="1678720865514"></p><h2 id="RDD操作"><a href="#RDD操作" class="headerlink" title="RDD操作"></a>RDD操作</h2><p>RDD被创建好以后，在后续使用过程中一般会发生两种操作：<br>*  转换（Transformation）： 基于现有的数据集创建一个新的数据集。<br>*  行动（Action）：在数据集上进行运算，返回计算值。</p><h3 id="转换操作"><a href="#转换操作" class="headerlink" title="转换操作"></a>转换操作</h3><p>对于RDD而言，每一次转换操作都会产生不同的RDD，供给下一个“转换”使用。转换得到的RDD是惰性求值的，也就是说，整个转换过程只是记录了转换的轨迹，并不会发生真正的计算，只有遇到行动操作时，才会发生真正的计算，开始从血缘关系源头开始，进行物理的转换操作。<br>下面列出一些常见的转换操作（Transformation API）：<br>* filter(func)：筛选出满足函数func的元素，并返回一个新的数据集<br>* map(func)：将每个元素传递到函数func中，并将结果返回为一个新的数据集<br>* flatMap(func)：与map()相似，但每个输入元素都可以映射到0或多个输出结果<br>* groupByKey()：应用于(K,V)键值对的数据集时，返回一个新的(K, Iterable)形式的数据集<br>* reduceByKey(func)：应用于(K,V)键值对的数据集时，返回一个新的(K, V)形式的数据集，其中的每个值是将每个key传递到函数func中进行聚合</p><p><img src="/images/spark/16.png" alt="1678720959522"></p><p><img src="/images/spark/17.png" alt="1678720974857"></p><h4 id="1-filter-func"><a href="#1-filter-func" class="headerlink" title="1.filter(func)"></a>1.filter(func)</h4><p><img src="/images/spark/18.png" alt="1678720994986"></p><p>好吧，这个书上说要把word.txt写成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Hadoop is good</span><br><span class="line"></span><br><span class="line">Spark is fast</span><br><span class="line"></span><br><span class="line">Spark is better</span><br></pre></td></tr></table></figure><p>那我们就</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/spark/mycode/rdd</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gedit word.txt</span><br></pre></td></tr></table></figure><p>然后再</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;lines=sc.textFile(&quot;file:///usr/local/spark/mycode/rdd/word.txt&quot;)</span><br><span class="line">&gt;&gt;&gt;linesWithSpark = lines.filter(lambda line: &quot;Spark&quot; in line)</span><br><span class="line">&gt;&gt;&gt;linesWithSpark.foreach(print)</span><br></pre></td></tr></table></figure><p><img src="/images/spark/20.png" alt="1678722624927"></p><p>上面的代码中，lines就是一个RDD。lines.filter()会遍历lines中的每行文本，并对每行文本执行括号中的匿名函数，也就是执行Lamda表达式：line &#x3D;&gt; line.contains(“Spark”)，在执行Lamda表达式时，会把当前遍历到的这行文本内容赋值给参数line，然后，执行处理逻辑line.contains(“Spark”)，也就是只有当改行文本包含“Spark”才满足条件，才会被放入到结果集中。最后，等到lines集合遍历结束后，就会得到一个结果集，这个结果集中包含了所有包含“Spark”的行。最后，对这个结果集调用count()，这是一个行动操作，会计算出结果集中的元素个数。</p><h4 id="2-map-func"><a href="#2-map-func" class="headerlink" title="2.map(func)"></a>2.map(func)</h4><p><img src="/images/spark/21.png" alt="1678724709366"></p><p>map(func)：将每个元素传递到函数func中，并将结果返回为一个新的数据集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; data =[1,2,3,4,5]</span><br><span class="line">&gt;&gt;&gt; rdd1 = sc.parallelize(data)</span><br><span class="line">&gt;&gt;&gt; rdd2 = rdd1.map(lambda x:x+10)</span><br><span class="line">&gt;&gt;&gt; rdd2.foreach(print)</span><br></pre></td></tr></table></figure><p><img src="/images/spark/22.png" alt="1678724836563"></p><p>上述语句执行过程如图 所示。第 1行语句创建了一个包含 5 个整型元素的列表 data。第2行语句执行 sc.parallelize(data)，从列表 data 中生成一个 RDD，即 rdd1,rdd1 中包含了5 个整型的元素即1、2、3、4、5。第 3 行语句执行 rdd1.map0操作,map0的输入参数“lambda x:x+10”是一个Lambda表达式。rdd1.map(lambda x:x+10)的含义是，依次取出 rdd1 这个RDD 中的每个元素，对于当前取到的元素，把它赋值给 Lambda 表达式中的变量x，然后，执行 Lambda 表达式的函数体部分“x+10”也就是把变量x的值和 10 相加后，作为函数的返回值，并作为一个元素放入到新的 RDD(即rdd2中。最终，新牛成的RDD (即 rdd2) 中包含了 5 个整型元素，即 11、12、13、14、15。</p><p>另外一个实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;lines=sc.textFile(&quot;file:///usr/local/spark/mycode/rdd/word.txt&quot;)</span><br><span class="line">&gt;&gt;&gt; words = lines.map(lambda line:line.split(&quot; &quot;))</span><br><span class="line">&gt;&gt;&gt; words.foreach(print)</span><br></pre></td></tr></table></figure><p><img src="/images/spark/24.png" alt="1678725201907"></p><p>上述语句执行过程如图所示。在第 1 行语句中，执行 sc.textFile0方法把 word.txt 文件中的数据加载到内存生成一个 RDD，即 lines，这个RDD 中的每个元素都是字符串类型，即每个 RDD 元素都是一行文本，比如，lines 中的第 1 个元素是”Hadoop is good”，第2 个元素是”Spark is fast”，第3个元素是”Spark is better”。在第 2 行语句中，执行 lies.map0操作，map0的输入参数 lambdaline:line.split(“)是一个 Lambda 表达式。linesmap(lambda line:line.split(“”)的含义是，依次取出 lines这个 RDD 中的每个元素，对于当前取到的元素，把它赋值给 Lambda 表达式中的变量 line，然后，执行 Lambda 表达式的函数体部分 line.split(“”)。因为 line 是一行文本，如”Hadoop is good”，一行文本中包含了很多个单词，单词之间以空格进行分隔，所以，line.split(“”的功能是，以空格作为分隔符把 line 拆分成一个个单词,拆分后得到的单词都封装在一个列表对象中,成为新的 RDD( 即 words)的一个元素，比如，”Hadoop is good”被拆分后，得到”Hadoop”、”is”和”good”3 个单词，会被封装到一个列表对象中，即[“Hadoop”.”is”,”good”]，成为 words 这个 RDD 中的一个元素。</p><p><img src="/images/spark/23.png" alt="1678725073888"></p><h4 id="3-flatMap-func"><a href="#3-flatMap-func" class="headerlink" title="3.flatMap(func)"></a>3.flatMap(func)</h4><p>flatMap(func)与 map0相似，但每个输入元素都可以映射到 0 或多个输出结果。例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;lines=sc.textFile(&quot;file:///usr/local/spark/mycode/rdd/word.txt&quot;)</span><br><span class="line">&gt;&gt;&gt;words =lines.flatMap(lambda line:line.split(&quot; &quot;))</span><br><span class="line">&gt;&gt;&gt; words.foreach(print)</span><br></pre></td></tr></table></figure><p><img src="/images/spark/26.png" alt="1678725603008"></p><p>上述语句执行过程如图所示。在第 1行语句中，执行 sc.textFile0方法把 wordtxt 文件中的数据加载到内存生成一个RDD，即 lines，这个 RDD 中的每个元素都是字符串类型，即每个RDD 元素都是一行文本。在第2行语句中，执行 linesflatMap0操作，flatMap0的输入参数 line:linesplit(“”)是个Lambda 表达式。lines.flatMap(lambda line:line.split(“”))的结果，等价于如下两步操作的结果。</p><p><img src="/images/spark/25.png" alt="1678725419517"></p><p>第1步: map0。执行 lines.map(lambda line: linesplit(“”))操作，从 lines 转换得到一个新的 RDD(即wordArray),wordArray 中的每个元素都是一个列表,比如,第1个元素是[“Hadoop”,”is”，”good”]7.第2个元素是”Spark”，”is”,”fast”]，第3 个元素是[“Spark”,”is””better”]。</p><p>第 2步:拍扁 ( flat)。flatMap0操作中的“flat”是一个很形象的动作-“拍扁”，也就是把vordArray 中的每个 RDD 元素都“拍扁”成多个元素。所有这些被拍扁以后得到的元素，构成一个新的 RDD，即 words。比如，wordArray 中的第1个元素是[“Hadoop”,”is”,”good]，被拍扁以后得到3个新的字符串类型的元素,即”Hadoop”、”is”和”good”; wordArray 中的第 2 个元素是[“Spark”,”is”fast”],被拍扁以后得到 3 个新的元素,即”Spark”、”is”和”fast”; wordArray 中的第 3 个元素是[“Spark””is””beter”，被拍扁以后得到 3 个新的元素，即”Spark”、”is”和”beter”。最终，这些被拍扁以后得到的 9 个字符串类型的元素构成一个新的 RDD (即 words )。也就是说，words 里面包含了 9 个字串类型的元素，分别是”Hadoop”、”is”、”good”、”Spark”、”is”、”fast”、”Spark”、”is”和”。</p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-8-2023</title>
      <link href="/2023/03/08/3-8-2023/"/>
      <url>/2023/03/08/3-8-2023/</url>
      
        <content type="html"><![CDATA[<h3 id="三月初自我反省"><a href="#三月初自我反省" class="headerlink" title="三月初自我反省"></a>三月初自我反省</h3><span id="more"></span><p>1.退实验室✔</p><p>2.数学第一章✔</p><p>3.单词200 per day✔</p><div ><img src="\images\dayliy_image\3.8.1.jpg" alt="drawing" width="200" style='float:left'/><img src="\images\dayliy_image\3.8.2.jpg"  style='float:left' alt="drawing" width="200"/></div><p>4.后端增删查改✔</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">department_list</span>(<span class="params">request</span>):</span><br><span class="line">    member_list=Department.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span>  render(request,<span class="string">&#x27;dep.html&#x27;</span>,&#123;<span class="string">&#x27;member&#x27;</span>:member_list&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_dep</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method==<span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">&#x27;adddep.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> request.method==<span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        title=request.POST.get(<span class="string">&#x27;aatitle&#x27;</span>)</span><br><span class="line">        Department.objects.create(tittle=title)</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/dep/list&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_dep</span>(<span class="params">request</span>):</span><br><span class="line">    memid=request.GET.get(<span class="string">&#x27;memid&#x27;</span>)</span><br><span class="line">    Department.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=memid).delete()</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/dep/list&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit_dep</span>(<span class="params">request,memid</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method==<span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        nnmame=Department.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=memid).first()</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">&#x27;editdpt.html&#x27;</span>,&#123;<span class="string">&#x27;nnmame&#x27;</span>:nnmame.tittle&#125;)</span><br><span class="line">    aatitle=request.POST.get(<span class="string">&#x27;aatitle&#x27;</span>)</span><br><span class="line">    Department.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=memid).update(tittle=aatitle)</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/dep/list&quot;</span>)</span><br></pre></td></tr></table></figure><p>5.数据结构 图(floyd，dijkstra)✔</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">101</span>][<span class="number">3</span>];</span><br><span class="line"><span class="type">double</span> f[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"><span class="type">int</span> n,i,j,k,x,y,m,s,e;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//freopen(&quot;short.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line"><span class="comment">//freopen(&quot;short.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">cin&gt;&gt;a[i][<span class="number">1</span>]&gt;&gt;a[i][<span class="number">2</span>];</span><br><span class="line">cin&gt;&gt;m;</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">0x7f</span>,<span class="built_in">sizeof</span>(f)); <span class="comment">//初始化为最大值</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="comment">//int temp1=;</span></span><br><span class="line"><span class="comment">//int temp2=;</span></span><br><span class="line">f[y][x]=f[x][y]=<span class="built_in">sqrt</span>(<span class="built_in">pow</span>(<span class="built_in">double</span>(a[x][<span class="number">1</span>]-a[y][<span class="number">1</span>]),<span class="number">2</span>)+<span class="built_in">pow</span>(<span class="built_in">double</span>(a[x][<span class="number">2</span>]-a[y][<span class="number">2</span>]),<span class="number">2</span>));</span><br><span class="line">&#125; </span><br><span class="line">cin&gt;&gt;s&gt;&gt;e;</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;=n;k++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span>(f[i][k]+f[k][j]&lt;f[i][j])</span><br><span class="line">f[i][j]=f[i][k]+f[k][j];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>,f[s][e]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 1e4+10</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">1e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n,m,s;</span><br><span class="line"><span class="type">int</span> mp[N][M];</span><br><span class="line"><span class="type">int</span> dis[N],vis[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">initmp</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(mp,INF,<span class="built_in">sizeof</span>(mp));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijkstra</span><span class="params">(<span class="type">int</span> s)</span></span>&#123; <span class="comment">//求s点到其它点的最短路径 </span></span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));<span class="comment">//0表示蓝点(未确定最短路径的点)，1表示白点（确定路径的点） </span></span><br><span class="line"><span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dis));<span class="comment">//默认情况下设置为无穷大</span></span><br><span class="line">dis[s]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="type">int</span> mini=<span class="number">0</span>,min_=INF;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[j]&amp;&amp;min_&gt;dis[j])&#123;<span class="comment">//从蓝点中找出最小的点 .vis[j](蓝点)为0,那么!vis[j]就为1了.dis[j]是权值 </span></span><br><span class="line">mini=j;<span class="comment">//记录第几个点</span></span><br><span class="line">min_=dis[j]; <span class="comment">//记录最短的路的距离 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果没有蓝点就提前结束 </span></span><br><span class="line"><span class="keyword">if</span>(mini==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">vis[mini]=<span class="number">1</span>;<span class="comment">//变成白点</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[i]&gt;dis[mini]+mp[mini][i])</span><br><span class="line">dis[i]=dis[mini]+mp[mini][i];</span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(mp,INF,<span class="built_in">sizeof</span>(mp));</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m)!=EOF&amp;&amp;n)&#123;</span><br><span class="line"><span class="built_in">initmp</span>();<span class="comment">//每次清空mp</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line"><span class="type">int</span> u,v,w;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line"><span class="keyword">if</span>(mp[u][v]&gt;w)</span><br><span class="line">mp[u][v]=mp[v][u]=w;</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">dijkstra</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,dis[n]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> casual_talk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DataError at /index/add_member 1366, &quot;Incorrect string value :\\xE4\\xBC\\x98\\xE</title>
      <link href="/2023/03/05/ERROR%201366%20(HY000)Incorrect%20string%20value%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2023/03/05/ERROR%201366%20(HY000)Incorrect%20string%20value%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p><a href="mailto:&#56;&#50;&#x35;&#x35;&#x37;&#55;&#57;&#52;&#48;&#64;&#x71;&#x71;&#x2e;&#99;&#111;&#x6d;">&#56;&#50;&#x35;&#x35;&#x37;&#55;&#57;&#52;&#48;&#64;&#x71;&#x71;&#x2e;&#99;&#111;&#x6d;</a> DataError at &#x2F;index&#x2F;add_member 1366, “Incorrect string value: ‘\xE4\xBC\x98\xE</p><h1 id="ERROR-1366-HY000-Incorrect-string-value解决方案"><a href="#ERROR-1366-HY000-Incorrect-string-value解决方案" class="headerlink" title="ERROR 1366 (HY000):Incorrect string value解决方案"></a>ERROR 1366 (HY000):Incorrect string value解决方案</h1><span id="more"></span><p><a href="https://zhuanlan.zhihu.com/p/53941345">https://zhuanlan.zhihu.com/p/53941345</a></p><p><img src="/images/mysql/1.png" alt="1677985811006"></p><p><img src="/images/mysql/2.png" alt="1677985852047"></p><p>after</p><p><img src="/images/mysql/3.png" alt="1677985952688"></p><p>before</p><p><img src="/images/mysql/4.png" alt="1677985979541"></p><p>然后把数据库删除，重新创建数据库，再导入数据库文件，就又是一条好汉</p><p><img src="/images/mysql/5.png" alt="1677988728653"></p><p><img src="/images/mysql/6.png" alt="1677988745809"></p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>远离不规范书籍，不然会变得不幸</title>
      <link href="/2023/03/04/%E8%BF%9C%E7%A6%BB%E4%B8%8D%E8%A7%84%E8%8C%83%E4%B9%A6%E7%B1%8D%EF%BC%8C%E4%B8%8D%E7%84%B6%E4%BC%9A%E5%8F%98%E5%BE%97%E4%B8%8D%E5%B9%B8/"/>
      <url>/2023/03/04/%E8%BF%9C%E7%A6%BB%E4%B8%8D%E8%A7%84%E8%8C%83%E4%B9%A6%E7%B1%8D%EF%BC%8C%E4%B8%8D%E7%84%B6%E4%BC%9A%E5%8F%98%E5%BE%97%E4%B8%8D%E5%B9%B8/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/nolucky.png"></p><h1>远离不规范书籍,不然会变得不幸</h1><span id="more"></span><img src="\images\sbbook.jpg" alt="drawing" width="200"/>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> casual_talk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2月开学总结</title>
      <link href="/2023/03/01/2%E6%9C%88%E5%BC%80%E5%AD%A6%E6%80%BB%E7%BB%93/"/>
      <url>/2023/03/01/2%E6%9C%88%E5%BC%80%E5%AD%A6%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="2月开学总结"><a href="#2月开学总结" class="headerlink" title="2月开学总结"></a>2月开学总结</h3><span id="more"></span><ol><li>每日200单词，真的坚持不下来（我妈说过一句老话：新的马桶只有三天是香的）</li><li>周五-周日每日50页django目前停滞（p117），在后渲前的简单<code>&#123;&#123;&#125;&#125;</code>不清楚具体语法，有时间看b具体简单讲解，我实在无法理解，这种书怎么出版的，前20页每页都有错误，这个人抄官方文档都能抄错？？？？！！！</li><li>问了师姐她复习进度，四月之前（include四月）刷完1800,以及师姐说英二难度比江苏高考英语难度小</li><li>临时接了挑战杯的复赛答辩，要准备讲演稿子</li><li>目前数学进度第一章（第一遍做不到不看视频（看视频时真的费时间），但已经都忘了（为什么上学期我要拒绝高数老师让我做她的助教（扇自己耳光）））</li><li>英语6级太难了</li><li>准备算法考试</li><li>所有的东西并行真的做不到，一天只能选一个（上周多线程进行复习&amp;&amp;学习，效率极低）</li><li>佛山顺德愿望get</li><li>实验室老师开始整幺蛾子了：周四下午7、8节加了一节选修课。明天去一节看看情况，不行就退实验室;以及未来一个月内实验室搬迁，不行就退。</li><li>昨天去交材料，党建的辅导老师说：好久没看见你了，你最近在干嘛。<br>  我：准备考研，和实验室的东西。<br>  老师:你准备考研的话要平衡比赛和考研准备的东西<br>  老师:考研的书差不多要买了<br>  我：嗯嗯<br>12.仰天长叹，下个月三场考试，4月份一轮，师姐说828要在这学期内过完，操作系统跟着这学期的老师好好学一遍，就没什么问题，我真的能平衡吗……实验室感觉差不多可以退了，但又想拼一把计算机设计大赛，自己再做个东西出来……</li></ol><p><a href="https://www.emojicopy.com/">emoji</a></p><p><a href="https://www.huntsbot.com/qa/9raM">format</a></p><img src="\images\dayliy_image\3.1.1.jpg" alt="drawing" width="200"/><p><a href="https://blog.csdn.net/Calvin_zhou/article/details/109303640?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167765384916782427491388%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=167765384916782427491388&biz_id=0&utm_medium=distribute.pc_chrome_plugin_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-109303640-null-null.nonecase&utm_term=%20=====%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Context%20Dump%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20=====%20%20%20%20%20===%20(line%20number%20probably%20different%20from%20source)%20===&spm=1018.2226.3001.4187">本来想花15min解决的note，花了1个小时的原因窒息</a><br><img src="\images\dayliy_image\3.1.2.png" alt="drawing" width="500"/></p><!-- ![111](\images\dayliy_image\3.1.2.png) -->]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> casual_talk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Import pymysql could not be resolved from</title>
      <link href="/2023/02/26/Import%20pymysql%20could%20not%20be%20resolved%20from/"/>
      <url>/2023/02/26/Import%20pymysql%20could%20not%20be%20resolved%20from/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/anaconda/3.png" alt="1677241477982"></p><p>Import “pymysql” could not be resolved from </p><span id="more"></span><p><img src="/images/anaconda/4.png" alt="1677241534025"></p><p>在anaconda里面装一个</p><p>首先先切进django的虚拟环境里面</p><p>  在Anaconda中，可以通过使用conda命令来创建和管理虚拟环境。要切换已创建的虚拟环境，可以使用以下命令：</p><ol><li>列出已有环境：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda info --envs</span><br></pre></td></tr></table></figure><ol start="2"><li>激活目标环境：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate &lt;env_name&gt;</span><br></pre></td></tr></table></figure><p>这里<code>&lt;env_name&gt;</code>是你想要激活的虚拟环境的名称。激活环境后，你可以在该环境中使用安装的软件包和工具。</p><ol start="3"><li>取消激活当前环境：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda deactivate</span><br></pre></td></tr></table></figure><p>这将使当前环境不再处于活动状态，回到默认的基础环境。 </p><p>注意：如果你在使用Anaconda Navigator，也可以通过选择“Environments”选项卡，然后单击目标环境的名称来激活虚拟环境。  </p><p><code>conda install pymysql</code></p><p>看你anaconda用的是什么源，国内的记得关闭魔法上网工具</p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>官方文档</title>
      <link href="/2023/02/24/null%C2%B6/"/>
      <url>/2023/02/24/null%C2%B6/</url>
      
        <content type="html"><![CDATA[<p><a href="https://stackoverflow.com/questions/19428572/django-templatesyntaxerror-could-not-parse-the-remainder">https://stackoverflow.com/questions/19428572/django-templatesyntaxerror-could-not-parse-the-remainder</a></p><span id="more"></span><p>模型字段参考</p><p>字段选项</p><p><a href="https://docs.djangoproject.com/zh-hans/4.1/ref/models/fields/#validators">https://docs.djangoproject.com/zh-hans/4.1/ref/models/fields/#validators</a></p><p>以下参数对所以字段类型均有效，且是可选的。</p><h3 id="null¶"><a href="#null¶" class="headerlink" title="null¶"></a><code>null</code><a href="https://docs.djangoproject.com/zh-hans/4.1/ref/models/fields/#null">¶</a></h3><ul><li><code>Field.``null</code><a href="https://docs.djangoproject.com/zh-hans/4.1/ref/models/fields/#django.db.models.Field.null">¶</a></li></ul><p>如果是 <code>True</code>， Django 将在数据库中存储空值为 <code>NULL</code>。默认为 <code>False</code>。</p><p>避免在基于字符串的字段上使用 <a href="https://docs.djangoproject.com/zh-hans/4.1/ref/models/fields/#django.db.models.Field.null"><code>null</code></a>，如 <a href="https://docs.djangoproject.com/zh-hans/4.1/ref/models/fields/#django.db.models.CharField"><code>CharField</code></a> 和 <a href="https://docs.djangoproject.com/zh-hans/4.1/ref/models/fields/#django.db.models.TextField"><code>TextField</code></a>。如果一个基于字符串的字段有 <code>null=True</code>，这意味着它有两种可能的“无数据”值。<code>NULL</code>，和空字符串。在大多数情况下，“无数据”有两种可能的值是多余的，Django 的惯例是使用空字符串，而不是 <code>NULL</code>。一个例外是当一个 <a href="https://docs.djangoproject.com/zh-hans/4.1/ref/models/fields/#django.db.models.CharField"><code>CharField</code></a> 同时设置了 <code>unique=True</code> 和 <code>blank=True</code>。在这种情况下，<code>null=True</code> 是需要的，以避免在保存具有空白值的多个对象时违反唯一约束。</p><p>无论是基于字符串的字段还是非字符串的字段，如果希望在表单中允许空值，还需要设置 <code>blank=True</code>，因为 <a href="https://docs.djangoproject.com/zh-hans/4.1/ref/models/fields/#django.db.models.Field.null"><code>null</code></a> 参数只影响数据库的存储（参见 <a href="https://docs.djangoproject.com/zh-hans/4.1/ref/models/fields/#django.db.models.Field.blank"><code>blank</code></a> ）。</p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Module &quot;django.contrib.sessions.serializers&quot; does not define a &quot;PicleSerializer&quot; attribute/class</title>
      <link href="/2023/02/24/Module%20django.contrib.sessions.serializers%20does%20not%20define%20a%20PicleSerializer%20attributeclass/"/>
      <url>/2023/02/24/Module%20django.contrib.sessions.serializers%20does%20not%20define%20a%20PicleSerializer%20attributeclass/</url>
      
        <content type="html"><![CDATA[<h1 id="Module-“django-contrib-sessions-serializers”-does-not-define-a-“PicleSerializer”-attribute-x2F-class"><a href="#Module-“django-contrib-sessions-serializers”-does-not-define-a-“PicleSerializer”-attribute-x2F-class" class="headerlink" title="Module “django.contrib.sessions.serializers” does not define a “PicleSerializer” attribute&#x2F;class"></a>Module “django.contrib.sessions.serializers” does not define a “PicleSerializer” attribute&#x2F;class</h1><span id="more"></span><p>是这本书打错了hhhh</p><p><a href="https://docs.djangoproject.com/zh-hans/4.1/topics/http/sessions/">https://docs.djangoproject.com/zh-hans/4.1/topics/http/sessions/</a></p><p>在这里ctrl+F找</p><p><strong>serializers</strong></p><p>最后一个</p><p><code>serializers.``PickleSerializer</code></p><p>tmd是这个玩意儿！</p><p>不是picle睡觉哦pick</p><p>服了这个写书的老六！</p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无法加载文件C:\Users\xxx\Documents\WindowsPowerShell\profile.ps1</title>
      <link href="/2023/02/24/%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E6%96%87%E4%BB%B6CUsersxxxDocumentsWindowsPowerShellprofile.ps1%EF%BC%8C%E5%9B%A0%E4%B8%BA%E5%9C%A8%E6%AD%A4%E7%B3%BB%E7%BB%9F%E4%B8%8A%E7%A6%81%E6%AD%A2%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC/"/>
      <url>/2023/02/24/%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E6%96%87%E4%BB%B6CUsersxxxDocumentsWindowsPowerShellprofile.ps1%EF%BC%8C%E5%9B%A0%E4%B8%BA%E5%9C%A8%E6%AD%A4%E7%B3%BB%E7%BB%9F%E4%B8%8A%E7%A6%81%E6%AD%A2%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="无法加载文件C-Users-xxx-Documents-WindowsPowerShell-profile-ps1，因为在此系统上禁止运行脚本"><a href="#无法加载文件C-Users-xxx-Documents-WindowsPowerShell-profile-ps1，因为在此系统上禁止运行脚本" class="headerlink" title="无法加载文件C:\Users\xxx\Documents\WindowsPowerShell\profile.ps1，因为在此系统上禁止运行脚本"></a>无法加载文件C:\Users\xxx\Documents\WindowsPowerShell\profile.ps1，因为在此系统上禁止运行脚本</h1><span id="more"></span><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>打开 PowerShell 提示如下报错信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Windows PowerShell</span><br><span class="line">版权所有（C） Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">安装最新的 PowerShell，了解新功能和改进！https://aka.ms/PSWindows</span><br><span class="line"></span><br><span class="line">. : 无法加载文件 C:\Users\87897\Documents\WindowsPowerShell\profile.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参</span><br><span class="line">阅 https:/go.microsoft.com/fwlink/?LinkID=135170 中的 about_Execution_Policies。</span><br><span class="line">所在位置 行:1 字符: 3</span><br><span class="line">+ . &#x27;C:\Users\87897\Documents\WindowsPowerShell\profile.ps1&#x27;</span><br><span class="line">+   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">    + CategoryInfo          : SecurityError: (:) []，PSSecurityException</span><br><span class="line">1234567891011</span><br></pre></td></tr></table></figure><h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>输入 <code>get-ExecutionPolicy</code> 输出 <code>Restricted</code>，即脚本执行策略受限。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Windows\system32&gt; get-ExecutionPolicy</span><br><span class="line">Restricted</span><br><span class="line">12</span><br></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>更换脚本执行策略：<code>set-ExecutionPolicy RemoteSigned</code>，然后输入 <code>Y</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Windows\system32&gt; set-ExecutionPolicy RemoteSigned</span><br><span class="line"></span><br><span class="line">执行策略更改</span><br><span class="line">执行策略可帮助你防止执行不信任的脚本。更改执行策略可能会产生安全风险，如 https:/go.microsoft.com/fwlink/?LinkID=135170</span><br><span class="line">中的 about_Execution_Policies 帮助主题所述。是否要更改执行策略?</span><br><span class="line">[Y] 是(Y)  [A] 全是(A)  [N] 否(N)  [L] 全否(L)  [S] 暂停(S)  [?] 帮助 (默认值为“N”): Y</span><br><span class="line">123456</span><br></pre></td></tr></table></figure><p>更换完成后，再次使用命令 <code>get-ExecutionPolicy</code> 查看脚本执行策略。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Windows\system32&gt; get-ExecutionPolicy</span><br><span class="line">RemoteSigned</span><br><span class="line">12</span><br></pre></td></tr></table></figure><p>可以发现已经更改了。问题完美解决，over~~😊</p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> powershell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>anaconda安装其他东西</title>
      <link href="/2023/02/24/Win10%E4%B8%8BAnaconda%E4%BD%BF%E7%94%A8conda%20activate%E6%8A%A5%E9%94%99Your%20shell%20has%20not%20been%20properly%20configured%20to%20use%20&#39;conda%20activate&#39;/"/>
      <url>/2023/02/24/Win10%E4%B8%8BAnaconda%E4%BD%BF%E7%94%A8conda%20activate%E6%8A%A5%E9%94%99Your%20shell%20has%20not%20been%20properly%20configured%20to%20use%20&#39;conda%20activate&#39;/</url>
      
        <content type="html"><![CDATA[<h1 id="Win10下Anaconda使用conda-activate报错Your-shell-has-not-been-properly-configured-to-use-‘conda-activate’"><a href="#Win10下Anaconda使用conda-activate报错Your-shell-has-not-been-properly-configured-to-use-‘conda-activate’" class="headerlink" title="Win10下Anaconda使用conda activate报错Your shell has not been properly configured to use ‘conda activate’"></a>Win10下Anaconda使用conda activate报错Your shell has not been properly configured to use ‘conda activate’</h1><p><img src="/images/anaconda/1.png" alt="1677212390344"></p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">PS E:\dijango&gt; conda activate base</span><br><span class="line"></span><br><span class="line">CommandNotFoundError: Your shell has not been properly configured to use &#x27;conda activate&#x27;.</span><br><span class="line">If using &#x27;conda activate&#x27; from a batch script, change your</span><br><span class="line">invocation to &#x27;CALL conda.bat activate&#x27;.</span><br><span class="line">To initialize your shell, run</span><br><span class="line">    $ conda init &lt;SHELL_NAME&gt;</span><br><span class="line"></span><br><span class="line">Currently supported shells are:</span><br><span class="line"></span><br><span class="line">- bash</span><br><span class="line">- cmd.exe</span><br><span class="line">- fish</span><br><span class="line">- tcsh</span><br><span class="line">- xonsh</span><br><span class="line">- zsh</span><br><span class="line">- powershell</span><br><span class="line"></span><br><span class="line">See &#x27;conda init --help&#x27; for more information and options.</span><br><span class="line"></span><br><span class="line">IMPORTANT: You may need to close and restart your shell after running &#x27;conda init&#x27;.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>先以管理员身份打开cmd。<br>试一下conda activate 环境名称。<br>如果命令行提示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Your shell has not been properly configured to use ‘conda activate’.</span><br></pre></td></tr></table></figure><p>然后下面还提示</p><p><code>conda init &lt;SHELL NAME&gt;</code></p><p>就按照他的要求，输入一下</p><p><code>conda init cmd.exe</code></p><p>或者</p><p><code>conda init powershell</code></p><p>这两条都试试，回车，重启cmd说不定就好了。反正我好了。<br><img src="/images/anaconda/2.png" alt="1677212587799"></p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> anaconda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闭包</title>
      <link href="/2023/02/23/%E9%97%AD%E5%8C%85/"/>
      <url>/2023/02/23/%E9%97%AD%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p><strong>闭包</strong></p><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.污染环境的全局变量实现函数执行一次次数减一</span></span><br><span class="line">    <span class="keyword">var</span> a=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fa</span>(<span class="params"></span>)&#123;</span><br><span class="line">        a--;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2.那就换成局部变量试试</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fb</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> a=<span class="number">10</span>;</span><br><span class="line">        a--;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    &#125;<span class="comment">/*它居然不动了*/</span></span><br><span class="line">    <span class="comment">// 3.闭包</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fc</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> a=<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">fd</span>(<span class="params"></span>)&#123;</span><br><span class="line">            a--;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> fm=<span class="title function_">fc</span>();<span class="comment">//完成这句才算闭包</span></span><br><span class="line">    <span class="comment">// 总结</span></span><br><span class="line">    <span class="comment">// 1.有嵌套函数</span></span><br><span class="line">    <span class="comment">// 2.内部函数引用外部作用域</span></span><br><span class="line">    <span class="comment">// 3.返回值是函数</span></span><br><span class="line">    <span class="comment">// 4.船舰一个对象函数，让其长期驻留</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2022 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reat-router</title>
      <link href="/2023/02/23/router/"/>
      <url>/2023/02/23/router/</url>
      
        <content type="html"><![CDATA[<p>随意使用您选择的打包器，例如 <a href="https://create-react-app.dev/">Create React App</a> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app router-tutorial</span><br></pre></td></tr></table></figure><span id="more"></span><p>然后安装 React Router 依赖项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd router-tutorial</span><br><span class="line">npm install react-router-dom@6 history@5</span><br></pre></td></tr></table></figure><p><img src="/images/router/1.png" alt="1668929643220"></p><p>然后编辑你的App.js，让它变得很无聊:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Bookkeeper!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，确认<code>index.js</code> or <code>main.jsx</code>（取决于你的打包工具）是可用的：</p><p>root渲染App</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rootElement = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>);</span><br><span class="line"><span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, rootElement);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/router/2.png" alt="1668929879392"></p><p>然后是删了一点东西</p><p><img src="/images/router/3.png" alt="1668930704957"></p><p>启动您的React应用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><h2 id="连接路由"><a href="#连接路由" class="headerlink" title="连接路由"></a>连接路由</h2><p>首先，我们想把你的应用连接到路由: import ‘ BrowserRouter ‘，并用它包裹你的整个应用。(修改index.js)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import &#123; render &#125; from &quot;react-dom&quot;;</span><br><span class="line">import &#123; BrowserRouter &#125; from &quot;react-router-dom&quot;;</span><br><span class="line">import App from &quot;./App&quot;;</span><br><span class="line"></span><br><span class="line">const rootElement = document.getElementById(&quot;root&quot;);</span><br><span class="line">render(</span><br><span class="line">  &lt;BrowserRouter&gt;</span><br><span class="line">    &lt;App /&gt;</span><br><span class="line">  &lt;/BrowserRouter&gt;,</span><br><span class="line">  rootElement</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>应用程序中没有任何变化，但现在我们已准备好开始处理路由。</p><h2 id="添加一些链接"><a href="#添加一些链接" class="headerlink" title="添加一些链接"></a>添加一些链接</h2><p>打开 src&#x2F;App.js、导入 Link 并添加一些全局导航。注：在本教程中不要对待样式太认真，我们只是为了方便而使用内联样式，你可以根据需要设置样式。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Bookkeeper<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">nav</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">borderBottom:</span> &quot;<span class="attr">solid</span> <span class="attr">1px</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">paddingBottom:</span> &quot;<span class="attr">1rem</span>&quot;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/invoices&quot;</span>&gt;</span>Invoices<span class="tag">&lt;/<span class="name">Link</span>&gt;</span> |&#123;&quot; &quot;&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/expenses&quot;</span>&gt;</span>Expenses<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/router/4.png" alt="1668930664190"></p><p><img src="/images/router/5.png" alt="1668930753632"></p><p>单击链接和后退&#x2F;前进按钮。React Router 现在正在控制 URL！</p><p>我们还没有在 URL 更改时呈现任何路由，但 Link 可以更改 URL，而不会导致整个页面重新加载。</p><h2 id="添加一些路由"><a href="#添加一些路由" class="headerlink" title="添加一些路由"></a>添加一些路由</h2><p>添加几个新文件：</p><ul><li><p><code>src/routes/invoices.jsx</code></p></li><li><p><code>src/routes/expenses.jsx</code></p><p>(文件的位置并不重要，但是当你想要自动生成后端API，服务器渲染，代码分割或者更多的功能时，像这样命名你的文件可以很容易地将这个应用程序移植到其他项目，<a href="https://remix.run/">Remix</a>😉)</p></li></ul><p>现在在文件中加入以下代码：</p><p>expenses.jsx</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export default function Expenses() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;main style=&#123;&#123; padding: &quot;1rem 0&quot; &#125;&#125;&gt;</span><br><span class="line">      &lt;h2&gt;Expenses&lt;/h2&gt;</span><br><span class="line">    &lt;/main&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>invoices.jsx</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export default function Invoices() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;main style=&#123;&#123; padding: &quot;1rem 0&quot; &#125;&#125;&gt;</span><br><span class="line">      &lt;h2&gt;Invoices&lt;/h2&gt;</span><br><span class="line">    &lt;/main&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，让我们通过在<code>main.jsx</code>或者<code>index.js</code> 中创建我们的第一个“路由配置”来让 React Router 在不同的 URL 上呈现我们的界面。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import &#123; render &#125; from &quot;react-dom&quot;;</span><br><span class="line">import &#123;</span><br><span class="line">  BrowserRouter,</span><br><span class="line">  Routes,</span><br><span class="line">  Route</span><br><span class="line">&#125; from &quot;react-router-dom&quot;;</span><br><span class="line">import App from &quot;./App&quot;;</span><br><span class="line">import Expenses from &quot;./routes/expenses&quot;;</span><br><span class="line">import Invoices from &quot;./routes/invoices&quot;;</span><br><span class="line"></span><br><span class="line">const rootElement = document.getElementById(&quot;root&quot;);</span><br><span class="line">render(</span><br><span class="line">  &lt;BrowserRouter&gt;</span><br><span class="line">    &lt;Routes&gt;</span><br><span class="line">      &lt;Route path=&quot;/&quot; element=&#123;&lt;App /&gt;&#125; /&gt;</span><br><span class="line">      &lt;Route path=&quot;expenses&quot; element=&#123;&lt;Expenses /&gt;&#125; /&gt;</span><br><span class="line">      &lt;Route path=&quot;invoices&quot; element=&#123;&lt;Invoices /&gt;&#125; /&gt;</span><br><span class="line">    &lt;/Routes&gt;</span><br><span class="line">  &lt;/BrowserRouter&gt;,</span><br><span class="line">  rootElement</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>注意：当路由为”&#x2F;“时它渲染App组件，在”&#x2F;invoices”时它渲染Invoices组件。</p><p><img src="/images/router/6.png" alt="1668931415821"></p><p><img src="/images/router/7.png" alt="1668931429768"></p><p><img src="/images/router/8.png" alt="1668931443632"></p><p>所以到这里我们可以看出，点击后会整页都会变换掉</p><h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><p>你可能已经注意到，当点击链接时，“App”中的布局会消失。共享布局是一件令人头疼的事情。我们已经知道，大多数UI都是一系列嵌套布局，这些布局总会映射到URL上，所以这个思路被直接植入到React Router中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import &#123; render &#125; from &quot;react-dom&quot;;</span><br><span class="line">import &#123;</span><br><span class="line">  BrowserRouter,</span><br><span class="line">  Routes,</span><br><span class="line">  Route</span><br><span class="line">&#125; from &quot;react-router-dom&quot;;</span><br><span class="line">import App from &quot;./App&quot;;</span><br><span class="line">import Expenses from &quot;./routes/expenses&quot;;</span><br><span class="line">import Invoices from &quot;./routes/invoices&quot;;</span><br><span class="line"></span><br><span class="line">const rootElement = document.getElementById(&quot;root&quot;);</span><br><span class="line">render(</span><br><span class="line">  &lt;BrowserRouter&gt;</span><br><span class="line">    &lt;Routes&gt;</span><br><span class="line">      &lt;Route path=&quot;/&quot; element=&#123;&lt;App /&gt;&#125;&gt;</span><br><span class="line">        &lt;Route path=&quot;expenses&quot; element=&#123;&lt;Expenses /&gt;&#125; /&gt;</span><br><span class="line">        &lt;Route path=&quot;invoices&quot; element=&#123;&lt;Invoices /&gt;&#125; /&gt;</span><br><span class="line">      &lt;/Route&gt;</span><br><span class="line">    &lt;/Routes&gt;</span><br><span class="line">  &lt;/BrowserRouter&gt;,</span><br><span class="line">  rootElement</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>当路由有子节点时，它会做两件事：</p><ol><li>它嵌套了 URL (<code>&quot;/&quot; + &quot;expenses&quot;</code> 和 <code>&quot;/&quot; + &quot;invoices&quot;</code>)</li><li>当子路由匹配时，它将嵌套共享布局的 UI 组件：</li></ol><p>但是，为了使（2）生效，我们需要在App.jsx“父”路由中渲染一个</p><p>组件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Outlet, Link &#125; from &quot;react-router-dom&quot;;</span><br><span class="line"></span><br><span class="line">export default function App() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;Bookkeeper&lt;/h1&gt;</span><br><span class="line">      &lt;nav</span><br><span class="line">        style=&#123;&#123;</span><br><span class="line">          borderBottom: &quot;solid 1px&quot;,</span><br><span class="line">          paddingBottom: &quot;1rem&quot;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;Link to=&quot;/invoices&quot;&gt;Invoices&lt;/Link&gt; |&#123;&quot; &quot;&#125;</span><br><span class="line">        &lt;Link to=&quot;/expenses&quot;&gt;Expenses&lt;/Link&gt;</span><br><span class="line">      &lt;/nav&gt;</span><br><span class="line">      &lt;Outlet /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在再次单击。父路由 ( App.js) 仍然存在，而 <code>&lt;Outlet&gt;</code> 在两个子路由 (<code>&lt;Invoices&gt;</code> 和 <code>&lt;Expenses&gt;</code>)之间切换！ 正如我们稍后将看到的，这适用于路由层次结构的任何级别，并且非常强大。</p><p><img src="/images/router/9.png" alt="1668931972695"></p><p><img src="/images/router/10.png" alt="1668931990946"></p><h2 id="列出发票"><a href="#列出发票" class="headerlink" title="列出发票"></a>列出发票</h2><p>通常你会从某个地方的服务器获取数据，但在本教程中，让我们造一些数据，这样我们就可以专注于路由。</p><p>创建一个文件src&#x2F;data.js并将其复制&#x2F;粘贴到那里：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> invoices = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Santa Monica&quot;</span>,</span><br><span class="line">    <span class="attr">number</span>: <span class="number">1995</span>,</span><br><span class="line">    <span class="attr">amount</span>: <span class="string">&quot;$10,800&quot;</span>,</span><br><span class="line">    <span class="attr">due</span>: <span class="string">&quot;12/05/1995&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Stankonia&quot;</span>,</span><br><span class="line">    <span class="attr">number</span>: <span class="number">2000</span>,</span><br><span class="line">    <span class="attr">amount</span>: <span class="string">&quot;$8,000&quot;</span>,</span><br><span class="line">    <span class="attr">due</span>: <span class="string">&quot;10/31/2000&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Ocean Avenue&quot;</span>,</span><br><span class="line">    <span class="attr">number</span>: <span class="number">2003</span>,</span><br><span class="line">    <span class="attr">amount</span>: <span class="string">&quot;$9,500&quot;</span>,</span><br><span class="line">    <span class="attr">due</span>: <span class="string">&quot;07/22/2003&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Tubthumper&quot;</span>,</span><br><span class="line">    <span class="attr">number</span>: <span class="number">1997</span>,</span><br><span class="line">    <span class="attr">amount</span>: <span class="string">&quot;$14,000&quot;</span>,</span><br><span class="line">    <span class="attr">due</span>: <span class="string">&quot;09/01/1997&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Wide Open Spaces&quot;</span>,</span><br><span class="line">    <span class="attr">number</span>: <span class="number">1998</span>,</span><br><span class="line">    <span class="attr">amount</span>: <span class="string">&quot;$4,600&quot;</span>,</span><br><span class="line">    <span class="attr">due</span>: <span class="string">&quot;01/27/2998&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getInvoices</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> invoices;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们可以在发票路由中使用它。让我们也添加一些样式来获得侧边栏导航布局。随意复制&#x2F;粘贴所有这些，但要特别注意 <code>&lt;Link&gt;</code> 组件需要 to 属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Link &#125; from &quot;react-router-dom&quot;;</span><br><span class="line">import &#123; getInvoices &#125; from &quot;../data&quot;;</span><br><span class="line"></span><br><span class="line">export default function Invoices() &#123;</span><br><span class="line">  let invoices = getInvoices();</span><br><span class="line">  return (</span><br><span class="line">    &lt;div style=&#123;&#123; display: &quot;flex&quot; &#125;&#125;&gt;</span><br><span class="line">      &lt;nav</span><br><span class="line">        style=&#123;&#123;</span><br><span class="line">          borderRight: &quot;solid 1px&quot;,</span><br><span class="line">          padding: &quot;1rem&quot;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        &#123;invoices.map(invoice =&gt; (</span><br><span class="line">          &lt;Link</span><br><span class="line">            style=&#123;&#123; display: &quot;block&quot;, margin: &quot;1rem 0&quot; &#125;&#125;</span><br><span class="line">            to=&#123;`/invoices/$&#123;invoice.number&#125;`&#125;</span><br><span class="line">            key=&#123;invoice.number&#125;</span><br><span class="line">          &gt;</span><br><span class="line">            &#123;invoice.name&#125;</span><br><span class="line">          &lt;/Link&gt;</span><br><span class="line">        ))&#125;</span><br><span class="line">      &lt;/nav&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2022 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>匿名函数</title>
      <link href="/2023/02/23/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/"/>
      <url>/2023/02/23/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p><strong>匿名函数</strong></p><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.表达式赋值给变量来使用</span></span><br><span class="line"><span class="keyword">var</span> fa =<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fa</span>();</span><br><span class="line"><span class="comment">// 2.当作函数来被调用</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">30</span>);&#125;,<span class="number">1000</span>);</span><br><span class="line"><span class="comment">// 3.通过函数嵌套当成闭包里的返回函数来调用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fb</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">40</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fm=<span class="title function_">fb</span>();</span><br><span class="line"><span class="title function_">fm</span>();</span><br><span class="line"><span class="comment">// 4.函数自己调用自己，也就是自调用。</span></span><br><span class="line">!<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">50</span>);&#125;();</span><br><span class="line"><span class="comment">//匿名函数智能被调用或是自调用。</span></span><br><span class="line"><span class="comment">//带参数的匿名函数自调用</span></span><br><span class="line">!<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(a+b);&#125;(<span class="number">40</span>,<span class="number">50</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2022 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回调函数</title>
      <link href="/2023/02/23/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/"/>
      <url>/2023/02/23/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p><em><strong>回调函数</strong></em></p><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先定义一个函数，用来做短时间或无法脱身的事情，同步</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sdo</span>(<span class="params">does</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(does);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在定义以恶搞函数，用来做长时间等待的事情，异步</span></span><br><span class="line"><span class="comment">//用回调解决这个问题</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ldo</span>(<span class="params">doing,callback</span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(doing);</span><br><span class="line">        <span class="title function_">callback</span>(<span class="string">&#x27;吃鸡&#x27;</span>)</span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接下来要开始迫害只因</span></span><br><span class="line"><span class="title function_">sdo</span>(<span class="string">&#x27;买鸡&#x27;</span>)</span><br><span class="line"><span class="title function_">sdo</span>(<span class="string">&#x27;杀鸡&#x27;</span>)</span><br><span class="line"><span class="title function_">ldo</span>(<span class="string">&#x27;炖鸡&#x27;</span>,sdo)<span class="comment">//===&gt;函数作为参数</span></span><br><span class="line"><span class="comment">// sdo(&#x27;吃鸡&#x27;)</span></span><br><span class="line"><span class="comment">// 会发现不对劲</span></span><br><span class="line">       </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2022 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>箭头函数</title>
      <link href="/2023/02/23/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"/>
      <url>/2023/02/23/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p><strong>箭头函数</strong></p><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.箭头函数常见写法</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fun1</span>=(<span class="params">a,b</span>)=&gt;&#123;<span class="keyword">return</span> a+b;&#125;</span><br><span class="line"><span class="comment">// 2.箭头函数没有参数，那么也要写括号</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fun2</span>=(<span class="params"></span>)=&gt;&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好&#x27;</span>);&#125;</span><br><span class="line"><span class="comment">// 3.如果只有一个参数，那么括号可以省略</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fun3</span>=name=&gt;&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`你好<span class="subst">$&#123;name&#125;</span>`</span>);&#125;</span><br><span class="line"><span class="comment">// 4.如果函数体只有一句执行代码，那么可以省略大括号，同时代码默认会被ruturn出去</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fun4</span>=name=&gt;<span class="string">`你好<span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fun4</span>(<span class="string">&#x27;小明&#x27;</span>));</span><br><span class="line"><span class="comment">// 5.箭头函数没有自己的this，他的this是来自于上层作用域的this</span></span><br><span class="line"> <span class="keyword">let</span> obj=&#123;</span><br><span class="line">    <span class="title function_">fun5</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fun5:&#x27;</span>,<span class="variable language_">this</span>);&#125;,</span><br><span class="line">    <span class="attr">fun6</span>:<span class="function">()=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fun6:&#x27;</span>,<span class="variable language_">this</span>);&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> obj.<span class="title function_">fun5</span>();</span><br><span class="line"> obj.<span class="title function_">fun6</span>();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2022 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决bash hexo command not found</title>
      <link href="/2023/02/23/%E8%A7%A3%E5%86%B3bash%20hexo%20command%20not%20found/"/>
      <url>/2023/02/23/%E8%A7%A3%E5%86%B3bash%20hexo%20command%20not%20found/</url>
      
        <content type="html"><![CDATA[<h1 id="解决bash-hexo-command-not-found"><a href="#解决bash-hexo-command-not-found" class="headerlink" title="解决bash: hexo: command not found"></a>解决bash: hexo: command not found</h1><span id="more"></span><p>检查 nodejs 和 npm 是否正常，依次输入命令 <code>node -v</code> 和 <code>npm -v</code> 看看是否有相关版本信息</p><!-- more --><p><img src="/images/hexo%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/1.png" alt="1669786706325"></p><p>出现了版本信息就证明 nodejs 和 npm 是没有问题的，那么就应该是环境变量的配置问题了，在【此电脑】右键【属性】，依次选择【高级系统设置】-【环境变量】，选择系统变量 Path，将 <code>node_modules</code> 下的 <code>.bin</code> 文件路径添加到 Path 里面</p><p>注意你的博客目录下应该有两个 <code>node_modules</code> 文件夹</p><p>F:\blog 和F:\blog\BLOG</p><p><img src="/images/hexo%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/2.png" alt="1669786987745"></p><p><img src="/images/hexo%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/3.png" alt="1669787025987"></p><p>我是加了第一个module在环境变量</p><p><img src="/images/hexo%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/4.png" alt="1669787251679"></p><p>别的博主有的加了第二个module</p><p>总之自己试一下按哪个</p><p>环境变量添加好了之后重新打开 git 即可运行 hexo 命令，如果此时仍然无法执行 hexo 命令，那就只能拿出终极绝招了，运行命令 <code>npm install hexo-cli -g</code> 重新安装 hexo 即可！</p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyQt5显示图片</title>
      <link href="/2023/02/23/PyQt5%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87/"/>
      <url>/2023/02/23/PyQt5%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<p>PyQt5显示图片</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redImg=QImage()</span><br><span class="line">QImage.load(redImg,&#x27;path&#x27;,format=&#x27;png&#x27;)</span><br><span class="line">self.label_3.setPixmap(QtGui.QPixmap(redImg))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">img_path=&#x27;path&#x27;</span><br><span class="line">self.showImage = QPixmap(img_path).scaled(self.label_3.width(), self.label_3.height())  # 适应窗口大小</span><br><span class="line">self.label_3.setPixmap(self.showImage)  # 显示图片</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">image=cv2.imread(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">showImageRed</span>(<span class="params">self</span>):</span><br><span class="line">self.image_1 = self.image</span><br><span class="line">self.image_1 = QtGui.QImage(self.image_1.data, self.image_1.shape[<span class="number">1</span>],self.image_1.shape[<span class="number">0</span>],QtGui.QImage.Format_RGB888).rgbSwapped()</span><br><span class="line">self.label_3.setPixmap(QtGui.QPixmap.fromImage(self.image_1))</span><br><span class="line"></span><br><span class="line">   </span><br></pre></td></tr></table></figure><p>第三种方法可能会有斜影子，修改成下方这样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def showImageRed(self):</span><br><span class="line">    self.image_1 = self.image</span><br><span class="line">    self.image_1 = QtGui.QImage(self.image_1.data, self.image_1.shape[1], self.image_1.shape[0],self.image_1.shape[1]*3, QtGui.QImage.Format_RGB888).rgbSwapped()</span><br><span class="line">    self.label_3.setPixmap(QtGui.QPixmap.fromImage(self.image_1))</span><br></pre></td></tr></table></figure><p>感觉应该是三通道问题</p>]]></content>
      
      
      <categories>
          
          <category> 2022 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyQt5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/02/23/hello-world/"/>
      <url>/2023/02/23/hello-world/</url>
      
        <content type="html"><![CDATA[<p>hello</p><span id="more"></span><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>maven 找不到依赖项 javax.servlet:servlet-api:${servlet-api.version}</title>
      <link href="/2023/02/23/maven/"/>
      <url>/2023/02/23/maven/</url>
      
        <content type="html"><![CDATA[<h1 id="找不到依赖项-javax-servlet-servlet-api-servlet-api-version"><a href="#找不到依赖项-javax-servlet-servlet-api-servlet-api-version" class="headerlink" title="找不到依赖项 javax.servlet:servlet-api:${servlet-api.version}"></a>找不到依赖项 javax.servlet:servlet-api:${servlet-api.version}</h1><p>1.下载maven百度</p><span id="more"></span><p>2.maven仓库查找</p><p><a href="https://mvnrepository.com/">https://mvnrepository.com/</a></p><p>直接搜索</p><p>比如<br><img src="/images/maven/1.png" alt="1672900140564"></p><p>直接搜索</p><p><img src="/images/maven/2.png" alt="1672900240366"></p><p>然后</p><p><img src="/images/maven/3.png" alt="1672900269701"></p><p>点击之后往下移动</p><p>找到这一行</p><p><img src="/C/images/maven/4.png" alt="1672900285401"></p><p>贴到pom.xml文件里</p><p><img src="/images/maven/5.png" alt="1672983178197"></p><p>坐标组成</p><p><img src="/images/maven/6.png" alt="1672983299156"></p><p>配置本地仓库</p><p><img src="/images/maven/7.png" alt="1672987574149"></p><p><img src="/images/maven/8.png" alt="1672987601115"></p><p>中央仓库</p><p><img src="/images/maven/9.png" alt="1672988046524"></p><p>id唯一标识符，用来区分不同的mirror元素</p><p>mirrorOf代替哪个仓库</p><p>url镜像的URL</p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql报错ERROR 1045 (28000) Access denied for user &#39;root&#39;@&#39;localhost&#39; (using password:NO)</title>
      <link href="/2023/02/23/mysql%E5%90%AF%E5%8A%A8/"/>
      <url>/2023/02/23/mysql%E5%90%AF%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="ERROR-1045-28000-Access-denied-for-user-‘root‘-’localhost’-using-password-NO"><a href="#ERROR-1045-28000-Access-denied-for-user-‘root‘-’localhost’-using-password-NO" class="headerlink" title="ERROR 1045 (28000): Access denied for user ‘root‘@’localhost’ (using password: NO)"></a>ERROR 1045 (28000): Access denied for user ‘root‘@’localhost’ (using password: NO)</h2><span id="more"></span><p><img src="/images/jeecgsql/1.png" alt="1672729110392"></p><p><img src="/images/jeecgsql/2.png" alt="1672729176810"></p><p>E:\jeecg\jeecg-boot-master\db\jeecgboot-mysql-5.7.sql</p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyQt5</title>
      <link href="/2023/02/23/pyqt5/"/>
      <url>/2023/02/23/pyqt5/</url>
      
        <content type="html"><![CDATA[<h2 id="安装PyQt5"><a href="#安装PyQt5" class="headerlink" title="安装PyQt5"></a>安装PyQt5</h2><p>打开Anaconda Promt，切换到对应环境输入：</p><span id="more"></span> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install PyQt5 -i https://pypi.douban.com/simple</span><br></pre></td></tr></table></figure><h2 id="安装PyQt5-tools"><a href="#安装PyQt5-tools" class="headerlink" title="安装PyQt5-tools"></a>安装PyQt5-tools</h2> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install PyQt5-tools -i https://pypi.douban.com/simple</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>打开</p><p>Anaconda prompt</p><p><img src="/./images/pyqt5/1.png" alt="1669202006491"></p><p>输入:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PyQt5-tools designer</span><br></pre></td></tr></table></figure><p>它有很多东西</p><p><img src="/./images/pyqt5/2.png" alt="1669202116133"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">designer</span><br><span class="line">installuic</span><br><span class="line">qmlscene</span><br><span class="line">qmltestrunner</span><br></pre></td></tr></table></figure><p>不知道其他是啥（待解决）</p><hr><p><img src="/./images/pyqt5/3.png" alt="1669202186551"></p><p>直接点击创建（main window）</p><p><img src="/./images/pyqt5/4.png" alt="1669202245388"></p><p>随便拖两个button上去</p><p><img src="/./images/pyqt5/21.png" alt="1669202300112"></p><p>另存为</p><p><img src="/./images/pyqt5/5.png" alt="1669202348711"></p><p>然后回到anaconda那个窗口，</p><p>我们要把这个.ui文件转化为py文件</p><p>方法一：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m PyQt5.uic.pyuic test.ui -o test.py</span><br></pre></td></tr></table></figure><p><img src="/./images/pyqt5/6.png" alt="1669202702551"></p><p>要切换到相对应的文件夹路径下再运行</p><p><img src="/./images/pyqt5/7.png" alt="1669202755853"></p><p>已经生成了</p><p>方法二：</p><p>太烦了，不写</p><p>F:\anaconda\EMPYTY\pkgs\pyqt-5.9.2-py39hd77b12b_6\Library\bin</p><p>大概在这个路径里面</p><p><img src="/./images/pyqt5/7.1.png" alt="1669203475844"></p><p><img src="/./images/pyqt5/7.2.png" alt="1669203905200"></p><p><img src="/./images/pyqt5/7.3.png" alt="1669203924735"></p><p> 很鸡肋，虽然写的前面的那玩意少了点，但是要吧ui移到当前文件夹里面，辣鸡</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyuic5 test.ui -o test.py</span><br></pre></td></tr></table></figure><p>方法三：<br>直接使用扩展程序打开</p><p>pycharm扩展程序（vscode没找到在哪）</p><p><img src="/./images/pyqt5/8.png" alt="1669203187056"></p><p>不太好搞（不想写，没看懂）</p><p>综上，用方法一</p><p>1.水平布局</p><p><img src="/./images/pyqt5/9.png" alt="1669204341946"></p><p><img src="/./images/pyqt5/10.png" alt="1669204535028"></p><p>回到vscode里面</p><p><img src="/./images/pyqt5/11.png" alt="1669204935069"></p><p><img src="/./images/pyqt5/12.png" alt="1669205119299"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> shuiping</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication,QMainWindow</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建QApplication类的实例</span></span><br><span class="line">app=QApplication(sys.argv)</span><br><span class="line"><span class="comment">#创建一个窗口</span></span><br><span class="line">mainWindow=QMainWindow()</span><br><span class="line"><span class="comment">#向主窗口添加控件</span></span><br><span class="line">ui=shuiping.Ui_MainWindow()</span><br><span class="line">ui.setupUi(mainWindow)</span><br><span class="line"><span class="comment"># 显示窗口</span></span><br><span class="line">mainWindow.show()</span><br><span class="line"><span class="comment"># 进入程序的主循环、并通过exit函数确保主循环安全结束</span></span><br><span class="line">sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p>表单布局</p><p><img src="/./images/pyqt5/13.png" alt="1669206548415"></p><p>垂直布局</p><p><img src="/./images/pyqt5/14.png" alt="1669206597151"></p><p>栅格布局</p><p><img src="/./images/pyqt5/15.png" alt="1669206640854"></p><p>尺寸策略</p><p><img src="/./images/pyqt5/16.png" alt="1669210040330"></p><p>伙伴关系</p><p><img src="/./images/pyqt5/17.png" alt="1669210466222"></p><p>tab顺序</p><p><img src="/./images/pyqt5/18.png" alt="1669210672111"></p><p><img src="/./images/pyqt5/19.png" alt="1669210689346"></p><p>编辑信号和槽</p><p><img src="/./images/pyqt5/22.png" alt="1669211232251"></p><p><img src="/./images/pyqt5/20.png" alt="1669211749552"></p>]]></content>
      
      
      <categories>
          
          <category> 2022 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyQt5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm install 包，没有报错，提示安装成功，但是项目中没有出现node_modules也没有安装的包</title>
      <link href="/2023/02/23/npm%20npm%20install%20hexo-cli%20-g/"/>
      <url>/2023/02/23/npm%20npm%20install%20hexo-cli%20-g/</url>
      
        <content type="html"><![CDATA[<h1 id="npm-install-包，没有报错，提示安装成功，但是项目中没有出现node-modules也没有安装的包"><a href="#npm-install-包，没有报错，提示安装成功，但是项目中没有出现node-modules也没有安装的包" class="headerlink" title="npm install 包，没有报错，提示安装成功，但是项目中没有出现node_modules也没有安装的包"></a>npm install 包，没有报错，提示安装成功，但是项目中没有出现node_modules也没有安装的包</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><span id="more"></span><p>在当前文件夹目录下npm安装 hexo-cli -g</p><p>在当前文件夹不显示</p><p>因为这是全局安装</p><p>所以会跑到node.js文件夹目录底下</p><p><img src="/images/hexo%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/5.png" alt="1669790121108"></p><p>去这边找会发现一个hexo-cli的文件夹</p><p>点击这个博客[<a href="https://blog.csdn.net/qq_38613992/article/details/103769192]">https://blog.csdn.net/qq_38613992/article/details/103769192]</a></p><p><strong>查看npm的配置</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config list</span><br></pre></td></tr></table></figure><p>一开始我是没有global&#x3D;？？？ 的</p><p><img src="/images/hexo%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/6.png" alt="npm配置信息"></p><p><strong>2.查看全局下，是否有自己安装的包</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm root -g<span class="comment">//获取到全局安装目录</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一般看上面那个F盘的图，会在那里</p><p>3.修改npm配置信息，查看 图例1，global属性是否安装到全局，如果你的这里是true，那么，就算你安装一个包时，没有写-g，它也会自动将你的包安装到全局！ — 修改配置信息 方法一：命令行输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm config set global=false，</span><br><span class="line"></span><br><span class="line">npm config set global=false</span><br></pre></td></tr></table></figure><p>再次查看配置，确认是否修改</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config list</span><br></pre></td></tr></table></figure><p><img src="/images/hexo%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/7.png" alt="1669790489536"></p><p>然后再</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli</span><br></pre></td></tr></table></figure><p>后面不要-g就会在自己的文件夹里出现node_moudle了</p><p>你可以试试有-g的&#96;&#96;&#96;npm install hexo-cli&#96;&#96;，这样的话，就又会跑到node.js的global的moudle的文件夹里了</p><p>安装完成，如图</p><p><img src="/images/hexo%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/8.png" alt="1669790709401"></p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>之前的博客慢慢再修复，先把最近的东西放上来，sos！</title>
      <link href="/2023/02/23/breautiful/"/>
      <url>/2023/02/23/breautiful/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/saltyfish.png"></p><div style="font-size:40px;color:purple">之前的博客慢慢再修复，先把最近的东西放上来，sos！</div><!-- <div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=39807850&cid=69927212&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"> </iframe></div> -->]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> casual_talk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++文件操作之freopen</title>
      <link href="/2023/02/23/C++%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E4%B9%8Bfreopen/"/>
      <url>/2023/02/23/C++%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E4%B9%8Bfreopen/</url>
      
        <content type="html"><![CDATA[<h1 id="C-文件操作之freopen"><a href="#C-文件操作之freopen" class="headerlink" title="C++文件操作之freopen"></a>C++文件操作之freopen</h1><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">freopen(&quot;xxx.in&quot;,&quot;r&quot;,stdin);//输入文件</span><br><span class="line">freopen(&quot;xxx.out&quot;,&quot;w&quot;,stdout);//输出文件</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">freopen(&quot;a+b.in&quot;,&quot;r&quot;,stdin);</span><br><span class="line">freopen(&quot;a+b.out&quot;,&quot;w&quot;,stdout);</span><br><span class="line">//以上是模板</span><br><span class="line">int a,b;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">cout&lt;&lt;a+b&lt;&lt;endl;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Failed to scan</title>
      <link href="/2023/02/23/Failed%20to%20scan%20%5BfileFmavenrepositoryorgspringframeworkspring-aspects5/"/>
      <url>/2023/02/23/Failed%20to%20scan%20%5BfileFmavenrepositoryorgspringframeworkspring-aspects5/</url>
      
        <content type="html"><![CDATA[<p> Failed to scan [file:&#x2F;F:&#x2F;maven&#x2F;repository&#x2F;org&#x2F;springframework&#x2F;spring-aspects&#x2F;5.1.9.RELEASE&#x2F;spring-aspects-5.1.9.RELEASE.jar] from classloader hierarchy<br>java.util.zip.ZipException: error in opening zip file</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file -DgroupId=com.qiyuesuo.sdk -DartifactId=sdk-java -Dversion=3.4.1 -Dpackaging=jar -Dfile=D:\jar\sdk-java-3.4.1.jar</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">F:\maven\repository\org\springframework\spring-aspects\5.1.9.RELEASE</span><br></pre></td></tr></table></figure><p>org.springframework.spring-aspects</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file -DgroupId=org.springframework.spring-aspects</span><br><span class="line">-DartifactId=spring-aspects  -Dversion=5.3.1 -Dpackaging=jar -Dfile=F:\maven\spring-aspects-5.3.1.jar</span><br></pre></td></tr></table></figure><p>mvn install:install-file -DgroupId&#x3D;org.springframework.spring-aspects<br>-DartifactId&#x3D;spring-aspects  -Dversion&#x3D;5.3.1 -Dpackaging&#x3D;jar -Dfile&#x3D;F:\maven\spring-aspects-5.3.1.jar</p>]]></content>
      
      
      <categories>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
